[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"# duke.duke project template","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"3. After that, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Bransonlj":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"checkstyle {","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-02-04"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Bransonlj":20,"-":40}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"event true project meeting /from 2000-06-20 08:00 /to 2020-06-20 08:00","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"todo false beat meet","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"todo true something nice","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"todo false another","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"deadline true return book /by 2019-02-15 22:45","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"event false project meeting /from 2000-06-20 08:00 /to 2020-06-20 08:00","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"Bransonlj":6}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":" * Custom Exception class.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":7}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.gui.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":" * Launcher for GUI application.","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"public class Launcher {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"        Application.launch(Ui.class);","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"Bransonlj":13}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.gui;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"    private void flip() {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"        db.flip();","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"        return db;","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"Bransonlj":61}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.gui;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.Duke;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"public class MainWindow {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    public void setDuke(Duke duke) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"        this.duke \u003d duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"    @FXML","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"        );","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"Bransonlj":52}},{"path":"src/main/java/duke/gui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.gui;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.Duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":" * Ui class serves as a bridge between the GUI components and the logic for Duke.","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"public class Ui extends Application {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    private Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Ui.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"            stage.show();","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"    public void stop() {","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"        this.duke.save();","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"Bransonlj":37}},{"path":"src/main/java/duke/logic/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":" * Duke class containing all logic components of Duke.","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Duke object.","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"     * @param filePath String path of data text file to load data from and save to.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"            storage.load(tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"            System.out.println(\"loading error\");","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"        String[] parsed \u003d Parser.parse(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"        assert parsed.length \u003d\u003d 2 : \"result from Parser should have 2 elements\";","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"        return Parser.execute(parsed[0], parsed[1], tasks);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"     * Start the Duke task tracker software.","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"    public void save() {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"            System.out.println(\"Saved\");","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"            System.out.println(\"saving error\");","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Bransonlj":46,"-":2}},{"path":"src/main/java/duke/logic/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Event;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Todo;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":" * Parser class takes in commands and executes them.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"public class Parser {","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     * Splits input into command and content strings.","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     * @param input Input String.","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     * @return String array of size 2 containing command and content.","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    public static String[] parse(String input) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"        String command \u003d words[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"        StringBuilder desc \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"        desc.append(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"            desc.append(words[i]);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"            if (i \u003c words.length - 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"                desc.append(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"        return new String[]{command, desc.toString()};","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"     * Executes the appropriate command based on the input given by the user, which is split into","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"     * a command and content before being parsed and executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     * @param command Command word to be executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"     * @param content Details of the command to be executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"     * @param taskList TaskList objects which the command should be executed on.","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"     * @return String response based on the command executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"    public static String execute(String command, String content, TaskList taskList) {","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"        String response;","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"            response \u003d \"Here are the tasks in your list\\n\" + taskList.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"                Task task \u003d Todo.create(content);","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"Ok boss. Added task:\\n\" + task.toString()","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"                        + \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"                Task task \u003d Deadline.create(content);","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"Ok boss. Added task:\\n\" + task.toString()","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"                        + \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for deadline.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"                Task task \u003d Event.create(content);","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"Ok boss. Added task:\\n\" + task.toString()","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"                        + \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for event.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"mark\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 2) {","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for mark command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"                int index \u003d Integer.parseInt(content.substring(1)) - 1;","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"                if (index \u003e\u003d taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"☹ OOPS!!! No such task in list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"                    Task task \u003d taskList.getTask(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"                    task.markDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Ok boss! Marked this task as done: \\n\" + task.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 2) {","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for unmark command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"                int index \u003d Integer.parseInt(content.substring(1)) - 1;","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"Bransonlj"},"content":"                if (index \u003e\u003d taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"☹ OOPS!!! No such task in list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"Bransonlj"},"content":"                    Task task \u003d taskList.getTask(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"Bransonlj"},"content":"                    task.unmarkDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Ok boss! Marked this task as not done yet: \\n\" + task.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 2) {","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for delete command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"Bransonlj"},"content":"                int index \u003d Integer.parseInt(content.substring(1)) - 1;","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"Bransonlj"},"content":"                if (index \u003e\u003d taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":114,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"☹ OOPS!!! No such task in list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"Bransonlj"},"content":"                    Task task \u003d taskList.deleteTask(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Ok boss! Duke.Task removed: \\n\" + task.toString()","lastModifiedDate":"2023-01-31"},{"lineNumber":118,"author":{"gitId":"Bransonlj"},"content":"                            + \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":120,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":121,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":122,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"find\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":123,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 1) {","lastModifiedDate":"2023-01-27"},{"lineNumber":124,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid keyword for find command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":125,"author":{"gitId":"Bransonlj"},"content":"                return response;","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"Bransonlj"},"content":"            String keyWord \u003d content.substring(1);","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"Bransonlj"},"content":"            ArrayList\u003cInteger\u003e arrayList \u003d taskList.findIndexesContaining(keyWord);","lastModifiedDate":"2023-01-27"},{"lineNumber":130,"author":{"gitId":"Bransonlj"},"content":"            if (arrayList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":131,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"no matches found!\";","lastModifiedDate":"2023-01-27"},{"lineNumber":132,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"Here are the matching tasks from your list:\\n\"","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"Bransonlj"},"content":"                        + taskList.toStringIndexes(arrayList);","lastModifiedDate":"2023-01-27"},{"lineNumber":135,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":136,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":137,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":138,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"schedule\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 1) {","lastModifiedDate":"2023-02-11"},{"lineNumber":140,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid keyword for schedule command.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":141,"author":{"gitId":"Bransonlj"},"content":"                return response;","lastModifiedDate":"2023-02-11"},{"lineNumber":142,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":143,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":144,"author":{"gitId":"Bransonlj"},"content":"            try {","lastModifiedDate":"2023-02-11"},{"lineNumber":145,"author":{"gitId":"Bransonlj"},"content":"                String date \u003d content.substring(1);","lastModifiedDate":"2023-02-11"},{"lineNumber":146,"author":{"gitId":"Bransonlj"},"content":"                LocalDate localDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":147,"author":{"gitId":"Bransonlj"},"content":"                ArrayList\u003cInteger\u003e arrayList \u003d taskList.findDates(localDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":148,"author":{"gitId":"Bransonlj"},"content":"                if (arrayList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-11"},{"lineNumber":149,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"no matches found!\";","lastModifiedDate":"2023-02-11"},{"lineNumber":150,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":151,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Here are the tasks you have on the date \" + localDate + \" :\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":152,"author":{"gitId":"Bransonlj"},"content":"                            + taskList.toStringIndexes(arrayList);","lastModifiedDate":"2023-02-11"},{"lineNumber":153,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":154,"author":{"gitId":"Bransonlj"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":155,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid keyword for schedule command.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":156,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":157,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":158,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":159,"author":{"gitId":"Bransonlj"},"content":"            response \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-01-27"},{"lineNumber":160,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":161,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":162,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(response);","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"Bransonlj"},"content":"        return response;","lastModifiedDate":"2023-01-27"},{"lineNumber":164,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":165,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":165}},{"path":"src/main/java/duke/logic/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import java.io.File;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Event;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Todo;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":" * Handle loading and saving of data.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"public class Storage {","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"    protected String filePath;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Storage object.","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"     * @param filePath String containing the file path of data text file.","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"     * Creates the appropriate task given a line of String from data file.","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"     * @param line line of String from data file.","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"     * @return Task object created.","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If error creating task.","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"    public Task initialiseTask(String line) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"        String[] entry \u003d line.split(\" \");","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"        String c \u003d entry[0];","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"        boolean isDone \u003d entry[1].equals(\"true\");","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"        StringBuilder desc \u003d new StringBuilder(\" \");","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 2; i \u003c entry.length - 1; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"            desc.append(entry[i]);","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"            desc.append(\" \");","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"        desc.append(entry[entry.length - 1]);","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"        if (c.equals(\"todo\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"            task \u003d Todo.create(desc.toString(), isDone);","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"        } else if (c.equals(\"deadline\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"            task \u003d Deadline.create(desc.toString(), isDone);","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"        } else if (c.equals(\"event\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"            task \u003d Event.create(desc.toString(), isDone);","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"        return task;","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"     * Converts a task into data String form to be saved in data file.","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"     * @param task Task to be converted and saved.","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"     * @return String data form of task.","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"    public String extractTask(Task task) {","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"        String entry \u003d task.getType() + \" \" + task.getIsDone() + \" \" + task.getDescription();","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"            entry +\u003d \" /by \" + ((Deadline) task).getDueDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"            entry +\u003d \" /from \" + ((Event) task).getStartTime() + \" /to \" + ((Event) task).getEndTime();","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"        return entry;","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"     * Creates Tasks based on data text file at filePath and adds into TaskList.","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"     * @param taskList TaskList which tasks should be loaded into.","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If error reading from file.","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"    public void load(TaskList taskList) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"            FileReader fileReader \u003d new FileReader(this.filePath);","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"            String line \u003d bufferedReader.readLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"                taskList.addTask(this.initialiseTask(line));","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"                line \u003d bufferedReader.readLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"Bransonlj"},"content":"     * Write tasks from given TaskList onto a data text file at filePath.","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"Bransonlj"},"content":"     * @param taskList TaskList to write from.","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If error writing to file.","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"Bransonlj"},"content":"    public void save(TaskList taskList) throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Bransonlj"},"content":"            File file \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"Bransonlj"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"Bransonlj"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"Bransonlj"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"Bransonlj"},"content":"                String entry \u003d this.extractTask(taskList.getTask(i));","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"Bransonlj"},"content":"                bufferedWriter.write(entry);","lastModifiedDate":"2023-01-27"},{"lineNumber":114,"author":{"gitId":"Bransonlj"},"content":"                bufferedWriter.newLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"Bransonlj"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":118,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"Bransonlj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":120,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":121,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":122,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":123,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":123}},{"path":"src/main/java/duke/logic/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Deadline;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Event;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"import duke.logic.task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":" * Handles storage of tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"public class TaskList {","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for TaskList object","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"     * Adds a given task to the end of the list of tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"        assert this.getSize() \u003e index : \"index should not be out of range\";","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"     * Given an array of integers, returns the tasks of those indexes in string form.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"     * @param arrayList Arraylist of integers.","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"     * @return String of tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"    public String toStringIndexes(ArrayList\u003cInteger\u003e arrayList) {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"        StringBuilder str \u003d new StringBuilder();","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 0; i \u003c arrayList.size(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"            str.append(i + 1).append(\".\").append(this.tasks.get(arrayList.get(i)).toString()).append(\"\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"        return str.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"     * Given a word, searches all tasks and compiles the index of all tasks that","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"     * contain that word into an ArrayList.","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"     * @param str Word to be found.","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"     * @return ArrayList of integers corresponding to tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"    public ArrayList\u003cInteger\u003e findIndexesContaining(String str) {","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"        ArrayList\u003cInteger\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"            if (this.getTask(i).getDescription().contains(str)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"                arrayList.add(i);","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"        return arrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"     * Given a date, searches all task and compiles the index of all tasks that","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"     * has a duration in which the given localDate lies in.","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"     * @param localDate LocalDate to check if is during duration of task.","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"     * @return List of tasks that have duration that the localDate lies in.","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"    public ArrayList\u003cInteger\u003e findDates(LocalDate localDate) {","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"        ArrayList\u003cInteger\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"            Task task \u003d this.getTask(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"            if (task.getType().equals(\"deadline\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"                boolean isDueDateMatch \u003d ((Deadline) task).getLocalDateDue().isEqual(localDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"                if (isDueDateMatch) {","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"                    arrayList.add(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"            } else if (task.getType().equals(\"event\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"                boolean isAfterStart \u003d !event.getLocalDateStart().isAfter(localDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"                boolean isBeforeEnd \u003d !event.getLocalDateEnd().isBefore(localDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"                if (isAfterStart \u0026\u0026 isBeforeEnd) {","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"                    arrayList.add(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"        return arrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"Bransonlj"},"content":"     * Deletes a Task of the given index from the list of tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"Bransonlj"},"content":"     * @param index 0-indexed index of task to be deleted.","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"Bransonlj"},"content":"     * @return Task deleted.","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"Bransonlj"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Bransonlj"},"content":"        return this.tasks.remove(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"Bransonlj"},"content":"        StringBuilder str \u003d new StringBuilder();","lastModifiedDate":"2023-01-27"},{"lineNumber":114,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"Bransonlj"},"content":"            str.append(i + 1).append(\".\").append(this.tasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":118,"author":{"gitId":"Bransonlj"},"content":"        return str.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":120,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":120}},{"path":"src/main/java/duke/logic/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":" * Deadline Task with a due date.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    protected LocalDateTime dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Deadline object.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     * @param dueDate Deadline of task in yyyy-MM-dd HH:mm format.","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    public Deadline(String description, LocalDateTime dueDate) {","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Deadline object.","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"     * @param dueDate Deadline of task in yyyy-MM-dd HH:mm format.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete.","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    public Deadline(String description, LocalDateTime dueDate, Boolean isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Deadline object. String input should contain dueDate","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"     * in the format /by yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"     * @return Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"    public static Deadline create(String str) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /by \");","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 2) {","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"                return new Deadline(text[0], LocalDateTime.parse(text[1], Deadline.FORMATTER));","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Deadline object with boolean input. String input should contain dueDate","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"     * in the format /by yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether Deadline object should be mark as completed.","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"     * @return Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"    public static Deadline create(String str, Boolean isDone) throws DukeException {","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /by \");","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"                return new Deadline(text[0], LocalDateTime.parse(text[1], Deadline.FORMATTER), isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"    public String getDueDate() {","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"        return this.dueDate.format(FORMATTER);","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"    public LocalDate getLocalDateDue() {","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"        return this.dueDate.toLocalDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"    public String getType() {","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"        return \"deadline\";","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"Bransonlj"},"content":"                + this.dueDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm\")) + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":101}},{"path":"src/main/java/duke/logic/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":" * Event task with start time and end time.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    protected LocalDateTime startTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"    protected LocalDateTime endTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Event object.","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     * @param startTime Starting time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"     * @param endTime Ending time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"    public Event(String description, LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Event object with boolean input.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"     * @param startTime Starting time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"     * @param endTime Ending time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete.","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"    public Event(String description, LocalDateTime startTime, LocalDateTime endTime, Boolean isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Event object. String object should contain","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"     * startTime and endTime in the format /from yyyy-MM-dd HH:mm /to yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"     * @return Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"    public static Event create(String str) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /\");","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 3) {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"                String desc \u003d text[0];","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"                String from \u003d text[1].substring(5);","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"                String to \u003d text[2].substring(3);","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"                return new Event(desc, LocalDateTime.parse(from, Event.FORMATTER),","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"                        LocalDateTime.parse(to, Event.FORMATTER));","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Event object with boolean input. String object should contain","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"     * startTime and endTime in the format /from yyyy-MM-dd HH:mm /to yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether Event object should be mark as completed.","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"     * @return Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"    public static Event create(String str, Boolean isDone) throws DukeException {","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /\");","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 3) {","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"                String desc \u003d text[0];","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"                String from \u003d text[1].substring(5);","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"                String to \u003d text[2].substring(3);","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"                return new Event(desc, LocalDateTime.parse(from, Event.FORMATTER),","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"                        LocalDateTime.parse(to, Event.FORMATTER), isDone);","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"    public String getStartTime() {","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"        return this.startTime.format(FORMATTER);","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Bransonlj"},"content":"    public String getEndTime() {","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"Bransonlj"},"content":"        return this.endTime.format(FORMATTER);","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"Bransonlj"},"content":"    public LocalDate getLocalDateStart() {","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"Bransonlj"},"content":"        return this.startTime.toLocalDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"Bransonlj"},"content":"    public LocalDate getLocalDateEnd() {","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"Bransonlj"},"content":"        return this.endTime.toLocalDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"Bransonlj"},"content":"    public String getType() {","lastModifiedDate":"2023-01-26"},{"lineNumber":114,"author":{"gitId":"Bransonlj"},"content":"        return \"event\";","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":117,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":118,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":119,"author":{"gitId":"Bransonlj"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-01-27"},{"lineNumber":120,"author":{"gitId":"Bransonlj"},"content":"                + \" (from: \"","lastModifiedDate":"2023-01-27"},{"lineNumber":121,"author":{"gitId":"Bransonlj"},"content":"                + this.startTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":122,"author":{"gitId":"Bransonlj"},"content":"                + \" to: \"","lastModifiedDate":"2023-01-27"},{"lineNumber":123,"author":{"gitId":"Bransonlj"},"content":"                + this.endTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":124,"author":{"gitId":"Bransonlj"},"content":"                + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":125,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":126,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":126}},{"path":"src/main/java/duke/logic/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":" * Task parent class.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"public class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"    protected String description;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Task object.","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of Task.","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Task object with boolean.","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete.","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"        return this.description;","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     * Gives the type of the Task object.","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"     * @return String of the type of Task.","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"    public String getType() {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"        return \"task\";","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"     * Gives the status icon based on whether task is complete.","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"     * @return String [X] if complete or [ ] if not.","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"        return (this.isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"        return this.getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"     * Marks task as done by setting isDone boolean to true.","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"    public void markDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"     * Marks task as not done by setting isDone boolean to false.","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":75}},{"path":"src/main/java/duke/logic/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":" * Todo class.","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Todo object.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"        super(description);","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Todo object with boolean","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"    public Todo(String description, Boolean isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"     * @param text String to be processed into Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"     * @return Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If input String length is \u003c 1.","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"    public static Todo create(String text) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"        if (text.length() \u003c 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"            return new Todo(text.substring(1));","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Todo object with boolean input.","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"     * @param text String to be processed into Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether Todo object should be mark as completed.","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"     * @return Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If input String length is \u003c 1.","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"    public static Todo create(String text, Boolean isDone) throws DukeException {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"        if (text.length() \u003c 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"            return new Todo(text.substring(1), isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"    public String getType() {","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"        return \"todo\";","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":69}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"Bransonlj":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"      \u003c/content\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"Bransonlj":19}},{"path":"src/test/java/duke/logic/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    public void testStringConversion() throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"        assertEquals(\"[D][ ] do quiz (by: Feb 15 2019 10:45)\",","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"                Deadline.create(\" do quiz /by 2019-02-15 22:45\").toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":16}},{"path":"src/test/java/duke/logic/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"public class EventTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    public void testStringConversion() throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"        assertEquals(\"[E][ ] project meeting (from: Jan 1 2000 08:00 to: Jan 1 2030 08:00)\",","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"                Event.create(\" project meeting /from 2000-01-01 08:00 /to 2030-01-01 08:00\")","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"                        .toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":17}},{"path":"src/test/java/duke/logic/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.logic.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    public void testStringConversion() throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"        assertEquals(\"[T][ ] brush teeth\", Todo.create(\" brush teeth\").toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"todo brush teeth","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"deadline return book /by 2019-02-15 22:45","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"event project meeting /from 2000-06-20 08:00 /to 2020-06-20 08:00","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"unmark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Bransonlj":1,"-":20}}]
