[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"# duke.duke project template","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"3. After that, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Bransonlj":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Duke object.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"     * @param filePath String path of data text file to load data from and save to.","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"            storage.load(tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"     * Start the Duke task tracker software.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    public void run() {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"        ui.printGreeting();","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"        while (true) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"            String[] command \u003d ui.receiveInput();","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"            if (command[0].equals(\"bye\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"                ui.exitMessage();","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"                break;","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"            ui.printResponse(Parser.execute(command[0], command[1], tasks));","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"            ui.showSavingError();","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"       new Duke(\"./data/duke.txt\") .run();","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Bransonlj":48,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":4}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"public class Parser {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"     * Executes the appropriate command based on the input given by the user, which is split into","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"     * a command and content before being parsed and executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"     * @param command Command word to be executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"     * @param content Details of the command to be executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     * @param taskList TaskList objects which the command should be executed on.","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     * @return String response based on the command executed.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"    public static String execute(String command, String content, TaskList taskList) {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"            response \u003d \"Here are the tasks in your list\\n\" + taskList.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"                Task task \u003d Todo.create(content);","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"Ok boss. Added task:\\n\" + task.toString() +","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"                        \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"                Task task \u003d Deadline.create(content);","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"Ok boss. Added task:\\n\" + task.toString() +","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"                        \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for deadline.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"                Task task \u003d Event.create(content);","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"Ok boss. Added task:\\n\" + task.toString() +","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"                        \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for event.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"mark\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 2) {","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for mark command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"                int index \u003d Integer.parseInt(content.substring(1)) - 1;","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"                if (index \u003e\u003d taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"☹ OOPS!!! No such task in list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"                    Task task \u003d taskList.getTask(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"                    task.markDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Ok boss! Marked this task as done: \\n\" + task.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 2) {","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for unmark command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"                int index \u003d Integer.parseInt(content.substring(1)) - 1;","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"                if (index \u003e\u003d taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"☹ OOPS!!! No such task in list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"                    Task task \u003d taskList.getTask(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"                    task.unmarkDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Ok boss! Marked this task as not done yet: \\n\" + task.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 2) {","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid input for delete command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"                int index \u003d Integer.parseInt(content.substring(1)) - 1;","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"                if (index \u003e\u003d taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"☹ OOPS!!! No such task in list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"                    Task task \u003d taskList.deleteTask(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Ok boss! Duke.Task removed: \\n\" + task.toString() +","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"                            \"\\nNow you have \" + taskList.getSize() + \" in the list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"        } else if (command.equals(\"find\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"            if (content.length() \u003c 1) {","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"Bransonlj"},"content":"                response \u003d \"☹ OOPS!!! Invalid keyword for find command.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"Bransonlj"},"content":"                String keyWord \u003d content.substring(1);","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"Bransonlj"},"content":"                ArrayList\u003cInteger\u003e arrayList \u003d taskList.findIndexesContaining(keyWord);","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"Bransonlj"},"content":"                if (arrayList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"no matches found!\";","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"Bransonlj"},"content":"                    response \u003d \"Here are the matching tasks from your list:\\n\"","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"Bransonlj"},"content":"                            + taskList.toStringIndexes(arrayList);","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"Bransonlj"},"content":"            response \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":114,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"Bransonlj"},"content":"        return response;","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":117}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"import java.io.*;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"public class Storage {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    protected String filePath;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Storage object.","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"     * @param filePath String containing the file path of data text file.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"     * Creates Tasks based on data text file at filePath and adds into TaskList.","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"     * @param taskList TaskList which tasks should be loaded into.","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If error reading from file.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    public void load(TaskList taskList) throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"            FileReader fileReader \u003d new FileReader(this.filePath);","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"            String line \u003d bufferedReader.readLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"                String[] entry \u003d line.split(\" \");","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"                String c \u003d entry[0];","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"                boolean isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"                if (entry[1].equals(\"true\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"                    isDone \u003d true;","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"                } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"                    isDone \u003d false;","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"                StringBuilder desc \u003d new StringBuilder();","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"                desc.append(\" \");","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"                for (int i \u003d 2; i \u003c entry.length - 1; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"                    desc.append(entry[i]);","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"                    desc.append(\" \");","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"                desc.append(entry[entry.length - 1]);","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"                if (c.equals(\"todo\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"                    taskList.addTask(Todo.create(desc.toString(), isDone));","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"                } else if (c.equals(\"deadline\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"                    taskList.addTask(Deadline.create(desc.toString(), isDone));","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"                } else if (c.equals(\"event\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"                    taskList.addTask(Event.create(desc.toString(), isDone));","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"                line \u003d bufferedReader.readLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"     * Write tasks from given TaskList onto a data text file at filePath.","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"     * @param taskList TaskList to write from.","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If error writing to file.","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"    public void save(TaskList taskList) throws DukeException{","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"            File file \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"            for (int i  \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"                Task t \u003d taskList.getTask(i);","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"                String entry \u003d t.getType() + \" \" + t.getIsDone() + \" \" + t.getDescription();","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"                if (t instanceof Deadline) {","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"                    entry +\u003d \" /by \" + ((Deadline) t).getDueDate();","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"                } else if (t instanceof Event) {","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"                    entry +\u003d \" /from \" + ((Event) t).getStartTime() + \" /to \" + ((Event) t).getEndTime();","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"                bufferedWriter.write(entry);","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"                bufferedWriter.newLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":98}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"public class TaskList {","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for TaskList object","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     * Adds a given task to the end of the list of tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"    ","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    public String toStringIndexes(ArrayList\u003cInteger\u003e arrayList) {","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"        StringBuilder str \u003d new StringBuilder();","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 0; i \u003c arrayList.size(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"            str.append(i + 1).append(\".\").append(this.tasks.get(arrayList.get(i)).toString()).append(\"\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"        return str.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"    public ArrayList\u003cInteger\u003e findIndexesContaining(String str) {","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"        ArrayList\u003cInteger\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"            if (this.getTask(i).getDescription().contains(str)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"                arrayList.add(i);","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"        return arrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"     * Deletes a Task of the given index from the list of tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"     * @param index 0-indexed index of task to be deleted.","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"     * @return Task deleted.","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"        return this.tasks.remove(index);","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"        StringBuilder str \u003d new StringBuilder();","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"            str.append(i + 1).append(\".\").append(this.tasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"        return str.toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":74}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"public class Ui {","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"    protected final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"    Scanner scanner;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Ui object.","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"    public Ui() {","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     * Takes in a line of user input using Scanner object and splits it into","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     * the first word, command, and the remaining words, content.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     * @return Size 2 string array containing [command, content].","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    public String[] receiveInput() {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"        String command \u003d scanner.next();","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"        String content \u003d scanner.nextLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"        return new String[]{command, content};","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"    public void printGreeting() {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(\"hello i am duke\");","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    public void printResponse(String response) {","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(response);","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(\"UH-OH, loading error!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"    public void showSavingError() {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(\"UH-OH, saving error!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"    public void exitMessage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(\"cya\");","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":58}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    protected LocalDateTime dueDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    private static final DateTimeFormatter FORMATTER  \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Deadline object. String input should contain dueDate","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"     * in the format /by yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     * @return Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"    public static Deadline create(String str) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /by \");","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 2) {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"                return new Deadline(text[0], LocalDateTime.parse(text[1], Deadline.FORMATTER));","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Deadline object with boolean input. String input should contain dueDate","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"     * in the format /by yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether Deadline object should be mark as completed.","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"     * @return Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"    public static Deadline create(String str, Boolean isDone) throws DukeException{","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /by \");","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"                return new Deadline(text[0], LocalDateTime.parse(text[1], Deadline.FORMATTER), isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"     * @param dueDate Deadline of task in yyyy-MM-dd HH:mm format.","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"    public Deadline(String description, LocalDateTime dueDate) {","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Deadline object.","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"     * @param dueDate Deadline of task in yyyy-MM-dd HH:mm format.","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete.","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"    public Deadline(String description, LocalDateTime dueDate, Boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"    public String getDueDate() {","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"        return this.dueDate.format(FORMATTER);","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"    public String getType() {","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"        return \"deadline\";","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"                + this.dueDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm\")) + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":93}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"public class Event extends Task{","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    protected LocalDateTime startTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    protected LocalDateTime endTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    private static final DateTimeFormatter FORMATTER  \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Event object. String object should contain","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"     * startTime and endTime in the format /from yyyy-MM-dd HH:mm /to yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     * @return Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"    public static Event create(String str) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /\");","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 3) {","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"                String desc \u003d text[0];","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"                String from \u003d text[1].substring(5);","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"                String to \u003d text[2].substring(3);","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"                return new Event(desc, LocalDateTime.parse(from, Event.FORMATTER),","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"                        LocalDateTime.parse(to, Event.FORMATTER));","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Event object with boolean input. String object should contain","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     * startTime and endTime in the format /from yyyy-MM-dd HH:mm /to yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"     * @param str String to be processed into Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether Event object should be mark as completed.","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"     * @return Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If format of input is incorrect.","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"    public static Event create(String str, Boolean isDone) throws DukeException{","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"        if (str.length() \u003c 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"            String[] text \u003d str.substring(1).split(\" /\");","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"            if (text.length \u003c 3) {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"                String desc \u003d text[0];","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"                String from \u003d text[1].substring(5);","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"                String to \u003d text[2].substring(3);","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"                return new Event(desc, LocalDateTime.parse(from, Event.FORMATTER),","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"                        LocalDateTime.parse(to, Event.FORMATTER), isDone);","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Event object.","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"     * @param startTime Starting time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"     * @param endTime Ending time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"    public Event(String description, LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"Bransonlj"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"Bransonlj"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"Bransonlj"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Event object with boolean input.","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Bransonlj"},"content":"     * @param startTime Starting time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Bransonlj"},"content":"     * @param endTime Ending time of Event in the format yyyy-MM-dd HH:mm.","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete.","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"Bransonlj"},"content":"    public Event(String description, LocalDateTime startTime, LocalDateTime endTime, Boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Bransonlj"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Bransonlj"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"Bransonlj"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"Bransonlj"},"content":"    public String getStartTime() {","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"Bransonlj"},"content":"        return this.startTime.format(FORMATTER);","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"Bransonlj"},"content":"    public String getEndTime() {","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"Bransonlj"},"content":"        return this.endTime.format(FORMATTER);","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"Bransonlj"},"content":"    public String getType() {","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"Bransonlj"},"content":"        return \"event\";","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":105,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":107,"author":{"gitId":"Bransonlj"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Bransonlj"},"content":"                + \" (from: \"","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"Bransonlj"},"content":"                + this.startTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"Bransonlj"},"content":"                + \" to: \"","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"Bransonlj"},"content":"                + this.endTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"Bransonlj"},"content":"                + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":114}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"public class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"    protected String description;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Task object.","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of Task.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Task object with boolean.","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete.","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"        return this.description;","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"     * Gives the type of the Task object.","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"     * @return String of the type of Task.","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"    public String getType(){","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"        return \"task\";","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"     * Gives the status icon based on whether task is complete.","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"     * @return String [X] if complete or [ ] if not.","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"        return (this.isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"        return this.getStatusIcon() + \" \" +this.description;","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"     * Marks task as done by setting isDone boolean to true.","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"    public void markDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Bransonlj"},"content":"     * Marks task as not done by setting isDone boolean to false.","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Bransonlj"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"Bransonlj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":72}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"     * @param text String to be processed into Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"     * @return Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If input String length is \u003c 1.","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    public static Todo create(String text) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"        if (text.length() \u003c 1) {","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"            return new Todo(text.substring(1));","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Bransonlj"},"content":"     * Factory method to create Todo object with boolean input.","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Bransonlj"},"content":"     * @param text String to be processed into Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether Todo object should be mark as completed.","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Bransonlj"},"content":"     * @return Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Bransonlj"},"content":"     * @throws DukeException If input String length is \u003c 1.","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Bransonlj"},"content":"    public static Todo create(String text, Boolean isDone) throws DukeException{","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"Bransonlj"},"content":"        if (text.length() \u003c 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Bransonlj"},"content":"            throw new DukeException();","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"Bransonlj"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"Bransonlj"},"content":"            return new Todo(text.substring(1), isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"Bransonlj"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Todo object.","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Bransonlj"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"Bransonlj"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"Bransonlj"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Bransonlj"},"content":"     * Constructor for Todo object with boolean","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Bransonlj"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Bransonlj"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Bransonlj"},"content":"     * @param isDone Whether task is marked complete","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Bransonlj"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Bransonlj"},"content":"    public Todo(String description, Boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Bransonlj"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Bransonlj"},"content":"    public String getType() {","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Bransonlj"},"content":"        return \"todo\";","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Bransonlj"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"Bransonlj"},"content":"    public String toString(){","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"Bransonlj"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":66}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    public void testStringConversion() throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"        assertEquals(\"[D][ ] do quiz (by: Feb 15 2019 10:45)\"","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"                , Deadline.create(\" do quiz /by 2019-02-15 22:45\").toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":15}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"public class EventTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    public void testStringConversion() throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"        assertEquals(\"[E][ ] project meeting (from: Jan 1 2000 08:00 to: Jan 1 2030 08:00)\"","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"                , Event.create(\" project meeting /from 2000-01-01 08:00 /to 2030-01-01 08:00\")","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"                        .toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":16}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Bransonlj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Bransonlj"},"content":"    public void testStringConversion() throws DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Bransonlj"},"content":"        assertEquals(\"[T][ ] brush teeth\", Todo.create(\" brush teeth\").toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Bransonlj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"Bransonlj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Bransonlj":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bransonlj"},"content":"todo brush teeth","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"Bransonlj"},"content":"deadline return book /by 2019-02-15 22:45","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"Bransonlj"},"content":"event project meeting /from 2000-06-20 08:00 /to 2020-06-20 08:00","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"Bransonlj"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"Bransonlj"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"Bransonlj"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Bransonlj"},"content":"unmark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"Bransonlj"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Bransonlj"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Bransonlj":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Bransonlj"},"content":"java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Bransonlj":1,"-":20}}]
