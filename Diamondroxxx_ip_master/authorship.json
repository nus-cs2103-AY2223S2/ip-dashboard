[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    implementation group: \u0027org.apache.commons\u0027, name: \u0027commons-text\u0027, version: \u00271.10.0\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"    mainClassName \u003d \"catbot.Main\"","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"    archiveBaseName \u003d \"catbot\"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"checkstyle {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":39,"Diamondroxxx":9}},{"path":"src/main/java/catbot/CatBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.Command;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.parser.Parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":" * Entry point of the CatBot application.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":" * Initiates all the required components and begins interaction with the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"public class CatBot {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    private final Ui ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a new CatBot instance and loads from the save file.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"     * @param saveFile is the path to the save file for persistent task storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"    public CatBot(String saveFile) {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"            storage \u003d new Storage(saveFile);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"        } catch (CatBotException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"            ui.displayError(\"Error loading from save file.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"            tasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"     * Interacts with the user and handles commands.","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"    public void run() {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"        while (!isExit) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (CatBotException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"                ui.displayError(e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"            } finally {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"                ui.showNext();","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"        new CatBot(\"./data/tasklist.txt\").run();","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":63}},{"path":"src/main/java/catbot/CatBotException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":" * Custom exception class used whenever an error message needs to be communicated to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"public class CatBotException extends Exception {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a CatBotException.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"     * @param message is the message to show the user","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"    public CatBotException(String message) {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"        super(message);","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Diamondroxxx":15}},{"path":"src/main/java/catbot/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":" * Entry point.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"public class Main {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"        new CatBot(\"./data/tasklist.txt\").run();","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":10}},{"path":"src/main/java/catbot/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.DeadlineTask;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.EventTask;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task.TaskType;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.ToDoTask;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":" * Handles adding a new task to the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    private final TaskType taskType;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"    private final String description;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"    /* Used to store date for Deadline and Event */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"    private LocalDateTime date1;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"    /* Used to store date for Event */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    private LocalDateTime date2;","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"     * Constructs a new {@code AddCommand} for a {@code ToDoTask}.","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"     * @param description is the description of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"    public AddCommand(String description) {","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"        taskType \u003d TaskType.TODO;","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"     * Constructs a new {@code AddCommand} for a {@code DeadlineTask}.","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"     * @param description is the description of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"     * @param dueBy is the date and time by which the task is due.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"    public AddCommand(String description, LocalDateTime dueBy) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"        taskType \u003d TaskType.DEADLINE;","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"        date1 \u003d dueBy;","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"     * Constructs a new {@code AddCommand} for a {@code EventTask}.","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"     * @param description is the description of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"     * @param startsAt is the time at which the event starts.","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"     * @param endsAt is the time at which the event ends.","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"    public AddCommand(String description, LocalDateTime startsAt, LocalDateTime endsAt) {","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"        taskType \u003d TaskType.EVENT;","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"        date1 \u003d startsAt;","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"        date2 \u003d endsAt;","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":"        Task newTask;","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":"        switch (taskType) {","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":"        case TODO:","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":"            newTask \u003d new ToDoTask(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":"            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":"        case DEADLINE:","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Diamondroxxx"},"content":"            newTask \u003d new DeadlineTask(description, date1);","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Diamondroxxx"},"content":"            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Diamondroxxx"},"content":"        case EVENT:","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Diamondroxxx"},"content":"            newTask \u003d new EventTask(description, date1, date2);","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Diamondroxxx"},"content":"            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Diamondroxxx"},"content":"        default:","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Diamondroxxx"},"content":"            throw new CatBotException(\"This should be impossible to reach but I have to add this because Java™\");","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Diamondroxxx"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Diamondroxxx"},"content":"        ui.setNextOutput(","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Diamondroxxx"},"content":"                \"Added new task!\\n    \"","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Diamondroxxx"},"content":"                + newTask","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Diamondroxxx"},"content":"                + \"\\nYou have \" + tasks.size()","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Diamondroxxx"},"content":"                + (tasks.size() \u003e 1 ? \" tasks now.\" : \" task now.\")","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Diamondroxxx"},"content":"        );","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Diamondroxxx"},"content":"        storage.writeToSaveFile(newTask.toCommand() + \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Diamondroxxx"},"content":"    public void loadCommand(ArrayList\u003cTask\u003e tasks) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"Diamondroxxx"},"content":"        Task newTask;","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"Diamondroxxx"},"content":"        switch (taskType) {","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"Diamondroxxx"},"content":"        case TODO:","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"Diamondroxxx"},"content":"            newTask \u003d new ToDoTask(description);","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"Diamondroxxx"},"content":"            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"Diamondroxxx"},"content":"        case DEADLINE:","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"Diamondroxxx"},"content":"            newTask \u003d new DeadlineTask(description, date1);","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"Diamondroxxx"},"content":"            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"Diamondroxxx"},"content":"        case EVENT:","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"Diamondroxxx"},"content":"            newTask \u003d new EventTask(description, date1, date2);","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"Diamondroxxx"},"content":"            break;","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"Diamondroxxx"},"content":"        default:","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"Diamondroxxx"},"content":"            throw new CatBotException(\"This should be impossible to reach but I have to add this because Java™\");","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"Diamondroxxx"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":108}},{"path":"src/main/java/catbot/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":" * Parent class for all commands.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"        return isExit;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    protected void setExit() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"        isExit \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"    public void loadCommand(ArrayList\u003cTask\u003e tasks) throws CatBotException {}","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":28}},{"path":"src/main/java/catbot/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":" * Handles deleting a task from the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    private final int index;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a new instance of DeleteCommand.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"     * @param index is the zero-indexed index of the item to delete form the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"        tasks.delete(index - 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"        ui.setNextOutput(\"Deleted task.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"        storage.writeToSaveFile(\"delete \" + (index + 1) + \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"    public void loadCommand(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":36}},{"path":"src/main/java/catbot/commands/EchoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":" * Handles echoing a message back to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"    private final String message;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    public EchoCommand(String message) {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"        ui.setNextOutput(message);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":21}},{"path":"src/main/java/catbot/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":" * Handles searching for tasks which match a certain keyword.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    private final String keyword;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"        StringBuilder taskList \u003d new StringBuilder(\"Found these tasks: \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"        for (Task task: tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"                taskList.append(\"  \").append(index).append(\".\").append(task).append(\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"            index++;","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"        ui.setNextOutput(taskList.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":32}},{"path":"src/main/java/catbot/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" * Handles listing the entire task list to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"        StringBuilder taskList \u003d new StringBuilder(\"List of tasks: \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"        for (Task task: tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"            taskList.append(\"  \").append(index++).append(\".\").append(task).append(\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"        ui.setNextOutput(taskList.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":23}},{"path":"src/main/java/catbot/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":" * Handles marking and unmarking tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    private final int index;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a MarkCommand instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"     * @param index is the zero-indexed index of the task to mark or unmark.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"     * @param isDone is true if marking and untrue if unmarking.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    public MarkCommand(int index, boolean isDone) {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"        tasks.mark(index, isDone);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"        ui.setNextOutput(\"Marked the task as done!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"        storage.writeToSaveFile(\"mark \" + (index + 1) + \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"    public void loadCommand(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"        tasks.get(Math.floorMod(index, tasks.size())).setDone(true); // Using floorMod handles -1 case for last index","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":39}},{"path":"src/main/java/catbot/commands/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" * Handles saving the entire task list while exiting the program.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"public class SaveCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    public SaveCommand() {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"        super.setExit();","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"        ui.setNextOutput(\"Nice to meet mew!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"        storage.saveToFile(tasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":22}},{"path":"src/main/java/catbot/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.Locale;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.AddCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.Command;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.DeleteCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.EchoCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.FindCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.ListCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.MarkCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.commands.SaveCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":" * Handles parsing user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"public class Parser {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"     * Parses an input string to figure out the command.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"     * @param command is the user input for a command.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"     * @return a {@code Command} object for the user command.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"     * @throws CatBotException if the user input is malformed.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    public static Command parse(String command) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"        String[] cmd \u003d command.split(\" \", 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"        String[] temp;","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"        switch (cmd[0].toLowerCase(Locale.ROOT)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"                return new AddCommand(cmd[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"That\u0027s the wrong format!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"                temp \u003d cmd[1].split(\"/by\", 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"                LocalDateTime by \u003d LocalDateTime.parse(temp[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"                return new AddCommand(temp[0].strip(), by);","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"Dates should be in the format yyyy-MM-ddTHH:mm\");","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"That\u0027s the wrong format!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"        case \"event\":","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"                temp \u003d cmd[1].split(\"/from|/to\", 3);","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"                LocalDateTime from \u003d LocalDateTime.parse(temp[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"                LocalDateTime to \u003d LocalDateTime.parse(temp[2].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"                return new AddCommand(temp[0].strip(), from, to);","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"Dates should be in the format yyyy-MM-ddTHH:mm\");","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"That\u0027s the wrong format!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"        case \"list\":","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":"                int index \u003d Integer.parseInt(cmd[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":"                return new MarkCommand(index - 1, true);","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(e + \" isn\u0027t a number!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"That\u0027s the wrong format!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Diamondroxxx"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Diamondroxxx"},"content":"                int index \u003d Integer.parseInt(cmd[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Diamondroxxx"},"content":"                return new MarkCommand(index - 1, false);","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(e + \" isn\u0027t a number!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"That\u0027s the wrong format!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Diamondroxxx"},"content":"        case \"delete\":","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Diamondroxxx"},"content":"                int index \u003d Integer.parseInt(cmd[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Diamondroxxx"},"content":"                return new DeleteCommand(index - 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(e + \" isn\u0027t a number!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"That\u0027s the wrong format!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"Diamondroxxx"},"content":"        case \"find\":","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"Diamondroxxx"},"content":"            return new FindCommand(cmd[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"Diamondroxxx"},"content":"        case \"echo\":","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"Diamondroxxx"},"content":"                return new EchoCommand(cmd[1].strip());","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"That\u0027s the wrong format!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"Diamondroxxx"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"Diamondroxxx"},"content":"            return new SaveCommand();","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"Diamondroxxx"},"content":"        default:","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"Diamondroxxx"},"content":"            throw new CatBotException(\"I don\u0027t know what you mean.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":112}},{"path":"src/main/java/catbot/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.parser.Parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":" * Handles all operations relating to saving and loading from disk.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"public class Storage {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"    private final File saveFile;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a new Storage instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"     * @param saveFilePath is the path for the save file to use.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"     * @throws CatBotException if there is an error while trying to create possibly required directories.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"    public Storage(String saveFilePath) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"        Path path \u003d Paths.get(saveFilePath);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"        if (Files.notExists(path)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"                Files.createDirectories(path.getParent());","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"                if (!path.toFile().createNewFile()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"                    throw new CatBotException(\"Error while creating new save file.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"                throw new CatBotException(\"Error while loading storage.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"        saveFile \u003d path.toFile();","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"     * Loads from a save file.","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"     * @return an {@code ArrayList} containing all the tasks loaded in from the file.","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"     * @throws CatBotException if there was an error while parsing the save file.","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"    public ArrayList\u003cTask\u003e load() throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"            Scanner scanner \u003d new Scanner(saveFile);","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"                Parser.parse(scanner.nextLine()).loadCommand(tasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"            scanner.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":"        return tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":"     * Appends a given message to the save file","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":"     * @param message is the string to append to the save file","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Diamondroxxx"},"content":"    public void writeToSaveFile(String message) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Diamondroxxx"},"content":"        try (FileWriter writer \u003d new FileWriter(saveFile, true)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Diamondroxxx"},"content":"            writer.write(message);","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Diamondroxxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Diamondroxxx"},"content":"            throw new CatBotException(\"Error while accessing save file.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Diamondroxxx"},"content":"     * Writes the contents of the task list to the save file.","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Diamondroxxx"},"content":"     * @param tasks is the TaskList to write to disk","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Diamondroxxx"},"content":"    public void saveToFile(TaskList tasks) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Diamondroxxx"},"content":"        try (FileWriter writer \u003d new FileWriter(saveFile, false)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Diamondroxxx"},"content":"            for (Task task: tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Diamondroxxx"},"content":"                writer.write(task.toCommand() + \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Diamondroxxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Diamondroxxx"},"content":"            throw new CatBotException(\"Error while accessing save file.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":92}},{"path":"src/main/java/catbot/tasklist/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.tasklist;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":" * Stores a deadline task which is to be completed by a certain time.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"    private final LocalDateTime dueAt;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a new DeadlineTask.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"     * @param task is the description of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"     * @param dueAt is the date and time of the deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    public DeadlineTask(String task, LocalDateTime dueAt) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"        super(task);","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"        this.dueAt \u003d dueAt;","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    private String formatDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"        return date.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM, FormatStyle.SHORT));","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"        return \"[D]\" + super.toString() + \" by \" + formatDate(dueAt);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"    public String toCommand() {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"        return \"deadline \" + super.description + \" /by \" + dueAt + (super.isDone ? \"\\nmark 0\" : \"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Diamondroxxx":36}},{"path":"src/main/java/catbot/tasklist/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.tasklist;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":" * Stores an event task which happens from a certain time to a certain time.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"    private final LocalDateTime startsAt;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"    private final LocalDateTime endsAt;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a new EventTask.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"     * @param task is the description of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"     * @param from is when the task starts.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"     * @param to is when the task ends.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"    public EventTask(String task, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"        super(task);","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"        startsAt \u003d from;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"        endsAt \u003d to;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"    private String formatDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"        return date.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM, FormatStyle.SHORT));","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"                + \" (\" + formatDate(startsAt)","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"                + \" – \" + formatDate(endsAt) + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"    public String toCommand() {","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"        return \"event \" + super.description","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"                + \" /from \" + startsAt","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"                + \" /to \" + endsAt","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"                + (super.isDone ? \"\\nmark 0\" : \"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Diamondroxxx":44}},{"path":"src/main/java/catbot/tasklist/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.tasklist;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.ConsoleColors;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":" * The parent class of all tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"    final String description;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"     * Enum to express the type of task.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    public enum TaskType {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"        TODO,","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"        DEADLINE,","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"        EVENT","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"     * Constructor for a CatBot.TaskList.Task","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"     * @param description is the description of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"        return description;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"     * Setter for done","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"     * @param done is whether the task is marked as done","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"     * Internal method for getting the icon for a marked task","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"     * @return a string that should be placed in the slot indicating whether this task is marked","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"        return isDone ? ConsoleColors.GREEN + \"✓\" + ConsoleColors.RESET : \" \";","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"    public abstract String toCommand();","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Diamondroxxx":56}},{"path":"src/main/java/catbot/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.tasklist;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" * Stores the task list and handles associated operations on it.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"public class TaskList implements Iterable\u003cTask\u003e, Iterator\u003cTask\u003e {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"    private int iteratorIndex \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"    public void add(Task newTask) {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"     * Deletes a task from the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"     * @param index is the index of the task in the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"     * @throws CatBotException if the index is out of bounds.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"    public void delete(int index) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"            tasks.remove(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"            throw new CatBotException(\"Invalid task number.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"     * Sets whether a task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"     * @param index is the index of the task in the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"     * @param isDone is whether the task is done.","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"     * @throws CatBotException when the index is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"    public void mark(int index, boolean isDone) throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"            tasks.get(index).setDone(isDone);","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"            throw new CatBotException(\"Invalid task number.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"    public int size() {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"    public boolean hasNext() {","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"        return iteratorIndex \u003c tasks.size();","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"    public Task next() {","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"        return tasks.get(iteratorIndex++);","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":"        iteratorIndex \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":70}},{"path":"src/main/java/catbot/tasklist/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.tasklist;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":" * Stores a task which just has a description.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"public class ToDoTask extends Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"    public ToDoTask(String task) {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"        super(task);","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    public String toCommand() {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"        return \"todo \" + super.description + (super.isDone ? \"\\nmark 0\" : \"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Diamondroxxx":21}},{"path":"src/main/java/catbot/ui/ConsoleColors.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"// From https://stackoverflow.com/questions/5762491/how-to-print-color-in-console-using-system-out-println","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":" * This class contains ANSI escape sequences relating to displaying colours.","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"public class ConsoleColors {","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"    // Reset","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RESET \u003d \"\\033[0m\"; // Text Reset","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"    // Regular Colors","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLACK \u003d \"\\033[0;30m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RED \u003d \"\\033[0;31m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String GREEN \u003d \"\\033[0;32m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String YELLOW \u003d \"\\033[0;33m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLUE \u003d \"\\033[0;34m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String PURPLE \u003d \"\\033[0;35m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String CYAN \u003d \"\\033[0;36m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String WHITE \u003d \"\\033[0;37m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    // Bold","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLACK_BOLD \u003d \"\\033[1;30m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RED_BOLD \u003d \"\\033[1;31m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String GREEN_BOLD \u003d \"\\033[1;32m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String YELLOW_BOLD \u003d \"\\033[1;33m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLUE_BOLD \u003d \"\\033[1;34m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String PURPLE_BOLD \u003d \"\\033[1;35m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String CYAN_BOLD \u003d \"\\033[1;36m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String WHITE_BOLD \u003d \"\\033[1;37m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"    // Underline","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLACK_UNDERLINED \u003d \"\\033[4;30m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RED_UNDERLINED \u003d \"\\033[4;31m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String GREEN_UNDERLINED \u003d \"\\033[4;32m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String YELLOW_UNDERLINED \u003d \"\\033[4;33m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLUE_UNDERLINED \u003d \"\\033[4;34m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String PURPLE_UNDERLINED \u003d \"\\033[4;35m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String CYAN_UNDERLINED \u003d \"\\033[4;36m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String WHITE_UNDERLINED \u003d \"\\033[4;37m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"    // Background","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLACK_BACKGROUND \u003d \"\\033[40m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RED_BACKGROUND \u003d \"\\033[41m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String GREEN_BACKGROUND \u003d \"\\033[42m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String YELLOW_BACKGROUND \u003d \"\\033[43m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLUE_BACKGROUND \u003d \"\\033[44m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String PURPLE_BACKGROUND \u003d \"\\033[45m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String CYAN_BACKGROUND \u003d \"\\033[46m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String WHITE_BACKGROUND \u003d \"\\033[47m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"    // High Intensity","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLACK_BRIGHT \u003d \"\\033[0;90m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RED_BRIGHT \u003d \"\\033[0;91m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String GREEN_BRIGHT \u003d \"\\033[0;92m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String YELLOW_BRIGHT \u003d \"\\033[0;93m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLUE_BRIGHT \u003d \"\\033[0;94m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String PURPLE_BRIGHT \u003d \"\\033[0;95m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String CYAN_BRIGHT \u003d \"\\033[0;96m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String WHITE_BRIGHT \u003d \"\\033[0;97m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"    // Bold High Intensity","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLACK_BOLD_BRIGHT \u003d \"\\033[1;90m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RED_BOLD_BRIGHT \u003d \"\\033[1;91m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String GREEN_BOLD_BRIGHT \u003d \"\\033[1;92m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String YELLOW_BOLD_BRIGHT \u003d \"\\033[1;93m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLUE_BOLD_BRIGHT \u003d \"\\033[1;94m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String PURPLE_BOLD_BRIGHT \u003d \"\\033[1;95m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String CYAN_BOLD_BRIGHT \u003d \"\\033[1;96m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String WHITE_BOLD_BRIGHT \u003d \"\\033[1;97m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Diamondroxxx"},"content":"    // High Intensity backgrounds","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLACK_BACKGROUND_BRIGHT \u003d \"\\033[0;100m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String RED_BACKGROUND_BRIGHT \u003d \"\\033[0;101m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String GREEN_BACKGROUND_BRIGHT \u003d \"\\033[0;102m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String YELLOW_BACKGROUND_BRIGHT \u003d \"\\033[0;103m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String BLUE_BACKGROUND_BRIGHT \u003d \"\\033[0;104m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String PURPLE_BACKGROUND_BRIGHT \u003d \"\\033[0;105m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String CYAN_BACKGROUND_BRIGHT \u003d \"\\033[0;106m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Diamondroxxx"},"content":"    public static final String WHITE_BACKGROUND_BRIGHT \u003d \"\\033[0;107m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Diamondroxxx":80}},{"path":"src/main/java/catbot/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import org.apache.commons.text.WordUtils;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":" * Handles all UI features.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"public class Ui {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"    private static final int MAX_LINE_LENGTH \u003d 120;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"    private String nextOutput;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    private final Scanner inputScanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"     * Initialises a Ui instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"    public Ui() {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"        nextOutput \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"        inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"     * Greets the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"        String logo \u003d","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"                \" ____ ____ ____ ____ ____ ____\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"                + \"||C |||a |||t |||B |||o |||t ||\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"                + \"||__|||__|||__|||__|||__|||__||\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"                + \"|/__\\\\|/__\\\\|/__\\\\|/__\\\\|/__\\\\|/__\\\\|\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"    public String readCommand() {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"        return inputScanner.nextLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"     * Sets the next line buffer for {@code showNext}.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"     * @param message is the message to show.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"    public void setNextOutput(String message) {","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"        message \u003d message.strip();","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"        String[] lines \u003d WordUtils.wrap(message, MAX_LINE_LENGTH).split(\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"        int boxWidth \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"        for (String line: lines) {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"            boxWidth \u003d Math.max(boxWidth, Wcwidth.strWidth(line)); // strWidth for language support","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"        boxWidth \u003d (int) (Math.ceil(boxWidth / 10.0) * 10) + 2;","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"        output.append(\"╭─\").append(\" \u003e^w^\u003c \").append(\"─\".repeat(boxWidth - 8)).append(\"╮\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"        for (String line: lines) {","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"            output.append(\"│ \")","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"                    .append(line)","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"                    .append(\" \".repeat(boxWidth - Wcwidth.strWidth(line) - 2))","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"                    .append(\" │\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"        output.append(\"╰\").append(\"─\".repeat(boxWidth)).append(\"╯\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"        nextOutput \u003d output.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":"     * Displays errors to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":"     * @param message is the error message.","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":"    public void displayError(String message) {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Diamondroxxx"},"content":"        message \u003d message.strip();","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Diamondroxxx"},"content":"        String[] lines \u003d WordUtils.wrap(message, MAX_LINE_LENGTH).split(\"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Diamondroxxx"},"content":"        int boxWidth \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Diamondroxxx"},"content":"        for (String line: lines) {","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Diamondroxxx"},"content":"            boxWidth \u003d Math.max(boxWidth, Wcwidth.strWidth(line)); // strWidth for language support","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Diamondroxxx"},"content":"        boxWidth \u003d (int) (Math.ceil(boxWidth / 10.0) * 10) + 2;","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Diamondroxxx"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Diamondroxxx"},"content":"        output.append(ConsoleColors.RED);","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Diamondroxxx"},"content":"        output.append(\"╭─\").append(\" \u003e@w@\u003c \").append(\"─\".repeat(boxWidth - 8)).append(\"╮\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Diamondroxxx"},"content":"        for (String line: lines) {","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Diamondroxxx"},"content":"            output.append(\"│ \")","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Diamondroxxx"},"content":"                    .append(line)","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Diamondroxxx"},"content":"                    .append(\" \".repeat(boxWidth - Wcwidth.strWidth(line) - 2))","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Diamondroxxx"},"content":"                    .append(\" │\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Diamondroxxx"},"content":"        output.append(\"╰\").append(\"─\".repeat(boxWidth)).append(\"╯\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Diamondroxxx"},"content":"        output.append(ConsoleColors.RESET);","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Diamondroxxx"},"content":"        System.out.println(output);","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"Diamondroxxx"},"content":"     * Display the next line to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"Diamondroxxx"},"content":"     * Requires {@code setNextOutput} to be called first.","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"Diamondroxxx"},"content":"    public void showNext() {","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"Diamondroxxx"},"content":"        System.out.println(nextOutput);","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"Diamondroxxx"},"content":"        nextOutput \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":100}},{"path":"src/main/java/catbot/ui/Wcwidth.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"/*","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":" * Markus Kuhn -- 2007-05-26 (Unicode 5.0)","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":" * Permission to use, copy, modify, and distribute this software","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":" * for any purpose and without fee is hereby granted. The author","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":" * disclaims all warranties with regard to this software.","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"/*","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":" * Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":" * you may not use this file except in compliance with the License.","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":" * You may obtain a copy of the License at","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":" *     http://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":" * Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2023-01-15"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":" * distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2023-01-15"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2023-01-15"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":" * See the License for the specific language governing permissions and","lastModifiedDate":"2023-01-15"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":" * limitations under the License.","lastModifiedDate":"2023-01-15"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-15"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"/**","lastModifiedDate":"2023-01-15"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":" * \u003cp\u003eSee \u003ca href\u003d\"http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\"\u003ewcwidth.c\u003c/a\u003e\u003c/p\u003e","lastModifiedDate":"2023-01-15"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":" * \u003cp\u003eThis is an implementation of wcwidth() and wcswidth() (defined in","lastModifiedDate":"2023-01-15"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":" * IEEE Std 1002.1-2001) for Unicode.\u003c/p\u003e","lastModifiedDate":"2023-01-15"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":" * http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html","lastModifiedDate":"2023-01-15"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":" * http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html","lastModifiedDate":"2023-01-15"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":" * \u003cp\u003eIn fixed-width output devices, Latin characters all occupy a single","lastModifiedDate":"2023-01-15"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":" * \"cell\" position of equal width, whereas ideographic CJK characters","lastModifiedDate":"2023-01-15"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":" * occupy two such cells. Interoperability between terminal-line","lastModifiedDate":"2023-01-15"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":" * applications and (teletype-style) character terminals using the","lastModifiedDate":"2023-01-15"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":" * UTF-8 encoding requires agreement on which character should advance","lastModifiedDate":"2023-01-15"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":" * the cursor by how many cell positions. No established formal","lastModifiedDate":"2023-01-15"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":" * standards exist at present on which Unicode character shall occupy","lastModifiedDate":"2023-01-15"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":" * how many cell positions on character terminals. These routines are","lastModifiedDate":"2023-01-15"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":" * a first attempt of defining such behavior based on simple rules","lastModifiedDate":"2023-01-15"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":" * applied to data provided by the Unicode Consortium.\u003c/p\u003e","lastModifiedDate":"2023-01-15"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":" * \u003cp\u003eFor some graphical characters, the Unicode standard explicitly","lastModifiedDate":"2023-01-15"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":" * defines a character-cell width via the definition of the East Asian","lastModifiedDate":"2023-01-15"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":" * FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.","lastModifiedDate":"2023-01-15"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":" * In all these cases, there is no ambiguity about which width a","lastModifiedDate":"2023-01-15"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":" * terminal shall use. For characters in the East Asian Ambiguous (A)","lastModifiedDate":"2023-01-15"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":" * class, the width choice depends purely on a preference of backward","lastModifiedDate":"2023-01-15"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":" * compatibility with either historic CJK or Western practice.","lastModifiedDate":"2023-01-15"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":" * Choosing single-width for these characters is easy to justify as","lastModifiedDate":"2023-01-15"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":" * the appropriate long-term solution, as the CJK practice of","lastModifiedDate":"2023-01-15"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":" * displaying these characters as double-width comes from historic","lastModifiedDate":"2023-01-15"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":" * implementation simplicity (8-bit encoded characters were displayed","lastModifiedDate":"2023-01-15"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":" * single-width and 16-bit ones double-width, even for Greek,","lastModifiedDate":"2023-01-15"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":" * Cyrillic, etc.) and not any typographic considerations.\u003c/p\u003e","lastModifiedDate":"2023-01-15"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":" * \u003cp\u003eMuch less clear is the choice of width for the Not East Asian","lastModifiedDate":"2023-01-15"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":" * (Neutral) class. Existing practice does not dictate a width for any","lastModifiedDate":"2023-01-15"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":" * of these characters. It would nevertheless make sense","lastModifiedDate":"2023-01-15"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":" * typographically to allocate two character cells to characters such","lastModifiedDate":"2023-01-15"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":" * as for instance EM SPACE or VOLUME INTEGRAL, which cannot be","lastModifiedDate":"2023-01-15"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":" * represented adequately with a single-width glyph. The following","lastModifiedDate":"2023-01-15"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":" * routines at present merely assign a single-cell width to all","lastModifiedDate":"2023-01-15"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":" * neutral characters, in the interest of simplicity. This is not","lastModifiedDate":"2023-01-15"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":" * entirely satisfactory and should be reconsidered before","lastModifiedDate":"2023-01-15"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":" * establishing a formal standard in this area. At the moment, the","lastModifiedDate":"2023-01-15"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":" * decision which Not East Asian (Neutral) characters should be","lastModifiedDate":"2023-01-15"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":" * represented by double-width glyphs cannot yet be answered by","lastModifiedDate":"2023-01-15"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":" * applying a simple rule from the Unicode database content. Setting","lastModifiedDate":"2023-01-15"},{"lineNumber":71,"author":{"gitId":"Diamondroxxx"},"content":" * up a proper standard for the behavior of UTF-8 character terminals","lastModifiedDate":"2023-01-15"},{"lineNumber":72,"author":{"gitId":"Diamondroxxx"},"content":" * will require a careful analysis not only of each Unicode character,","lastModifiedDate":"2023-01-15"},{"lineNumber":73,"author":{"gitId":"Diamondroxxx"},"content":" * but also of each presentation form, something the author of these","lastModifiedDate":"2023-01-15"},{"lineNumber":74,"author":{"gitId":"Diamondroxxx"},"content":" * routines has avoided to do so far.\u003c/p\u003e","lastModifiedDate":"2023-01-15"},{"lineNumber":75,"author":{"gitId":"Diamondroxxx"},"content":" *","lastModifiedDate":"2023-01-15"},{"lineNumber":76,"author":{"gitId":"Diamondroxxx"},"content":" * \u003cp\u003ehttp://www.unicode.org/unicode/reports/tr11/\u003c/p\u003e","lastModifiedDate":"2023-01-15"},{"lineNumber":77,"author":{"gitId":"Diamondroxxx"},"content":" */","lastModifiedDate":"2023-01-15"},{"lineNumber":78,"author":{"gitId":"Diamondroxxx"},"content":"public class Wcwidth {","lastModifiedDate":"2023-01-15"},{"lineNumber":79,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-15"},{"lineNumber":80,"author":{"gitId":"Diamondroxxx"},"content":"     * sorted list of non-overlapping intervals of non-spacing characters","lastModifiedDate":"2023-01-15"},{"lineNumber":81,"author":{"gitId":"Diamondroxxx"},"content":"     * generated by \"uniset +cat\u003dMe +cat\u003dMn +cat\u003dCf -00AD +1160-11FF +200B c\"","lastModifiedDate":"2023-01-15"},{"lineNumber":82,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-15"},{"lineNumber":83,"author":{"gitId":"Diamondroxxx"},"content":"    private static final int[][] COMBINING \u003d {","lastModifiedDate":"2023-01-15"},{"lineNumber":84,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0300, 0x036F}, {0x0483, 0x0486}, {0x0488, 0x0489},","lastModifiedDate":"2023-01-15"},{"lineNumber":85,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0591, 0x05BD}, {0x05BF, 0x05BF}, {0x05C1, 0x05C2},","lastModifiedDate":"2023-01-15"},{"lineNumber":86,"author":{"gitId":"Diamondroxxx"},"content":"            {0x05C4, 0x05C5}, {0x05C7, 0x05C7}, {0x0600, 0x0603},","lastModifiedDate":"2023-01-15"},{"lineNumber":87,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0610, 0x0615}, {0x064B, 0x065E}, {0x0670, 0x0670},","lastModifiedDate":"2023-01-15"},{"lineNumber":88,"author":{"gitId":"Diamondroxxx"},"content":"            {0x06D6, 0x06E4}, {0x06E7, 0x06E8}, {0x06EA, 0x06ED},","lastModifiedDate":"2023-01-15"},{"lineNumber":89,"author":{"gitId":"Diamondroxxx"},"content":"            {0x070F, 0x070F}, {0x0711, 0x0711}, {0x0730, 0x074A},","lastModifiedDate":"2023-01-15"},{"lineNumber":90,"author":{"gitId":"Diamondroxxx"},"content":"            {0x07A6, 0x07B0}, {0x07EB, 0x07F3}, {0x0901, 0x0902},","lastModifiedDate":"2023-01-15"},{"lineNumber":91,"author":{"gitId":"Diamondroxxx"},"content":"            {0x093C, 0x093C}, {0x0941, 0x0948}, {0x094D, 0x094D},","lastModifiedDate":"2023-01-15"},{"lineNumber":92,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0951, 0x0954}, {0x0962, 0x0963}, {0x0981, 0x0981},","lastModifiedDate":"2023-01-15"},{"lineNumber":93,"author":{"gitId":"Diamondroxxx"},"content":"            {0x09BC, 0x09BC}, {0x09C1, 0x09C4}, {0x09CD, 0x09CD},","lastModifiedDate":"2023-01-15"},{"lineNumber":94,"author":{"gitId":"Diamondroxxx"},"content":"            {0x09E2, 0x09E3}, {0x0A01, 0x0A02}, {0x0A3C, 0x0A3C},","lastModifiedDate":"2023-01-15"},{"lineNumber":95,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0A41, 0x0A42}, {0x0A47, 0x0A48}, {0x0A4B, 0x0A4D},","lastModifiedDate":"2023-01-15"},{"lineNumber":96,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0A70, 0x0A71}, {0x0A81, 0x0A82}, {0x0ABC, 0x0ABC},","lastModifiedDate":"2023-01-15"},{"lineNumber":97,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0AC1, 0x0AC5}, {0x0AC7, 0x0AC8}, {0x0ACD, 0x0ACD},","lastModifiedDate":"2023-01-15"},{"lineNumber":98,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0AE2, 0x0AE3}, {0x0B01, 0x0B01}, {0x0B3C, 0x0B3C},","lastModifiedDate":"2023-01-15"},{"lineNumber":99,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0B3F, 0x0B3F}, {0x0B41, 0x0B43}, {0x0B4D, 0x0B4D},","lastModifiedDate":"2023-01-15"},{"lineNumber":100,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0B56, 0x0B56}, {0x0B82, 0x0B82}, {0x0BC0, 0x0BC0},","lastModifiedDate":"2023-01-15"},{"lineNumber":101,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0BCD, 0x0BCD}, {0x0C3E, 0x0C40}, {0x0C46, 0x0C48},","lastModifiedDate":"2023-01-15"},{"lineNumber":102,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0C4A, 0x0C4D}, {0x0C55, 0x0C56}, {0x0CBC, 0x0CBC},","lastModifiedDate":"2023-01-15"},{"lineNumber":103,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0CBF, 0x0CBF}, {0x0CC6, 0x0CC6}, {0x0CCC, 0x0CCD},","lastModifiedDate":"2023-01-15"},{"lineNumber":104,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0CE2, 0x0CE3}, {0x0D41, 0x0D43}, {0x0D4D, 0x0D4D},","lastModifiedDate":"2023-01-15"},{"lineNumber":105,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0DCA, 0x0DCA}, {0x0DD2, 0x0DD4}, {0x0DD6, 0x0DD6},","lastModifiedDate":"2023-01-15"},{"lineNumber":106,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0E31, 0x0E31}, {0x0E34, 0x0E3A}, {0x0E47, 0x0E4E},","lastModifiedDate":"2023-01-15"},{"lineNumber":107,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0EB1, 0x0EB1}, {0x0EB4, 0x0EB9}, {0x0EBB, 0x0EBC},","lastModifiedDate":"2023-01-15"},{"lineNumber":108,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0EC8, 0x0ECD}, {0x0F18, 0x0F19}, {0x0F35, 0x0F35},","lastModifiedDate":"2023-01-15"},{"lineNumber":109,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0F37, 0x0F37}, {0x0F39, 0x0F39}, {0x0F71, 0x0F7E},","lastModifiedDate":"2023-01-15"},{"lineNumber":110,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0F80, 0x0F84}, {0x0F86, 0x0F87}, {0x0F90, 0x0F97},","lastModifiedDate":"2023-01-15"},{"lineNumber":111,"author":{"gitId":"Diamondroxxx"},"content":"            {0x0F99, 0x0FBC}, {0x0FC6, 0x0FC6}, {0x102D, 0x1030},","lastModifiedDate":"2023-01-15"},{"lineNumber":112,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1032, 0x1032}, {0x1036, 0x1037}, {0x1039, 0x1039},","lastModifiedDate":"2023-01-15"},{"lineNumber":113,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1058, 0x1059}, {0x1160, 0x11FF}, {0x135F, 0x135F},","lastModifiedDate":"2023-01-15"},{"lineNumber":114,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1712, 0x1714}, {0x1732, 0x1734}, {0x1752, 0x1753},","lastModifiedDate":"2023-01-15"},{"lineNumber":115,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1772, 0x1773}, {0x17B4, 0x17B5}, {0x17B7, 0x17BD},","lastModifiedDate":"2023-01-15"},{"lineNumber":116,"author":{"gitId":"Diamondroxxx"},"content":"            {0x17C6, 0x17C6}, {0x17C9, 0x17D3}, {0x17DD, 0x17DD},","lastModifiedDate":"2023-01-15"},{"lineNumber":117,"author":{"gitId":"Diamondroxxx"},"content":"            {0x180B, 0x180D}, {0x18A9, 0x18A9}, {0x1920, 0x1922},","lastModifiedDate":"2023-01-15"},{"lineNumber":118,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1927, 0x1928}, {0x1932, 0x1932}, {0x1939, 0x193B},","lastModifiedDate":"2023-01-15"},{"lineNumber":119,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1A17, 0x1A18}, {0x1B00, 0x1B03}, {0x1B34, 0x1B34},","lastModifiedDate":"2023-01-15"},{"lineNumber":120,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1B36, 0x1B3A}, {0x1B3C, 0x1B3C}, {0x1B42, 0x1B42},","lastModifiedDate":"2023-01-15"},{"lineNumber":121,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1B6B, 0x1B73}, {0x1DC0, 0x1DCA}, {0x1DFE, 0x1DFF},","lastModifiedDate":"2023-01-15"},{"lineNumber":122,"author":{"gitId":"Diamondroxxx"},"content":"            {0x200B, 0x200F}, {0x202A, 0x202E}, {0x2060, 0x2063},","lastModifiedDate":"2023-01-15"},{"lineNumber":123,"author":{"gitId":"Diamondroxxx"},"content":"            {0x206A, 0x206F}, {0x20D0, 0x20EF}, {0x302A, 0x302F},","lastModifiedDate":"2023-01-15"},{"lineNumber":124,"author":{"gitId":"Diamondroxxx"},"content":"            {0x3099, 0x309A}, {0xA806, 0xA806}, {0xA80B, 0xA80B},","lastModifiedDate":"2023-01-15"},{"lineNumber":125,"author":{"gitId":"Diamondroxxx"},"content":"            {0xA825, 0xA826}, {0xFB1E, 0xFB1E}, {0xFE00, 0xFE0F},","lastModifiedDate":"2023-01-15"},{"lineNumber":126,"author":{"gitId":"Diamondroxxx"},"content":"            {0xFE20, 0xFE23}, {0xFEFF, 0xFEFF}, {0xFFF9, 0xFFFB},","lastModifiedDate":"2023-01-15"},{"lineNumber":127,"author":{"gitId":"Diamondroxxx"},"content":"            {0x10A01, 0x10A03}, {0x10A05, 0x10A06}, {0x10A0C, 0x10A0F},","lastModifiedDate":"2023-01-15"},{"lineNumber":128,"author":{"gitId":"Diamondroxxx"},"content":"            {0x10A38, 0x10A3A}, {0x10A3F, 0x10A3F}, {0x1D167, 0x1D169},","lastModifiedDate":"2023-01-15"},{"lineNumber":129,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1D173, 0x1D182}, {0x1D185, 0x1D18B}, {0x1D1AA, 0x1D1AD},","lastModifiedDate":"2023-01-15"},{"lineNumber":130,"author":{"gitId":"Diamondroxxx"},"content":"            {0x1D242, 0x1D244}, {0xE0001, 0xE0001}, {0xE0020, 0xE007F},","lastModifiedDate":"2023-01-15"},{"lineNumber":131,"author":{"gitId":"Diamondroxxx"},"content":"            {0xE0100, 0xE01EF}","lastModifiedDate":"2023-01-15"},{"lineNumber":132,"author":{"gitId":"Diamondroxxx"},"content":"    };","lastModifiedDate":"2023-01-15"},{"lineNumber":133,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":134,"author":{"gitId":"Diamondroxxx"},"content":"    static boolean bisearch(int ucs) {","lastModifiedDate":"2023-01-15"},{"lineNumber":135,"author":{"gitId":"Diamondroxxx"},"content":"        int min \u003d 0;","lastModifiedDate":"2023-01-15"},{"lineNumber":136,"author":{"gitId":"Diamondroxxx"},"content":"        int mid;","lastModifiedDate":"2023-01-15"},{"lineNumber":137,"author":{"gitId":"Diamondroxxx"},"content":"        int max \u003d COMBINING.length - 1;","lastModifiedDate":"2023-01-15"},{"lineNumber":138,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":139,"author":{"gitId":"Diamondroxxx"},"content":"        if (ucs \u003c COMBINING[0][0] || ucs \u003e COMBINING[max][1]) {","lastModifiedDate":"2023-01-15"},{"lineNumber":140,"author":{"gitId":"Diamondroxxx"},"content":"            return false;","lastModifiedDate":"2023-01-15"},{"lineNumber":141,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":142,"author":{"gitId":"Diamondroxxx"},"content":"        while (max \u003e\u003d min) {","lastModifiedDate":"2023-01-15"},{"lineNumber":143,"author":{"gitId":"Diamondroxxx"},"content":"            mid \u003d (min + max) / 2;","lastModifiedDate":"2023-01-15"},{"lineNumber":144,"author":{"gitId":"Diamondroxxx"},"content":"            if (ucs \u003e COMBINING[mid][1]) {","lastModifiedDate":"2023-01-15"},{"lineNumber":145,"author":{"gitId":"Diamondroxxx"},"content":"                min \u003d mid + 1;","lastModifiedDate":"2023-01-15"},{"lineNumber":146,"author":{"gitId":"Diamondroxxx"},"content":"            } else if (ucs \u003c COMBINING[mid][0]) {","lastModifiedDate":"2023-01-15"},{"lineNumber":147,"author":{"gitId":"Diamondroxxx"},"content":"                max \u003d mid - 1;","lastModifiedDate":"2023-01-15"},{"lineNumber":148,"author":{"gitId":"Diamondroxxx"},"content":"            } else {","lastModifiedDate":"2023-01-15"},{"lineNumber":149,"author":{"gitId":"Diamondroxxx"},"content":"                return true;","lastModifiedDate":"2023-01-15"},{"lineNumber":150,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-15"},{"lineNumber":151,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":152,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":153,"author":{"gitId":"Diamondroxxx"},"content":"        return false;","lastModifiedDate":"2023-01-15"},{"lineNumber":154,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":155,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":156,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-15"},{"lineNumber":157,"author":{"gitId":"Diamondroxxx"},"content":"     * See : http://www.cl.cam.ac.uk/%7Emgk25/ucs/wcwidth.c","lastModifiedDate":"2023-01-15"},{"lineNumber":158,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":159,"author":{"gitId":"Diamondroxxx"},"content":"     * The following two functions define the column width of an ISO 10646","lastModifiedDate":"2023-01-15"},{"lineNumber":160,"author":{"gitId":"Diamondroxxx"},"content":"     * character as follows:","lastModifiedDate":"2023-01-15"},{"lineNumber":161,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":162,"author":{"gitId":"Diamondroxxx"},"content":"     *    - The null character (U+0000) has a column width of 0.","lastModifiedDate":"2023-01-15"},{"lineNumber":163,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":164,"author":{"gitId":"Diamondroxxx"},"content":"     *    - Other C0/C1 control characters and DEL will lead to a return","lastModifiedDate":"2023-01-15"},{"lineNumber":165,"author":{"gitId":"Diamondroxxx"},"content":"     *      value of -1.","lastModifiedDate":"2023-01-15"},{"lineNumber":166,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":167,"author":{"gitId":"Diamondroxxx"},"content":"     *    - Non-spacing and enclosing combining characters (general","lastModifiedDate":"2023-01-15"},{"lineNumber":168,"author":{"gitId":"Diamondroxxx"},"content":"     *      category code Mn or Me in the Unicode database) have a","lastModifiedDate":"2023-01-15"},{"lineNumber":169,"author":{"gitId":"Diamondroxxx"},"content":"     *      column width of 0.","lastModifiedDate":"2023-01-15"},{"lineNumber":170,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":171,"author":{"gitId":"Diamondroxxx"},"content":"     *    - SOFT HYPHEN (U+00AD) has a column width of 1.","lastModifiedDate":"2023-01-15"},{"lineNumber":172,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":173,"author":{"gitId":"Diamondroxxx"},"content":"     *    - Other format characters (general category code Cf in the Unicode","lastModifiedDate":"2023-01-15"},{"lineNumber":174,"author":{"gitId":"Diamondroxxx"},"content":"     *      database) and ZERO WIDTH SPACE (U+200B) have a column width of 0.","lastModifiedDate":"2023-01-15"},{"lineNumber":175,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":176,"author":{"gitId":"Diamondroxxx"},"content":"     *    - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)","lastModifiedDate":"2023-01-15"},{"lineNumber":177,"author":{"gitId":"Diamondroxxx"},"content":"     *      have a column width of 0.","lastModifiedDate":"2023-01-15"},{"lineNumber":178,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":179,"author":{"gitId":"Diamondroxxx"},"content":"     *    - Spacing characters in the East Asian Wide (W) or East Asian","lastModifiedDate":"2023-01-15"},{"lineNumber":180,"author":{"gitId":"Diamondroxxx"},"content":"     *      Full-width (F) category as defined in Unicode Technical","lastModifiedDate":"2023-01-15"},{"lineNumber":181,"author":{"gitId":"Diamondroxxx"},"content":"     *      Report #11 have a column width of 2.","lastModifiedDate":"2023-01-15"},{"lineNumber":182,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":183,"author":{"gitId":"Diamondroxxx"},"content":"     *    - All remaining characters (including all printable","lastModifiedDate":"2023-01-15"},{"lineNumber":184,"author":{"gitId":"Diamondroxxx"},"content":"     *      ISO 8859-1 and WGL4 characters, Unicode control characters,","lastModifiedDate":"2023-01-15"},{"lineNumber":185,"author":{"gitId":"Diamondroxxx"},"content":"     *      etc.) have a column width of 1.","lastModifiedDate":"2023-01-15"},{"lineNumber":186,"author":{"gitId":"Diamondroxxx"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":187,"author":{"gitId":"Diamondroxxx"},"content":"     * This implementation assumes that wchar_t characters are encoded","lastModifiedDate":"2023-01-15"},{"lineNumber":188,"author":{"gitId":"Diamondroxxx"},"content":"     * in ISO 10646.","lastModifiedDate":"2023-01-15"},{"lineNumber":189,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-15"},{"lineNumber":190,"author":{"gitId":"Diamondroxxx"},"content":"    public static int of(int codePoint) {","lastModifiedDate":"2023-01-15"},{"lineNumber":191,"author":{"gitId":"Diamondroxxx"},"content":"        // test for 8-bit control characters","lastModifiedDate":"2023-01-15"},{"lineNumber":192,"author":{"gitId":"Diamondroxxx"},"content":"        if (codePoint \u003d\u003d 0) {","lastModifiedDate":"2023-01-15"},{"lineNumber":193,"author":{"gitId":"Diamondroxxx"},"content":"            return 0;","lastModifiedDate":"2023-01-15"},{"lineNumber":194,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":195,"author":{"gitId":"Diamondroxxx"},"content":"        if (codePoint \u003c 32 || (codePoint \u003e\u003d 0x7f \u0026\u0026 codePoint \u003c 0xa0)) {","lastModifiedDate":"2023-01-15"},{"lineNumber":196,"author":{"gitId":"Diamondroxxx"},"content":"            return -1;","lastModifiedDate":"2023-01-15"},{"lineNumber":197,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":198,"author":{"gitId":"Diamondroxxx"},"content":"        // binary search in table of non-spacing characters","lastModifiedDate":"2023-01-15"},{"lineNumber":199,"author":{"gitId":"Diamondroxxx"},"content":"        if (bisearch(codePoint)) {","lastModifiedDate":"2023-01-15"},{"lineNumber":200,"author":{"gitId":"Diamondroxxx"},"content":"            return 0;","lastModifiedDate":"2023-01-15"},{"lineNumber":201,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":202,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":203,"author":{"gitId":"Diamondroxxx"},"content":"        // if we arrive here, ucs is not a combining or C0/C1 control character","lastModifiedDate":"2023-01-15"},{"lineNumber":204,"author":{"gitId":"Diamondroxxx"},"content":"        return 1","lastModifiedDate":"2023-01-29"},{"lineNumber":205,"author":{"gitId":"Diamondroxxx"},"content":"                + ((codePoint \u003e\u003d 0x1100","lastModifiedDate":"2023-01-29"},{"lineNumber":206,"author":{"gitId":"Diamondroxxx"},"content":"                        \u0026\u0026 (codePoint \u003c\u003d 0x115f // Hangul Jamo init. consonants","lastModifiedDate":"2023-01-29"},{"lineNumber":207,"author":{"gitId":"Diamondroxxx"},"content":"                                || codePoint \u003d\u003d 0x2329 || codePoint \u003d\u003d 0x232a","lastModifiedDate":"2023-01-29"},{"lineNumber":208,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0x2e80 \u0026\u0026 codePoint \u003c\u003d 0xa4cf","lastModifiedDate":"2023-01-29"},{"lineNumber":209,"author":{"gitId":"Diamondroxxx"},"content":"                                        \u0026\u0026 codePoint !\u003d 0x303f) // CJK ... Yi","lastModifiedDate":"2023-01-29"},{"lineNumber":210,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0xac00 \u0026\u0026 codePoint \u003c\u003d 0xd7a3) // Hangul Syllables","lastModifiedDate":"2023-01-29"},{"lineNumber":211,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0xf900 \u0026\u0026 codePoint \u003c\u003d 0xfaff) // CJK Compatibility Ideographs","lastModifiedDate":"2023-01-29"},{"lineNumber":212,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0xfe10 \u0026\u0026 codePoint \u003c\u003d 0xfe19) // Vertical forms","lastModifiedDate":"2023-01-29"},{"lineNumber":213,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0xfe30 \u0026\u0026 codePoint \u003c\u003d 0xfe6f) // CJK Compatibility Forms","lastModifiedDate":"2023-01-29"},{"lineNumber":214,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0xff00 \u0026\u0026 codePoint \u003c\u003d 0xff60) // Fullwidth Forms","lastModifiedDate":"2023-01-29"},{"lineNumber":215,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0xffe0 \u0026\u0026 codePoint \u003c\u003d 0xffe6)","lastModifiedDate":"2023-01-29"},{"lineNumber":216,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0x20000 \u0026\u0026 codePoint \u003c\u003d 0x2fffd)","lastModifiedDate":"2023-01-29"},{"lineNumber":217,"author":{"gitId":"Diamondroxxx"},"content":"                                || (codePoint \u003e\u003d 0x30000 \u0026\u0026 codePoint \u003c\u003d 0x3fffd))) ? 1 : 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":218,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":219,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":220,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":221,"author":{"gitId":"Diamondroxxx"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":222,"author":{"gitId":"Diamondroxxx"},"content":"     * Gets the total character width of a string","lastModifiedDate":"2023-01-15"},{"lineNumber":223,"author":{"gitId":"Diamondroxxx"},"content":"     * Calls {@code of} on every character and sums it up","lastModifiedDate":"2023-01-29"},{"lineNumber":224,"author":{"gitId":"Diamondroxxx"},"content":"     * @param str is the string to measure the width of","lastModifiedDate":"2023-01-15"},{"lineNumber":225,"author":{"gitId":"Diamondroxxx"},"content":"     * @return the number of character cells taken to display str","lastModifiedDate":"2023-01-15"},{"lineNumber":226,"author":{"gitId":"Diamondroxxx"},"content":"     */","lastModifiedDate":"2023-01-15"},{"lineNumber":227,"author":{"gitId":"Diamondroxxx"},"content":"    public static int strWidth(String str) {","lastModifiedDate":"2023-01-15"},{"lineNumber":228,"author":{"gitId":"Diamondroxxx"},"content":"        int total \u003d 0;","lastModifiedDate":"2023-01-15"},{"lineNumber":229,"author":{"gitId":"Diamondroxxx"},"content":"        boolean skip \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":230,"author":{"gitId":"Diamondroxxx"},"content":"        for (int i \u003d 0; i \u003c str.length(); i++) {","lastModifiedDate":"2023-01-15"},{"lineNumber":231,"author":{"gitId":"Diamondroxxx"},"content":"            if (str.codePointAt(i) \u003d\u003d 27) {","lastModifiedDate":"2023-01-17"},{"lineNumber":232,"author":{"gitId":"Diamondroxxx"},"content":"                skip \u003d true;","lastModifiedDate":"2023-01-17"},{"lineNumber":233,"author":{"gitId":"Diamondroxxx"},"content":"                total--;","lastModifiedDate":"2023-01-17"},{"lineNumber":234,"author":{"gitId":"Diamondroxxx"},"content":"            } else if (str.codePointAt(i) \u003d\u003d 109) {","lastModifiedDate":"2023-01-17"},{"lineNumber":235,"author":{"gitId":"Diamondroxxx"},"content":"                skip \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":236,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":237,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":238,"author":{"gitId":"Diamondroxxx"},"content":"            if (!skip) {","lastModifiedDate":"2023-01-17"},{"lineNumber":239,"author":{"gitId":"Diamondroxxx"},"content":"                total +\u003d of(str.codePointAt(i));","lastModifiedDate":"2023-01-15"},{"lineNumber":240,"author":{"gitId":"Diamondroxxx"},"content":"            }","lastModifiedDate":"2023-01-15"},{"lineNumber":241,"author":{"gitId":"Diamondroxxx"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":242,"author":{"gitId":"Diamondroxxx"},"content":"        return total;","lastModifiedDate":"2023-01-15"},{"lineNumber":243,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":244,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"Diamondroxxx":244}},{"path":"src/test/java/catbot/CatBotTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"public class CatBotTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"    public void anotherDummyTest() {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":17}},{"path":"src/test/java/catbot/commands/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"package catbot.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Diamondroxxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.CatBotException;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.tasklist.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Diamondroxxx"},"content":"import catbot.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"public class AddCommandTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"    private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Diamondroxxx"},"content":"    private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"    private static final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Diamondroxxx"},"content":"    private static final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Diamondroxxx"},"content":"    private TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Diamondroxxx"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Diamondroxxx"},"content":"    private final Storage storage \u003d new Storage(\"./test/tasklist.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Diamondroxxx"},"content":"    public AddCommandTest() throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Diamondroxxx"},"content":"    // https://stackoverflow.com/questions/1119385/junit-test-for-system-out-println","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Diamondroxxx"},"content":"    @BeforeAll","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Diamondroxxx"},"content":"    static void setUpStreams() {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Diamondroxxx"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Diamondroxxx"},"content":"        System.setErr(new PrintStream(errContent));","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Diamondroxxx"},"content":"    @AfterAll","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Diamondroxxx"},"content":"    static void restoreStreams() {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Diamondroxxx"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Diamondroxxx"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Diamondroxxx"},"content":"    @BeforeEach","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Diamondroxxx"},"content":"    public void reset() throws IOException {","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Diamondroxxx"},"content":"        tasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Diamondroxxx"},"content":"        boolean temp \u003d new File(\"./test/tasklist.txt\").delete();","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Diamondroxxx"},"content":"        boolean temp2 \u003d new File(\"./test/tasklist.txt\").createNewFile();","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Diamondroxxx"},"content":"        outContent.reset();","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Diamondroxxx"},"content":"        errContent.reset();","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Diamondroxxx"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Diamondroxxx"},"content":"    public void todoTest() throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Diamondroxxx"},"content":"        Command testCommand \u003d new AddCommand(\"This is a test\");","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Diamondroxxx"},"content":"        testCommand.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Diamondroxxx"},"content":"        ui.showNext();","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Diamondroxxx"},"content":"                \"╭─ \u003e^w^\u003c ────────────────────────╮\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│ Added new task!                │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│     [T][ ] This is a test      │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│ You have 1 task now.           │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Diamondroxxx"},"content":"                + \"╰────────────────────────────────╯\\n\\n\", outContent.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Diamondroxxx"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Diamondroxxx"},"content":"    public void deadlineTest() throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Diamondroxxx"},"content":"        Command testCommand \u003d new AddCommand(\"This is a test\", LocalDateTime.parse(\"2023-01-29T20:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Diamondroxxx"},"content":"        testCommand.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Diamondroxxx"},"content":"        ui.showNext();","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Diamondroxxx"},"content":"                \"╭─ \u003e^w^\u003c ────────────────────────────────────────────╮\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│ Added new task!                                    │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│     [D][ ] This is a test by 29 Jan 2023, 8:00 PM  │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│ You have 1 task now.                               │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Diamondroxxx"},"content":"                + \"╰────────────────────────────────────────────────────╯\\n\\n\", outContent.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Diamondroxxx"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Diamondroxxx"},"content":"    public void eventTest() throws CatBotException {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Diamondroxxx"},"content":"        Command testCommand \u003d new AddCommand(\"This is a test\",","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Diamondroxxx"},"content":"                LocalDateTime.parse(\"2023-01-29T20:00\"), LocalDateTime.parse(\"2023-01-29T20:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Diamondroxxx"},"content":"        testCommand.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Diamondroxxx"},"content":"        ui.showNext();","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Diamondroxxx"},"content":"        assertEquals(","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"Diamondroxxx"},"content":"                \"╭─ \u003e^w^\u003c ──────────────────────────────────────────────────────────────────────────╮\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│ Added new task!                                                                  │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│     [E][ ] This is a test (29 Jan 2023, 8:00 PM – 29 Jan 2023, 8:00 PM)          │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"Diamondroxxx"},"content":"                + \"│ You have 1 task now.                                                             │\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"Diamondroxxx"},"content":"                + \"╰──────────────────────────────────────────────────────────────────────────────────╯\\n\\n\",","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"Diamondroxxx"},"content":"                outContent.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"Diamondroxxx"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"Diamondroxxx"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Diamondroxxx":99}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"todo clean room","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"Diamondroxxx"},"content":"deadline homework /by Friday","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"Diamondroxxx"},"content":"event sleep /from 10pm /to 6am","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"Diamondroxxx"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"Diamondroxxx"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"Diamondroxxx"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Diamondroxxx"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"Diamondroxxx"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Diamondroxxx"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"Diamondroxxx"},"content":"echo meow!","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"Diamondroxxx"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"Diamondroxxx"},"content":"deadline /from tomorrow /to yesterday","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"Diamondroxxx"},"content":"event whatever /to tomorrow","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"Diamondroxxx"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Diamondroxxx":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Diamondroxxx"},"content":"#!/usr/bin/env zsh","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Diamondroxxx"},"content":"if ! javac -cp ../src/main/java:/Users/duck/.m2/repository/org/apache/commons/commons-text/1.10.0/commons-text-1.10.0.jar:/Users/duck/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"Diamondroxxx"},"content":"echo \"********** BUILD SUCCESS **********\"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"Diamondroxxx"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"Diamondroxxx"},"content":"java -classpath ../bin:/Users/duck/.m2/repository/org/apache/commons/commons-text/1.10.0/commons-text-1.10.0.jar:/Users/duck/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar CatBot.CatBot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":35,"Diamondroxxx":5}}]
