[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"    ","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"EvitanRelta":16,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import java.util.Optional;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"import duke.exceptions.DukeInvalidCommandException;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"import duke.exceptions.DukeSaveLoadException;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"import duke.tasks.TaskDeadline;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"import duke.tasks.TaskEvent;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"import duke.tasks.TaskTodo;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":" * A simple task list program.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":" * ","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":" * @see https://github.com/nus-cs2103-AY2223S2/ip","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"    private Storage storage \u003d new Storage(\"_duke_data.txt\");","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"    private Parser currentCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"    public Duke() {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"        // Attempt to load task list from save file.","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"            this.tasks \u003d this.storage.load();","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"        } catch (DukeSaveLoadException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"            this.ui.showError(e);","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"            this.tasks \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"     * Runs the app.","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"    public void run() {","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.show(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"        whileLoop:","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"        while (true) {","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"            if (!this.ui.hasCommand()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"                continue;","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"            ","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"            String input \u003d this.ui.readCommand();","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"            this.currentCommand \u003d new Parser(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"            try {","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"                switch (this.currentCommand.baseCommand) {","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"                case \"todo\":","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"                    this.addTodo();","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"                case \"deadline\":","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"EvitanRelta"},"content":"                    this.addDeadline();","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"EvitanRelta"},"content":"                case \"event\":","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"EvitanRelta"},"content":"                    this.addEvent();","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"EvitanRelta"},"content":"                case \"mark\":","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"EvitanRelta"},"content":"                    this.mark();","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"EvitanRelta"},"content":"                case \"unmark\":","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"EvitanRelta"},"content":"                    this.unmark();","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"EvitanRelta"},"content":"                case \"delete\":","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"EvitanRelta"},"content":"                    this.delete();","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"EvitanRelta"},"content":"                case \"list\":","lastModifiedDate":"2023-01-16"},{"lineNumber":78,"author":{"gitId":"EvitanRelta"},"content":"                    this.list();","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-16"},{"lineNumber":80,"author":{"gitId":"EvitanRelta"},"content":"                case \"find\":","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"EvitanRelta"},"content":"                    this.find();","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"EvitanRelta"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"EvitanRelta"},"content":"                case \"q\":","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"EvitanRelta"},"content":"                case \"quit\":","lastModifiedDate":"2023-01-16"},{"lineNumber":85,"author":{"gitId":"EvitanRelta"},"content":"                case \"exit\":","lastModifiedDate":"2023-01-16"},{"lineNumber":86,"author":{"gitId":"EvitanRelta"},"content":"                case \"bye\":","lastModifiedDate":"2023-01-16"},{"lineNumber":87,"author":{"gitId":"EvitanRelta"},"content":"                    this.ui.show(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"EvitanRelta"},"content":"                    break whileLoop;","lastModifiedDate":"2023-01-16"},{"lineNumber":89,"author":{"gitId":"EvitanRelta"},"content":"                default:","lastModifiedDate":"2023-01-16"},{"lineNumber":90,"author":{"gitId":"EvitanRelta"},"content":"                    throw new DukeInvalidCommandException();","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"EvitanRelta"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"EvitanRelta"},"content":"                this.storage.save(this.tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"EvitanRelta"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"EvitanRelta"},"content":"                this.ui.showError(e);","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"EvitanRelta"},"content":"            }","lastModifiedDate":"2023-01-16"},{"lineNumber":97,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":98,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":99,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":101,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":102,"author":{"gitId":"EvitanRelta"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"EvitanRelta"},"content":"        new Duke().run();","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the adding of todo-type tasks by the \"todo\" command.","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeInvalidArgumentException If no description given.","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"EvitanRelta"},"content":"    private void addTodo() throws DukeInvalidArgumentException {","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.hasEmptyBody()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"EvitanRelta"},"content":"        String description \u003d this.currentCommand.body;","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"EvitanRelta"},"content":"        Task task \u003d new TaskTodo(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"EvitanRelta"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.show(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"EvitanRelta"},"content":"                + \"  \" + task.toString() + \"\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":121,"author":{"gitId":"EvitanRelta"},"content":"                + this.tasks.getStatus());","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":123,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":124,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":125,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the adding of deadline-type tasks by the \"deadline\" command.","lastModifiedDate":"2023-01-27"},{"lineNumber":126,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeInvalidArgumentException If no or invalid description/by-param are given.","lastModifiedDate":"2023-01-27"},{"lineNumber":128,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"EvitanRelta"},"content":"    private void addDeadline() throws DukeInvalidArgumentException {","lastModifiedDate":"2023-01-27"},{"lineNumber":130,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.hasEmptyBody()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":131,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":132,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":133,"author":{"gitId":"EvitanRelta"},"content":"        if (!this.currentCommand.namedParameters.containsKey(\"by\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The \\\"/by\\\" parameter of a deadline is missing.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":135,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":136,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.namedParameters.get(\"by\").isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":137,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The \\\"/by\\\" parameter of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":138,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":139,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-19"},{"lineNumber":140,"author":{"gitId":"EvitanRelta"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":141,"author":{"gitId":"EvitanRelta"},"content":"            String description \u003d this.currentCommand.body;","lastModifiedDate":"2023-01-27"},{"lineNumber":142,"author":{"gitId":"EvitanRelta"},"content":"            Task task \u003d new TaskDeadline(description, this.currentCommand.namedParameters.get(\"by\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":143,"author":{"gitId":"EvitanRelta"},"content":"            this.tasks.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"EvitanRelta"},"content":"            this.ui.show(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"EvitanRelta"},"content":"                    + \"  \" + task.toString() + \"\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":146,"author":{"gitId":"EvitanRelta"},"content":"                    + this.tasks.getStatus());","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"EvitanRelta"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":148,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-27"},{"lineNumber":149,"author":{"gitId":"EvitanRelta"},"content":"                    \"The \\\"/by\\\" value must be in the form \\\"yyyy-mm-dd\\\" (eg. 2019-10-15).\");","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":151,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":152,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":153,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":154,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the adding of event-type tasks by the \"event\" command.","lastModifiedDate":"2023-01-27"},{"lineNumber":155,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeInvalidArgumentException If no or invalid description/from-param/to-param are given.","lastModifiedDate":"2023-01-27"},{"lineNumber":157,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":158,"author":{"gitId":"EvitanRelta"},"content":"    private void addEvent() throws DukeInvalidArgumentException {","lastModifiedDate":"2023-01-27"},{"lineNumber":159,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.hasEmptyBody()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":160,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":161,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":162,"author":{"gitId":"EvitanRelta"},"content":"        if (!this.currentCommand.namedParameters.containsKey(\"from\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":163,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The \\\"/from\\\" parameter of an event is missing.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":164,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":165,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.namedParameters.get(\"from\").isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":166,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The \\\"/from\\\" parameter of an event cannot be empty.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":167,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":168,"author":{"gitId":"EvitanRelta"},"content":"        if (!this.currentCommand.namedParameters.containsKey(\"to\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":169,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The \\\"/to\\\" parameter of an event is missing.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":170,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":171,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.namedParameters.get(\"to\").isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":172,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"The \\\"/to\\\" parameter of an event cannot be empty.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":173,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":174,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":175,"author":{"gitId":"EvitanRelta"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":176,"author":{"gitId":"EvitanRelta"},"content":"            String description \u003d this.currentCommand.body;","lastModifiedDate":"2023-01-27"},{"lineNumber":177,"author":{"gitId":"EvitanRelta"},"content":"            Task task \u003d new TaskEvent(","lastModifiedDate":"2023-01-17"},{"lineNumber":178,"author":{"gitId":"EvitanRelta"},"content":"                    description, ","lastModifiedDate":"2023-01-17"},{"lineNumber":179,"author":{"gitId":"EvitanRelta"},"content":"                    this.currentCommand.namedParameters.get(\"from\"), ","lastModifiedDate":"2023-01-27"},{"lineNumber":180,"author":{"gitId":"EvitanRelta"},"content":"                    this.currentCommand.namedParameters.get(\"to\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":181,"author":{"gitId":"EvitanRelta"},"content":"            this.tasks.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":182,"author":{"gitId":"EvitanRelta"},"content":"            this.ui.show(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":183,"author":{"gitId":"EvitanRelta"},"content":"                    + \"  \" + task.toString() + \"\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":184,"author":{"gitId":"EvitanRelta"},"content":"                    + this.tasks.getStatus());","lastModifiedDate":"2023-01-28"},{"lineNumber":185,"author":{"gitId":"EvitanRelta"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":186,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-27"},{"lineNumber":187,"author":{"gitId":"EvitanRelta"},"content":"                    \"The \\\"/from\\\" and \\\"/to\\\" values must be in the form \\\"yyyy-mm-dd\\\" (eg. 2019-10-15).\");","lastModifiedDate":"2023-01-28"},{"lineNumber":188,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":189,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":190,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":191,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":192,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the marking of tasks as done, by the \"mark\" command.","lastModifiedDate":"2023-01-27"},{"lineNumber":193,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":194,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeInvalidArgumentException If no or invalid task-index is given.","lastModifiedDate":"2023-01-27"},{"lineNumber":195,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":196,"author":{"gitId":"EvitanRelta"},"content":"    private void mark() throws DukeInvalidArgumentException {","lastModifiedDate":"2023-01-27"},{"lineNumber":197,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.hasEmptyBody()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":198,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"No task index given.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":199,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":200,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-18"},{"lineNumber":201,"author":{"gitId":"EvitanRelta"},"content":"        Predicate\u003cString\u003e isNumeric \u003d str -\u003e str.matches(\"^-?\\\\d+$\");","lastModifiedDate":"2023-01-18"},{"lineNumber":202,"author":{"gitId":"EvitanRelta"},"content":"        int taskIndex \u003d Optional.of(this.currentCommand.body)","lastModifiedDate":"2023-01-27"},{"lineNumber":203,"author":{"gitId":"EvitanRelta"},"content":"                .filter(isNumeric)","lastModifiedDate":"2023-01-18"},{"lineNumber":204,"author":{"gitId":"EvitanRelta"},"content":"                .map(body -\u003e Integer.parseInt(body) - 1)","lastModifiedDate":"2023-01-18"},{"lineNumber":205,"author":{"gitId":"EvitanRelta"},"content":"                .filter(i -\u003e i \u003e\u003d 0)","lastModifiedDate":"2023-01-18"},{"lineNumber":206,"author":{"gitId":"EvitanRelta"},"content":"                .orElseThrow(() -\u003e new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-18"},{"lineNumber":207,"author":{"gitId":"EvitanRelta"},"content":"                        \"Invalid task index. Index needs to be a positive integer.\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":208,"author":{"gitId":"EvitanRelta"},"content":"        Task task \u003d Optional.of(taskIndex)","lastModifiedDate":"2023-01-18"},{"lineNumber":209,"author":{"gitId":"EvitanRelta"},"content":"                .filter(index -\u003e index \u003c this.tasks.size())","lastModifiedDate":"2023-01-27"},{"lineNumber":210,"author":{"gitId":"EvitanRelta"},"content":"                .map(index -\u003e this.tasks.get(index))","lastModifiedDate":"2023-01-27"},{"lineNumber":211,"author":{"gitId":"EvitanRelta"},"content":"                .orElseThrow(() -\u003e new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-18"},{"lineNumber":212,"author":{"gitId":"EvitanRelta"},"content":"                        \"Task index is beyond the range of the task list.\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":213,"author":{"gitId":"EvitanRelta"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-16"},{"lineNumber":214,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.show(\"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + task.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":215,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":216,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":217,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":218,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the marking of tasks as not done, by the \"unmark\" command.","lastModifiedDate":"2023-01-27"},{"lineNumber":219,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":220,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeInvalidArgumentException If no or invalid task-index is given.","lastModifiedDate":"2023-01-27"},{"lineNumber":221,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":222,"author":{"gitId":"EvitanRelta"},"content":"    private void unmark() throws DukeInvalidArgumentException {","lastModifiedDate":"2023-01-27"},{"lineNumber":223,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.hasEmptyBody()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":224,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"No task index given.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":225,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":226,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-18"},{"lineNumber":227,"author":{"gitId":"EvitanRelta"},"content":"        Predicate\u003cString\u003e isNumeric \u003d str -\u003e str.matches(\"^-?\\\\d+$\");","lastModifiedDate":"2023-01-18"},{"lineNumber":228,"author":{"gitId":"EvitanRelta"},"content":"        int taskIndex \u003d Optional.of(this.currentCommand.body)","lastModifiedDate":"2023-01-27"},{"lineNumber":229,"author":{"gitId":"EvitanRelta"},"content":"                .filter(isNumeric)","lastModifiedDate":"2023-01-18"},{"lineNumber":230,"author":{"gitId":"EvitanRelta"},"content":"                .map(body -\u003e Integer.parseInt(body) - 1)","lastModifiedDate":"2023-01-18"},{"lineNumber":231,"author":{"gitId":"EvitanRelta"},"content":"                .filter(i -\u003e i \u003e\u003d 0)","lastModifiedDate":"2023-01-18"},{"lineNumber":232,"author":{"gitId":"EvitanRelta"},"content":"                .orElseThrow(() -\u003e new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-18"},{"lineNumber":233,"author":{"gitId":"EvitanRelta"},"content":"                        \"Invalid task index. Index needs to be a positive integer.\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":234,"author":{"gitId":"EvitanRelta"},"content":"        Task task \u003d Optional.of(taskIndex)","lastModifiedDate":"2023-01-18"},{"lineNumber":235,"author":{"gitId":"EvitanRelta"},"content":"                .filter(index -\u003e index \u003c this.tasks.size())","lastModifiedDate":"2023-01-27"},{"lineNumber":236,"author":{"gitId":"EvitanRelta"},"content":"                .map(index -\u003e this.tasks.get(index))","lastModifiedDate":"2023-01-27"},{"lineNumber":237,"author":{"gitId":"EvitanRelta"},"content":"                .orElseThrow(() -\u003e new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-18"},{"lineNumber":238,"author":{"gitId":"EvitanRelta"},"content":"                        \"Task index is beyond the range of the task list.\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":239,"author":{"gitId":"EvitanRelta"},"content":"        task.markAsNotDone();","lastModifiedDate":"2023-01-16"},{"lineNumber":240,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.show(\"OK, I\u0027ve marked this task as not done yet:\\n\" + \"  \" + task.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":241,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":242,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":243,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":244,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":245,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the deleting of tasks by the \"delete\" command.","lastModifiedDate":"2023-01-27"},{"lineNumber":246,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":247,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeInvalidArgumentException If no or invalid task-index is given.","lastModifiedDate":"2023-01-27"},{"lineNumber":248,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":249,"author":{"gitId":"EvitanRelta"},"content":"    private void delete() throws DukeInvalidArgumentException {","lastModifiedDate":"2023-01-27"},{"lineNumber":250,"author":{"gitId":"EvitanRelta"},"content":"        if (this.currentCommand.hasEmptyBody()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":251,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeInvalidArgumentException(\"No task index given.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":252,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":253,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-19"},{"lineNumber":254,"author":{"gitId":"EvitanRelta"},"content":"        Predicate\u003cString\u003e isNumeric \u003d str -\u003e str.matches(\"^-?\\\\d+$\");","lastModifiedDate":"2023-01-19"},{"lineNumber":255,"author":{"gitId":"EvitanRelta"},"content":"        int taskIndex \u003d Optional.of(this.currentCommand.body)","lastModifiedDate":"2023-01-27"},{"lineNumber":256,"author":{"gitId":"EvitanRelta"},"content":"                .filter(isNumeric)","lastModifiedDate":"2023-01-19"},{"lineNumber":257,"author":{"gitId":"EvitanRelta"},"content":"                .map(body -\u003e Integer.parseInt(body) - 1)","lastModifiedDate":"2023-01-19"},{"lineNumber":258,"author":{"gitId":"EvitanRelta"},"content":"                .filter(i -\u003e i \u003e\u003d 0)","lastModifiedDate":"2023-01-19"},{"lineNumber":259,"author":{"gitId":"EvitanRelta"},"content":"                .orElseThrow(() -\u003e new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-19"},{"lineNumber":260,"author":{"gitId":"EvitanRelta"},"content":"                        \"Invalid task index. Index needs to be a positive integer.\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":261,"author":{"gitId":"EvitanRelta"},"content":"        Task task \u003d Optional.of(taskIndex)","lastModifiedDate":"2023-01-19"},{"lineNumber":262,"author":{"gitId":"EvitanRelta"},"content":"                .filter(index -\u003e index \u003c this.tasks.size())","lastModifiedDate":"2023-01-27"},{"lineNumber":263,"author":{"gitId":"EvitanRelta"},"content":"                .map(index -\u003e this.tasks.get(index))","lastModifiedDate":"2023-01-27"},{"lineNumber":264,"author":{"gitId":"EvitanRelta"},"content":"                .orElseThrow(() -\u003e new DukeInvalidArgumentException(","lastModifiedDate":"2023-01-19"},{"lineNumber":265,"author":{"gitId":"EvitanRelta"},"content":"                        \"Task index is beyond the range of the task list.\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":266,"author":{"gitId":"EvitanRelta"},"content":"        this.tasks.remove(taskIndex);","lastModifiedDate":"2023-01-27"},{"lineNumber":267,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.show(\"Noted. I\u0027ve removed this task:\\n\" + \"  \" + task.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":268,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":269,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":270,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":271,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the listing of tasks by the \"list\" command.","lastModifiedDate":"2023-01-27"},{"lineNumber":272,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":273,"author":{"gitId":"EvitanRelta"},"content":"    private void list() {","lastModifiedDate":"2023-01-27"},{"lineNumber":274,"author":{"gitId":"EvitanRelta"},"content":"        String header \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":275,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.show(header + this.tasks.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":276,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":277,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":278,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":279,"author":{"gitId":"EvitanRelta"},"content":"     * Handles the finding of tasks using keywords, by the \"find\" command.","lastModifiedDate":"2023-01-28"},{"lineNumber":280,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":281,"author":{"gitId":"EvitanRelta"},"content":"    private void find() {","lastModifiedDate":"2023-01-28"},{"lineNumber":282,"author":{"gitId":"EvitanRelta"},"content":"        String keyword \u003d this.currentCommand.body;","lastModifiedDate":"2023-01-28"},{"lineNumber":283,"author":{"gitId":"EvitanRelta"},"content":"        Task[] matchingTasks \u003d this.tasks.stream()","lastModifiedDate":"2023-01-28"},{"lineNumber":284,"author":{"gitId":"EvitanRelta"},"content":"                .filter(task -\u003e task.description.contains(keyword))","lastModifiedDate":"2023-01-28"},{"lineNumber":285,"author":{"gitId":"EvitanRelta"},"content":"                .toArray(Task[]::new);","lastModifiedDate":"2023-01-28"},{"lineNumber":286,"author":{"gitId":"EvitanRelta"},"content":"        TaskList matchingTaskList \u003d new TaskList(matchingTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":287,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":288,"author":{"gitId":"EvitanRelta"},"content":"        String header \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":289,"author":{"gitId":"EvitanRelta"},"content":"        this.ui.show(header + matchingTaskList.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":290,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"EvitanRelta":284,"-":7}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":" * The class that handles parsing of commands for Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"public class Parser {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    /** The full command, including any descriptions/params. */","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    private final String fullCommand;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"    /** The base command (eg. the \"todo\" in full command: \"todo DESCRIPTION\"). */","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    public final String baseCommand;","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"    /** ","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"     * The main body of the command; excluding any params.","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"     * (eg. the \"DESCRIPTION\" in \"deadline DESCRIPTION /by 2023-01-23\")","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"    public final String body;","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"     * The params mapping in the command, indicated via /PARAM_NAME.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"     * (eg. \"deadline DESCRIPTION /by 2023-01-23\" will have a entry with \"by\" as ","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"     * the key and \"2023-01-23\" as the value)","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"    public final HashMap\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"    /** ","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"     * Parses a command and break it down into its base command, body and ","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"     * params. ","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"    public Parser(String command) {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"        this.fullCommand \u003d command;","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"        String[] splittedCommand \u003d command.split(\" +\", 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"        this.baseCommand \u003d splittedCommand[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"        String rawBody \u003d splittedCommand.length \u003e 1 ? splittedCommand[1].trim() : \"\";","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"        String body \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"        boolean isFirstElement \u003d true;","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"        for (String str : rawBody.split(\"\\\\s+/\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"            if (isFirstElement) {","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"                isFirstElement \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"                body \u003d str;","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"                continue;","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"            String[] splittedParam \u003d str.split(\" +\", 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"            namedParameters.put(splittedParam[0], splittedParam.length \u003e 1 ? splittedParam[1] : \"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"        this.body \u003d body;","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"     * Checks if the command\u0027s body is empty (ie. command has no body).","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"     * @return Whether the command\u0027s body is empty.","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"    public boolean hasEmptyBody() {","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"        return this.body.isEmpty();","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"        return fullCommand;","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"EvitanRelta":62}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"import duke.exceptions.DukeSaveLoadException;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":" * The class that handling the saving/loading of persistent data for Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"public class Storage {","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    /** The data\u0027s save file\u0027s path. */","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"    private String filePath;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"     * Initialise a \u0027Storage\u0027 instance.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"     * @param filePath The data\u0027s save file\u0027s path.","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"     * Reads the contents of a file, and return it.","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"     * @param filePath The path of the file to be read.","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"     * @return Contents of the file.","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"    private static String readFile(String filePath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"            return new String(Files.readAllBytes(Paths.get(filePath)));","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"            return null;","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"        } ","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"     * Writes a string into the file (overwriting the old contents).","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"     * @param filePath The path of the file to be written to.","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"     * @param content The contents to write into the file.","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeSaveLoadException If there\u0027s an error accessing/writing to the file.","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"    private static void writeStringToFile(String filePath, String content) throws DukeSaveLoadException {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"        try (FileWriter writer \u003d new FileWriter(filePath)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"            writer.write(content);","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeSaveLoadException(\"There\u0027s an error writing to save file.\");","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"     * Loads the locally-saved data, and parse it into a \u0027TaskList\u0027 instance.","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"     * @return The loaded task list from the save file.","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeSaveLoadException If there\u0027s an error parsing the save file.","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"    public TaskList load() throws DukeSaveLoadException {","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"EvitanRelta"},"content":"        String saveFileContents \u003d Storage.readFile(this.filePath);","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"EvitanRelta"},"content":"        TaskList output \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"EvitanRelta"},"content":"        if (saveFileContents \u003d\u003d null || saveFileContents.isBlank()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"EvitanRelta"},"content":"            return output;","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"EvitanRelta"},"content":"        for (String encodedTask : saveFileContents.split(\"\\n\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"EvitanRelta"},"content":"            Task task \u003d Task.loadFromString(encodedTask);","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"EvitanRelta"},"content":"            output.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"EvitanRelta"},"content":"        return output;","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"EvitanRelta"},"content":"     * Saves a task list into a local file, to be loaded later.","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"EvitanRelta"},"content":"     * @param tasks The task list to be saved.","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeSaveLoadException If there\u0027s an error accessing/writing to the file.","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"EvitanRelta"},"content":"    public void save(TaskList tasks) throws DukeSaveLoadException {","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"EvitanRelta"},"content":"        Storage.writeStringToFile(this.filePath, tasks.encodeAsString());","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":86}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":" * The class that handling the UI of Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"public class Ui {","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    /** The indentation of the printed output. */","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"    private static final int INDENT_LEVEL \u003d 4;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    /** The scanner that is used to read the command-line inputs. */","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"     * Displays the error in the console UI.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"     * @param e The error to show.","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"    public void showError(DukeException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"        this.show(e.getDukeMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"     * Formats and display a string into the console UI.","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"     * @param whatToShow What to show.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"    public void show(String whatToShow) {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"        String indentation \u003d \" \".repeat(Ui.INDENT_LEVEL);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"        String horizontalLine \u003d \"_\".repeat(60);","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"        String indentedInput \u003d whatToShow.replaceAll(\"(?\u003c\u003d^|\\n)\", indentation);","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"        System.out.println(indentation + horizontalLine);","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"        System.out.println(indentedInput);","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"        System.out.println(indentation + horizontalLine + \u0027\\n\u0027);","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"     * Checks whether there\u0027s a user command waiting to be parsed.","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"     * @return Whether there\u0027s a user command.","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"    public boolean hasCommand() {","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"        return this.scanner.hasNextLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"     * Gets the next user command.","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"     * @return The next user command.","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"    public String readCommand() {","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"        return this.scanner.nextLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"     * Stops the scanning of the console for user commands. After this method is ","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"     * called, \u0027hasCommand\u0027 and \u0027readCommand\u0027 will stop working.","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"    public void close() {","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"        this.scanner.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":64}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":" * A Duke-related exception.","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":" * Any Duke-related exceptions should inherit from this class.","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    /** The error-message-prefix for Duke to display. */","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    protected final static String DUKE_MESSAGE_PREFIX \u003d \":( OOPS!!! \";","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"    public DukeException() {","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"        super();","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"        super(message);","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"     * Gets the formatted error message to be displayed in Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"     * @return Formatted error message.","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"    public String getDukeMessage() {","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"        return DukeException.DUKE_MESSAGE_PREFIX + this.getMessage();","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"EvitanRelta":26}},{"path":"src/main/java/duke/exceptions/DukeInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":" * The exception that\u0027s thrown when a command is given invalid arguments.","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":" * (eg. \"mark NOT_AN_INDEX\", \"deadline EMPTY_BY_PARAM /by\")","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"public class DukeInvalidArgumentException extends DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    public DukeInvalidArgumentException(String message) {","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"        super(message);","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"EvitanRelta":12}},{"path":"src/main/java/duke/exceptions/DukeInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":" * The exception that\u0027s thrown when an invalid base command is entered into Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":" * An example of a base command is the \"unknowncommand\" in ","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":" * \"unknowncommand DESCRIPTION /param PARAM VALUE\".","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"public class DukeInvalidCommandException extends DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    /** Default error message for invalid commands in Duke. */","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    protected static final String INVALID_COMMAND_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    public DukeInvalidCommandException() {","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"        super(DukeInvalidCommandException.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"EvitanRelta":15}},{"path":"src/main/java/duke/exceptions/DukeSaveLoadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":" * The exception that\u0027s thrown when there\u0027s a problem with saving/loading Duke\u0027s","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":" * saved data.","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"public class DukeSaveLoadException extends DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    public DukeSaveLoadException(String message) {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"        super(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":11}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"import duke.exceptions.DukeSaveLoadException;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":" * A task.","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    /** The description of the task. */","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    public final String description;","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"    /** Whether the task is done. */","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"     * Encodes an array of arbitrary values into a single-line string for ","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"     * saving into a file.","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"     * Since the delimiter \" | \" is used in the encoding, any vertical bar \"|\" ","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"     * in the values is escaped.","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"     * @param values The array of values to encode.","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"     * @return The encoded values.","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"    protected static String encodeValues(String[] values) {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"        UnaryOperator\u003cString\u003e escapeVerticalBar \u003d str -\u003e str.replace(\"|\", \"\\\\|\");","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"        return Stream.of(values)","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"                .map(escapeVerticalBar)","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"                .collect(Collectors.joining(\" | \"));","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"     * Decodes an encoded string of values (encoded by \u0027encodeValues\u0027) into an ","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"     * array.","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"     * Since the delimiter \" | \" is used in the encoding, any escaped vertical ","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"     * bar \"|\" in encoded string is unescaped before returning.","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"     * @param encodedValues The encoded values.","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"     * @return The deencoded array of values.","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"EvitanRelta"},"content":"    protected static String[] decodeValues(String encodedValues) {","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"EvitanRelta"},"content":"        UnaryOperator\u003cString\u003e unescapeVerticalBar \u003d str -\u003e str.replace(\"\\\\|\", \"|\");","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"EvitanRelta"},"content":"        return Stream.of(encodedValues.split(\" \\\\| \"))","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"EvitanRelta"},"content":"                .map(unescapeVerticalBar)","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"EvitanRelta"},"content":"                .toArray(String[]::new);","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"EvitanRelta"},"content":"     * Parses a task that has been encoded into a string, into a \u0027Task\u0027 instance.","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"EvitanRelta"},"content":"     * @param input The encoded task.","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"EvitanRelta"},"content":"     * @return The task that was encoded.","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeSaveLoadException If there\u0027s a problem in parsing the encoded task.","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"EvitanRelta"},"content":"    public static Task loadFromString(String input) throws DukeSaveLoadException {","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"EvitanRelta"},"content":"        String[] values \u003d Task.decodeValues(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"EvitanRelta"},"content":"        String taskType \u003d values[0];","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"EvitanRelta"},"content":"        switch (taskType) {","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"EvitanRelta"},"content":"        case \"T\":","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"EvitanRelta"},"content":"            return TaskTodo.loadFromString(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"EvitanRelta"},"content":"        case \"D\":","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"EvitanRelta"},"content":"            return TaskDeadline.loadFromString(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"EvitanRelta"},"content":"        case \"E\":","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"EvitanRelta"},"content":"            return TaskEvent.loadFromString(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"EvitanRelta"},"content":"        default:","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"EvitanRelta"},"content":"            String errorMessage \u003d String.format(\"Unknown task in save-file: \\\"%s\\\"\", input);","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"EvitanRelta"},"content":"            throw new DukeSaveLoadException(errorMessage);","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"EvitanRelta"},"content":"    ","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"EvitanRelta"},"content":"     * Encodes this task into a string.","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"EvitanRelta"},"content":"     * @return The encoded task.","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"EvitanRelta"},"content":"    public abstract String encodeAsString();","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":101,"author":{"gitId":"EvitanRelta"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":102,"author":{"gitId":"EvitanRelta"},"content":"        String statusIcon \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2023-01-16"},{"lineNumber":103,"author":{"gitId":"EvitanRelta"},"content":"        return String.format(\"[%s] %s\", statusIcon, description);","lastModifiedDate":"2023-01-16"},{"lineNumber":104,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":105,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"EvitanRelta"},"content":"     * Formats a date for displaying in Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"EvitanRelta"},"content":"     * @param date The date to format.","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"EvitanRelta"},"content":"     * @return The formatted date string.","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"EvitanRelta"},"content":"    protected static String formatDate(LocalDate date) {","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"EvitanRelta"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":114,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"EvitanRelta"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-27"},{"lineNumber":118,"author":{"gitId":"EvitanRelta"},"content":"        if (!(obj instanceof Task)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":120,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":121,"author":{"gitId":"EvitanRelta"},"content":"        Task other \u003d (Task) obj;","lastModifiedDate":"2023-01-27"},{"lineNumber":122,"author":{"gitId":"EvitanRelta"},"content":"        if (other.isDone !\u003d this.isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":123,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":124,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":125,"author":{"gitId":"EvitanRelta"},"content":"        if (!other.description.equals(this.description)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":126,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":127,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":128,"author":{"gitId":"EvitanRelta"},"content":"        return true;","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":130,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"EvitanRelta":130}},{"path":"src/main/java/duke/tasks/TaskDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":" * A task with a specified ending time.","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"public class TaskDeadline extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    /** The ending time for this deadline task. */","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    public final LocalDate endTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    public TaskDeadline(String description, String endTime) {","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"        super(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"        this.endTime \u003d LocalDate.parse(endTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"     * Parses a deadline task that has been encoded into a string, into a ","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"     * \u0027TaskDeadline\u0027 instance.","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"     * @param input The encoded deadline task.","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"     * @return The deadline task that was encoded.","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeSaveLoadException If there\u0027s a problem in parsing the encoded task.","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"    public static TaskDeadline loadFromString(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"        String[] values \u003d Task.decodeValues(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"        boolean isDone \u003d values[1].equals(\"1\");","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"        String description \u003d values[2];","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"        String endTime \u003d values[3];","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"        TaskDeadline output \u003d new TaskDeadline(description, endTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"            output.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"        return output;","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"    public String encodeAsString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"        return Task.encodeValues(new String[]{","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"                \"D\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"                this.isDone ? \"1\" : \"0\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"                this.description.toString(), ","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"                this.endTime.toString() });","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"        return String.format(","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"                \"[D]%s (by: %s)\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"                super.toString(), ","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"                Task.formatDate(this.endTime));","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"        if (!super.equals(obj)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"        if (!(obj instanceof TaskDeadline)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"EvitanRelta"},"content":"        TaskDeadline other \u003d (TaskDeadline) obj;","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"EvitanRelta"},"content":"        if (!other.endTime.equals(other.endTime)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"EvitanRelta"},"content":"        return true;","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"EvitanRelta":69}},{"path":"src/main/java/duke/tasks/TaskEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":" * A task with a specified starting and ending times.","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"public class TaskEvent extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    /** The starting time for this event task. */","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    public final LocalDate fromTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"    /** The ending time for this event task. */","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    public final LocalDate toTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    public TaskEvent(String description, String fromTime, String toTime) {","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"        super(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"        this.fromTime \u003d LocalDate.parse(fromTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"        this.toTime \u003d LocalDate.parse(toTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"     * Parses a event task that has been encoded into a string, into a ","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"     * \u0027TaskEvent\u0027 instance.","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"     * @param input The encoded event task.","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"     * @return The event task that was encoded.","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeSaveLoadException If there\u0027s a problem in parsing the encoded task.","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"    public static TaskEvent loadFromString(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"        String[] values \u003d Task.decodeValues(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"        boolean isDone \u003d values[1].equals(\"1\");","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"        String description \u003d values[2];","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"        String fromTime \u003d values[3];","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"        String toTime \u003d values[4];","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"        TaskEvent output \u003d new TaskEvent(description, fromTime, toTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"            output.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"        return output;","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"    public String encodeAsString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"        return Task.encodeValues(new String[]{ ","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"                \"E\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"                this.isDone ? \"1\" : \"0\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"                this.description, ","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"                this.fromTime.toString(), ","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"                this.toTime.toString() });","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"        return String.format(","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"                \"[E]%s (from: %s to: %s)\", ","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"                super.toString(), ","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"                Task.formatDate(this.fromTime), ","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"                Task.formatDate(this.toTime));","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"EvitanRelta"},"content":"        if (!super.equals(obj)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"EvitanRelta"},"content":"        if (!(obj instanceof TaskEvent)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"EvitanRelta"},"content":"        TaskEvent other \u003d (TaskEvent) obj;","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"EvitanRelta"},"content":"        if (!other.fromTime.equals(this.fromTime)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"EvitanRelta"},"content":"        if (!other.toTime.equals(this.toTime)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"EvitanRelta"},"content":"        return true;","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"EvitanRelta":78}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"import java.util.Collection;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":" * A list of tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"    public TaskList(Collection\u003c? extends Task\u003e tasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"        super(tasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"    ","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"    public TaskList(Task[] tasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"        super(Arrays.asList(tasks));","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"     * Gets the summary status message to be displayed in Duke. ","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"     * @return Summary status message.","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"    public String getStatus() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"        switch (this.size()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"        case 0:","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"            return \"Now you have no tasks in the list.\";","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"        case 1:","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"            return \"Now you have 1 task in the list.\";","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"        default:","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"            return String.format(\"Now you have %d task in the list.\", this.size());","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"    ","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"     * Encodes this task list into a string.","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"     * @return The encoded task list.","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"    public String encodeAsString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"        return this.stream()","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"                .map(task -\u003e task.encodeAsString())","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"                .collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"        if (this.isEmpty()) {","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"            return \"Nothing in the list.\";","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"EvitanRelta"},"content":"        ","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"EvitanRelta"},"content":"        int listIndex \u003d 1;","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"EvitanRelta"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"EvitanRelta"},"content":"        for (Task task : this) {","lastModifiedDate":"2023-01-16"},{"lineNumber":60,"author":{"gitId":"EvitanRelta"},"content":"            output.append(listIndex + \". \" + task.toString() + \"\\n\");","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"EvitanRelta"},"content":"            listIndex++;","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"EvitanRelta"},"content":"        // Removes trailing newline.","lastModifiedDate":"2023-01-16"},{"lineNumber":64,"author":{"gitId":"EvitanRelta"},"content":"        output.setLength(output.length() - 1);","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"EvitanRelta"},"content":"        return output.toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":67,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"EvitanRelta":67}},{"path":"src/main/java/duke/tasks/TaskTodo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":" * A task with no specified starting/ending times.","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"public class TaskTodo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"    public TaskTodo(String description) {","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"        super(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"     * Parses a todo task that has been encoded into a string, into a ","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"     * \u0027TaskTodo\u0027 instance.","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"     * ","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"     * @param input The encoded todo task.","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"     * @return The todo task that was encoded.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"     * @throws DukeSaveLoadException If there\u0027s a problem in parsing the encoded task.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"    public static TaskTodo loadFromString(String input) {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"        String[] values \u003d Task.decodeValues(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"        boolean isDone \u003d values[1].equals(\"1\");","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"        String description \u003d values[2];","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"        TaskTodo output \u003d new TaskTodo(description);","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"            output.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"        return output;","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"    public String encodeAsString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"        return Task.encodeValues(new String[]{ ","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"                \"T\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"                this.isDone ? \"1\" : \"0\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"                this.description });","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"    ","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"        if (!super.equals(obj)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"        if (!(obj instanceof TaskTodo)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"            return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"        return true;","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"EvitanRelta":54}},{"path":"src/test/java/duke/exceptions/DukeInvalidArgumentExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"public class DukeInvalidArgumentExceptionTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    public void getMessage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"        String message \u003d \"ERROR MESSAGE\";","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"        DukeInvalidArgumentException exception \u003d new DukeInvalidArgumentException(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(exception.getMessage(), message);","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    public void getDukeMessage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"        String message \u003d \"ERROR MESSAGE\";","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"        DukeInvalidArgumentException exception \u003d new DukeInvalidArgumentException(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(exception.getMessage(), message);","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"                exception.getDukeMessage(), ","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"                DukeException.DUKE_MESSAGE_PREFIX + message);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":23}},{"path":"src/test/java/duke/exceptions/DukeInvalidCommandExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"public class DukeInvalidCommandExceptionTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    public void getMessage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"        String message \u003d DukeInvalidCommandException.INVALID_COMMAND_MESSAGE;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"        DukeInvalidCommandException exception \u003d new DukeInvalidCommandException();","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(exception.getMessage(), message);","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    public void getDukeMessage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"        String message \u003d DukeInvalidCommandException.INVALID_COMMAND_MESSAGE;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"        DukeInvalidCommandException exception \u003d new DukeInvalidCommandException();","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(exception.getMessage(), message);","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"                exception.getDukeMessage(), ","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"                DukeException.DUKE_MESSAGE_PREFIX + message);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":23}},{"path":"src/test/java/duke/exceptions/DukeSaveLoadExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"public class DukeSaveLoadExceptionTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    public void getMessage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"        String message \u003d \"ERROR MESSAGE\";","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"        DukeSaveLoadException exception \u003d new DukeSaveLoadException(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(exception.getMessage(), message);","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    public void getDukeMessage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"        String message \u003d \"ERROR MESSAGE\";","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"        DukeSaveLoadException exception \u003d new DukeSaveLoadException(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(exception.getMessage(), message);","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"                exception.getDukeMessage(), ","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"                DukeException.DUKE_MESSAGE_PREFIX + message);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":23}},{"path":"src/test/java/duke/tasks/TaskDeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"public class TaskDeadlineTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_UNESCAPED_DESC \u003d \"VERTICAL | BAR\";","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_ESCAPED_DESC \u003d \"VERTICAL \\\\| BAR\";","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_END_DATE \u003d \"2023-01-27\";","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_ENCODED_TASK \u003d String.format(","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"            \"D | 1 | %s | %s\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"            TaskDeadlineTest.TEST_ESCAPED_DESC, ","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"            TaskDeadlineTest.TEST_END_DATE);","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"    ","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"    private static TaskDeadline getTestTask() {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"        TaskDeadline task \u003d new TaskDeadline(","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"                TaskDeadlineTest.TEST_UNESCAPED_DESC, ","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"                TaskDeadlineTest.TEST_END_DATE);","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"        return task;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    public void equals() {","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"                TaskDeadlineTest.getTestTask(),","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"                TaskDeadlineTest.getTestTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"    public void encodeAsString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"        TaskDeadline task \u003d TaskDeadlineTest.getTestTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(task.encodeAsString(), TaskDeadlineTest.TEST_ENCODED_TASK);","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"    public void loadFromString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"        TaskDeadline expectedTask \u003d TaskDeadlineTest.getTestTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"        TaskDeadline loadedTask \u003d TaskDeadline.loadFromString(TaskDeadlineTest.TEST_ENCODED_TASK);","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(loadedTask, expectedTask);","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":42}},{"path":"src/test/java/duke/tasks/TaskEventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"public class TaskEventTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_UNESCAPED_DESC \u003d \"VERTICAL | BAR\";","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_ESCAPED_DESC \u003d \"VERTICAL \\\\| BAR\";","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_FROM_DATE \u003d \"2023-01-23\";","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_TO_DATE \u003d \"2023-01-25\";","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_ENCODED_TASK \u003d String.format(","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"            \"E | 1 | %s | %s | %s\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"            TaskEventTest.TEST_ESCAPED_DESC, ","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"            TaskEventTest.TEST_FROM_DATE,","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"            TaskEventTest.TEST_TO_DATE);","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"    private static TaskEvent getTestTask() {","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"        TaskEvent task \u003d new TaskEvent(","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"                TaskEventTest.TEST_UNESCAPED_DESC, ","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"                TaskEventTest.TEST_FROM_DATE,","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"                TaskEventTest.TEST_TO_DATE);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"        return task;","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"    public void equals() {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"                TaskEventTest.getTestTask(),","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"                TaskEventTest.getTestTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"    public void encodeAsString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"        TaskEvent task \u003d TaskEventTest.getTestTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(task.encodeAsString(), TaskEventTest.TEST_ENCODED_TASK);","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"    public void loadFromString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"        TaskEvent expectedTask \u003d TaskEventTest.getTestTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"        TaskEvent loadedTask \u003d TaskEvent.loadFromString(TaskEventTest.TEST_ENCODED_TASK);","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(loadedTask, expectedTask);","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":45}},{"path":"src/test/java/duke/tasks/TaskTodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"public class TaskTodoTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_UNESCAPED_DESC \u003d \"VERTICAL | BAR\";","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_ESCAPED_DESC \u003d \"VERTICAL \\\\| BAR\";","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"    private static final String TEST_ENCODED_TASK \u003d String.format(","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"            \"T | 1 | %s\", ","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"            TaskTodoTest.TEST_ESCAPED_DESC);","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"    private static TaskTodo getTestTask() {","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"        TaskTodo task \u003d new TaskTodo(TaskTodoTest.TEST_UNESCAPED_DESC);","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"        return task;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"    ","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"    public void equals() {","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(TaskTodoTest.getTestTask(), TaskTodoTest.getTestTask());","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"    public void encodeAsString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"        TaskTodo task \u003d TaskTodoTest.getTestTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(task.encodeAsString(), TaskTodoTest.TEST_ENCODED_TASK);","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"    public void loadFromString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"        TaskTodo expectedTask \u003d TaskTodoTest.getTestTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"        TaskTodo loadedTask \u003d TaskTodo.loadFromString(TaskTodoTest.TEST_ENCODED_TASK);","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"        assertEquals(loadedTask, expectedTask);","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"EvitanRelta":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"EvitanRelta"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"EvitanRelta"},"content":"todo borrow book","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"EvitanRelta"},"content":"deadline return book /by 2023-01-28","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"EvitanRelta"},"content":"deadline do homework /by 2023-01-29","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"EvitanRelta"},"content":"event project meeting /from 2023-02-01 /to 2023-02-02","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"EvitanRelta"},"content":"event project meeting /to 2023-02-05 /from 2023-02-03","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"EvitanRelta"},"content":"mark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"EvitanRelta"},"content":"mark 3","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"EvitanRelta"},"content":"mark 4","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"EvitanRelta"},"content":"unmark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"EvitanRelta"},"content":"unmark 3","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"EvitanRelta"},"content":"unmark 4","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"EvitanRelta"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"EvitanRelta"},"content":"blah","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"EvitanRelta"},"content":"unknown-command","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"EvitanRelta"},"content":"mark","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"EvitanRelta"},"content":"mark NON-NUMERIC","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"EvitanRelta"},"content":"mark -1","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"EvitanRelta"},"content":"mark 0","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"EvitanRelta"},"content":"mark 999","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"EvitanRelta"},"content":"unmark","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"EvitanRelta"},"content":"unmark NON-NUMERIC","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"EvitanRelta"},"content":"unmark -1","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"EvitanRelta"},"content":"unmark 0","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"EvitanRelta"},"content":"unmark 999","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"EvitanRelta"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"EvitanRelta"},"content":"todo   ","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"EvitanRelta"},"content":"deadline","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"EvitanRelta"},"content":"deadline   ","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"EvitanRelta"},"content":"deadline DESCRIPTION   ","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"EvitanRelta"},"content":"deadline DESCRIPTION /by   ","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"EvitanRelta"},"content":"deadline DESCRIPTION /by INVALID DATE","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"EvitanRelta"},"content":"event","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"EvitanRelta"},"content":"event   ","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION   ","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /from   ","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /from FROM TIME   ","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /from /to   ","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /from FROM TIME /to   ","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /to   ","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /to TO TIME   ","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /to /from   ","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /to TO TIME /from   ","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /from INVALID DATE /to INVALID DATE","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /from 2023-01-27 /to INVALID DATE","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"EvitanRelta"},"content":"event DESCRIPTION /from INVALID DATE /to 2023-01-27","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"EvitanRelta"},"content":"delete 2","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"EvitanRelta"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"EvitanRelta"},"content":"delete","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"EvitanRelta"},"content":"delete NON-NUMERIC","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"EvitanRelta"},"content":"delete -1","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"EvitanRelta"},"content":"delete 0","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"EvitanRelta"},"content":"delete 999","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"EvitanRelta"},"content":"quit","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"EvitanRelta":55}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"EvitanRelta"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"EvitanRelta":1,"-":20}}]
