[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"checkstyle {","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"//@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart1.html","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"//@@author","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"    mainClassName \u003d \"botanic.Launcher\"","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"    archiveBaseName \u003d \"botanic\"","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HmuuMyatMoe":7,"-":57}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"# **BOTanic** üçé","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003e ‚ÄúYou were meant for greater things.\" üìà","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"Don\u0027t waste your time remembering tasks, let Duke do it for you. üëç It is","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"- Easy to use","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"- Fast","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"- Convenient","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"- ****FREE****","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"## **Usage guide** üìö","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"1. Download *\"duke.jar\"* file from [here](https://github.com/HmuuMyatMoe/ip/releases/tag/A-Jar).","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"2. Double-click the downloaded file.","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"3. Start adding \u0026 managing your tasks!","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"## **Features** üìë","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"### Add tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"* Categorize your tasks into ToDo, Deadline or Event tasks and add them into your task list.","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"### List out tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"* Get an overview of all the tasks in your list.","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"### Mark tasks as done","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"* Mark your tasks as done when you have completed them.","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"### Unmark tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"* Marked the wrong task as done? Don\u0027t worry, just unmark them.","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"### Delete tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"* Delete tasks that you no longer need.","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"### Find tasks using names","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"* Find tasks with names that matches exactly or partially with the given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"### Find tasks using dates","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"* Find tasks with dates that matches exactly with the given date.","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"## Usage üì±","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"### `todo {TASK_NAME}` - Add a ToDo task","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"- Adds a ToDo task with the given TASK_NAME","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"- Give your task any name you want (A word, a phrase, a number, a combination of them, you name it!)","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"### `deadline {TASK_NAME} /by {YYYY/MM/DD}` - Add a Deadline task","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"- Adds a Deadline task with the given TASK_NAME and deadline (YYYY/MM/DD)","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"- There are no restrictions for TASK_NAME field","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"- Deadline must follow the YYYY/MM/DD format, e.g., `2023/11/14`","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"### `event {TASK_NAME} /from {YYYY/MM/DD} /to {YYYY/MM/DD}` - Add an Event task","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"- Adds an Event task with the given TASK_NAME, start date (YYYY/MM/DD) and end date (YYYY/MM/DD)","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"- There are no restrictions for TASK_NAME field","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"- Start and end date must follow the \"YYYY/MM/DD\" format, e.g., `2023/11/14`","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"### `list` - List out all the tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"- The list of existing tasks added will be shown on screen","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"### `mark {INDEX}` - Mark task as done","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"- Task at given INDEX will be marked as done","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"- INDEX needs to be an integer","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"### `unmark {INDEX}` - Mark task as done","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"- Task at given INDEX will be unmarked / marked as not done","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"- INDEX needs to be an integer","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"### `delete {INDEX}` - Delete task","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"- Task at given INDEX will be deleted from the list","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"- INDEX needs to be an integer","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"### `findallmatch {KEYWORD}` - Find tasks with names that completely match the given keyword","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"- Case-insensitive search","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"- Tasks with names that completely match the given keyword will be shown on screen","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"- Example, `findallmatch reflection` would match with `[T][ ] Reflection` but NOT with `[T][ ] Reflect`","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"- Keyword can be a word, phrase, integer or a combination of them","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"### `findflex {KEYWORD}` - Find tasks with names that partially match with given keyword","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"- Case-insensitive search","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"- Tasks with names that partially or completely match the given keyword will be shown on screen","lastModifiedDate":"2023-02-20"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"- Example, `findallmatch reflect` would match with `[T][ ] Reflection` AND `[T][ ] Reflect`","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"- Keyword can be a word, phrase, integer or a combination of them","lastModifiedDate":"2023-02-20"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"### `finddate {YYYY/MM/DD}` - Find tasks with dates that matches given date","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"- Deadline or Event tasks with matching due date, start date or end date will be shown","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"- Given date must follow the \"YYYY/MM/DD\" format, e.g., `2023/11/14`","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"### `bye` - Quit the program","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"- Stores data into hard drive","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"- TIP: Simply exiting the program using the window exit button would save the date too!","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"## **Try this** ‚¨áÔ∏è","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"todo buy book","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"list","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"## Potential Upcoming Features üòâ","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"- [ ] Reminders","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"HmuuMyatMoe"},"content":"- [ ] Sorting the tasks","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"HmuuMyatMoe"},"content":"## Program\u0027s main method [^1]","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":120,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Main {","lastModifiedDate":"2023-02-20"},{"lineNumber":121,"author":{"gitId":"HmuuMyatMoe"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"HmuuMyatMoe"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2023-02-20"},{"lineNumber":123,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-02-20"},{"lineNumber":125,"author":{"gitId":"HmuuMyatMoe"},"content":"```","lastModifiedDate":"2023-02-20"},{"lineNumber":126,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"HmuuMyatMoe"},"content":"‚ú® Get BOTanic today! ‚ú®","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"HmuuMyatMoe"},"content":"## Acknowledgements","lastModifiedDate":"2023-02-20"},{"lineNumber":130,"author":{"gitId":"HmuuMyatMoe"},"content":"* Program was designed using images from Flaticon.com","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"HmuuMyatMoe"},"content":"  * Botanic\u0027s icon was taken from https://www.flaticon.com/free-icon/apple_4478115","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"HmuuMyatMoe"},"content":"  * Attribution for Botanic\u0027s icon: \u003ca href\u003d\"https://www.flaticon.com/free-icons/apple\" title\u003d\"apple icons\"\u003eApple icons created by Freepik - Flaticon\u003c/a\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"HmuuMyatMoe"},"content":"  * User\u0027s icon was taken from https://www.flaticon.com/free-icon/sun_4478387?related_id\u003d4478387\u0026origin\u003dpack","lastModifiedDate":"2023-02-20"},{"lineNumber":134,"author":{"gitId":"HmuuMyatMoe"},"content":"  * Attribution for User\u0027s icon: \u003ca href\u003d\"https://www.flaticon.com/free-icons/cloudy\" title\u003d\"cloudy icons\"\u003eCloudy icons created by Freepik - Flaticon\u003c/a\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":135,"author":{"gitId":"HmuuMyatMoe"},"content":"* This user guide was inspired by https://nus-cs2103-ay2223s2.github.io/website/admin/ip-w4.html","lastModifiedDate":"2023-02-20"},{"lineNumber":136,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":137,"author":{"gitId":"HmuuMyatMoe"},"content":"[^1]: TIP! If you are a java programmer, feel free to practice your Java programming using this.","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"HmuuMyatMoe":113,"-":24}},{"path":"src/main/java/botanic/Botanic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.Command;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.BotanicException;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.parser.Parser;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.ToDo;","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of Botanic.","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Botanic {","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    //@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    //Reused from https://nus-cs2103-ay2223s2.github.io/website/admin/ip-w3.html","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    //with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Gui gui;","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Parser parser;","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Instantiates the Botanic program.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param dirPath The path to the directory that the storage file is located at.","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param fileName The name of the storage file.","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Botanic(String dirPath, String fileName) {","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        storage \u003d new Storage(dirPath, fileName);","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        gui \u003d new Gui();","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            tasks \u003d new TaskList(storage.read());","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (BotanicException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the welcome message.","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The welcome message string.","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getWelcome() {","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getWelcome();","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Stores the tasks in a file in hard drive.","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void store() {","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"        Task[] tempTasks \u003d { new ToDo(\"a\") };","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"        storage.writeToFile(","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"                tasks.getTaskList().toArray(tempTasks));","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Parses the user input to get a Command, executes the Command.","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns Botanic\u0027s response if command execution is successful.","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Catches and handles BotanicException if there is any thrown.","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param input The user input read.","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representing Botanic\u0027s response to the user input.","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        //@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        //Reused from https://nus-cs2103-ay2223s2.github.io/website/admin/ip-w3.html","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        //with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            Command cmd \u003d parser.parseCommand(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return cmd.execute(tasks, storage, gui);","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        } catch (BotanicException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return e.getMessage();","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        //@@author","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HmuuMyatMoe":44,"-":38}},{"path":"src/main/java/botanic/Formatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of a Formatter that formats given inputs.","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Formatter {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Formats LocalDate to day month year format","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"     * and returns the string representation of it.","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param localDate The given LocalDate to be formatted.","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Returns the string representation of the formatted date.","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"    public static String formatDateForPrint(LocalDate localDate) {","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"        int day \u003d localDate.getDayOfMonth();","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"        String month \u003d localDate.getMonth().toString();","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"        int year \u003d localDate.getYear();","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        return String.format(\"%d %s %d\", day, month, year);","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Formats LocalDate to yyyy/mm/dd format","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     * and returns the string representation of it.","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param localDate The given LocalDate to be formatted.","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Returns the string representation of the formatted date.","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"    public static String formatDateForStorage(LocalDate localDate) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"        return localDate.format(dtf);","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":35}},{"path":"src/main/java/botanic/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart1.html","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"//with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Encapsulation of a launcher class that represents","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * the starting point of our application.","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Launcher {","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Starts the application.","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param args A string array of arguments from the command line.","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String... args) {","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"//@@author","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"HmuuMyatMoe":2,"-":20}},{"path":"src/main/java/botanic/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"//with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import botanic.gui.MainWindow;","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A Graphical User Interface made using FXML.","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Botanic botanic;","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Stages the primary stage onto the screen, this is the starting point of the application.","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param stage The primary stage for this application.","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            botanic \u003d new Botanic(\"./botanicData\", \"BotanicList.txt\");","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            stage.setTitle(\"BOTanic\");","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setBotanic(botanic);","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            stage.show();","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Stops the entire application and stores data of the tasks in the local hard drive","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * upon exiting the application.","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        botanic.store();","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"//@@author","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"HmuuMyatMoe":2,"-":52}},{"path":"src/main/java/botanic/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of a command to add a task.","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    /** The task to be added. */","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    private Task task;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates AddCommand.","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param task The task to be added into the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Adds the given task into the taskList.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message signifying Botanic\u0027s response to a successful add.","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) {","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.add(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":36}},{"path":"src/main/java/botanic/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Task;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.ToDo;","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of the command to exit the program.","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Prints out goodbye message.","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The goodbye message string.","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) {","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"        Task[] tempTasks \u003d { new ToDo(\"a\") };","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"        storage.writeToFile(tasks.getTaskList().toArray(tempTasks));","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getBye();","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":27}},{"path":"src/main/java/botanic/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.BotanicException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of a command.","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Executes the command given.","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message to signify the success or failure of task executed.","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws BotanicException If task is not executed successfully.","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"    public abstract String execute(TaskList tasks, Storage storage, Gui gui) throws BotanicException;","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":22}},{"path":"src/main/java/botanic/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.BotanicException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of the command to delete a task.","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    private int index;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates DeleteCommand.","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Deletes the task at the given index.","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message signifying Botanic\u0027s response to a successful delete.","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws BotanicException If given index is out of bounds.","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) throws BotanicException {","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.delete(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":36}},{"path":"src/main/java/botanic/command/FindAllMatchCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * of the command to find tasks with names that matches","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" * exactly with the given keyword.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"public class FindAllMatchCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    private String keyword;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates FindAllMatchCommand.","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The keyword to search for in the list of tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public FindAllMatchCommand(String keyword) {","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Finds (case-insensitive) the tasks with names that","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     * matches exactly with the given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The list of matching tasks found.","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) {","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.findAllMatch(keyword);","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"HmuuMyatMoe":37}},{"path":"src/main/java/botanic/command/FindDateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":" * of a command to find a task containg the given date.","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"public class FindDateCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"    private LocalDate dateToFind;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates FlexFindCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateToFind The date to search for in the list of tasks.","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"    public FindDateCommand(LocalDate dateToFind) {","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.dateToFind \u003d dateToFind;","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Finds the tasks with dates","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     * that matches the given date exactly.","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The list of matching tasks found.","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) {","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.findDate(dateToFind);","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"HmuuMyatMoe":38}},{"path":"src/main/java/botanic/command/FindFlexCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * of a command to find a task with a name","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" * the partially or fully contains the given keyword.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"public class FindFlexCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    private String keyword;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates FlexFindCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The keyword to search for in the list of tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public FindFlexCommand(String keyword) {","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Finds (case-insensitive) the tasks with names","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     * that matches partially or exactly with the given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The list of matching tasks found.","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) {","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.findFlexibly(keyword);","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"HmuuMyatMoe":37}},{"path":"src/main/java/botanic/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of the command to list out all tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Prints out all tasks in the list.","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of the list of all the tasks.","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) {","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.print();","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":23}},{"path":"src/main/java/botanic/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.BotanicException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of the command to mark a task as done.","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    private int index;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates MarkCommand.","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param index The index of the task to be marked.","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Marks the task at the given index as done.","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message signifying Botanic\u0027s response to a successful execution of mark.","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws BotanicException If given index is out of bounds.","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) throws BotanicException {","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.markIsDone(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":35}},{"path":"src/main/java/botanic/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.BotanicException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.storage.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" * the command to mark a task as not done.","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    private int index;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates UnmarkCommand.","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param index The index of the task to be unmarked.","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Marks the task at the given index as not done.","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The TaskList of tasks.","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param storage The class that reads and write program data to hard drive.","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param gui The class that handles interaction with the users.","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message signifying Botanic\u0027s response to a successful execution of unmark.","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws BotanicException If given index is out of bounds.","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String execute(TaskList tasks, Storage storage, Gui gui) throws BotanicException {","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks.unmarkIsDone(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":37}},{"path":"src/main/java/botanic/exception/BotanicException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.exception;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of an exception specific to Botanic.","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"public class BotanicException extends Exception {","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates BotanicException.","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param message The error message.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    public BotanicException(String message) {","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(\"Oh noes! \" + message + \"\\nPlease try again.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the string representation of the error message to be printed.","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The error message string.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"        return (super.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":25}},{"path":"src/main/java/botanic/exception/IncompleteDescException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.exception;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of an IncompleteDescException.","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":" * This class represents the exception to throw when description is missing or incomplete.","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"public class IncompleteDescException extends BotanicException {","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates IncompleteDescException","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param message The error message.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    public IncompleteDescException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":16}},{"path":"src/main/java/botanic/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.exception;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of an InvalidInputException.","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":" * This class represents the exception to throw when given input is invalid,","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":" * for instance, given command given does not exit.","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"public class InvalidInputException extends BotanicException {","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates InvalidInputException.","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param message The error message.","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"    public InvalidInputException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":17}},{"path":"src/main/java/botanic/exception/OutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.exception;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of OutOfBoundsException.","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":" * This class represents the exception to throw when indexes given are out of bounds.","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"public class OutOfBoundsException extends BotanicException {","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates OutOfBoundsException.","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param message The error message.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    public OutOfBoundsException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":16}},{"path":"src/main/java/botanic/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.gui;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.Border;","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.BorderStroke;","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.BorderStrokeStyle;","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.BorderWidths;","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-18"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":" * A class that represents the container for the user\u0027s input or for botanic\u0027s response,","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":" * it consists of an ImageView representing the user/botanic icon and a Label containing","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":" * the user\u0027s input or botanic\u0027s response.","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":" * This container is to be displayed onto the screen.","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static final BorderStrokeStyle BORDER_STROKE_STYLE \u003d BorderStrokeStyle.SOLID;","lastModifiedDate":"2023-02-18"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static final BorderWidths BORDER_WIDTH \u003d new BorderWidths(1.0);","lastModifiedDate":"2023-02-18"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static final Color COLOR_BOTANIC \u003d Color.LAVENDERBLUSH;","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static final Color COLOR_BORDER \u003d Color.BLACK;","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static final Color COLOR_USER \u003d Color.LIGHTGOLDENRODYELLOW;","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static final CornerRadii DIALOG_BOX_CORNER_RADII \u003d new CornerRadii(10.0);","lastModifiedDate":"2023-02-18"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static final Insets INSETS \u003d new Insets(-5.0);","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /** The label containing a string representing the user input or botanic\u0027s response. */","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /** The icon to be displayed, representing the user\u0027s icon or the botanic\u0027s icon. */","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Instantiates DialogBox.","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param text A string that represents user\u0027s input or botanic\u0027s response.","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param img The user\u0027s or botanic\u0027s icon.","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void flip() {","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(getChildren());","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setAlignment(Pos.CENTER_LEFT);","lastModifiedDate":"2023-02-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"    //Solution below adapted from","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"    // https://stackoverflow.com/questions/27712213/how-do-i-make-a-simple-solid-border-around-a-flowpane-in-javafx","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Adds border to the given dialog box.","lastModifiedDate":"2023-02-17"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dialogBox The dialog box to which we add borders to.","lastModifiedDate":"2023-02-17"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static void designBorder(DialogBox dialogBox) {","lastModifiedDate":"2023-02-17"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"        dialogBox.dialog.setBorder(","lastModifiedDate":"2023-02-17"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"                new Border(new BorderStroke(","lastModifiedDate":"2023-02-17"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"                        DialogBox.COLOR_BORDER, DialogBox.BORDER_STROKE_STYLE,","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"                        DialogBox.DIALOG_BOX_CORNER_RADII, DialogBox.BORDER_WIDTH,","lastModifiedDate":"2023-02-17"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"                        DialogBox.INSETS)));","lastModifiedDate":"2023-02-17"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"    //Solution below adapted from","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"    // https://stackoverflow.com/questions/22614758/issue-with-background-color-in-javafx-8","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Sets the background color of the given dialog box to the given color.","lastModifiedDate":"2023-02-17"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dialogBox The dialog box to which we set the background color.","lastModifiedDate":"2023-02-17"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param color The color to set the background to.","lastModifiedDate":"2023-02-17"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"    private static void setBackgroundColor(DialogBox dialogBox, Color color) {","lastModifiedDate":"2023-02-17"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"        dialogBox.dialog.setBackground(","lastModifiedDate":"2023-02-17"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"                new Background(new BackgroundFill(","lastModifiedDate":"2023-02-17"},{"lineNumber":113,"author":{"gitId":"HmuuMyatMoe"},"content":"                        color, DialogBox.DIALOG_BOX_CORNER_RADII, DialogBox.INSETS)));","lastModifiedDate":"2023-02-17"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    //@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    //Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2023-02-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Instantiates DialogBox where the ImageView is on the right and text on the left,","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * which represents the user\u0027s input.","lastModifiedDate":"2023-02-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @param text The user\u0027s input.","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @param img The user\u0027s icon.","lastModifiedDate":"2023-02-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @return A DialogBox representing the user\u0027s input message.","lastModifiedDate":"2023-02-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        DialogBox userDialog \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-17"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        designBorder(userDialog);","lastModifiedDate":"2023-02-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        setBackgroundColor(userDialog, DialogBox.COLOR_USER);","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return userDialog;","lastModifiedDate":"2023-02-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Instantiates DialogBox where the ImageView is on the left and text on the right,","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * which represents botanic\u0027s response.","lastModifiedDate":"2023-02-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @param text Botanic\u0027s response.","lastModifiedDate":"2023-02-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * @param img Botanic\u0027s icon.","lastModifiedDate":"2023-02-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * @return A DialogBox representing Botanic\u0027s response message.","lastModifiedDate":"2023-02-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public static DialogBox getBotanicDialog(String text, Image img) {","lastModifiedDate":"2023-02-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        var botanicDialog \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-17"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        botanicDialog.flip();","lastModifiedDate":"2023-02-17"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        designBorder(botanicDialog);","lastModifiedDate":"2023-02-17"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        setBackgroundColor(botanicDialog, DialogBox.COLOR_BOTANIC);","lastModifiedDate":"2023-02-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return botanicDialog;","lastModifiedDate":"2023-02-17"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-02-20"},{"lineNumber":150,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"HmuuMyatMoe":74,"-":76}},{"path":"src/main/java/botanic/gui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.gui;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Task;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.TaskList;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of the Gui","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":" * that handles interaction with user.","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Gui {","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the welcome message.","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A String representation of the welcome message.","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getWelcome() {","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Aloe there! I am BOTanic! How may I help you today?\\n\"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"                + \"Program is designed using images from Flaticon.com \";","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the goodbye message.","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of the goodbye message.","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getBye() {","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Bye, hApple a-maize-zing day!\\n\" + \"See you again soon!\";","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic message response to successful add command.","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param task The task added.","lastModifiedDate":"2023-02-17"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param size The size of task list after new task added.","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Add success message.","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getAddSuccessMsg(Task task, int size) {","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert task !\u003d null : \"Task to be printed cannot be null\";","lastModifiedDate":"2023-02-17"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Pear-fect! I\u0027ve added this task:\\n \" + task + \"\\nNow you have \"","lastModifiedDate":"2023-02-17"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"                + size + \" task(s) in your basket.\\n\";","lastModifiedDate":"2023-02-17"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic\u0027s message response to successful delete command.","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param task The task deleted.","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param size The size of task list after task deleted.","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Delete success message.","lastModifiedDate":"2023-02-17"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getDeleteSuccessMsg(Task task, int size) {","lastModifiedDate":"2023-02-17"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Gourd it! I\u0027ve removed this task:\\n \" + \" \"","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"                + task + \"\\nNow you have \" + size","lastModifiedDate":"2023-02-17"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"                + \" task(s) in your basket.\\n\";","lastModifiedDate":"2023-02-17"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic\u0027s message response to successful mark command.","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param task The task marked.","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Mark success message.","lastModifiedDate":"2023-02-17"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getMarkSuccessMsg(Task task) {","lastModifiedDate":"2023-02-17"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Sweet! I\u0027ve marked this task as done:\\n \" + task + \"\\n\";","lastModifiedDate":"2023-02-17"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic\u0027s message response to successful unmark command.","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param task The task unmarked.","lastModifiedDate":"2023-02-17"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Unmark success message.","lastModifiedDate":"2023-02-17"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getUnmarkSuccessMsg(Task task) {","lastModifiedDate":"2023-02-17"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Grape! I\u0027ve marked this task as not done:\\n \" + task + \"\\n\";","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to when there is no item to list.","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return No-item-to-list error message.","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getNoItemErrorMsg() {","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"There are no items in your basket.\\n\"","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"                + \"Start adding some!\\n\";","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns a string representation of all the tasks in the list in response","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"     * to the list command.","lastModifiedDate":"2023-02-17"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The task list to be printed.","lastModifiedDate":"2023-02-17"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Response to a successful list command.","lastModifiedDate":"2023-02-17"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String printTasks(TaskList tasks) {","lastModifiedDate":"2023-02-17"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert tasks !\u003d null : \"Task list given cannot be null\";","lastModifiedDate":"2023-02-17"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Here are the tasks in your basket:\\n\" + tasks;","lastModifiedDate":"2023-02-17"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns results found from searching for a keyword in the list.","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The tasks that match with given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Search results.","lastModifiedDate":"2023-02-17"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getFindResult(TaskList tasks) {","lastModifiedDate":"2023-02-17"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"        String output \u003d \"Here are the matching tasks in your basket:\\n\";","lastModifiedDate":"2023-02-17"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"        return output + tasks;","lastModifiedDate":"2023-02-17"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to an out-of-bounds exception.","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Out-of-bounds exception error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":113,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getOutOfBoundsErrorMsg() {","lastModifiedDate":"2023-02-17"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Item at given index does not exist! Please enter a valid index.\";","lastModifiedDate":"2023-02-17"},{"lineNumber":116,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":117,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":118,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":119,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to when there is no task with names that","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"HmuuMyatMoe"},"content":"     * completely match the given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":121,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":122,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The keyword searched for.","lastModifiedDate":"2023-02-17"},{"lineNumber":123,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return No-completely-matching-item error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":124,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":125,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getNoCompleteMatchErrorMsg(String keyword) {","lastModifiedDate":"2023-02-17"},{"lineNumber":126,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"None of the items in your basket completely matches with \\\"\"","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"HmuuMyatMoe"},"content":"                + keyword + \"\\\"\";","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":129,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":130,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":131,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to when there is no task with names that","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"HmuuMyatMoe"},"content":"     * partially or completely match the given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":134,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The keyword searched for.","lastModifiedDate":"2023-02-17"},{"lineNumber":135,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return No-partially-matching-item error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":136,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":137,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getNoPartialMatchErrorMsg(String keyword) {","lastModifiedDate":"2023-02-17"},{"lineNumber":138,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"None of the items in your basket partially \"","lastModifiedDate":"2023-02-17"},{"lineNumber":139,"author":{"gitId":"HmuuMyatMoe"},"content":"                + \"or completely matches with \\\"\" + keyword + \"\\\"\";","lastModifiedDate":"2023-02-17"},{"lineNumber":140,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":141,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":142,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":143,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to when there is no task with dates","lastModifiedDate":"2023-02-20"},{"lineNumber":144,"author":{"gitId":"HmuuMyatMoe"},"content":"     * that match the given date.","lastModifiedDate":"2023-02-20"},{"lineNumber":145,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":146,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param date The date searched for.","lastModifiedDate":"2023-02-17"},{"lineNumber":147,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return No-date-match-item error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":148,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":149,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getNoDateMatchErrorMsg(String date) {","lastModifiedDate":"2023-02-17"},{"lineNumber":150,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"None of the items in your basket have the date \\\"\" + date + \"\\\"\";","lastModifiedDate":"2023-02-17"},{"lineNumber":151,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":152,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":153,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":154,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to a command with incomplete description","lastModifiedDate":"2023-02-20"},{"lineNumber":155,"author":{"gitId":"HmuuMyatMoe"},"content":"     * (missing fields such as name, index, dates).","lastModifiedDate":"2023-02-17"},{"lineNumber":156,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":157,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param fieldType The field that was missing.","lastModifiedDate":"2023-02-17"},{"lineNumber":158,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Incomplete Description exception error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":159,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":160,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getMissingFieldErrorMsg(String fieldType) {","lastModifiedDate":"2023-02-17"},{"lineNumber":161,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Please give the \" + fieldType + \".\";","lastModifiedDate":"2023-02-20"},{"lineNumber":162,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":163,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":164,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":165,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to a command with an invalid date input.","lastModifiedDate":"2023-02-20"},{"lineNumber":166,"author":{"gitId":"HmuuMyatMoe"},"content":"     * For instance, date given in the wrong format or a date that does not exist on the calendar.","lastModifiedDate":"2023-02-20"},{"lineNumber":167,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":168,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Invalid Date error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":169,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":170,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getInvalidDateErrorMsg() {","lastModifiedDate":"2023-02-17"},{"lineNumber":171,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Please enter a valid date/time in \\\"yyyy/mm/dd\\\" format.\";","lastModifiedDate":"2023-02-17"},{"lineNumber":172,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":173,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":174,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":175,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to an attempt to add","lastModifiedDate":"2023-02-20"},{"lineNumber":176,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a deadline or event task with a due/end date that has passed.","lastModifiedDate":"2023-02-20"},{"lineNumber":177,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":178,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateType The type of the date (e.g., end date or due date).","lastModifiedDate":"2023-02-20"},{"lineNumber":179,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateFormatted The date input formatted into DD MONTH YYYY format.","lastModifiedDate":"2023-02-17"},{"lineNumber":180,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Date Passed error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":181,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":182,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getDatePassedErrorMsg(String dateType, String dateFormatted) {","lastModifiedDate":"2023-02-17"},{"lineNumber":183,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"The given \" + dateType + \" (yyyy/mm/dd) \"","lastModifiedDate":"2023-02-20"},{"lineNumber":184,"author":{"gitId":"HmuuMyatMoe"},"content":"                + dateFormatted + \" has passed.\";","lastModifiedDate":"2023-02-20"},{"lineNumber":185,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":186,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":187,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":188,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to an attempt to add","lastModifiedDate":"2023-02-20"},{"lineNumber":189,"author":{"gitId":"HmuuMyatMoe"},"content":"     * an event with a start date that is later than the end date.","lastModifiedDate":"2023-02-17"},{"lineNumber":190,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":191,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param startDateFormatted The start date input formatted into DD MONTH YYYY format.","lastModifiedDate":"2023-02-17"},{"lineNumber":192,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Start date after end date error message.","lastModifiedDate":"2023-02-17"},{"lineNumber":193,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":194,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getStartAfterEndErrorMsg(String startDateFormatted) {","lastModifiedDate":"2023-02-17"},{"lineNumber":195,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"The given start date \" + startDateFormatted","lastModifiedDate":"2023-02-17"},{"lineNumber":196,"author":{"gitId":"HmuuMyatMoe"},"content":"                + \" (yyyy/mm/dd) should be before the end date (yyyy/mm/dd).\";","lastModifiedDate":"2023-02-17"},{"lineNumber":197,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":198,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":199,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":200,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to a given index input that is a non-integer.","lastModifiedDate":"2023-02-20"},{"lineNumber":201,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":202,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param cmdType The command the input was to be used for.","lastModifiedDate":"2023-02-20"},{"lineNumber":203,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Non integer index input error message.","lastModifiedDate":"2023-02-20"},{"lineNumber":204,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":205,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getNonIntIndexErrorMsg(String cmdType) {","lastModifiedDate":"2023-02-20"},{"lineNumber":206,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"Please give an integer for the index of the item to \" + cmdType + \".\";","lastModifiedDate":"2023-02-20"},{"lineNumber":207,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":208,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":209,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-20"},{"lineNumber":210,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns botanic response to an invalid command given.","lastModifiedDate":"2023-02-20"},{"lineNumber":211,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":212,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return Invalid command error message.","lastModifiedDate":"2023-02-20"},{"lineNumber":213,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-20"},{"lineNumber":214,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getInvalidCommandErrorMsg() {","lastModifiedDate":"2023-02-20"},{"lineNumber":215,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \"I\u0027m sorry, there is no such command.\";","lastModifiedDate":"2023-02-20"},{"lineNumber":216,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":217,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"HmuuMyatMoe":217}},{"path":"src/main/java/botanic/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.gui;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"// with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import botanic.Botanic;","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Botanic botanic;","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    //UserIcon.png is taken from https://www.flaticon.com/free-icon/sun_4478387?related_id\u003d4478387\u0026origin\u003dpack","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    //Attribution for UserIcon.png:","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // \u003ca href\u003d\"https://www.flaticon.com/free-icons/cloudy\" title\u003d\"cloudy icons\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // Cloudy icons created by Freepik - Flaticon\u003c/a\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Image userImage \u003d new Image(getClass()","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .getResourceAsStream(\"/images/UserIcon.png\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    //BotanicIcon.png is taken from https://www.flaticon.com/free-icon/apple_4478115","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    //Attribution for BotanicIcon.png:","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // \u003ca href\u003d\"https://www.flaticon.com/free-icons/apple\" title\u003d\"apple icons\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Apple icons created by Freepik - Flaticon\u003c/a\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Image botanicImage \u003d new Image(getClass()","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .getResourceAsStream(\"/images/BotanicIcon.png\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Binds the v value property to the height of the dialogContainer.","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Initialises Botanic and greets user.","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @param botanic A Botanic instance.","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setBotanic(Botanic botanic) {","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.botanic \u003d botanic;","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String welcome \u003d this.botanic.getWelcome();","lastModifiedDate":"2023-02-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                DialogBox.getBotanicDialog(welcome, botanicImage)","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Gets a response from Botanic for the user input given.","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Then, gets one DialogBox containing the user input and another containing the response,","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * and add both to the Vbox container.","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Clear the user input at the end.","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        //get user input and get response from botanic","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String response \u003d botanic.getResponse(input);","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        //get dialog boxes containing user input and botanic response","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        //then add the dialog boxes to vbox container","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                DialogBox.getBotanicDialog(response, botanicImage)","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"//@@author","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"HmuuMyatMoe":2,"-":79}},{"path":"src/main/java/botanic/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.parser;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.Formatter;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.AddCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.ByeCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.Command;","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.DeleteCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.FindAllMatchCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.FindDateCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.FindFlexCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.ListCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.MarkCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.command.UnmarkCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.IncompleteDescException;","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.InvalidInputException;","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Event;","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.ToDo;","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of a parser that parses the inputs given.","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Parser {","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"    private enum CommandEnum {","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"        BYE, LIST, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, FINDALLMATCH, FINDFLEX, FINDDATE","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    private Gui gui \u003d new Gui();","lastModifiedDate":"2023-02-17"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Checks if the required fields for a given command is given","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"     * by checking the length of String array of the split input","lastModifiedDate":"2023-02-09"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"     * and checking that the portion of the given input behind the command name is not empty.","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param splitInputs The given user input that was split into 2 sections using \" \".","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param fieldType The type of the field we are checking for.","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If the expected field is missing.","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"    private void checkFieldExists(String[] splitInputs, String fieldType)","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException {","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (splitInputs.length \u003c\u003d 1 || splitInputs[1].isBlank()) {","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new IncompleteDescException(","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getMissingFieldErrorMsg(fieldType));","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates a new ToDo task and returns it.","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param splitInputs An array containing the input by the user.","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The new ToDo task.","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If name of the task is not given.","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"    private ToDo getTodo(String[] splitInputs) throws IncompleteDescException {","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"        checkFieldExists(splitInputs, \"name of todo\");","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"        return new ToDo(splitInputs[1]);","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Parses the given string into a LocalDate object.","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param date The given string representation of the date to be parsed.","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The parsed LocalDate.","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"    public static LocalDate parseDate(String date) {","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"        return LocalDate.parse(date, dtf);","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Finds the index of the given keyword in a section of a given command string.","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param input The section of the user input to find the keyword in.","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The keyword to be found.","lastModifiedDate":"2023-02-09"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keywordType The type of keyword given (what the keyword represents).","lastModifiedDate":"2023-02-09"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The index of the given keyword in the given string.","lastModifiedDate":"2023-02-09"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If keyword is not found.","lastModifiedDate":"2023-02-09"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"    private int getKeywordIndex(String input, String keyword, String keywordType)","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException {","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"        int index \u003d input.indexOf(keyword);","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2023-02-09"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new IncompleteDescException(","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getMissingFieldErrorMsg(keywordType));","lastModifiedDate":"2023-02-17"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"        return index;","lastModifiedDate":"2023-02-09"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Extracts the name of the task from the given input","lastModifiedDate":"2023-02-09"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"     * using the indexes given.","lastModifiedDate":"2023-02-09"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param input The string to extract the name from.","lastModifiedDate":"2023-02-09"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param startIndex The starting index of the name in input string.","lastModifiedDate":"2023-02-09"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param endIndex The last index of the name in input string.","lastModifiedDate":"2023-02-09"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The extracted name.","lastModifiedDate":"2023-02-09"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If no name can be found using the given indexes.","lastModifiedDate":"2023-02-09"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"    private String getName(String input, int startIndex, int endIndex)","lastModifiedDate":"2023-02-17"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException {","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"        String name \u003d input.substring(startIndex, endIndex).strip();","lastModifiedDate":"2023-02-09"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (name.isBlank()) {","lastModifiedDate":"2023-01-25"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new IncompleteDescException(","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getMissingFieldErrorMsg(\"name of task\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"        return name;","lastModifiedDate":"2023-02-09"},{"lineNumber":113,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":116,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Extracts date from the input string given","lastModifiedDate":"2023-02-09"},{"lineNumber":117,"author":{"gitId":"HmuuMyatMoe"},"content":"     * and parses it into a LocalDate object.","lastModifiedDate":"2023-02-09"},{"lineNumber":118,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param input The input string to extract the date from.","lastModifiedDate":"2023-02-09"},{"lineNumber":120,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param startIndex The starting index of the date in input string.","lastModifiedDate":"2023-02-09"},{"lineNumber":121,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param endIndex The last index of the date in input string.","lastModifiedDate":"2023-02-09"},{"lineNumber":122,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateType The type of date extracted (what the date represents).","lastModifiedDate":"2023-02-09"},{"lineNumber":123,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A LocalDate representation of the extracted date.","lastModifiedDate":"2023-02-09"},{"lineNumber":124,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If no date can be found using the given indexes.","lastModifiedDate":"2023-02-09"},{"lineNumber":125,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws InvalidInputException If given date is not in the yyyy/mm/dd format","lastModifiedDate":"2023-02-09"},{"lineNumber":126,"author":{"gitId":"HmuuMyatMoe"},"content":"     *                               or if the given date is not a valid date in the calendar.","lastModifiedDate":"2023-02-09"},{"lineNumber":127,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":128,"author":{"gitId":"HmuuMyatMoe"},"content":"    private LocalDate getLocalDate(String input, int startIndex, int endIndex, String dateType)","lastModifiedDate":"2023-02-15"},{"lineNumber":129,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException, InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":130,"author":{"gitId":"HmuuMyatMoe"},"content":"        String date \u003d input.substring(startIndex, endIndex).strip();","lastModifiedDate":"2023-02-09"},{"lineNumber":131,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (date.isBlank()) {","lastModifiedDate":"2023-02-09"},{"lineNumber":132,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new IncompleteDescException(","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getMissingFieldErrorMsg(dateType));","lastModifiedDate":"2023-02-17"},{"lineNumber":134,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":135,"author":{"gitId":"HmuuMyatMoe"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":136,"author":{"gitId":"HmuuMyatMoe"},"content":"            LocalDate localDate \u003d Parser.parseDate(date);","lastModifiedDate":"2023-02-09"},{"lineNumber":137,"author":{"gitId":"HmuuMyatMoe"},"content":"            return localDate;","lastModifiedDate":"2023-02-09"},{"lineNumber":138,"author":{"gitId":"HmuuMyatMoe"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":139,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new InvalidInputException(","lastModifiedDate":"2023-01-27"},{"lineNumber":140,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getInvalidDateErrorMsg());","lastModifiedDate":"2023-02-17"},{"lineNumber":141,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":142,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":143,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":144,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":145,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Checks that the given dateInput has not passed (i.e., given dateInput is after today\u0027s date).","lastModifiedDate":"2023-02-20"},{"lineNumber":146,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":147,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateInput The date we want to check.","lastModifiedDate":"2023-02-09"},{"lineNumber":148,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateType The type of dateInput given (what the dateInput represents).","lastModifiedDate":"2023-02-09"},{"lineNumber":149,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws InvalidInputException If dateInput has passed.","lastModifiedDate":"2023-02-20"},{"lineNumber":150,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":151,"author":{"gitId":"HmuuMyatMoe"},"content":"    private void checkDateHasNotPassed(LocalDate dateInput, String dateType)","lastModifiedDate":"2023-02-20"},{"lineNumber":152,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":153,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (dateInput.isBefore(LocalDate.now())) {","lastModifiedDate":"2023-02-20"},{"lineNumber":154,"author":{"gitId":"HmuuMyatMoe"},"content":"            String dateFormatted \u003d Formatter.formatDateForPrint(dateInput);","lastModifiedDate":"2023-02-09"},{"lineNumber":155,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new InvalidInputException(","lastModifiedDate":"2023-02-09"},{"lineNumber":156,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getDatePassedErrorMsg(dateType, dateFormatted));","lastModifiedDate":"2023-02-17"},{"lineNumber":157,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":158,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":159,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":160,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":161,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Checks whether the given endDate is after or the same as the startDate.","lastModifiedDate":"2023-02-09"},{"lineNumber":162,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":163,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param startDate The starting date.","lastModifiedDate":"2023-02-09"},{"lineNumber":164,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param endDate The end date.","lastModifiedDate":"2023-02-09"},{"lineNumber":165,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws InvalidInputException If endDate given is before startDate given.","lastModifiedDate":"2023-02-09"},{"lineNumber":166,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":167,"author":{"gitId":"HmuuMyatMoe"},"content":"    private void checkEndIsAfterStart(LocalDate startDate, LocalDate endDate)","lastModifiedDate":"2023-02-15"},{"lineNumber":168,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":169,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (endDate.isBefore(startDate)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":170,"author":{"gitId":"HmuuMyatMoe"},"content":"            String startDateFormatted \u003d Formatter.formatDateForPrint(startDate);","lastModifiedDate":"2023-02-17"},{"lineNumber":171,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new InvalidInputException(","lastModifiedDate":"2023-02-09"},{"lineNumber":172,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getStartAfterEndErrorMsg(startDateFormatted));","lastModifiedDate":"2023-02-17"},{"lineNumber":173,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":174,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert endDate.isAfter(startDate) : \"End date should be after start date.\";","lastModifiedDate":"2023-02-20"},{"lineNumber":175,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":176,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":177,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":178,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates a new Deadline object and returns it.","lastModifiedDate":"2023-02-09"},{"lineNumber":179,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":180,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param splitInputs An array containing the input by the user.","lastModifiedDate":"2023-02-09"},{"lineNumber":181,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A new Deadline object.","lastModifiedDate":"2023-02-09"},{"lineNumber":182,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If name or due date or both is/are not provided.","lastModifiedDate":"2023-02-20"},{"lineNumber":183,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws InvalidInputException If due date is given in the wrong format.","lastModifiedDate":"2023-02-20"},{"lineNumber":184,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":185,"author":{"gitId":"HmuuMyatMoe"},"content":"    private Deadline getDeadline(String[] splitInputs)","lastModifiedDate":"2023-02-15"},{"lineNumber":186,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException, InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":187,"author":{"gitId":"HmuuMyatMoe"},"content":"        //get name","lastModifiedDate":"2023-02-20"},{"lineNumber":188,"author":{"gitId":"HmuuMyatMoe"},"content":"        checkFieldExists(splitInputs, \"name of deadline\");","lastModifiedDate":"2023-02-20"},{"lineNumber":189,"author":{"gitId":"HmuuMyatMoe"},"content":"        int endIndex \u003d getKeywordIndex(splitInputs[1], \"/by\", \"due date/time\");","lastModifiedDate":"2023-02-09"},{"lineNumber":190,"author":{"gitId":"HmuuMyatMoe"},"content":"        String name \u003d getName(splitInputs[1], 0, endIndex);","lastModifiedDate":"2023-02-17"},{"lineNumber":191,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":192,"author":{"gitId":"HmuuMyatMoe"},"content":"        //get end date and check validity","lastModifiedDate":"2023-02-20"},{"lineNumber":193,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate endLocalDate \u003d getLocalDate(splitInputs[1], endIndex + 3,","lastModifiedDate":"2023-02-09"},{"lineNumber":194,"author":{"gitId":"HmuuMyatMoe"},"content":"                splitInputs[1].length(), \"due date/time\");","lastModifiedDate":"2023-02-09"},{"lineNumber":195,"author":{"gitId":"HmuuMyatMoe"},"content":"        checkDateHasNotPassed(endLocalDate, \"deadline\");","lastModifiedDate":"2023-02-20"},{"lineNumber":196,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":197,"author":{"gitId":"HmuuMyatMoe"},"content":"        //create new deadline object and return it","lastModifiedDate":"2023-02-20"},{"lineNumber":198,"author":{"gitId":"HmuuMyatMoe"},"content":"        return new Deadline(name, endLocalDate);","lastModifiedDate":"2023-02-09"},{"lineNumber":199,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":200,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":201,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":202,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates a new Event object and returns it.","lastModifiedDate":"2023-02-15"},{"lineNumber":203,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":204,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param splitInputs An array containing the input by the user.","lastModifiedDate":"2023-01-27"},{"lineNumber":205,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A new Event.","lastModifiedDate":"2023-01-26"},{"lineNumber":206,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If the name, start date or due date are not given.","lastModifiedDate":"2023-02-20"},{"lineNumber":207,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws InvalidInputException If any of the date are given","lastModifiedDate":"2023-02-20"},{"lineNumber":208,"author":{"gitId":"HmuuMyatMoe"},"content":"     *                               in a format different from \"yyyy/MM/dd\".","lastModifiedDate":"2023-01-26"},{"lineNumber":209,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":210,"author":{"gitId":"HmuuMyatMoe"},"content":"    private Event getEvent(String[] splitInputs)","lastModifiedDate":"2023-02-15"},{"lineNumber":211,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException, InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":212,"author":{"gitId":"HmuuMyatMoe"},"content":"        //get name","lastModifiedDate":"2023-02-20"},{"lineNumber":213,"author":{"gitId":"HmuuMyatMoe"},"content":"        checkFieldExists(splitInputs, \"name of event\");","lastModifiedDate":"2023-02-20"},{"lineNumber":214,"author":{"gitId":"HmuuMyatMoe"},"content":"        int startIndex \u003d getKeywordIndex(splitInputs[1], \"/from\", \"start date/time\");","lastModifiedDate":"2023-02-09"},{"lineNumber":215,"author":{"gitId":"HmuuMyatMoe"},"content":"        String name \u003d getName(splitInputs[1], 0, startIndex);","lastModifiedDate":"2023-02-17"},{"lineNumber":216,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":217,"author":{"gitId":"HmuuMyatMoe"},"content":"        //get start date and end date of event","lastModifiedDate":"2023-02-20"},{"lineNumber":218,"author":{"gitId":"HmuuMyatMoe"},"content":"        int endIndex \u003d getKeywordIndex(splitInputs[1], \"/to\", \"end date/time\");","lastModifiedDate":"2023-02-20"},{"lineNumber":219,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate startLocalDate \u003d getLocalDate(splitInputs[1], startIndex + 5,","lastModifiedDate":"2023-02-09"},{"lineNumber":220,"author":{"gitId":"HmuuMyatMoe"},"content":"                endIndex, \"start date/time\");","lastModifiedDate":"2023-02-09"},{"lineNumber":221,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate endLocalDate \u003d getLocalDate(splitInputs[1], endIndex + 3,","lastModifiedDate":"2023-02-09"},{"lineNumber":222,"author":{"gitId":"HmuuMyatMoe"},"content":"                splitInputs[1].length(), \"end date/time\");","lastModifiedDate":"2023-02-09"},{"lineNumber":223,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":224,"author":{"gitId":"HmuuMyatMoe"},"content":"        //check validity of start and end date","lastModifiedDate":"2023-02-20"},{"lineNumber":225,"author":{"gitId":"HmuuMyatMoe"},"content":"        checkEndIsAfterStart(startLocalDate, endLocalDate);","lastModifiedDate":"2023-02-09"},{"lineNumber":226,"author":{"gitId":"HmuuMyatMoe"},"content":"        checkDateHasNotPassed(endLocalDate, \"end date\");","lastModifiedDate":"2023-02-20"},{"lineNumber":227,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":228,"author":{"gitId":"HmuuMyatMoe"},"content":"        //create new event object and return it","lastModifiedDate":"2023-02-20"},{"lineNumber":229,"author":{"gitId":"HmuuMyatMoe"},"content":"        return new Event(name, startLocalDate, endLocalDate);","lastModifiedDate":"2023-02-09"},{"lineNumber":230,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":231,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":232,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":233,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Checks that user has given the index of the task to be acted on,","lastModifiedDate":"2023-02-15"},{"lineNumber":234,"author":{"gitId":"HmuuMyatMoe"},"content":"     * by checking the length of String array of the split input","lastModifiedDate":"2023-02-15"},{"lineNumber":235,"author":{"gitId":"HmuuMyatMoe"},"content":"     * and checking that the portion of the given input behind the command name is not empty.","lastModifiedDate":"2023-02-15"},{"lineNumber":236,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":237,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param splitInputs An array containing the input by the user.","lastModifiedDate":"2023-02-15"},{"lineNumber":238,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param cmdType The type of command associated with the given index.","lastModifiedDate":"2023-02-15"},{"lineNumber":239,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If no index has been give.","lastModifiedDate":"2023-02-15"},{"lineNumber":240,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":241,"author":{"gitId":"HmuuMyatMoe"},"content":"    private void checkIndexExists(String[] splitInputs, String cmdType)","lastModifiedDate":"2023-02-15"},{"lineNumber":242,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException {","lastModifiedDate":"2023-02-15"},{"lineNumber":243,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (splitInputs.length \u003c\u003d 1 || splitInputs[1].isBlank()) {","lastModifiedDate":"2023-02-15"},{"lineNumber":244,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new IncompleteDescException(","lastModifiedDate":"2023-02-15"},{"lineNumber":245,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getMissingFieldErrorMsg(\"index of the item to \" + cmdType));","lastModifiedDate":"2023-02-20"},{"lineNumber":246,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":247,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":248,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":249,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":250,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Parses a string into an integer and minus one from the integer.","lastModifiedDate":"2023-02-15"},{"lineNumber":251,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":252,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param input The string representation of the index.","lastModifiedDate":"2023-02-15"},{"lineNumber":253,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param cmdType The type of command associated with the given index.","lastModifiedDate":"2023-02-15"},{"lineNumber":254,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return An integer value of item index.","lastModifiedDate":"2023-02-15"},{"lineNumber":255,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws InvalidInputException If given string does not contain a parsable integer.","lastModifiedDate":"2023-02-15"},{"lineNumber":256,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":257,"author":{"gitId":"HmuuMyatMoe"},"content":"    private int getParsedIndex(String input, String cmdType) throws InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":258,"author":{"gitId":"HmuuMyatMoe"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":259,"author":{"gitId":"HmuuMyatMoe"},"content":"            return Integer.parseInt(input) - 1;","lastModifiedDate":"2023-02-15"},{"lineNumber":260,"author":{"gitId":"HmuuMyatMoe"},"content":"        } catch (NumberFormatException n) {","lastModifiedDate":"2023-02-15"},{"lineNumber":261,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new InvalidInputException(","lastModifiedDate":"2023-02-15"},{"lineNumber":262,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getNonIntIndexErrorMsg(cmdType)","lastModifiedDate":"2023-02-20"},{"lineNumber":263,"author":{"gitId":"HmuuMyatMoe"},"content":"            );","lastModifiedDate":"2023-02-15"},{"lineNumber":264,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":265,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":266,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":267,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":268,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Parses the given string into the correct command.","lastModifiedDate":"2023-01-25"},{"lineNumber":269,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":270,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param input The string input given by the user.","lastModifiedDate":"2023-01-25"},{"lineNumber":271,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A Command representing the string command given.","lastModifiedDate":"2023-02-20"},{"lineNumber":272,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws IncompleteDescException If given string command is incomplete.","lastModifiedDate":"2023-02-20"},{"lineNumber":273,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws InvalidInputException If given string command is invalid.","lastModifiedDate":"2023-02-20"},{"lineNumber":274,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":275,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Command parseCommand(String input)","lastModifiedDate":"2023-02-15"},{"lineNumber":276,"author":{"gitId":"HmuuMyatMoe"},"content":"            throws IncompleteDescException, InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":277,"author":{"gitId":"HmuuMyatMoe"},"content":"        String[] splitInputs \u003d input.split(\" \", 2);","lastModifiedDate":"2023-01-27"},{"lineNumber":278,"author":{"gitId":"HmuuMyatMoe"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":279,"author":{"gitId":"HmuuMyatMoe"},"content":"            CommandEnum commandType \u003d CommandEnum.valueOf(splitInputs[0].toUpperCase());","lastModifiedDate":"2023-02-20"},{"lineNumber":280,"author":{"gitId":"HmuuMyatMoe"},"content":"            switch (commandType) {","lastModifiedDate":"2023-01-25"},{"lineNumber":281,"author":{"gitId":"HmuuMyatMoe"},"content":"            case BYE:","lastModifiedDate":"2023-01-25"},{"lineNumber":282,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new ByeCommand();","lastModifiedDate":"2023-01-25"},{"lineNumber":283,"author":{"gitId":"HmuuMyatMoe"},"content":"            case LIST:","lastModifiedDate":"2023-01-25"},{"lineNumber":284,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new ListCommand();","lastModifiedDate":"2023-01-25"},{"lineNumber":285,"author":{"gitId":"HmuuMyatMoe"},"content":"            case MARK:","lastModifiedDate":"2023-01-25"},{"lineNumber":286,"author":{"gitId":"HmuuMyatMoe"},"content":"                checkIndexExists(splitInputs, \"mark\");","lastModifiedDate":"2023-02-15"},{"lineNumber":287,"author":{"gitId":"HmuuMyatMoe"},"content":"                int markIndex \u003d getParsedIndex(splitInputs[1], \"mark\");","lastModifiedDate":"2023-02-20"},{"lineNumber":288,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new MarkCommand(markIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":289,"author":{"gitId":"HmuuMyatMoe"},"content":"            case UNMARK:","lastModifiedDate":"2023-01-25"},{"lineNumber":290,"author":{"gitId":"HmuuMyatMoe"},"content":"                checkIndexExists(splitInputs, \"unmark\");","lastModifiedDate":"2023-02-15"},{"lineNumber":291,"author":{"gitId":"HmuuMyatMoe"},"content":"                int unmarkIndex \u003d getParsedIndex(splitInputs[1], \"unmark\");","lastModifiedDate":"2023-02-20"},{"lineNumber":292,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new UnmarkCommand(unmarkIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":293,"author":{"gitId":"HmuuMyatMoe"},"content":"            case DELETE:","lastModifiedDate":"2023-01-25"},{"lineNumber":294,"author":{"gitId":"HmuuMyatMoe"},"content":"                checkIndexExists(splitInputs, \"delete\");","lastModifiedDate":"2023-02-15"},{"lineNumber":295,"author":{"gitId":"HmuuMyatMoe"},"content":"                int deleteIndex \u003d getParsedIndex(splitInputs[1], \"delete\");","lastModifiedDate":"2023-02-20"},{"lineNumber":296,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new DeleteCommand(deleteIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":297,"author":{"gitId":"HmuuMyatMoe"},"content":"            case TODO:","lastModifiedDate":"2023-01-25"},{"lineNumber":298,"author":{"gitId":"HmuuMyatMoe"},"content":"                Task task \u003d getTodo(splitInputs);","lastModifiedDate":"2023-02-20"},{"lineNumber":299,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new AddCommand(task);","lastModifiedDate":"2023-01-25"},{"lineNumber":300,"author":{"gitId":"HmuuMyatMoe"},"content":"            case DEADLINE:","lastModifiedDate":"2023-01-25"},{"lineNumber":301,"author":{"gitId":"HmuuMyatMoe"},"content":"                Deadline deadline \u003d getDeadline(splitInputs);","lastModifiedDate":"2023-02-20"},{"lineNumber":302,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new AddCommand(deadline);","lastModifiedDate":"2023-01-25"},{"lineNumber":303,"author":{"gitId":"HmuuMyatMoe"},"content":"            case EVENT:","lastModifiedDate":"2023-01-25"},{"lineNumber":304,"author":{"gitId":"HmuuMyatMoe"},"content":"                Event event \u003d getEvent(splitInputs);","lastModifiedDate":"2023-02-20"},{"lineNumber":305,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new AddCommand(event);","lastModifiedDate":"2023-01-25"},{"lineNumber":306,"author":{"gitId":"HmuuMyatMoe"},"content":"            case FINDALLMATCH:","lastModifiedDate":"2023-02-15"},{"lineNumber":307,"author":{"gitId":"HmuuMyatMoe"},"content":"                checkFieldExists(splitInputs, \"keyword to find\");","lastModifiedDate":"2023-02-20"},{"lineNumber":308,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new FindAllMatchCommand(splitInputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":309,"author":{"gitId":"HmuuMyatMoe"},"content":"            case FINDFLEX:","lastModifiedDate":"2023-02-15"},{"lineNumber":310,"author":{"gitId":"HmuuMyatMoe"},"content":"                checkFieldExists(splitInputs, \"keyword to find\");","lastModifiedDate":"2023-02-20"},{"lineNumber":311,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new FindFlexCommand(splitInputs[1]);","lastModifiedDate":"2023-02-15"},{"lineNumber":312,"author":{"gitId":"HmuuMyatMoe"},"content":"            case FINDDATE:","lastModifiedDate":"2023-02-15"},{"lineNumber":313,"author":{"gitId":"HmuuMyatMoe"},"content":"                checkFieldExists(splitInputs, \"date to find\");","lastModifiedDate":"2023-02-20"},{"lineNumber":314,"author":{"gitId":"HmuuMyatMoe"},"content":"                LocalDate localDateToFind \u003d getLocalDate(splitInputs[1],","lastModifiedDate":"2023-02-15"},{"lineNumber":315,"author":{"gitId":"HmuuMyatMoe"},"content":"                        0, splitInputs[1].length(), \"date to find\");","lastModifiedDate":"2023-02-15"},{"lineNumber":316,"author":{"gitId":"HmuuMyatMoe"},"content":"                return new FindDateCommand(localDateToFind);","lastModifiedDate":"2023-02-15"},{"lineNumber":317,"author":{"gitId":"HmuuMyatMoe"},"content":"            default:","lastModifiedDate":"2023-01-25"},{"lineNumber":318,"author":{"gitId":"HmuuMyatMoe"},"content":"                throw new InvalidInputException(","lastModifiedDate":"2023-01-25"},{"lineNumber":319,"author":{"gitId":"HmuuMyatMoe"},"content":"                        gui.getInvalidCommandErrorMsg());","lastModifiedDate":"2023-02-20"},{"lineNumber":320,"author":{"gitId":"HmuuMyatMoe"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":321,"author":{"gitId":"HmuuMyatMoe"},"content":"        } catch (IllegalArgumentException i) {","lastModifiedDate":"2023-01-25"},{"lineNumber":322,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new InvalidInputException(","lastModifiedDate":"2023-01-25"},{"lineNumber":323,"author":{"gitId":"HmuuMyatMoe"},"content":"                    gui.getInvalidCommandErrorMsg());","lastModifiedDate":"2023-02-20"},{"lineNumber":324,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":325,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":326,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"HmuuMyatMoe":326}},{"path":"src/main/java/botanic/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.BotanicException;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.parser.Parser;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Event;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.task.ToDo;","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of the Storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":" * This class represents the class that reads and writes to the storage file in the hard disk.","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Storage {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    private String dirPath;","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    private String fileName;","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"    private String filePath;","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"    private File myFile;","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates Storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dirPath The path to the directory that the file is stored in.","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param fileName The name of the storage file.","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Storage(String dirPath, String fileName) {","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.dirPath \u003d dirPath;","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"        filePath \u003d dirPath + \"/\" + this.fileName;","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Creates directory at the specified directory path if it does not already exist.","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Creates file at the specified file path if it does not already exist.","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void createFile() {","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"        //create directory if it does not already exist","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"        File dir \u003d new File(dirPath);","lastModifiedDate":"2023-02-20"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"            dir.mkdirs();","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"        //create file if it does not already exist","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"        //Solution below adapted from https://www.w3schools.com/java/java_files_create.asp","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"            myFile \u003d new File(filePath);","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"            if (!myFile.exists()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"                myFile.createNewFile();","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"            System.out.println(\"New storage file cannot be created.\");","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Reads data stored in the hard disk.","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return An ArrayList containing existing tasks stored in the storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws BotanicException If file to be read cannot be found.","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"    public ArrayList\u003cTask\u003e read() throws BotanicException {","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"            createFile();","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"            //Solution below adapted from https://www.w3schools.com/java/java_files_read.asp","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"            Scanner sc \u003d new Scanner(myFile);","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"                String data \u003d sc.nextLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"                String[] splitDatas \u003d data.split(\" \\\\| \");","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"                String taskType \u003d splitDatas[0];","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"                boolean isDone \u003d splitDatas[1].equals(\"1\");","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"                if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"                    ToDo t \u003d new ToDo(splitDatas[2], isDone);","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"                    tasks.add(t);","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"                } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"                    LocalDate end \u003d Parser.parseDate(splitDatas[3]);","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"                    Deadline d \u003d new Deadline(splitDatas[2], end, isDone);","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"                    tasks.add(d);","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"                } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"                    LocalDate start \u003d Parser.parseDate(splitDatas[3]);","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"                    LocalDate end \u003d Parser.parseDate(splitDatas[4]);","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"                    Event e \u003d new Event(splitDatas[2], start, end, isDone);","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"                    tasks.add(e);","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"            sc.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"            return tasks;","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new BotanicException(e + \"\\nData file not found.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Writes the given string input to file using given fileWriter.","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param fileWriter The fileWriter to use to write input.","lastModifiedDate":"2023-02-09"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param input The input to write into file.","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"    private void writeUsingFileWriter(FileWriter fileWriter, String input) {","lastModifiedDate":"2023-02-09"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"        //Solution below adapted from https://www.w3schools.com/java/java_files_create.asp","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"        try {","lastModifiedDate":"2023-02-09"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"            fileWriter.write(input + \"\\n\");","lastModifiedDate":"2023-02-09"},{"lineNumber":113,"author":{"gitId":"HmuuMyatMoe"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"            System.out.println(\"Unable to write to data file.\");","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-09"},{"lineNumber":116,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":117,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":118,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":119,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":120,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Updates the storage file in hard disk with the given list of tasks.","lastModifiedDate":"2023-01-25"},{"lineNumber":121,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":122,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks Varargs of tasks.","lastModifiedDate":"2023-02-02"},{"lineNumber":123,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":124,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void writeToFile(Task... tasks) {","lastModifiedDate":"2023-02-09"},{"lineNumber":125,"author":{"gitId":"HmuuMyatMoe"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"HmuuMyatMoe"},"content":"            //Solution below adapted from https://www.w3schools.com/java/java_files_create.asp","lastModifiedDate":"2023-02-20"},{"lineNumber":127,"author":{"gitId":"HmuuMyatMoe"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"HmuuMyatMoe"},"content":"            Arrays.stream(tasks)","lastModifiedDate":"2023-02-09"},{"lineNumber":129,"author":{"gitId":"HmuuMyatMoe"},"content":"                    .map(t -\u003e t.formatForStorage())","lastModifiedDate":"2023-02-09"},{"lineNumber":130,"author":{"gitId":"HmuuMyatMoe"},"content":"                    .forEach(t -\u003e writeUsingFileWriter(fileWriter, t));","lastModifiedDate":"2023-02-09"},{"lineNumber":131,"author":{"gitId":"HmuuMyatMoe"},"content":"            fileWriter.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":132,"author":{"gitId":"HmuuMyatMoe"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"HmuuMyatMoe"},"content":"            System.out.println(\"Unable to write to data file.\");","lastModifiedDate":"2023-02-20"},{"lineNumber":134,"author":{"gitId":"HmuuMyatMoe"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"HmuuMyatMoe":137}},{"path":"src/main/java/botanic/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.Formatter;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of a Deadline task,","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * a task that needs to be done before a specific date.","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    //The deadline given.","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    private LocalDate end;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates Deadline with two arguments given.","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param end The end date of deadline.","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Deadline(String name, LocalDate end) {","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(name);","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates deadline with three arguments given.","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param end The end date of deadline.","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param isDone Status of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Deadline(String name, LocalDate end, boolean isDone) {","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the string with a [D] icon representing this task.","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of this Deadline task.","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"        String toPrint \u003d String.format(\"[D]%s (by: %s)\",","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"                super.toString(), Formatter.formatDateForPrint(end));","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"        return toPrint;","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns a formatted string representation of this task for storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of this Deadline task.","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String formatForStorage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"        return (\"D | \" + super.formatForStorage()","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"                + String.format(\" | %s\", Formatter.formatDateForStorage(end)));","lastModifiedDate":"2023-02-20"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Checks if given date matches with this deadline\u0027s end date.","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateToFind The given date to find.","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return True if date given matches with this deadline\u0027s end date, false otherwise.","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"    public boolean hasDate(LocalDate dateToFind) {","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (end.equals(dateToFind)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"            return true;","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":74}},{"path":"src/main/java/botanic/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.Formatter;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of an Event task.","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":" * This class represents a task that starts and ends at a specific date.","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    //Start time","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    private LocalDate start;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    //End time","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    private LocalDate end;","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates Event with three arguments given.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param start The start date of event.","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param end The end date of event.","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Event(String name, LocalDate start, LocalDate end) {","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(name);","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates Event with 4 arguments given.","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param start The start date of event.","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param end The end date of event.","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param isDone Status of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Event(String name, LocalDate start, LocalDate end, boolean isDone) {","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the string with a [E] icon representing this task.","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of this Event task.","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"        String s \u003d Formatter.formatDateForPrint(start);","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"        String e \u003d Formatter.formatDateForPrint(end);","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"        String toPrint \u003d String.format(\"[E]%s (from: %s to: %s)\",","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"                super.toString(), s, e);","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"        return toPrint;","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns a formatted string representation of this task for storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of this Event task.","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String formatForStorage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"        String s \u003d Formatter.formatDateForStorage(start);","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"        String e \u003d Formatter.formatDateForStorage(end);","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"        return (\"E | \" + super.formatForStorage() + String.format(\" | %s | %s\", s, e));","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Checks if given date matches with this event\u0027s start date or end date.","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateToFind The given date to find.","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return True if date given matches with this event\u0027s start or end date, false otherwise.","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"    public boolean hasDate(LocalDate dateToFind) {","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (start.equals(dateToFind) || end.equals(dateToFind)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"            return true;","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":84}},{"path":"src/main/java/botanic/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of a task.","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"    //name of the task.","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"    private String name;","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"    //track whether the class is marked as done.","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates Task with one argument given.","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates a task with two arguments given.","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param isDone Status of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"    public Task(String name, boolean isDone) {","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"        this(name);","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Sets isDone to given boolean value.","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-20"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param isDone Boolean value to set isDone to.","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns a string representing the \u0027isDone\u0027 status.","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return \"X\" if isDone is true, \" \" otherwise.","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String getIsDone() {","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (isDone) {","lastModifiedDate":"2023-02-20"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"            return \"X\";","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"        return \" \";","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the string representation of the \u0027isDone\u0027 status and the name of this task.","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The string representation of this task.","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"        String status \u003d getIsDone();","lastModifiedDate":"2023-02-20"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"        return (String.format(\"[%s] %s\", status, name));","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns a formatted string representation of this task for storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of this task.","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String formatForStorage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"        String status \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert status \u003d\u003d \"1\" || status \u003d\u003d \"0\" : \"Status not set properly.\";","lastModifiedDate":"2023-02-09"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"        return (String.format(\"%s | %s\", status, name));","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Searches for given keyword string in the name of this task.","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The given keyword string.","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return True if name contains keyword, false otherwise.","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"        String formatName \u003d \" \" + name.toUpperCase() + \" \";","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"        return formatName.contains(keyword.toUpperCase());","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Searches for given date in the task description.","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateToFind The given date to find.","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return False as Task does not have a date field.","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"    public boolean hasDate(LocalDate dateToFind) {","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":98}},{"path":"src/main/java/botanic/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.Formatter;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.exception.OutOfBoundsException;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import botanic.gui.Gui;","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of the list containing tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"public class TaskList {","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"     * An ArrayList to store the tasks.","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"    private Gui gui \u003d new Gui();","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates TaskList with no arguments given.","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates TaskList with the given ArrayList.","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param tasks The list of our tasks fetched from hard drive storage.","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns this list of tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The ArrayList containing the tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"        return tasks;","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Adds tasks into the list and prints out completion message when done.","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message to signify a successful task addition.","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String add(Task task) {","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"        boolean isAdded \u003d tasks.add(task);","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert isAdded : \"Task is not added to the task basket successfully.\";","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"        String response \u003d gui.getAddSuccessMsg(task, tasks.size());","lastModifiedDate":"2023-02-20"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"        return response;","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Deletes task at the given index.","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param index The index of task to be deleted.","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message to signify a successful task deletion.","lastModifiedDate":"2023-02-20"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws OutOfBoundsException If index given is less than 0","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"     *                              or more than the index of the last list element.","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String delete(int index) throws OutOfBoundsException {","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new OutOfBoundsException(gui.getOutOfBoundsErrorMsg());","lastModifiedDate":"2023-02-17"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert index \u003e 0 \u0026\u0026 index \u003c tasks.size() : \"Index given is out of bounds\";","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"        Task removed \u003d tasks.remove(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert removed !\u003d null : \"Task at index not removed.\";","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getDeleteSuccessMsg(removed, tasks.size());","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Marks the task at the given index as done.","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param index The index number of the task given.","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message to signify the successful marking of task as done.","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws OutOfBoundsException If index given is less than 0","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"     *                              or more than the index of the last list element.","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String markIsDone(int index) throws OutOfBoundsException {","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new OutOfBoundsException(gui.getOutOfBoundsErrorMsg());","lastModifiedDate":"2023-02-17"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert index \u003e 0 \u0026\u0026 index \u003c tasks.size() : \"Index given is out of bounds\";","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"        task.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getMarkSuccessMsg(task);","lastModifiedDate":"2023-02-17"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Marks the task at the given index as not done.","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param index The index number of the task given.","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string message to signify the success marking of task as not done.","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @throws OutOfBoundsException If index given is less than 0","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"     *                              or more than the index of the last list element.","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String unmarkIsDone(int index) throws OutOfBoundsException {","lastModifiedDate":"2023-02-02"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"            throw new OutOfBoundsException(gui.getOutOfBoundsErrorMsg());","lastModifiedDate":"2023-02-17"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert index \u003e 0 \u0026\u0026 index \u003c tasks.size() : \"Index given is out of bounds\";","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"        task.setDone(false);","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getUnmarkSuccessMsg(task);","lastModifiedDate":"2023-02-17"},{"lineNumber":113,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Appends all the tasks in the list into a string.","lastModifiedDate":"2023-02-02"},{"lineNumber":117,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":118,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of the list of all the tasks.","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":120,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String print() {","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"HmuuMyatMoe"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2023-02-20"},{"lineNumber":122,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2023-01-19"},{"lineNumber":123,"author":{"gitId":"HmuuMyatMoe"},"content":"            return gui.getNoItemErrorMsg();","lastModifiedDate":"2023-02-17"},{"lineNumber":124,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":125,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert size !\u003d 0 : \"List size is 0\";","lastModifiedDate":"2023-02-09"},{"lineNumber":126,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.printTasks(this);","lastModifiedDate":"2023-02-17"},{"lineNumber":127,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":128,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":130,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Searches for tasks with names that completely matches","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"HmuuMyatMoe"},"content":"     * the given keyword (case-insensitive) and returns the result.","lastModifiedDate":"2023-02-20"},{"lineNumber":132,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The keyword to search for.","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The results of the search.","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String findAllMatch(String keyword) {","lastModifiedDate":"2023-02-15"},{"lineNumber":137,"author":{"gitId":"HmuuMyatMoe"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"HmuuMyatMoe"},"content":"        TaskList searchResult \u003d new TaskList();","lastModifiedDate":"2023-02-17"},{"lineNumber":139,"author":{"gitId":"HmuuMyatMoe"},"content":"        for (int currIndex \u003d 0; currIndex \u003c size; currIndex++) {","lastModifiedDate":"2023-02-17"},{"lineNumber":140,"author":{"gitId":"HmuuMyatMoe"},"content":"            Task curr \u003d tasks.get(currIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":141,"author":{"gitId":"HmuuMyatMoe"},"content":"            if (curr.hasKeyword(\" \" + keyword + \" \")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":142,"author":{"gitId":"HmuuMyatMoe"},"content":"                searchResult.add(curr);","lastModifiedDate":"2023-02-17"},{"lineNumber":143,"author":{"gitId":"HmuuMyatMoe"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"HmuuMyatMoe"},"content":"        int resultSize \u003d searchResult.getTaskList().size();","lastModifiedDate":"2023-02-17"},{"lineNumber":146,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (resultSize \u003e 0) {","lastModifiedDate":"2023-02-17"},{"lineNumber":147,"author":{"gitId":"HmuuMyatMoe"},"content":"            return gui.getFindResult(searchResult);","lastModifiedDate":"2023-02-17"},{"lineNumber":148,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":149,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert resultSize \u003c 0 : \"Items found but not printed.\";","lastModifiedDate":"2023-02-17"},{"lineNumber":150,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getNoCompleteMatchErrorMsg(keyword);","lastModifiedDate":"2023-02-17"},{"lineNumber":151,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":152,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":153,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":154,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Searches for tasks with names that partially or completely matches","lastModifiedDate":"2023-02-15"},{"lineNumber":155,"author":{"gitId":"HmuuMyatMoe"},"content":"     * the given keyword (case-insensitive) and returns the result.","lastModifiedDate":"2023-02-20"},{"lineNumber":156,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":157,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param keyword The keyword to search for.","lastModifiedDate":"2023-02-15"},{"lineNumber":158,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The results of the search.","lastModifiedDate":"2023-02-15"},{"lineNumber":159,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":160,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String findFlexibly(String keyword) {","lastModifiedDate":"2023-02-15"},{"lineNumber":161,"author":{"gitId":"HmuuMyatMoe"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2023-02-20"},{"lineNumber":162,"author":{"gitId":"HmuuMyatMoe"},"content":"        TaskList searchResult \u003d new TaskList();","lastModifiedDate":"2023-02-17"},{"lineNumber":163,"author":{"gitId":"HmuuMyatMoe"},"content":"        for (int currIndex \u003d 0; currIndex \u003c size; currIndex++) {","lastModifiedDate":"2023-02-17"},{"lineNumber":164,"author":{"gitId":"HmuuMyatMoe"},"content":"            Task curr \u003d tasks.get(currIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":165,"author":{"gitId":"HmuuMyatMoe"},"content":"            if (curr.hasKeyword(keyword)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":166,"author":{"gitId":"HmuuMyatMoe"},"content":"                searchResult.add(curr);","lastModifiedDate":"2023-02-17"},{"lineNumber":167,"author":{"gitId":"HmuuMyatMoe"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":168,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":169,"author":{"gitId":"HmuuMyatMoe"},"content":"        int resultSize \u003d searchResult.getTaskList().size();","lastModifiedDate":"2023-02-17"},{"lineNumber":170,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (resultSize \u003e 0) {","lastModifiedDate":"2023-02-17"},{"lineNumber":171,"author":{"gitId":"HmuuMyatMoe"},"content":"            return gui.getFindResult(searchResult);","lastModifiedDate":"2023-02-17"},{"lineNumber":172,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":173,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert resultSize \u003c 0 : \"Items found but not printed.\";","lastModifiedDate":"2023-02-17"},{"lineNumber":174,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getNoPartialMatchErrorMsg(keyword);","lastModifiedDate":"2023-02-17"},{"lineNumber":175,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":176,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":177,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":178,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Searches for tasks with dates that matches","lastModifiedDate":"2023-02-15"},{"lineNumber":179,"author":{"gitId":"HmuuMyatMoe"},"content":"     * the given date and returns the result.","lastModifiedDate":"2023-02-20"},{"lineNumber":180,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-15"},{"lineNumber":181,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param dateToFind The date to search for.","lastModifiedDate":"2023-02-15"},{"lineNumber":182,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return The results of the search.","lastModifiedDate":"2023-02-15"},{"lineNumber":183,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":184,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String findDate(LocalDate dateToFind) {","lastModifiedDate":"2023-02-15"},{"lineNumber":185,"author":{"gitId":"HmuuMyatMoe"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2023-02-20"},{"lineNumber":186,"author":{"gitId":"HmuuMyatMoe"},"content":"        TaskList searchResult \u003d new TaskList();","lastModifiedDate":"2023-02-17"},{"lineNumber":187,"author":{"gitId":"HmuuMyatMoe"},"content":"        for (int currIndex \u003d 0; currIndex \u003c size; currIndex++) {","lastModifiedDate":"2023-02-17"},{"lineNumber":188,"author":{"gitId":"HmuuMyatMoe"},"content":"            Task curr \u003d tasks.get(currIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":189,"author":{"gitId":"HmuuMyatMoe"},"content":"            if (curr.hasDate(dateToFind)) {","lastModifiedDate":"2023-02-20"},{"lineNumber":190,"author":{"gitId":"HmuuMyatMoe"},"content":"                searchResult.add(curr);","lastModifiedDate":"2023-02-17"},{"lineNumber":191,"author":{"gitId":"HmuuMyatMoe"},"content":"            }","lastModifiedDate":"2023-02-17"},{"lineNumber":192,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":193,"author":{"gitId":"HmuuMyatMoe"},"content":"        int resultSize \u003d searchResult.getTaskList().size();","lastModifiedDate":"2023-02-17"},{"lineNumber":194,"author":{"gitId":"HmuuMyatMoe"},"content":"        if (resultSize \u003e 0) {","lastModifiedDate":"2023-02-17"},{"lineNumber":195,"author":{"gitId":"HmuuMyatMoe"},"content":"            return gui.getFindResult(searchResult);","lastModifiedDate":"2023-02-17"},{"lineNumber":196,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":197,"author":{"gitId":"HmuuMyatMoe"},"content":"        assert resultSize \u003c 0 : \"Items found but not printed.\";","lastModifiedDate":"2023-02-17"},{"lineNumber":198,"author":{"gitId":"HmuuMyatMoe"},"content":"        String dateFormatted \u003d Formatter.formatDateForPrint(dateToFind);","lastModifiedDate":"2023-02-15"},{"lineNumber":199,"author":{"gitId":"HmuuMyatMoe"},"content":"        return gui.getNoDateMatchErrorMsg(dateFormatted);","lastModifiedDate":"2023-02-17"},{"lineNumber":200,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":201,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":202,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-17"},{"lineNumber":203,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns a string representation of all the tasks in the list.","lastModifiedDate":"2023-02-20"},{"lineNumber":204,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-02-17"},{"lineNumber":205,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of the list.","lastModifiedDate":"2023-02-17"},{"lineNumber":206,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-17"},{"lineNumber":207,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-02-17"},{"lineNumber":208,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String toString() {","lastModifiedDate":"2023-02-17"},{"lineNumber":209,"author":{"gitId":"HmuuMyatMoe"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2023-02-20"},{"lineNumber":210,"author":{"gitId":"HmuuMyatMoe"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-17"},{"lineNumber":211,"author":{"gitId":"HmuuMyatMoe"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2023-02-17"},{"lineNumber":212,"author":{"gitId":"HmuuMyatMoe"},"content":"            sb.append(String.format(\"%d. %s\\n\", (i + 1), tasks.get(i)));","lastModifiedDate":"2023-02-20"},{"lineNumber":213,"author":{"gitId":"HmuuMyatMoe"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":214,"author":{"gitId":"HmuuMyatMoe"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":215,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":216,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":216}},{"path":"src/main/java/botanic/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":" * Encapsulates the related fields and behavior of a ToDo task.","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":" * This class represents a task without any date/time attached.","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates ToDo with one argument given.","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(name);","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Instantiates ToDo with two arguments given.","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @param isDone Status of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"    public ToDo(String name, boolean isDone) {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns the string with a [T] icon representing this task.","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of this ToDo task.","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"        return (\"[T]\" + super.toString());","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Returns a formatted string representation of this task for storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"     * @return A string representation of this ToDo task.","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"    public String formatForStorage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"        return (\"T | \" + super.formatForStorage());","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":46}},{"path":"src/main/resources/images/IconCredit.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"All images used are taken from https://www.flaticon.com/","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"Credit for BotanicIcon.png: \u003ca href\u003d\"https://www.flaticon.com/free-icons/apple\" title\u003d\"apple icons\"\u003eApple icons created by Freepik - Flaticon\u003c/a\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"BotanicIcon.png taken from: https://www.flaticon.com/free-icon/apple_4478115","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"Credit for UserIcon.png: \u003ca href\u003d\"https://www.flaticon.com/free-icons/cloudy\" title\u003d\"cloudy icons\"\u003eCloudy icons created by Freepik - Flaticon\u003c/a\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"UserIcon.png taken from: https://www.flaticon.com/free-icon/sun_4478387?related_id\u003d4478387\u0026origin\u003dpack","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"HmuuMyatMoe":6}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c!--","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"    @@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"    Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"    with minor modifications","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"--\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003cfont\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"                \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003c/font\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"88.0\" fitWidth\u003d\"88.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c!--","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"    @@author","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"--\u003e","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"HmuuMyatMoe":29}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c!--","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"    @@author HmuuMyatMoe-reused","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"    Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"--\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.Cursor?\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003cAnchorPane blendMode\u003d\"DARKEN\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"420.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"botanic.gui.MainWindow\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" \u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003cfont\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"                \u003cFont size \u003d \"13.0\" /\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003c/font\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003c/TextField\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003ccursor\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"                \u003cCursor fx:constant\u003d\"OPEN_HAND\" /\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003c/cursor\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003c/Button\u003e","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"420.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"HmuuMyatMoe":34}},{"path":"src/test/java/botanic/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":" * Tests the behavior of Deadline class.","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of toString().","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[D][ ] get food (by: 11 NOVEMBER 2024)\",","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"                new Deadline(\"get food\", ld).toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of formatForStorage().","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void testFormatStore() {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"D | 0 | get food | 2024/11/11\",","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"                new Deadline(\"get food\", ld).formatForStorage());","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"    * Tests the behaviour of setDone() by trying to mark the task as done.","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"    */","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void setDone_setTrue_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"        Deadline task \u003d new Deadline(\"get food\", ld);","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"        task.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[D][X] get food (by: 11 NOVEMBER 2024)\", task.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of setDone() by trying to mark the task as done,","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"     * then mark the task as not done.","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void setDone_setTrueThenSetFalse_false() {","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"        Deadline deadline \u003d new Deadline(\"get food\", ld);","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"        deadline.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"        deadline.setDone(false);","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[D][ ] get food (by: 11 NOVEMBER 2024)\", deadline.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of getIsDone() when a task is not marked.","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void getIsDone_unmarked_whiteSpace() {","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\" \", new Deadline(\"get food\", ld).getIsDone());","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of getIsDone() when a task is marked.","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void getIsDone_marked_markedX() {","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"        Deadline deadline \u003d new Deadline(\"get food\", ld);","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"        deadline.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"X\", deadline.getIsDone());","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasDate() by instantiating a Deadline","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"     * with a date ld and checking if task contains the same date ld,","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"     * which is expected to make the method return true.","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasDate_sameDate_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new Deadline(\"get food\", ld).hasDate(ld));","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasDate() by instantiating a Deadline","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"     * with a date ld and checking if task contains a different date,","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"     * which is expected to make the method return false.","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasDate_diffDate_false() {","lastModifiedDate":"2023-02-20"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate diffDate \u003d LocalDate.parse(\"2023/04/05\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertFalse(new Deadline(\"get food\", ld).hasDate(diffDate));","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":113,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to completely match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":116,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_allMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new Deadline(\"get food\", ld).hasKeyword(\"get food\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":122,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to partially match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":125,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":126,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":127,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_partialMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":129,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":130,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new Deadline(\"get food\", ld).hasKeyword(\"foo\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":132,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":133,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":134,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":135,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to not match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":136,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":137,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":138,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_noMatchingName_false() {","lastModifiedDate":"2023-02-20"},{"lineNumber":139,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":140,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":141,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertFalse(new Deadline(\"get food\", ld).hasKeyword(\"gt food\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":142,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":143,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"HmuuMyatMoe":143}},{"path":"src/test/java/botanic/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":" * Tests the behavior of Event class.","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"public class EventTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of toString().","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[E][ ] school (from: 11 NOVEMBER 2024 to: 25 NOVEMBER 2024)\",","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"                new Event(\"school\", start, end).toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of formatForStorage().","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void testFormatStore() {","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"E | 0 | school event | 2024/11/11 | 2024/11/25\",","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"                new Event(\"school event\", start, end).formatForStorage());","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of setDone() by trying to mark the task as done.","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void setDone_setTrue_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"        Event event \u003d new Event(\"school\", start, end);","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"        event.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[E][X] school (from: 11 NOVEMBER 2024 to: 25 NOVEMBER 2024)\",","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"                event.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of setDone() by trying to mark the task as done,","lastModifiedDate":"2023-02-20"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"     * then mark the task as not done.","lastModifiedDate":"2023-02-20"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void setDone_setTrueThenSetFalse_false() {","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"        Event event \u003d new Event(\"school\", start, end);","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"        event.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"        event.setDone(false);","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[E][ ] school (from: 11 NOVEMBER 2024 to: 25 NOVEMBER 2024)\",","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"                event.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of getIsDone() when a task is not marked.","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void getIsDone_unmarked_whiteSpace() {","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\" \", new Event(\"school event\", start, end).getIsDone());","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of getIsDone() when a task is marked.","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void getIsDone_marked_markedX() {","lastModifiedDate":"2023-02-20"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"        Event event \u003d new Event(\"school event\", start, end);","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"        event.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"X\", event.getIsDone());","lastModifiedDate":"2023-02-20"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasDate() by checking for the same start date","lastModifiedDate":"2023-02-20"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"     * that was used to instantiate the deadline object.","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasDate_startDateContainsDate_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new Event(\"school event\", start, end).hasDate(start));","lastModifiedDate":"2023-02-20"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasDate() by checking for the same end date","lastModifiedDate":"2023-02-20"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"     * that was used to instantiate the deadline object.","lastModifiedDate":"2023-02-15"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasDate_endDateContainsDate_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":115,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new Event(\"school event\", start, end).hasDate(end));","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasDate() by checking for a date","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"HmuuMyatMoe"},"content":"     * that the task does not contain.","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":122,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasDate_diffDate_false() {","lastModifiedDate":"2023-02-20"},{"lineNumber":124,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":125,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":126,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":127,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate diffDate \u003d LocalDate.parse(\"2023/04/05\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":128,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertFalse(new Event(\"get food\", start, end).hasDate(diffDate));","lastModifiedDate":"2023-02-20"},{"lineNumber":129,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":130,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":132,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":133,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to completely match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":134,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":135,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":136,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_allMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":137,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":138,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":139,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":140,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new Event(\"get food\", start, end).hasKeyword(\"get food\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":141,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":142,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":143,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":144,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":145,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to partially match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":146,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":147,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":148,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_partialMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":149,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":150,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":151,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":152,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new Event(\"get food\", start, end).hasKeyword(\"foo\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":153,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":154,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":155,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":156,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":157,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to not match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":158,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":159,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":160,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_noMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":161,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":162,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate start \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":163,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate end \u003d LocalDate.parse(\"2024/11/25\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":164,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertFalse(new Event(\"get food\", start, end).hasKeyword(\"gt food\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":165,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":166,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"HmuuMyatMoe":166}},{"path":"src/test/java/botanic/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"package botanic.task;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":" * Tests the behavior of ToDo class.","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Test the behaviour of toString().","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[T][ ] get food\",","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"                new ToDo(\"get food\").toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Test the behaviour of formatForStorage().","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void testFormatStore() {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"T | 0 | get food\",","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"                new ToDo(\"get food\").formatForStorage());","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"    * Tests the behaviour of setDone() by trying to mark the task as done.","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"    */","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void setDone_setTrue_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"        ToDo todo \u003d new ToDo(\"get food\");","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"        todo.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":41,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[T][X] get food\", todo.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of setDone() by trying to mark the task as done,","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"HmuuMyatMoe"},"content":"     * then mark the task as not done.","lastModifiedDate":"2023-02-20"},{"lineNumber":47,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void setDone_setTrueThenSetFalse_false() {","lastModifiedDate":"2023-02-20"},{"lineNumber":50,"author":{"gitId":"HmuuMyatMoe"},"content":"        ToDo todo \u003d new ToDo(\"get food\");","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"HmuuMyatMoe"},"content":"        todo.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":52,"author":{"gitId":"HmuuMyatMoe"},"content":"        todo.setDone(false);","lastModifiedDate":"2023-02-20"},{"lineNumber":53,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"[T][ ] get food\", todo.toString());","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of getIsDone() when a task is not marked.","lastModifiedDate":"2023-02-20"},{"lineNumber":58,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void getIsDone_unmarked_whiteSpace() {","lastModifiedDate":"2023-02-20"},{"lineNumber":61,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\" \", new ToDo(\"a\").getIsDone());","lastModifiedDate":"2023-02-20"},{"lineNumber":62,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of getIsDone() when a task is marked.","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void getIsDone_marked_markedX() {","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"HmuuMyatMoe"},"content":"        ToDo todo \u003d new ToDo(\"a\");","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"HmuuMyatMoe"},"content":"        todo.setDone(true);","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertEquals(\"X\", todo.getIsDone());","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to completely match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_allMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new ToDo(\"get food\").hasKeyword(\"get food\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to partially match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_partialMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":89,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertTrue(new ToDo(\"get food\").hasKeyword(\"foo\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":90,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasKeyword() by searching for","lastModifiedDate":"2023-02-20"},{"lineNumber":94,"author":{"gitId":"HmuuMyatMoe"},"content":"     * a keyword that the task name is expected to not match with.","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":96,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void hasKeyword_noMatchingName_true() {","lastModifiedDate":"2023-02-20"},{"lineNumber":98,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertFalse(new ToDo(\"get food\").hasKeyword(\"gt food\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":99,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"HmuuMyatMoe"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"HmuuMyatMoe"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"HmuuMyatMoe"},"content":"     * Tests the behaviour of hasDate().","lastModifiedDate":"2023-02-20"},{"lineNumber":103,"author":{"gitId":"HmuuMyatMoe"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":104,"author":{"gitId":"HmuuMyatMoe"},"content":"    @Test","lastModifiedDate":"2023-02-15"},{"lineNumber":105,"author":{"gitId":"HmuuMyatMoe"},"content":"    public void testHasDate() {","lastModifiedDate":"2023-02-20"},{"lineNumber":106,"author":{"gitId":"HmuuMyatMoe"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");","lastModifiedDate":"2023-02-15"},{"lineNumber":107,"author":{"gitId":"HmuuMyatMoe"},"content":"        LocalDate ld \u003d LocalDate.parse(\"2024/11/11\", dtf);","lastModifiedDate":"2023-02-15"},{"lineNumber":108,"author":{"gitId":"HmuuMyatMoe"},"content":"        assertFalse(new ToDo(\"get food\").hasDate(ld));","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"HmuuMyatMoe"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"HmuuMyatMoe"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"HmuuMyatMoe":110}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HmuuMyatMoe"},"content":"todo buy food","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"HmuuMyatMoe"},"content":"deadline do hw /by Monday","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"HmuuMyatMoe"},"content":"event cca /from Jan 1 /to Jan 5","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"HmuuMyatMoe"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"HmuuMyatMoe"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"HmuuMyatMoe"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"HmuuMyatMoe"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"HmuuMyatMoe"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"HmuuMyatMoe"},"content":"t","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"HmuuMyatMoe"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"HmuuMyatMoe"},"content":"tdo drink water","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"HmuuMyatMoe"},"content":"deadline","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"HmuuMyatMoe"},"content":"deadline a","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"HmuuMyatMoe"},"content":"deadline /by","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"HmuuMyatMoe"},"content":"deadline a /by","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"HmuuMyatMoe"},"content":"event","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"HmuuMyatMoe"},"content":"event a","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"HmuuMyatMoe"},"content":"event a /from","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"HmuuMyatMoe"},"content":"event a /from /to","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"HmuuMyatMoe"},"content":"event a /to 4","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"HmuuMyatMoe"},"content":"event a /from 4","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"HmuuMyatMoe"},"content":"event a /from 4 /to","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"HmuuMyatMoe"},"content":"event /from","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"HmuuMyatMoe"},"content":"event /from /to","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"HmuuMyatMoe"},"content":"event /from 2 /to 4","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"HmuuMyatMoe"},"content":"todo a","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"HmuuMyatMoe"},"content":"todo b","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"HmuuMyatMoe"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"HmuuMyatMoe"},"content":"delete 4","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"HmuuMyatMoe"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"HmuuMyatMoe"},"content":"mark 0","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"HmuuMyatMoe"},"content":"mark -1","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"HmuuMyatMoe"},"content":"mark 8","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"HmuuMyatMoe"},"content":"unmark 0","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"HmuuMyatMoe"},"content":"unmark -3","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"HmuuMyatMoe"},"content":"unmark 10","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"HmuuMyatMoe"},"content":"delete 0","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"HmuuMyatMoe"},"content":"delete -5","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"HmuuMyatMoe"},"content":"delete 9","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"HmuuMyatMoe"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"HmuuMyatMoe":40}}]
