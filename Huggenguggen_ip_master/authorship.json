[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"    private final String LINE_BREAK \u003d \"\\n\\t ^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^\\n\";","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor method for Duke Chatbot.","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"     * @param filePath a string representation of the filePath of","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"     *                 data stored when application is run.","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"        ui.greet();","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"            storage.loadData(taskList);","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"     * Main Method to call Duke.","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"     * @param args The command line arguments.","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"     * Run method to start Duke. Initializes scanner and parser","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"     * and contains main loop for commands.","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"    private void run() {","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"        Scanner usr_in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"        Parser parser \u003d new Parser(usr_in);","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"        while (usr_in.hasNextLine()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"            try {","lastModifiedDate":"2023-01-14"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"                parser.parse_cmds(taskList, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"                storage.writeToData(taskList.itemsToData());","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-01-14"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"                System.out.println(LINE_BREAK + \"\\t \" + e.getMessage() + \"\\n\" + LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"            }","lastModifiedDate":"2023-01-13"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Huggenguggen":59,"-":3}},{"path":"src/main/java/duke/exception/AlreadyMarkedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.exception;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"public class AlreadyMarkedException extends DukeException {","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyMarkedException() {","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyMarkedException(String message) {","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"        super(message);","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyMarkedException(Throwable cause) {","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"        super(cause);","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyMarkedException (String message, Throwable cause) {","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"        super (message, cause);","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":21}},{"path":"src/main/java/duke/exception/AlreadyUnmarkedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.exception;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"public class AlreadyUnmarkedException extends DukeException {","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyUnmarkedException() {","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyUnmarkedException(String message) {","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"        super(message);","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyUnmarkedException(Throwable cause) {","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"        super(cause);","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"    public AlreadyUnmarkedException (String message, Throwable cause) {","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"        super (message, cause);","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":21}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.exception;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"    public DukeException() {","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"        super(message);","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"    public DukeException(Throwable cause) {","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"        super(cause);","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"    public DukeException (String message, Throwable cause) {","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"        super (message, cause);","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":19}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.parser;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"public class Parser {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    private Scanner usr_in;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor method for Parser.","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"     * @param usr_in Scanner object that takes in user input.","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"    public Parser(Scanner usr_in) {","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"        this.usr_in \u003d usr_in;","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"     * Main method for parsing commands.","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"     * @param taskList TaskList containing list of all tasks in the program.","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui ui to show user messages.","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException if there is an error (usually user input error).","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"    public void parse_cmds(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"        String curr_in \u003d usr_in.nextLine().trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"        String[] curr \u003d new String[0];","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"        if (curr_in.contains(\"/by\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"            curr \u003d curr_in.split(\"/by\"); //split into title and time-related","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_in.contains(\"/from\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"            curr \u003d curr_in.split(\"/from\");","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"            curr \u003d new String[]{curr_in};","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"        String[] curr_title \u003d curr[0].split(\" \"); //split title by word","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"        if (curr_in.equals(\"bye\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"            taskList.end(ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_in.equals(\"list\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"            ui.print(taskList);","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_title[0].equals(\"mark\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"            taskList.mark(curr_title, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_title[0].equals(\"unmark\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"            taskList.unmark(curr_title, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_title[0].equals(\"todo\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"            taskList.addToDo(curr, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_title[0].equals(\"deadline\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"            taskList.addDeadline(curr, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_title[0].equals(\"event\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"            taskList.addEvent(curr, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_title[0].equals(\"delete\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"            taskList.deleteTask(curr_title, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"        } else if (curr_title[0].equals(\"find\")) {","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"            taskList.findTask(curr_title, ui);","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"                throw new DukeException(\"Hmmm, I don\u0027t understand what you want to do\");","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Huggenguggen":61}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.storage;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import java.io.File;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"import duke.task.*;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"public class Storage {","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"    private String filePath;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor method for Storage.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"     * @param filePath String representation of the filePath for storage.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"     * Method to load data from hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"     * @param taskList TaskList to contain list of tasks loaded from hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"     * @throws IOException If there is an error retrieving the file.","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"    public void loadData(TaskList taskList) throws IOException {","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"            Scanner in \u003d new Scanner(Paths.get(\"data\", \"duke.txt\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"            while(in.hasNextLine()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"                String line \u003d in.nextLine();","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"                parse_data(line, taskList);","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"            fw.close();","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"     * Method for writing String to file on hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"     * @param newData data to be written.","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"     * @throws IOException If there is an error retrieving the file.","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"    public void writeToData(String newData) throws IOException {","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"        fw.write(newData);","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"        fw.close();","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"     * Method for parsing the data from the file on hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"     * @param line line to be parsed.","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"     * @param taskList TaskList to contain list of tasks loaded.","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"Huggenguggen"},"content":"    public void parse_data(String line, TaskList taskList) {","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Huggenguggen"},"content":"        String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"Huggenguggen"},"content":"        if (parts[0].trim().equals(\"[T]\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"Huggenguggen"},"content":"            taskList.initAdd(new ToDo(parts[2].trim(), parts[1].trim().equals(\"1\")));","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"Huggenguggen"},"content":"        } else if (parts[0].trim().equals(\"[D]\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Huggenguggen"},"content":"            taskList.initAdd(new Deadline(parts[2].trim(), parts[3].trim(), parts[1].trim().equals(\"1\")));","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Huggenguggen"},"content":"        } else if (parts[0].trim().equals(\"[E]\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"Huggenguggen"},"content":"            String[] fromAndTo \u003d parts[3].trim().split(\"-\");","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"Huggenguggen"},"content":"            taskList.initAdd(new Event(parts[2].trim(), fromAndTo[0], fromAndTo[1], parts[1].trim().equals(\"1\")));","lastModifiedDate":"2023-01-17"},{"lineNumber":70,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Huggenguggen":72}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"    private String deadline;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"    private LocalDateTime dateline;","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor method for Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"     * @param title    title of the Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"     * @param deadline deadline of the Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"    public Deadline(String title, String deadline) {","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"        super(title);","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"        this.type \u003d \"[D]\";","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"            this.dateline \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"            throw e;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"     * Overloaded constructor method for Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"     * Primarily for when loading on startup.","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"     * @param title    title of the Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"     * @param deadline deadline of the Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"     * @param done     status of the Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"    public Deadline(String title, String deadline, boolean done) {","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"        super(title);","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"        this.type \u003d \"[D]\";","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"        this.done \u003d done;","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"            this.dateline \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"            throw e;","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"     * Alternative toString method purely for writing to hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"     * Can also be used for testing.","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of the task with all attribute information.","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"    public String toData() {","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"        return this.type + \" | \" + (this.done ? \"1\" : \"0\") + \" | \" + this.title + \" | \" + this.deadline;","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"     * Method for getting String representation of Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"Huggenguggen"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":65,"author":{"gitId":"Huggenguggen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":66,"author":{"gitId":"Huggenguggen"},"content":"        return super.toString() + \" (by: \" + this.dateline.format(DateTimeFormatter.ofPattern(\"HHmm MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":68,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":68}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"    private String from;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"    private String to;","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    private LocalDateTime fromDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"    private LocalDateTime toDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor method for Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"     * @param title title of the Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"     * @param from  starting date-time of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"     * @param to    ending date-time of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"    public Event(String title, String from, String to) {","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"        super(title);","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"        this.type \u003d \"[E]\";","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"            this.fromDate \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"            this.toDate \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"            throw e;","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"     * Overloaded constructor method for Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"     * Primarily for when loading on startup.","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"     * @param title title of the Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"     * @param from  starting date-time of the Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"     * @param to    ending date-time of the Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"     * @param done  status of the Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"    public Event(String title, String from, String to, boolean done) {","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"        super(title);","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"        this.type \u003d \"[E]\";","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"        this.done \u003d done;","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"            this.fromDate \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"            this.toDate \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"            throw e;","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"     * Alternative toString method purely for writing to hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"     * Can also be used for testing.","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of the task with all attribute information.","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"Huggenguggen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"Huggenguggen"},"content":"    public String toData() {","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"Huggenguggen"},"content":"        return this.type + \" | \" + (this.done ? \"1\" : \"0\") + \" | \" + this.title + \" | \" + this.from + \"-\" + this.to;","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"Huggenguggen"},"content":"     * Method for getting String representation of Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":71,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":72,"author":{"gitId":"Huggenguggen"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":73,"author":{"gitId":"Huggenguggen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":74,"author":{"gitId":"Huggenguggen"},"content":"        return super.toString() + \" (from: \" + this.fromDate.format(DateTimeFormatter.ofPattern(\"HHmm MMM d yyyy\")) +","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"Huggenguggen"},"content":"                \" to: \" + this.toDate.format(DateTimeFormatter.ofPattern(\"HHmm MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-01-17"},{"lineNumber":76,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":77,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":77}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"public class Task {","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"    boolean done;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"    private final String CHECKED \u003d \"[X]\";","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"    private final String UNCHECKED \u003d \"[ ]\";","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"    protected String title;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"    protected String type;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor Method for Task.","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"     * @param title title of the Task.","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"    public Task(String title) {","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"        this.type \u003d \"\";","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"     * Method for marking the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"    public void mark() {","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"        this.done \u003d true;","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"     * Method for unmarking the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"     * Method to get the status of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"     * @return boolean representing the status of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"    public boolean isMarked() {","lastModifiedDate":"2023-01-14"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"        return this.done;","lastModifiedDate":"2023-01-14"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"     * Method for checking if a substring exists in the title.","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"     * @param subString to search for.","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"     * @return boolean representing result of the search.","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"    public boolean contains(String subString) {","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"        return this.title.contains(subString);","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"     * Alternative toString method purely for writing to hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"     * Can also be used for testing.","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of the task with all attribute information.","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"    public String toData() {","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Huggenguggen"},"content":"        return this.type + \" | \" + (this.done ? \"1\" : \"0\") + \" | \" + this.title;","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"Huggenguggen"},"content":"     * Method for getting String representation of Deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":67,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"Huggenguggen"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":70,"author":{"gitId":"Huggenguggen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":71,"author":{"gitId":"Huggenguggen"},"content":"        return this.type + (done ? CHECKED : UNCHECKED) + \" \" + this.title;","lastModifiedDate":"2023-01-18"},{"lineNumber":72,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":73,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":74,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Huggenguggen":74}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import duke.exception.*;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import duke.ui.*;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"public class TaskList {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"    private ArrayList\u003cTask\u003e items;","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor for TaskList to initialize the internal arraylist of Tasks.","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"        items \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"     * Method to add a Task directly to TaskList.","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"     * @param task Task to be added to TaskList.","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui   ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"    public void add(Task task, Ui ui) {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"        items.add(task);","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"        ui.addTask(task, items.size());","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"     * Method to add an Event to the TaskList via the input String array.","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"     * @param curr a String array from user input to be parsed.","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui   ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException If user input is erroneous.","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"    public void addEvent(String[] curr, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"            String descr \u003d curr[0].substring(6).trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"            String[] newCurr \u003d curr[1].split(\"/to\");","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"            String from \u003d newCurr[0].trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"            String to \u003d newCurr[1].trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"            add(new Event(descr, from, to), ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"                    \"You need to fill in an event with format `event {title} /from dd/MM/yyyy HHmm /to dd/MM/yyyy HHmm`\");","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"     * Method to add a Deadline to the TaskList via the input String array.","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"     * @param curr a String array from user input to be parsed.","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui   ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException If user input is erroneous.","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"    public void addDeadline(String[] curr, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"            String descr \u003d curr[0].substring(9).trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"            String by \u003d curr[1].trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"            add(new Deadline(descr, by), ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Huggenguggen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Huggenguggen"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"Huggenguggen"},"content":"                    \"You need to fill in a deadline with format `deadline {title} /by dd/MM/yyyy HHmm`\");","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"Huggenguggen"},"content":"     * Method to add a ToDo to the TaskList via the input String array.","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"Huggenguggen"},"content":"     * @param curr a String array from user input to be parsed.","lastModifiedDate":"2023-01-18"},{"lineNumber":71,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui   ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":72,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException If user input is erroneous.","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"Huggenguggen"},"content":"    public void addToDo(String[] curr, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"Huggenguggen"},"content":"        String todo \u003d curr[0].substring(5).trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":76,"author":{"gitId":"Huggenguggen"},"content":"        if (todo.isBlank()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":77,"author":{"gitId":"Huggenguggen"},"content":"            throw new DukeException(\"You need to add a todo with format `todo {title}`\");","lastModifiedDate":"2023-01-17"},{"lineNumber":78,"author":{"gitId":"Huggenguggen"},"content":"        } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"Huggenguggen"},"content":"            add(new ToDo(todo), ui);","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":81,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":83,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"Huggenguggen"},"content":"     * Method to delete a Task from the TaskList via input String array.","lastModifiedDate":"2023-01-18"},{"lineNumber":85,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":86,"author":{"gitId":"Huggenguggen"},"content":"     * @param curr_title a String array from user input to be parsed.","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui         ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":88,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException If user input is erroneous.","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"Huggenguggen"},"content":"    public void deleteTask(String[] curr_title, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":91,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":92,"author":{"gitId":"Huggenguggen"},"content":"            int idx \u003d Integer.parseInt(curr_title[1]) - 1;","lastModifiedDate":"2023-01-17"},{"lineNumber":93,"author":{"gitId":"Huggenguggen"},"content":"            if (idx \u003e\u003d items.size() || idx \u003c 0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":94,"author":{"gitId":"Huggenguggen"},"content":"                throw new DukeException();","lastModifiedDate":"2023-01-17"},{"lineNumber":95,"author":{"gitId":"Huggenguggen"},"content":"            } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":96,"author":{"gitId":"Huggenguggen"},"content":"                ui.deleteMessage(items.get(idx), items.size());","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"Huggenguggen"},"content":"                items.remove(idx);","lastModifiedDate":"2023-01-17"},{"lineNumber":98,"author":{"gitId":"Huggenguggen"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"Huggenguggen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"Huggenguggen"},"content":"            throw new DukeException(\"Please give a valid index between 1 and \" + items.size());","lastModifiedDate":"2023-01-17"},{"lineNumber":101,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":102,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":103,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":104,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":105,"author":{"gitId":"Huggenguggen"},"content":"     * Method to mark Task in TaskList via input String array.","lastModifiedDate":"2023-01-18"},{"lineNumber":106,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"Huggenguggen"},"content":"     * @param curr_title a String array from user input to be parsed","lastModifiedDate":"2023-01-18"},{"lineNumber":108,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui         ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":109,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException If user input is erroneous.","lastModifiedDate":"2023-01-18"},{"lineNumber":110,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":111,"author":{"gitId":"Huggenguggen"},"content":"    public void mark(String[] curr_title, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":112,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":113,"author":{"gitId":"Huggenguggen"},"content":"            int idx \u003d Integer.parseInt(curr_title[1]) - 1;","lastModifiedDate":"2023-01-17"},{"lineNumber":114,"author":{"gitId":"Huggenguggen"},"content":"            if (items.get(idx).isMarked()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":115,"author":{"gitId":"Huggenguggen"},"content":"                throw new AlreadyMarkedException();","lastModifiedDate":"2023-01-17"},{"lineNumber":116,"author":{"gitId":"Huggenguggen"},"content":"            } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":117,"author":{"gitId":"Huggenguggen"},"content":"                items.get(idx).mark();","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"Huggenguggen"},"content":"                ui.markMessage(items.get(idx));","lastModifiedDate":"2023-01-17"},{"lineNumber":119,"author":{"gitId":"Huggenguggen"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":120,"author":{"gitId":"Huggenguggen"},"content":"        } catch (AlreadyMarkedException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":121,"author":{"gitId":"Huggenguggen"},"content":"            throw new AlreadyMarkedException(\"Already Marked!\");","lastModifiedDate":"2023-01-17"},{"lineNumber":122,"author":{"gitId":"Huggenguggen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":123,"author":{"gitId":"Huggenguggen"},"content":"            throw new DukeException(\"Please give a valid input with index between 1 and \" + items.size());","lastModifiedDate":"2023-01-17"},{"lineNumber":124,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":125,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":126,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":127,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":128,"author":{"gitId":"Huggenguggen"},"content":"     * Method to unmark Task in TaskList via input String array.","lastModifiedDate":"2023-01-18"},{"lineNumber":129,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":130,"author":{"gitId":"Huggenguggen"},"content":"     * @param curr_title a String array from user input to be parsed.","lastModifiedDate":"2023-01-18"},{"lineNumber":131,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui         ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":132,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException If user input is erroneous.","lastModifiedDate":"2023-01-18"},{"lineNumber":133,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":134,"author":{"gitId":"Huggenguggen"},"content":"    public void unmark(String[] curr_title, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":135,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":136,"author":{"gitId":"Huggenguggen"},"content":"            int idx \u003d Integer.parseInt(curr_title[1]) - 1;","lastModifiedDate":"2023-01-17"},{"lineNumber":137,"author":{"gitId":"Huggenguggen"},"content":"            if (!items.get(idx).isMarked()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":138,"author":{"gitId":"Huggenguggen"},"content":"                throw new AlreadyUnmarkedException();","lastModifiedDate":"2023-01-17"},{"lineNumber":139,"author":{"gitId":"Huggenguggen"},"content":"            } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":140,"author":{"gitId":"Huggenguggen"},"content":"                items.get(idx).unmark();","lastModifiedDate":"2023-01-17"},{"lineNumber":141,"author":{"gitId":"Huggenguggen"},"content":"                ui.unmarkMessage(items.get(idx));","lastModifiedDate":"2023-01-17"},{"lineNumber":142,"author":{"gitId":"Huggenguggen"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":143,"author":{"gitId":"Huggenguggen"},"content":"        } catch (AlreadyUnmarkedException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":144,"author":{"gitId":"Huggenguggen"},"content":"            throw new AlreadyUnmarkedException(\"Already unmarked!\");","lastModifiedDate":"2023-01-17"},{"lineNumber":145,"author":{"gitId":"Huggenguggen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":146,"author":{"gitId":"Huggenguggen"},"content":"            throw new DukeException(\"Please give a valid input with index between 1 and \" + items.size());","lastModifiedDate":"2023-01-17"},{"lineNumber":147,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":148,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":149,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":150,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":151,"author":{"gitId":"Huggenguggen"},"content":"     * Method to find a keyword within tasks via String array from user input.","lastModifiedDate":"2023-01-18"},{"lineNumber":152,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":153,"author":{"gitId":"Huggenguggen"},"content":"     * @param curr_title String array with user input.","lastModifiedDate":"2023-01-18"},{"lineNumber":154,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui         ui to show user messages.","lastModifiedDate":"2023-01-18"},{"lineNumber":155,"author":{"gitId":"Huggenguggen"},"content":"     * @throws DukeException if there is error in the command.","lastModifiedDate":"2023-01-18"},{"lineNumber":156,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":157,"author":{"gitId":"Huggenguggen"},"content":"    public void findTask(String[] curr_title, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":158,"author":{"gitId":"Huggenguggen"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":159,"author":{"gitId":"Huggenguggen"},"content":"            String searchFor \u003d curr_title[1].trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":160,"author":{"gitId":"Huggenguggen"},"content":"            TaskList temp \u003d new TaskList();","lastModifiedDate":"2023-01-18"},{"lineNumber":161,"author":{"gitId":"Huggenguggen"},"content":"            for (int i \u003d 0; i \u003c items.size(); i++) {","lastModifiedDate":"2023-01-18"},{"lineNumber":162,"author":{"gitId":"Huggenguggen"},"content":"                if (items.get(i).contains(searchFor)) {","lastModifiedDate":"2023-01-18"},{"lineNumber":163,"author":{"gitId":"Huggenguggen"},"content":"                    temp.initAdd(items.get(i));","lastModifiedDate":"2023-01-18"},{"lineNumber":164,"author":{"gitId":"Huggenguggen"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":165,"author":{"gitId":"Huggenguggen"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":166,"author":{"gitId":"Huggenguggen"},"content":"            if (temp.isEmpty()) {","lastModifiedDate":"2023-01-18"},{"lineNumber":167,"author":{"gitId":"Huggenguggen"},"content":"                ui.failedSearch();","lastModifiedDate":"2023-01-18"},{"lineNumber":168,"author":{"gitId":"Huggenguggen"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":169,"author":{"gitId":"Huggenguggen"},"content":"                ui.printSearch(temp);","lastModifiedDate":"2023-01-18"},{"lineNumber":170,"author":{"gitId":"Huggenguggen"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":171,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":172,"author":{"gitId":"Huggenguggen"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":173,"author":{"gitId":"Huggenguggen"},"content":"            throw new DukeException(\"You need to do a search with the format `find {substring}`\");","lastModifiedDate":"2023-01-18"},{"lineNumber":174,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":175,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":176,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":177,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":178,"author":{"gitId":"Huggenguggen"},"content":"     * Method to check if TaskList is empty.","lastModifiedDate":"2023-01-18"},{"lineNumber":179,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":180,"author":{"gitId":"Huggenguggen"},"content":"     * @return boolean representing whether the list is empty.","lastModifiedDate":"2023-01-18"},{"lineNumber":181,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":182,"author":{"gitId":"Huggenguggen"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-01-18"},{"lineNumber":183,"author":{"gitId":"Huggenguggen"},"content":"        return this.items.isEmpty();","lastModifiedDate":"2023-01-18"},{"lineNumber":184,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":185,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":186,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":187,"author":{"gitId":"Huggenguggen"},"content":"     * Method to add tasks without giving the UI messages.","lastModifiedDate":"2023-01-18"},{"lineNumber":188,"author":{"gitId":"Huggenguggen"},"content":"     * Primarily for when loading from hard drive data.","lastModifiedDate":"2023-01-18"},{"lineNumber":189,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":190,"author":{"gitId":"Huggenguggen"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-01-18"},{"lineNumber":191,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":192,"author":{"gitId":"Huggenguggen"},"content":"    public void initAdd(Task task) {","lastModifiedDate":"2023-01-17"},{"lineNumber":193,"author":{"gitId":"Huggenguggen"},"content":"        items.add(task);","lastModifiedDate":"2023-01-17"},{"lineNumber":194,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":195,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":196,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":197,"author":{"gitId":"Huggenguggen"},"content":"     * Method to get the String representation of entire list for writing to hard","lastModifiedDate":"2023-01-18"},{"lineNumber":198,"author":{"gitId":"Huggenguggen"},"content":"     * drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":199,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":200,"author":{"gitId":"Huggenguggen"},"content":"     * @return alternative String representation of list.","lastModifiedDate":"2023-01-18"},{"lineNumber":201,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":202,"author":{"gitId":"Huggenguggen"},"content":"    public String itemsToData() {","lastModifiedDate":"2023-01-17"},{"lineNumber":203,"author":{"gitId":"Huggenguggen"},"content":"        String data \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":204,"author":{"gitId":"Huggenguggen"},"content":"        for (int i \u003d 0; i \u003c items.size(); i++) {","lastModifiedDate":"2023-01-17"},{"lineNumber":205,"author":{"gitId":"Huggenguggen"},"content":"            data +\u003d items.get(i).toData();","lastModifiedDate":"2023-01-17"},{"lineNumber":206,"author":{"gitId":"Huggenguggen"},"content":"            data +\u003d \"\\n\";","lastModifiedDate":"2023-01-17"},{"lineNumber":207,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":208,"author":{"gitId":"Huggenguggen"},"content":"        return data;","lastModifiedDate":"2023-01-17"},{"lineNumber":209,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":210,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":211,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":212,"author":{"gitId":"Huggenguggen"},"content":"     * Method to end the program.","lastModifiedDate":"2023-01-18"},{"lineNumber":213,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":214,"author":{"gitId":"Huggenguggen"},"content":"     * @param ui ui to give user the message.","lastModifiedDate":"2023-01-18"},{"lineNumber":215,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":216,"author":{"gitId":"Huggenguggen"},"content":"    public void end(Ui ui) {","lastModifiedDate":"2023-01-17"},{"lineNumber":217,"author":{"gitId":"Huggenguggen"},"content":"        ui.end();","lastModifiedDate":"2023-01-17"},{"lineNumber":218,"author":{"gitId":"Huggenguggen"},"content":"        System.exit(0);","lastModifiedDate":"2023-01-17"},{"lineNumber":219,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":220,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":221,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":222,"author":{"gitId":"Huggenguggen"},"content":"     * Overloaded String method to get representation of entire list for user.","lastModifiedDate":"2023-01-18"},{"lineNumber":223,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":224,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of list for user.","lastModifiedDate":"2023-01-18"},{"lineNumber":225,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":226,"author":{"gitId":"Huggenguggen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":227,"author":{"gitId":"Huggenguggen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":228,"author":{"gitId":"Huggenguggen"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":229,"author":{"gitId":"Huggenguggen"},"content":"        for (int i \u003d 0; i \u003c items.size(); i++) {","lastModifiedDate":"2023-01-17"},{"lineNumber":230,"author":{"gitId":"Huggenguggen"},"content":"            Task item \u003d items.get(i);","lastModifiedDate":"2023-01-17"},{"lineNumber":231,"author":{"gitId":"Huggenguggen"},"content":"            res +\u003d \"\\t \" + (i + 1) + \". \" + item + \"\\n\";","lastModifiedDate":"2023-01-17"},{"lineNumber":232,"author":{"gitId":"Huggenguggen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":233,"author":{"gitId":"Huggenguggen"},"content":"        return res;","lastModifiedDate":"2023-01-17"},{"lineNumber":234,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":235,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Huggenguggen":235}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"     * Constructor Method for ToDo.","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"     * @param title title of the ToDo.","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"    public ToDo(String title) {","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"        super(title);","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"        this.type \u003d \"[T]\";","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"     * Overloaded Constructor for when loading from hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"     * @param title title of the ToDo.","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"     * @param done boolean to represent if task is done or not;","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"    public ToDo(String title, boolean done) {","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"        super(title);","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"        this.type \u003d \"[T]\";","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"        this.done \u003d done;","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"     * Alternative toString method purely for writing to hard drive.","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"     * Can also be used for testing.","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"     * @return String representation of the task with all attribute information.","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"    public String toData() {","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"        return this.type + \" | \" + (this.done ? \"1\" : \"0\") + \" | \" + this.title;","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":37}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import duke.task.*;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"public class Ui {","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"     * Default constructor.","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    public Ui() {","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"    private final String LINE_BREAK \u003d \"\\n\\t ^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^\\n\";","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"     * Method for first greet message.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"    public void greet() {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"        String LOGO \u003d \"             _____             _____   _    _              _   _ \\n\" +","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"                \"     /\\\\     |_   _|           / ____| | |  | |     /\\\\     | \\\\ | |\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"                \"    /  \\\\      | |    ______  | |      | |__| |    /  \\\\    |  \\\\| |\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"                \"   / /\\\\ \\\\     | |   |______| | |      |  __  |   / /\\\\ \\\\   | . ` |\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"                \"  / ____ \\\\   _| |_           | |____  | |  | |  / ____ \\\\  | |\\\\  |\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"                \" /_/    \\\\_\\\\ |_____|           \\\\_____| |_|  |_| /_/    \\\\_\\\\ |_| \\\\_|\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"                \"                                                                 \\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"                \"                                                                 \";","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(\"\\t Hello I\u0027m\\n\" + LOGO);","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(\"\\t What can I do for you?\" + LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"     * Method for ending message.","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"    public void end() {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK +","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"                \"\\t Bye. See you next time! :)\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"                LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"     * Method for message when adding task to taskList.","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"     * @param task task to be added to list.","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"     * @param size size of list with new task.","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"    public void addTask(Task task, int size) {","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\t Adding the task:\\n\\t\\t\" + task +","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"                \"\\n\\t You now have \" + size + \" task(s).\" + LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"Huggenguggen"},"content":"     * Method for message when deleting task.","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"Huggenguggen"},"content":"     * @param item item to be deleted.","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"Huggenguggen"},"content":"     * @param size size of list with the task included.","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"Huggenguggen"},"content":"    public void deleteMessage(Task item, int size) {","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\t 1 less task! :)\");","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(\"\\t\\t\" + item + \"\\n\\tNow you have \" + (size - 1) + \" tasks left!\" + LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"Huggenguggen"},"content":"     * Method for message when marking task as done.","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"Huggenguggen"},"content":"     * @param item item to be marked as done.","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":67,"author":{"gitId":"Huggenguggen"},"content":"    public void markMessage(Task item) {","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\t Great job completing your task! :)\");","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(\"\\t\\t\" + item + LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"Huggenguggen"},"content":"     * Method for message when marking task as undone.","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":75,"author":{"gitId":"Huggenguggen"},"content":"     * @param item to be unmarked.","lastModifiedDate":"2023-01-18"},{"lineNumber":76,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":77,"author":{"gitId":"Huggenguggen"},"content":"    public void unmarkMessage(Task item) {","lastModifiedDate":"2023-01-17"},{"lineNumber":78,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\t I see you want to redo this task...\");","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(\"\\t\\t\" + item + LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":81,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":83,"author":{"gitId":"Huggenguggen"},"content":"     * Method for message when user asks for whole list.","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"Huggenguggen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":85,"author":{"gitId":"Huggenguggen"},"content":"     * @param taskList list to be printed.","lastModifiedDate":"2023-01-18"},{"lineNumber":86,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"Huggenguggen"},"content":"    public void print(TaskList taskList) {","lastModifiedDate":"2023-01-17"},{"lineNumber":88,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\tHere are all your tasks, good luck!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"Huggenguggen"},"content":"        System.out.print(taskList.toString());","lastModifiedDate":"2023-01-17"},{"lineNumber":90,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":92,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":93,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":94,"author":{"gitId":"Huggenguggen"},"content":"     * Method to show user a failed search.","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":96,"author":{"gitId":"Huggenguggen"},"content":"    public void failedSearch() {","lastModifiedDate":"2023-01-18"},{"lineNumber":97,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\tThere are no matching tasks in your list :(\\n\"","lastModifiedDate":"2023-01-18"},{"lineNumber":98,"author":{"gitId":"Huggenguggen"},"content":"                + LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":99,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":100,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":101,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":102,"author":{"gitId":"Huggenguggen"},"content":"     * Method to print results of a word search.","lastModifiedDate":"2023-01-18"},{"lineNumber":103,"author":{"gitId":"Huggenguggen"},"content":"     * ","lastModifiedDate":"2023-01-18"},{"lineNumber":104,"author":{"gitId":"Huggenguggen"},"content":"     * @param temp taskList to be printed.","lastModifiedDate":"2023-01-18"},{"lineNumber":105,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":106,"author":{"gitId":"Huggenguggen"},"content":"    public void printSearch(TaskList temp) {","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\tHere are the matching tasks!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":108,"author":{"gitId":"Huggenguggen"},"content":"        System.out.print(temp.toString());","lastModifiedDate":"2023-01-18"},{"lineNumber":109,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":110,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":111,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":112,"author":{"gitId":"Huggenguggen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":113,"author":{"gitId":"Huggenguggen"},"content":"     * Method for loading error on startup.","lastModifiedDate":"2023-01-18"},{"lineNumber":114,"author":{"gitId":"Huggenguggen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":115,"author":{"gitId":"Huggenguggen"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-01-17"},{"lineNumber":116,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK + \"\\tLoading error :(\");","lastModifiedDate":"2023-01-18"},{"lineNumber":117,"author":{"gitId":"Huggenguggen"},"content":"        System.out.println(LINE_BREAK);","lastModifiedDate":"2023-01-18"},{"lineNumber":118,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":119,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":120,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Huggenguggen":120}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"    private TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    @BeforeEach","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"    public void init() {","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"        taskList.initAdd(new ToDo(\"Thing\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"        taskList.initAdd(new Deadline(\"Next Thing\",","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"                \"02/12/2019 1730\", true));","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Huggenguggen"},"content":"        taskList.initAdd(new Event(\"Last thing\",","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"                \"02/12/2019 1730\", \"03/12/2019 1730\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Huggenguggen"},"content":"    @Test","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Huggenguggen"},"content":"    public void addTasks() {","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Huggenguggen"},"content":"        String expected \u003d \"\\t 1. [T][ ] Thing\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"                \"\\t 2. [D][X] Next Thing (by: 1730 Dec 2 2019)\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Huggenguggen"},"content":"                \"\\t 3. [E][ ] Last thing (from: 1730 Dec 2 2019 to: 1730 Dec 3 2019)\\n\";","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Huggenguggen"},"content":"        assertEquals(taskList.toString(), expected);","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Huggenguggen"},"content":"    @Test","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Huggenguggen"},"content":"    public void toData() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Huggenguggen"},"content":"        String expected \u003d \"[T] | 0 | Thing\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Huggenguggen"},"content":"                \"[D] | 1 | Next Thing | 02/12/2019 1730\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Huggenguggen"},"content":"                \"[E] | 0 | Last thing | 02/12/2019 1730-03/12/2019 1730\\n\";","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Huggenguggen"},"content":"        assertEquals(taskList.itemsToData(), expected);","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Huggenguggen"},"content":"    @Test","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Huggenguggen"},"content":"    public void markAndUnmark() throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Huggenguggen"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Huggenguggen"},"content":"        taskList.mark(new String[]{\"mark\", \"3\"}, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Huggenguggen"},"content":"        taskList.unmark(new String[]{\"unmark\", \"2\"}, ui);","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Huggenguggen"},"content":"        String expected \u003d \"[T] | 0 | Thing\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Huggenguggen"},"content":"                \"[D] | 0 | Next Thing | 02/12/2019 1730\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Huggenguggen"},"content":"                \"[E] | 1 | Last thing | 02/12/2019 1730-03/12/2019 1730\\n\";","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Huggenguggen"},"content":"        assertEquals(taskList.itemsToData(), expected);","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Huggenguggen":48}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"package duke.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"    @Test","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"    public void stringTest() {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"        assertEquals(new ToDo(\"Thing\", true).toString(), \"[T][X] Thing\");","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Huggenguggen":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Huggenguggen"},"content":"todo borrow book","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Huggenguggen"},"content":"event read book /from 17/01/2023 1720 /to 18/01/2023 1720","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Huggenguggen"},"content":"deadline return book /by 20/01/2023 1830","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Huggenguggen"},"content":"mark 1","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Huggenguggen"},"content":"mark 2","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Huggenguggen"},"content":"unmark 2","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Huggenguggen"},"content":"list","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Huggenguggen"},"content":"mark 1","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Huggenguggen"},"content":"unmark -1","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Huggenguggen"},"content":"event party","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Huggenguggen"},"content":"delete 0","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Huggenguggen"},"content":"delete 2","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Huggenguggen"},"content":"list","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Huggenguggen"},"content":"bye","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Huggenguggen"},"content":"ECHO \"Testcase 1: Add 1 of each task, mark 2 tasks and unmark 1 task, list\"","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Huggenguggen"},"content":"ECHO \"To test errors, tries to mark alr marked task and unmark out of index\"","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Huggenguggen"},"content":"ECHO \"Also tries to add tasks without full command\"","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"Huggenguggen"},"content":"FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 Echo Same || Echo Different or error","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Huggenguggen":4,"-":19}}]
