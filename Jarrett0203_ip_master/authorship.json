[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"import java.io.File;","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import java.nio.file.*;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"import java.util.*;","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"  private static class Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"    protected String description;","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"      this.description \u003d description;","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"      this.isDone \u003d false;","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"    public Character getMarker() {","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"      return isDone ? \u0027X\u0027 : \u0027 \u0027;","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"      this.isDone \u003d true;","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"      this.isDone \u003d false;","lastModifiedDate":"2023-01-14"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"      return String.format(\"[%c] %s\", getMarker(), this.description);","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-14"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"  private static class Todo extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-14"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"      super(description);","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"      return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":49,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-14"},{"lineNumber":50,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":51,"author":{"gitId":"Jarrett0203"},"content":"  private static class Deadline extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":52,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":53,"author":{"gitId":"Jarrett0203"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":55,"author":{"gitId":"Jarrett0203"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"Jarrett0203"},"content":"      super(description);","lastModifiedDate":"2023-01-14"},{"lineNumber":57,"author":{"gitId":"Jarrett0203"},"content":"      this.by \u003d by;","lastModifiedDate":"2023-01-14"},{"lineNumber":58,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":59,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":60,"author":{"gitId":"Jarrett0203"},"content":"    public String parseDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"Jarrett0203"},"content":"      DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"Jarrett0203"},"content":"      return dateTime.format(formatter);","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":66,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":67,"author":{"gitId":"Jarrett0203"},"content":"      return String.format(\"[D]%s (by: %s)\", super.toString(), parseDateTime(this.by));","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":69,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-14"},{"lineNumber":70,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":71,"author":{"gitId":"Jarrett0203"},"content":"  private static class Event extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":72,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":73,"author":{"gitId":"Jarrett0203"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"Jarrett0203"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-01-18"},{"lineNumber":75,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":76,"author":{"gitId":"Jarrett0203"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-18"},{"lineNumber":77,"author":{"gitId":"Jarrett0203"},"content":"      super(description);","lastModifiedDate":"2023-01-14"},{"lineNumber":78,"author":{"gitId":"Jarrett0203"},"content":"      this.from \u003d from;","lastModifiedDate":"2023-01-14"},{"lineNumber":79,"author":{"gitId":"Jarrett0203"},"content":"      this.to \u003d to;","lastModifiedDate":"2023-01-14"},{"lineNumber":80,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":81,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":82,"author":{"gitId":"Jarrett0203"},"content":"    public String parseDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-01-18"},{"lineNumber":83,"author":{"gitId":"Jarrett0203"},"content":"      DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"Jarrett0203"},"content":"      return dateTime.format(formatter);","lastModifiedDate":"2023-01-18"},{"lineNumber":85,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":86,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":87,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":88,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":89,"author":{"gitId":"Jarrett0203"},"content":"      return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), parseDateTime(this.from),","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"Jarrett0203"},"content":"          parseDateTime(this.to));","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":92,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-14"},{"lineNumber":93,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"Jarrett0203"},"content":"    ArrayList\u003cTask\u003e taskList \u003d loadTasks();","lastModifiedDate":"2023-01-18"},{"lineNumber":96,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(\"  ------------------------------------\");","lastModifiedDate":"2023-01-14"},{"lineNumber":97,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(\"  Hello! I\u0027m Duke\\n\" + \"  What can I do for you?\");","lastModifiedDate":"2023-01-14"},{"lineNumber":98,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(\"  ------------------------------------\\n\");","lastModifiedDate":"2023-01-14"},{"lineNumber":99,"author":{"gitId":"Jarrett0203"},"content":"    Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-14"},{"lineNumber":100,"author":{"gitId":"Jarrett0203"},"content":"    String userInput \u003d sc.nextLine().trim();","lastModifiedDate":"2023-01-14"},{"lineNumber":101,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":102,"author":{"gitId":"Jarrett0203"},"content":"    while (!userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-01-14"},{"lineNumber":103,"author":{"gitId":"Jarrett0203"},"content":"      System.out.println(\"  ------------------------------------\");","lastModifiedDate":"2023-01-14"},{"lineNumber":104,"author":{"gitId":"Jarrett0203"},"content":"      try {","lastModifiedDate":"2023-01-15"},{"lineNumber":105,"author":{"gitId":"Jarrett0203"},"content":"        handleListInput(userInput, taskList);","lastModifiedDate":"2023-01-14"},{"lineNumber":106,"author":{"gitId":"Jarrett0203"},"content":"      } catch (ListException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"  %s\", e.getMessage()));","lastModifiedDate":"2023-01-18"},{"lineNumber":108,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-15"},{"lineNumber":109,"author":{"gitId":"Jarrett0203"},"content":"      System.out.println(\"  ------------------------------------\\n\");","lastModifiedDate":"2023-01-14"},{"lineNumber":110,"author":{"gitId":"Jarrett0203"},"content":"      userInput \u003d sc.nextLine().trim();","lastModifiedDate":"2023-01-14"},{"lineNumber":111,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":112,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":113,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(\"  ------------------------------------\");","lastModifiedDate":"2023-01-14"},{"lineNumber":114,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(\"  Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-14"},{"lineNumber":115,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(\"  ------------------------------------\");","lastModifiedDate":"2023-01-14"},{"lineNumber":116,"author":{"gitId":"Jarrett0203"},"content":"    sc.close();","lastModifiedDate":"2023-01-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2019-07-29"},{"lineNumber":118,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":119,"author":{"gitId":"Jarrett0203"},"content":"  private static void handleListInput(String userInput, ArrayList\u003cTask\u003e taskList) throws ListException {","lastModifiedDate":"2023-01-15"},{"lineNumber":120,"author":{"gitId":"Jarrett0203"},"content":"    if (userInput.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-01-14"},{"lineNumber":121,"author":{"gitId":"Jarrett0203"},"content":"      if (taskList.isEmpty())","lastModifiedDate":"2023-01-14"},{"lineNumber":122,"author":{"gitId":"Jarrett0203"},"content":"        throw new ListException(\"No tasks added yet\");","lastModifiedDate":"2023-01-15"},{"lineNumber":123,"author":{"gitId":"Jarrett0203"},"content":"      else {","lastModifiedDate":"2023-01-14"},{"lineNumber":124,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  Here are the tasks in your list:\");","lastModifiedDate":"2023-01-14"},{"lineNumber":125,"author":{"gitId":"Jarrett0203"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-01-14"},{"lineNumber":126,"author":{"gitId":"Jarrett0203"},"content":"          System.out.println(String.format(\"  %d.%s\", i + 1, taskList.get(i).toString()));","lastModifiedDate":"2023-01-18"},{"lineNumber":127,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-14"},{"lineNumber":128,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-14"},{"lineNumber":129,"author":{"gitId":"Jarrett0203"},"content":"    } else if (userInput.toLowerCase().contains(\"mark\")) {","lastModifiedDate":"2023-01-14"},{"lineNumber":130,"author":{"gitId":"Jarrett0203"},"content":"      boolean isMark \u003d !userInput.toLowerCase().contains(\"unmark\");","lastModifiedDate":"2023-01-14"},{"lineNumber":131,"author":{"gitId":"Jarrett0203"},"content":"      int taskNumber \u003d Integer.parseInt(userInput.substring(isMark ? 5 : 7));","lastModifiedDate":"2023-01-14"},{"lineNumber":132,"author":{"gitId":"Jarrett0203"},"content":"      try {","lastModifiedDate":"2023-01-15"},{"lineNumber":133,"author":{"gitId":"Jarrett0203"},"content":"        handleMarkTask(taskNumber, taskList, isMark);","lastModifiedDate":"2023-01-14"},{"lineNumber":134,"author":{"gitId":"Jarrett0203"},"content":"      } catch (TaskException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":135,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"  %s\", e.getMessage()));","lastModifiedDate":"2023-01-18"},{"lineNumber":136,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-15"},{"lineNumber":137,"author":{"gitId":"Jarrett0203"},"content":"    } else if (userInput.toLowerCase().contains(\"delete\")) {","lastModifiedDate":"2023-01-15"},{"lineNumber":138,"author":{"gitId":"Jarrett0203"},"content":"      int taskNumber \u003d Integer.parseInt(userInput.substring(7));","lastModifiedDate":"2023-01-15"},{"lineNumber":139,"author":{"gitId":"Jarrett0203"},"content":"      try {","lastModifiedDate":"2023-01-15"},{"lineNumber":140,"author":{"gitId":"Jarrett0203"},"content":"        deleteTask(taskNumber, taskList);","lastModifiedDate":"2023-01-15"},{"lineNumber":141,"author":{"gitId":"Jarrett0203"},"content":"      } catch (TaskException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":142,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"  %s\", e.getMessage()));","lastModifiedDate":"2023-01-18"},{"lineNumber":143,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-15"},{"lineNumber":144,"author":{"gitId":"Jarrett0203"},"content":"    } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":145,"author":{"gitId":"Jarrett0203"},"content":"      if (taskList.size() \u003c 100) {","lastModifiedDate":"2023-01-14"},{"lineNumber":146,"author":{"gitId":"Jarrett0203"},"content":"        try {","lastModifiedDate":"2023-01-15"},{"lineNumber":147,"author":{"gitId":"Jarrett0203"},"content":"          handleTaskTypes(userInput, taskList);","lastModifiedDate":"2023-01-14"},{"lineNumber":148,"author":{"gitId":"Jarrett0203"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":149,"author":{"gitId":"Jarrett0203"},"content":"          System.out.println(String.format(\"  %s\", e.getMessage()));","lastModifiedDate":"2023-01-18"},{"lineNumber":150,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":151,"author":{"gitId":"Jarrett0203"},"content":"      } else","lastModifiedDate":"2023-01-14"},{"lineNumber":152,"author":{"gitId":"Jarrett0203"},"content":"        throw new ListException(\"List is full!\");","lastModifiedDate":"2023-01-15"},{"lineNumber":153,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":154,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-14"},{"lineNumber":155,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":156,"author":{"gitId":"Jarrett0203"},"content":"  private static void handleMarkTask(Integer taskNum, ArrayList\u003cTask\u003e taskList, boolean mark) throws TaskException {","lastModifiedDate":"2023-01-15"},{"lineNumber":157,"author":{"gitId":"Jarrett0203"},"content":"    if (taskNum \u003e taskList.size() || taskNum \u003c 1)","lastModifiedDate":"2023-01-14"},{"lineNumber":158,"author":{"gitId":"Jarrett0203"},"content":"      throw new TaskException(\"Task does not exist!\");","lastModifiedDate":"2023-01-15"},{"lineNumber":159,"author":{"gitId":"Jarrett0203"},"content":"    else {","lastModifiedDate":"2023-01-14"},{"lineNumber":160,"author":{"gitId":"Jarrett0203"},"content":"      if (mark) {","lastModifiedDate":"2023-01-14"},{"lineNumber":161,"author":{"gitId":"Jarrett0203"},"content":"        taskList.get(taskNum - 1).markAsDone();","lastModifiedDate":"2023-01-14"},{"lineNumber":162,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-14"},{"lineNumber":163,"author":{"gitId":"Jarrett0203"},"content":"      } else {","lastModifiedDate":"2023-01-14"},{"lineNumber":164,"author":{"gitId":"Jarrett0203"},"content":"        taskList.get(taskNum - 1).markAsUndone();","lastModifiedDate":"2023-01-14"},{"lineNumber":165,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-14"},{"lineNumber":166,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-14"},{"lineNumber":167,"author":{"gitId":"Jarrett0203"},"content":"      saveTasks(taskList);","lastModifiedDate":"2023-01-18"},{"lineNumber":168,"author":{"gitId":"Jarrett0203"},"content":"      System.out.println(String.format(\"    %s\", taskList.get(taskNum - 1)));","lastModifiedDate":"2023-01-18"},{"lineNumber":169,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":170,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-14"},{"lineNumber":171,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":172,"author":{"gitId":"Jarrett0203"},"content":"  private static void handleTaskTypes(String userInput, ArrayList\u003cTask\u003e taskList) throws InvalidInputException {","lastModifiedDate":"2023-01-15"},{"lineNumber":173,"author":{"gitId":"Jarrett0203"},"content":"    if (userInput.toLowerCase().contains(\"todo\")) {","lastModifiedDate":"2023-01-14"},{"lineNumber":174,"author":{"gitId":"Jarrett0203"},"content":"      try {","lastModifiedDate":"2023-01-15"},{"lineNumber":175,"author":{"gitId":"Jarrett0203"},"content":"        Todo newTodo \u003d new Todo(userInput.substring(5));","lastModifiedDate":"2023-01-14"},{"lineNumber":176,"author":{"gitId":"Jarrett0203"},"content":"        addTask(newTodo, taskList);","lastModifiedDate":"2023-01-15"},{"lineNumber":177,"author":{"gitId":"Jarrett0203"},"content":"      } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":178,"author":{"gitId":"Jarrett0203"},"content":"        throw new InvalidInputException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-15"},{"lineNumber":179,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-15"},{"lineNumber":180,"author":{"gitId":"Jarrett0203"},"content":"    } else if (userInput.toLowerCase().contains(\"deadline\")) {","lastModifiedDate":"2023-01-14"},{"lineNumber":181,"author":{"gitId":"Jarrett0203"},"content":"      try {","lastModifiedDate":"2023-01-15"},{"lineNumber":182,"author":{"gitId":"Jarrett0203"},"content":"        String[] deadline \u003d userInput.substring(9).split(\" /by \");","lastModifiedDate":"2023-01-14"},{"lineNumber":183,"author":{"gitId":"Jarrett0203"},"content":"        if (\"\".equals(deadline[0].trim()))","lastModifiedDate":"2023-01-15"},{"lineNumber":184,"author":{"gitId":"Jarrett0203"},"content":"          throw new InvalidInputException(","lastModifiedDate":"2023-01-15"},{"lineNumber":185,"author":{"gitId":"Jarrett0203"},"content":"              \"OOPS!!! The deadline must be in the format: deadline \u003ctask\u003e /by \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-15"},{"lineNumber":186,"author":{"gitId":"Jarrett0203"},"content":"        Deadline newDeadline \u003d new Deadline(deadline[0], storeDateTime(deadline[1]));","lastModifiedDate":"2023-01-18"},{"lineNumber":187,"author":{"gitId":"Jarrett0203"},"content":"        addTask(newDeadline, taskList);","lastModifiedDate":"2023-01-15"},{"lineNumber":188,"author":{"gitId":"Jarrett0203"},"content":"      } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":189,"author":{"gitId":"Jarrett0203"},"content":"        throw new InvalidInputException(","lastModifiedDate":"2023-01-15"},{"lineNumber":190,"author":{"gitId":"Jarrett0203"},"content":"            \"OOPS!!! The deadline must be in the format: deadline \u003ctask\u003e /by \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-15"},{"lineNumber":191,"author":{"gitId":"Jarrett0203"},"content":"      } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":192,"author":{"gitId":"Jarrett0203"},"content":"        throw new InvalidInputException(\"OOPS!!! Dates must be in the format: dd/mm/yyyy HHmm (e.g. 12/12/2023 1800)\");","lastModifiedDate":"2023-01-18"},{"lineNumber":193,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-15"},{"lineNumber":194,"author":{"gitId":"Jarrett0203"},"content":"    } else if (userInput.toLowerCase().contains(\"event\")) {","lastModifiedDate":"2023-01-14"},{"lineNumber":195,"author":{"gitId":"Jarrett0203"},"content":"      try {","lastModifiedDate":"2023-01-15"},{"lineNumber":196,"author":{"gitId":"Jarrett0203"},"content":"        String[] event \u003d userInput.substring(6).split(\" /from \");","lastModifiedDate":"2023-01-14"},{"lineNumber":197,"author":{"gitId":"Jarrett0203"},"content":"        if (\"\".equals(event[0].trim())) {","lastModifiedDate":"2023-01-15"},{"lineNumber":198,"author":{"gitId":"Jarrett0203"},"content":"          throw new InvalidInputException(","lastModifiedDate":"2023-01-15"},{"lineNumber":199,"author":{"gitId":"Jarrett0203"},"content":"              \"OOPS!!! The event must be in the format: event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-15"},{"lineNumber":200,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":201,"author":{"gitId":"Jarrett0203"},"content":"        String[] eventTime \u003d event[1].split(\" /to \");","lastModifiedDate":"2023-01-14"},{"lineNumber":202,"author":{"gitId":"Jarrett0203"},"content":"        LocalDateTime fromDateTime \u003d storeDateTime(eventTime[0]);","lastModifiedDate":"2023-01-18"},{"lineNumber":203,"author":{"gitId":"Jarrett0203"},"content":"        LocalDateTime toDateTime \u003d storeDateTime(eventTime[1]);","lastModifiedDate":"2023-01-18"},{"lineNumber":204,"author":{"gitId":"Jarrett0203"},"content":"        if (fromDateTime.isAfter(toDateTime)) {","lastModifiedDate":"2023-01-18"},{"lineNumber":205,"author":{"gitId":"Jarrett0203"},"content":"          throw new InvalidInputException(\"OOPS!!! The start date must be before the end date.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":206,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":207,"author":{"gitId":"Jarrett0203"},"content":"        Event newEvent \u003d new Event(event[0], fromDateTime, toDateTime);","lastModifiedDate":"2023-01-18"},{"lineNumber":208,"author":{"gitId":"Jarrett0203"},"content":"        addTask(newEvent, taskList);","lastModifiedDate":"2023-01-15"},{"lineNumber":209,"author":{"gitId":"Jarrett0203"},"content":"      } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":210,"author":{"gitId":"Jarrett0203"},"content":"        throw new InvalidInputException(","lastModifiedDate":"2023-01-15"},{"lineNumber":211,"author":{"gitId":"Jarrett0203"},"content":"            \"OOPS!!! The event must be in the format: event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-15"},{"lineNumber":212,"author":{"gitId":"Jarrett0203"},"content":"      } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":213,"author":{"gitId":"Jarrett0203"},"content":"        throw new InvalidInputException(\"OOPS!!! Dates must be in the format: dd/mm/yyyy HHmm (e.g. 12/12/2023 1800)\");","lastModifiedDate":"2023-01-18"},{"lineNumber":214,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-15"},{"lineNumber":215,"author":{"gitId":"Jarrett0203"},"content":"    } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":216,"author":{"gitId":"Jarrett0203"},"content":"      throw new InvalidInputException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-18"},{"lineNumber":217,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":218,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-15"},{"lineNumber":219,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":220,"author":{"gitId":"Jarrett0203"},"content":"  private static void addTask(Task newTask, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-15"},{"lineNumber":221,"author":{"gitId":"Jarrett0203"},"content":"    taskList.add(newTask);","lastModifiedDate":"2023-01-14"},{"lineNumber":222,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(\"  Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-14"},{"lineNumber":223,"author":{"gitId":"Jarrett0203"},"content":"    printTask(newTask, taskList);","lastModifiedDate":"2023-01-15"},{"lineNumber":224,"author":{"gitId":"Jarrett0203"},"content":"    saveTasks(taskList);","lastModifiedDate":"2023-01-18"},{"lineNumber":225,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-15"},{"lineNumber":226,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":227,"author":{"gitId":"Jarrett0203"},"content":"  private static void deleteTask(Integer taskNumber, ArrayList\u003cTask\u003e taskList) throws TaskException {","lastModifiedDate":"2023-01-15"},{"lineNumber":228,"author":{"gitId":"Jarrett0203"},"content":"    if (taskNumber \u003e taskList.size() || taskNumber \u003c 1)","lastModifiedDate":"2023-01-15"},{"lineNumber":229,"author":{"gitId":"Jarrett0203"},"content":"      throw new TaskException(\"Task does not exist!\");","lastModifiedDate":"2023-01-15"},{"lineNumber":230,"author":{"gitId":"Jarrett0203"},"content":"    else {","lastModifiedDate":"2023-01-15"},{"lineNumber":231,"author":{"gitId":"Jarrett0203"},"content":"      Task taskToRemove \u003d taskList.get(taskNumber - 1);","lastModifiedDate":"2023-01-15"},{"lineNumber":232,"author":{"gitId":"Jarrett0203"},"content":"      taskList.remove(taskNumber - 1);","lastModifiedDate":"2023-01-15"},{"lineNumber":233,"author":{"gitId":"Jarrett0203"},"content":"      System.out.println(\"  Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-01-15"},{"lineNumber":234,"author":{"gitId":"Jarrett0203"},"content":"      printTask(taskToRemove, taskList);","lastModifiedDate":"2023-01-15"},{"lineNumber":235,"author":{"gitId":"Jarrett0203"},"content":"      saveTasks(taskList);","lastModifiedDate":"2023-01-18"},{"lineNumber":236,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":237,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-15"},{"lineNumber":238,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":239,"author":{"gitId":"Jarrett0203"},"content":"  private static void printTask(Task task, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-15"},{"lineNumber":240,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(String.format(\"  %s\", task.toString()));","lastModifiedDate":"2023-01-18"},{"lineNumber":241,"author":{"gitId":"Jarrett0203"},"content":"    System.out.println(String.format(\"  Now you have %d %s in the list.\", taskList.size(),","lastModifiedDate":"2023-01-18"},{"lineNumber":242,"author":{"gitId":"Jarrett0203"},"content":"        taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\"));","lastModifiedDate":"2023-01-18"},{"lineNumber":243,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-18"},{"lineNumber":244,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":245,"author":{"gitId":"Jarrett0203"},"content":"  private static ArrayList\u003cTask\u003e loadTasks() {","lastModifiedDate":"2023-01-18"},{"lineNumber":246,"author":{"gitId":"Jarrett0203"},"content":"    Path path \u003d Paths.get(\"..\", \"..\", \"..\", \"data\");","lastModifiedDate":"2023-01-18"},{"lineNumber":247,"author":{"gitId":"Jarrett0203"},"content":"    boolean directoryExists \u003d Files.exists(path);","lastModifiedDate":"2023-01-18"},{"lineNumber":248,"author":{"gitId":"Jarrett0203"},"content":"    ArrayList\u003cTask\u003e loadedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-18"},{"lineNumber":249,"author":{"gitId":"Jarrett0203"},"content":"    if (directoryExists) {","lastModifiedDate":"2023-01-18"},{"lineNumber":250,"author":{"gitId":"Jarrett0203"},"content":"      File file \u003d new File(path.toFile(), \"duke.txt\");","lastModifiedDate":"2023-01-18"},{"lineNumber":251,"author":{"gitId":"Jarrett0203"},"content":"      DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");","lastModifiedDate":"2023-01-18"},{"lineNumber":252,"author":{"gitId":"Jarrett0203"},"content":"      System.out.println(\"\\nLoading tasks from duke.txt...\");","lastModifiedDate":"2023-01-18"},{"lineNumber":253,"author":{"gitId":"Jarrett0203"},"content":"      try (Scanner scanner \u003d new Scanner(file)) {","lastModifiedDate":"2023-01-18"},{"lineNumber":254,"author":{"gitId":"Jarrett0203"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2023-01-18"},{"lineNumber":255,"author":{"gitId":"Jarrett0203"},"content":"          String[] args \u003d scanner.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-01-18"},{"lineNumber":256,"author":{"gitId":"Jarrett0203"},"content":"          if(\"T\".equals(args[0])) {","lastModifiedDate":"2023-01-18"},{"lineNumber":257,"author":{"gitId":"Jarrett0203"},"content":"            Todo newTodo \u003d new Todo(args[2]);","lastModifiedDate":"2023-01-18"},{"lineNumber":258,"author":{"gitId":"Jarrett0203"},"content":"            if (args[1].equals(\"1\"))","lastModifiedDate":"2023-01-18"},{"lineNumber":259,"author":{"gitId":"Jarrett0203"},"content":"              newTodo.markAsDone();","lastModifiedDate":"2023-01-18"},{"lineNumber":260,"author":{"gitId":"Jarrett0203"},"content":"            loadedList.add(newTodo);","lastModifiedDate":"2023-01-18"},{"lineNumber":261,"author":{"gitId":"Jarrett0203"},"content":"          } else if (\"D\".equals(args[0])) {","lastModifiedDate":"2023-01-18"},{"lineNumber":262,"author":{"gitId":"Jarrett0203"},"content":"            Deadline newDeadline \u003d new Deadline(args[2], LocalDateTime.parse(args[3], formatter));","lastModifiedDate":"2023-01-18"},{"lineNumber":263,"author":{"gitId":"Jarrett0203"},"content":"            if (args[1].equals(\"1\"))","lastModifiedDate":"2023-01-18"},{"lineNumber":264,"author":{"gitId":"Jarrett0203"},"content":"              newDeadline.markAsDone();","lastModifiedDate":"2023-01-18"},{"lineNumber":265,"author":{"gitId":"Jarrett0203"},"content":"            loadedList.add(newDeadline);","lastModifiedDate":"2023-01-18"},{"lineNumber":266,"author":{"gitId":"Jarrett0203"},"content":"          } else if (\"E\".equals(args[0])) {","lastModifiedDate":"2023-01-18"},{"lineNumber":267,"author":{"gitId":"Jarrett0203"},"content":"            Event newEvent \u003d new Event(args[2], LocalDateTime.parse(args[3], formatter), LocalDateTime.parse(args[4], formatter));","lastModifiedDate":"2023-01-18"},{"lineNumber":268,"author":{"gitId":"Jarrett0203"},"content":"            if (args[1].equals(\"1\"))","lastModifiedDate":"2023-01-18"},{"lineNumber":269,"author":{"gitId":"Jarrett0203"},"content":"              newEvent.markAsDone();","lastModifiedDate":"2023-01-18"},{"lineNumber":270,"author":{"gitId":"Jarrett0203"},"content":"            loadedList.add(newEvent);","lastModifiedDate":"2023-01-18"},{"lineNumber":271,"author":{"gitId":"Jarrett0203"},"content":"          }","lastModifiedDate":"2023-01-18"},{"lineNumber":272,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":273,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"Tasks loaded successfully!\");","lastModifiedDate":"2023-01-18"},{"lineNumber":274,"author":{"gitId":"Jarrett0203"},"content":"      } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":275,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"Data file could not be found.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":276,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-18"},{"lineNumber":277,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":278,"author":{"gitId":"Jarrett0203"},"content":"    return loadedList;","lastModifiedDate":"2023-01-18"},{"lineNumber":279,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-18"},{"lineNumber":280,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":281,"author":{"gitId":"Jarrett0203"},"content":"  private static void saveTasks(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-18"},{"lineNumber":282,"author":{"gitId":"Jarrett0203"},"content":"    Path path \u003d Paths.get(\"..\", \"..\", \"..\", \"data\");","lastModifiedDate":"2023-01-18"},{"lineNumber":283,"author":{"gitId":"Jarrett0203"},"content":"    File data \u003d path.toFile();","lastModifiedDate":"2023-01-18"},{"lineNumber":284,"author":{"gitId":"Jarrett0203"},"content":"    data.mkdir();","lastModifiedDate":"2023-01-18"},{"lineNumber":285,"author":{"gitId":"Jarrett0203"},"content":"    File file \u003d new File(data, \"duke.txt\");","lastModifiedDate":"2023-01-18"},{"lineNumber":286,"author":{"gitId":"Jarrett0203"},"content":"    try (FileWriter fileWriter \u003d new FileWriter(file)) {","lastModifiedDate":"2023-01-18"},{"lineNumber":287,"author":{"gitId":"Jarrett0203"},"content":"      for (Task task : taskList) {","lastModifiedDate":"2023-01-18"},{"lineNumber":288,"author":{"gitId":"Jarrett0203"},"content":"        int mark \u003d task.getMarker().equals(\u0027X\u0027) ? 1 : 0;","lastModifiedDate":"2023-01-18"},{"lineNumber":289,"author":{"gitId":"Jarrett0203"},"content":"        String newString \u003d String.format(\"T | %d | %s%n\", mark, task.description);","lastModifiedDate":"2023-01-18"},{"lineNumber":290,"author":{"gitId":"Jarrett0203"},"content":"        if (task instanceof Deadline)","lastModifiedDate":"2023-01-18"},{"lineNumber":291,"author":{"gitId":"Jarrett0203"},"content":"          newString \u003d String.format(\"D | %d | %s | %s%n\", mark, task.description, ((Deadline) task).by);","lastModifiedDate":"2023-01-18"},{"lineNumber":292,"author":{"gitId":"Jarrett0203"},"content":"        else if (task instanceof Event)","lastModifiedDate":"2023-01-18"},{"lineNumber":293,"author":{"gitId":"Jarrett0203"},"content":"          newString \u003d String.format(\"E | %d | %s | %s | %s%n\", mark, task.description, ((Event) task).from,","lastModifiedDate":"2023-01-18"},{"lineNumber":294,"author":{"gitId":"Jarrett0203"},"content":"              ((Event) task).to);","lastModifiedDate":"2023-01-18"},{"lineNumber":295,"author":{"gitId":"Jarrett0203"},"content":"        fileWriter.write(newString);","lastModifiedDate":"2023-01-18"},{"lineNumber":296,"author":{"gitId":"Jarrett0203"},"content":"      }","lastModifiedDate":"2023-01-18"},{"lineNumber":297,"author":{"gitId":"Jarrett0203"},"content":"    } catch (IOException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":298,"author":{"gitId":"Jarrett0203"},"content":"      e.printStackTrace();","lastModifiedDate":"2023-01-18"},{"lineNumber":299,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":300,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-14"},{"lineNumber":301,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":302,"author":{"gitId":"Jarrett0203"},"content":"  private static LocalDateTime storeDateTime(String dateTimeString) throws DateTimeParseException {","lastModifiedDate":"2023-01-18"},{"lineNumber":303,"author":{"gitId":"Jarrett0203"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-18"},{"lineNumber":304,"author":{"gitId":"Jarrett0203"},"content":"    return LocalDateTime.parse(dateTimeString, formatter);","lastModifiedDate":"2023-01-18"},{"lineNumber":305,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-18"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Jarrett0203":302,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"  public DukeException(String message) {","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"    super(message);","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"Jarrett0203":5}},{"path":"src/main/java/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"class InvalidInputException extends DukeException {","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"  public InvalidInputException(String message) {","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"    super(message);","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"Jarrett0203":5}},{"path":"src/main/java/ListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"public class ListException extends DukeException {","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"  public ListException(String message) {","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"    super(message);","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"Jarrett0203":5}},{"path":"src/main/java/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"public class TaskException extends DukeException {","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"  public TaskException(String message) {","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"    super(message);","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"Jarrett0203":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"todo borrow book","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"mark 1","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"mark 2","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"unmark 2","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"unmark 3","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"bye","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"Jarrett0203":12}}]
