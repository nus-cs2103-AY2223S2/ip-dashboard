[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"# DukePro","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"\u003e \"Your mind is for having ideas, not holding them.\" -- David Allen ([source](https://dansilvestre.com/productivity-quotes))","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"DukePro frees your mind of having to remember things you need to do. It\u0027s,","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"-   text-based","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"-   easy to learn","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"-   ~~FAST~~ *SUPER* FAST to use","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"All you need to do is,","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"1.  Download it from [here](https://github.com/Jarrett0203/ip/releases).","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"2.  Find the latest version and install duke.jar.","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"3.  Add your tasks.","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"4.  Let it manage your tasks for you :wink:","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"And it is **FREE**!","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"Features:","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"- [x] Managing tasks","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"- [ ] Managing deadlines (coming soon)","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"- [ ] Reminders (coming soon)","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"***","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"If you Java programmer, you can use it to practice Java too. Here\u0027s the `main` method:","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"```java","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"public class Duke {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"   public static void main(String[] args) { ","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"      String filePath \u003d String.format(\"data%sduketxt\", File.separator); ","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"      new Duke(filePath).run();    ","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"   }","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jarrett0203":31,"-":5}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"checkstyle {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jarrett0203":7,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.io.File;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":" * Main Duke class that drives the program.","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"        try {","lastModifiedDate":"2023-01-15"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"            ui.showLoading(filePath);","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"            tasks \u003d new TaskList(storage.loadTasks());","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"            ui.showSuccessfulLoad(tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-14"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"     * Runs the Duke program.","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"     **/","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"    public void run() {","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"        while (!isExit) {","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"            try {","lastModifiedDate":"2023-01-15"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"                ui.showLine();","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"            } finally {","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"Jarrett0203"},"content":"                ui.showLine();","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":52,"author":{"gitId":"Jarrett0203"},"content":"        ui.closeScanner();","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"Jarrett0203"},"content":"     * Main method to initialize Duke.","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"Jarrett0203"},"content":"     * @param args The command line arguments.","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"Jarrett0203"},"content":"     **/","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"Jarrett0203"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"Jarrett0203"},"content":"        String filePath \u003d String.format(\"data%sduke.txt\", File.separator);","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"Jarrett0203"},"content":"        new Duke(filePath).run();","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Jarrett0203":62,"-":2}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"public class ByeCommand implements Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"     * Prints the bye message.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException Exception should not be thrown in this function in this class.","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"        ui.showBye();","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"        return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":26}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":" * Command interface that is implemented by all commands.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"public interface Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"     * Executes the command.","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception due to invalid input.","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"     * Determines when to break the while loop in Duke.java.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"     * @return true if the command is ByeCommand.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit();","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":27}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.TaskException;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":" * DeleteCommand class that implements the Command interface.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"    private String fullCommand;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    public DeleteCommand(String fullCommand) {","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"     * Deletes a task in the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception due to invalid input.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"            int taskNum \u003d Integer.parseInt(fullCommand.substring(7));","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"            if (taskNum \u003e tasks.size() || taskNum \u003c 1) {","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"                throw new TaskException(\"Please enter a valid task number!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"            tasks.deleteTask(taskNum, storage, ui);","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"            throw new TaskException(\"Please enter a valid task number!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"        return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":46}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":" * FindCommand class that implements the Command interface.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"    private String fullCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"    public FindCommand(String fullCommand) {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"     * Finds all task in the task list containing the keyword.","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception due to invalid input.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"            String keyword \u003d fullCommand.substring(5);","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"            tasks.findTask(keyword, ui);","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"            throw new DukeException(\"OOPS!!! The find command must be in the format: find \u003ckeyword\u003e\");","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"        return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Jarrett0203":41}},{"path":"src/main/java/duke/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.InvalidInputException;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":" * InvalidCommand class that implements the Command interface.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"public class InvalidCommand implements Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"     * Throws an exception if the command is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException Exception is thrown due to Parser class failing to parse user input.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"        throw new InvalidInputException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"        return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":31}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":" * ListCommand class that implements the Command interface.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"     * Retrieves the current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException Exception should not be thrown in this function in this class.","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"            ui.printNoTasks();","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"            ui.printTasks(tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"        return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":35}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.TaskException;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":" * MarkCommand class that implements the Command interface.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"    private boolean toMark;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"    private String fullCommand;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"    public MarkCommand(boolean toMark, String fullCommand) {","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"        this.toMark \u003d toMark;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"     * Toggles a task to done or not done.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception saving to the data file or invalid input.","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"            int taskNum \u003d Integer.parseInt(this.fullCommand.substring(toMark ? 5 : 7));","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"            if (taskNum \u003e tasks.size() || taskNum \u003c 1) {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"                throw new TaskException(\"Please enter a valid task number!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"            tasks.markTask(taskNum, storage, ui, toMark);","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"            throw new TaskException(\"Please enter a valid task number!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"        return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":48}},{"path":"src/main/java/duke/commands/TaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.commands;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.InvalidInputException;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.ListException;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":" * TaskCommand class that implements the Command interface.","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"public class TaskCommand implements Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    private Character taskType;","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    private String fullCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"    public TaskCommand(Character taskType, String fullCommand) {","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"     * Adds a task to the task list depending on what type of task it is.","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception due to invalid input or the task list is full.","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"        if (tasks.size() \u003e\u003d 100) {","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"            throw new ListException(\"List is full!\");","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"        switch (taskType) {","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"            Todo todo \u003d new Todo(this.fullCommand.substring(5));","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"            tasks.addTask(todo, storage, ui);","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"            break;","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"Jarrett0203"},"content":"            try {","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"Jarrett0203"},"content":"                String[] deadline \u003d this.fullCommand.substring(9).split(\" /by \");","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"Jarrett0203"},"content":"                if (\"\".equals(deadline[0].trim())) {","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"Jarrett0203"},"content":"                    throw new InvalidInputException(","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"Jarrett0203"},"content":"                            \"OOPS!!! The deadline must be in the format:\"","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"Jarrett0203"},"content":"                                    + \" deadline \u003ctask\u003e /by \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"Jarrett0203"},"content":"                }","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"Jarrett0203"},"content":"                Deadline newDeadline \u003d new Deadline(deadline[0], storeDateTime(deadline[1]));","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"Jarrett0203"},"content":"                tasks.addTask(newDeadline, storage, ui);","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"Jarrett0203"},"content":"            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"Jarrett0203"},"content":"                throw new InvalidInputException(","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"Jarrett0203"},"content":"                        \"OOPS!!! The deadline must be in the format:\"","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"Jarrett0203"},"content":"                                + \" deadline \u003ctask\u003e /by \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"Jarrett0203"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"Jarrett0203"},"content":"                throw new InvalidInputException(","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"Jarrett0203"},"content":"                        \"OOPS!!! Dates must be in the format: dd/mm/yyyy HHmm (e.g. 12/12/2023 1800)\");","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"Jarrett0203"},"content":"            break;","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"Jarrett0203"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"Jarrett0203"},"content":"            try {","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"Jarrett0203"},"content":"                String[] event \u003d this.fullCommand.substring(6).split(\" /from \");","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"Jarrett0203"},"content":"                if (\"\".equals(event[0].trim())) {","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"Jarrett0203"},"content":"                    throw new InvalidInputException(","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"Jarrett0203"},"content":"                            \"OOPS!!! The event must be in the format:\"","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"Jarrett0203"},"content":"                                    + \" event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"Jarrett0203"},"content":"                }","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"Jarrett0203"},"content":"                String[] eventTime \u003d event[1].split(\" /to \");","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"Jarrett0203"},"content":"                LocalDateTime fromDateTime \u003d storeDateTime(eventTime[0]);","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"Jarrett0203"},"content":"                LocalDateTime toDateTime \u003d storeDateTime(eventTime[1]);","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"Jarrett0203"},"content":"                if (fromDateTime.isAfter(toDateTime)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"Jarrett0203"},"content":"                    throw new InvalidInputException(\"OOPS!!! The start date must be before the end date.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"Jarrett0203"},"content":"                }","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"Jarrett0203"},"content":"                Event newEvent \u003d new Event(event[0], fromDateTime, toDateTime);","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"Jarrett0203"},"content":"                tasks.addTask(newEvent, storage, ui);","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"Jarrett0203"},"content":"            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"Jarrett0203"},"content":"                throw new InvalidInputException(","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"Jarrett0203"},"content":"                        \"OOPS!!! The event must be in the format:\"","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"Jarrett0203"},"content":"                                + \" event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e, \u003ctask\u003e and \u003cdate\u003e cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"Jarrett0203"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"Jarrett0203"},"content":"                throw new InvalidInputException(","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"Jarrett0203"},"content":"                        \"OOPS!!! Dates must be in the format: dd/mm/yyyy HHmm (e.g. 12/12/2023 1800)\");","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"Jarrett0203"},"content":"            break;","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"Jarrett0203"},"content":"        default:","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"Jarrett0203"},"content":"            throw new InvalidInputException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"Jarrett0203"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"Jarrett0203"},"content":"        return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"Jarrett0203"},"content":"    private static LocalDateTime storeDateTime(String dateTimeString) throws DateTimeParseException {","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"Jarrett0203"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"Jarrett0203"},"content":"        return LocalDateTime.parse(dateTimeString, formatter);","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Jarrett0203":107}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":" * DukeException class for exceptions that are unique to Duke.","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"        super(message);","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":10}},{"path":"src/main/java/duke/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":" * InvalidInputException class that extends DukeException.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"public class InvalidInputException extends DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"    public InvalidInputException(String message) {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"        super(message);","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":10}},{"path":"src/main/java/duke/exceptions/ListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":" * ListException class that extends DukeException.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"public class ListException extends DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"    public ListException(String message) {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"        super(message);","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":10}},{"path":"src/main/java/duke/exceptions/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":" * TaskException class that extends DukeException.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"public class TaskException extends DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"    public TaskException(String message) {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"        super(message);","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.parser;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.InvalidCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"import duke.commands.TaskCommand;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":" * Parser class that parses the user input.","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"public class Parser {","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"     * Parses the user input and returns the appropriate command to be executed.","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"     * @param fullCommand The user input.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"     * @return The appropriate command.","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    public static Command parse(String fullCommand) {","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"        String lowercaseCommand \u003d fullCommand.toLowerCase();","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"        Command command;","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"        if (lowercaseCommand.equals(\"bye\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new ByeCommand();","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"        } else if (lowercaseCommand.equals(\"list\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new ListCommand();","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"        } else if (lowercaseCommand.startsWith(\"todo\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new TaskCommand(\u0027T\u0027, fullCommand);","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"        } else if (lowercaseCommand.startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new TaskCommand(\u0027D\u0027, fullCommand);","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"        } else if (lowercaseCommand.startsWith(\"event\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new TaskCommand(\u0027E\u0027, fullCommand);","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"        } else if (lowercaseCommand.startsWith(\"delete\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new DeleteCommand(fullCommand);","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"        } else if (lowercaseCommand.contains(\"mark\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new MarkCommand(!lowercaseCommand.startsWith(\"unmark\"), fullCommand);","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"        } else if (lowercaseCommand.startsWith(\"find\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new FindCommand(fullCommand);","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"            command \u003d new InvalidCommand();","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"        return command;","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":48}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.io.File;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":" * Storage class that handles the loading and saving of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"public class Storage {","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"    private Path filePath;","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"        this.filePath \u003d Paths.get(filePath);","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"     * Loads the tasks from the data file into the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"     * @return ArrayList\u003cTask\u003e Returns an ArrayList containing the tasks from the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If the data file could not be found.","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"        File file \u003d this.filePath.toFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"            throw new DukeException(\"Data file could not be found.\");","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"        ArrayList\u003cTask\u003e loadedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"        try (Scanner scanner \u003d new Scanner(file)) {","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"                String[] args \u003d scanner.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"                if (\"T\".equals(args[0])) {","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"                    Todo newTodo \u003d new Todo(args[2]);","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"Jarrett0203"},"content":"                    if (args[1].equals(\"1\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"Jarrett0203"},"content":"                        newTodo.toggleMark();","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"Jarrett0203"},"content":"                    }","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"Jarrett0203"},"content":"                    loadedList.add(newTodo);","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"Jarrett0203"},"content":"                } else if (\"D\".equals(args[0])) {","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"Jarrett0203"},"content":"                    Deadline newDeadline \u003d new Deadline(args[2], LocalDateTime.parse(args[3], formatter));","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"Jarrett0203"},"content":"                    if (args[1].equals(\"1\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"Jarrett0203"},"content":"                        newDeadline.toggleMark();","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"Jarrett0203"},"content":"                    }","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"Jarrett0203"},"content":"                    loadedList.add(newDeadline);","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"Jarrett0203"},"content":"                } else if (\"E\".equals(args[0])) {","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"Jarrett0203"},"content":"                    Event newEvent \u003d new Event(args[2], LocalDateTime.parse(args[3], formatter),","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"Jarrett0203"},"content":"                            LocalDateTime.parse(args[4], formatter));","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"Jarrett0203"},"content":"                    if (args[1].equals(\"1\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"Jarrett0203"},"content":"                        newEvent.toggleMark();","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"Jarrett0203"},"content":"                    }","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"Jarrett0203"},"content":"                    loadedList.add(newEvent);","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"Jarrett0203"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"Jarrett0203"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"Jarrett0203"},"content":"            throw new DukeException(\"Data file could not be found.\");","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"Jarrett0203"},"content":"        return loadedList;","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"Jarrett0203"},"content":"     * Saves the tasks in the tasklist into the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The task list converted to an ArrayList to be saved.","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If the data file could not be found or there was an error creating the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"Jarrett0203"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":82,"author":{"gitId":"Jarrett0203"},"content":"        File file \u003d filePath.toFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":83,"author":{"gitId":"Jarrett0203"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"Jarrett0203"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-01-21"},{"lineNumber":85,"author":{"gitId":"Jarrett0203"},"content":"            try {","lastModifiedDate":"2023-01-21"},{"lineNumber":86,"author":{"gitId":"Jarrett0203"},"content":"                file.createNewFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"Jarrett0203"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"Jarrett0203"},"content":"                throw new DukeException(String.format(\"File could not be created at %s\", filePath));","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":92,"author":{"gitId":"Jarrett0203"},"content":"        try (FileWriter fileWriter \u003d new FileWriter(file)) {","lastModifiedDate":"2023-01-21"},{"lineNumber":93,"author":{"gitId":"Jarrett0203"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":94,"author":{"gitId":"Jarrett0203"},"content":"                int mark \u003d task.getMark().equals(\u0027X\u0027) ? 1 : 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":95,"author":{"gitId":"Jarrett0203"},"content":"                String newString \u003d String.format(\"T | %d | %s%n\", mark, task.getDescription());","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"Jarrett0203"},"content":"                if (task instanceof Deadline) {","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"Jarrett0203"},"content":"                    newString \u003d String.format(\"D | %d | %s | %s%n\", mark,","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"Jarrett0203"},"content":"                            task.getDescription(), ((Deadline) task).getBy());","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"Jarrett0203"},"content":"                } else if (task instanceof Event) {","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"Jarrett0203"},"content":"                    newString \u003d String.format(\"E | %d | %s | %s | %s%n\", mark,","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"Jarrett0203"},"content":"                            task.getDescription(), ((Event) task).getFrom(), ((Event) task).getTo());","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"Jarrett0203"},"content":"                }","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"Jarrett0203"},"content":"                fileWriter.write(newString);","lastModifiedDate":"2023-01-21"},{"lineNumber":104,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":105,"author":{"gitId":"Jarrett0203"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":106,"author":{"gitId":"Jarrett0203"},"content":"            throw new DukeException(\"Data file could not be found.\");","lastModifiedDate":"2023-01-21"},{"lineNumber":107,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":108,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":109,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":109}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":" * Deadline class that extends Task class.","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"    private LocalDateTime by;","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"        super(description);","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"        return by;","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    private String parseDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"        return dateTime.format(formatter);","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), parseDateTime(this.by));","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":31}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":" * Event class that extends Task class.","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"        super(description);","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"    public LocalDateTime getFrom() {","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"        return from;","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    public LocalDateTime getTo() {","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"        return to;","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"    private String parseDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"        return dateTime.format(formatter);","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), parseDateTime(this.from),","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"                parseDateTime(this.to));","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":37}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":" * Task class that represents a task.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"public class Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"    private String description;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    private boolean isMark;","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"        this.isMark \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"        return description;","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"    public Character getMark() {","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"        return isMark ? \u0027X\u0027 : \u0027 \u0027;","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"     * Toggles the mark of the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"    public void toggleMark() {","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"        this.isMark \u003d !this.isMark;","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"    /** Returns the details of the task in a string format.","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"     * @return String The string representation of the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"        return String.format(\"[%c] %s\", getMark(), this.description);","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":39}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":" * Todo class that extends Task.","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"        super(description);","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"    public String toString() {","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":16}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.tasklist;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":" * TaskList class that handles all tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"public class TaskList {","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"     * Adds a task to the task list, saves the new task list to the data file ","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"     * and then prints the task that was added.","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"    public void addTask(Task task, Storage storage, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"        storage.saveTasks(this.tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"        ui.printTask(task, this.tasks, true);","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"     * Deletes a task in the task list, saves the new task list to the data file ","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"     * and then prints the task that was just removed.","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"     *  ","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"     * @param taskNum The task number of the task to be removed in task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"Jarrett0203"},"content":"    public void deleteTask(int taskNum, Storage storage, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"Jarrett0203"},"content":"        int taskListIndex \u003d taskNum - 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"Jarrett0203"},"content":"        Task taskToRemove \u003d this.tasks.get(taskListIndex);","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"Jarrett0203"},"content":"        this.tasks.remove(taskListIndex);","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"Jarrett0203"},"content":"        storage.saveTasks(this.tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"Jarrett0203"},"content":"        ui.printTask(taskToRemove, this.tasks, false);","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"Jarrett0203"},"content":"     * Marks a task in the task list as done or undone, saves the new task list to the data file","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"Jarrett0203"},"content":"     * and then prints the task that was just marked or unmarked.","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"Jarrett0203"},"content":"     * @param taskNum The task number of the task to be marked or unmarked in task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"Jarrett0203"},"content":"     * @param storage The storage object that handles saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"Jarrett0203"},"content":"     * @param ui The ui object that handles printing to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"Jarrett0203"},"content":"     * @param toMark True if the task is to be marked as done, false otherwise.","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"Jarrett0203"},"content":"     * @throws DukeException If there is an exception saving to the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"Jarrett0203"},"content":"    public void markTask(int taskNum, Storage storage, Ui ui, boolean toMark) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"Jarrett0203"},"content":"        int taskListIndex \u003d taskNum - 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"Jarrett0203"},"content":"        if (!this.tasks.get(taskListIndex).getMark().equals(toMark ? \u0027X\u0027 : \u0027 \u0027)) {","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"Jarrett0203"},"content":"            this.tasks.get(taskListIndex).toggleMark();","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"Jarrett0203"},"content":"            storage.saveTasks(this.tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":75,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":76,"author":{"gitId":"Jarrett0203"},"content":"        ui.printMarkTask(this.tasks.get(taskListIndex), toMark);","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":78,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"Jarrett0203"},"content":"     * Gets a task in the task list given the task index.","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"Jarrett0203"},"content":"     * @param index The index of the task in the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"Jarrett0203"},"content":"     * @return Task The task at the given index.","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"Jarrett0203"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"Jarrett0203"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"Jarrett0203"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"Jarrett0203"},"content":"     * @return int The number of tasks in the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"Jarrett0203"},"content":"    public int size() {","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"Jarrett0203"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-21"},{"lineNumber":97,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":98,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"Jarrett0203"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"Jarrett0203"},"content":"     * @return int The number of tasks in the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"Jarrett0203"},"content":"    public void findTask(String keyword, Ui ui) {","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"Jarrett0203"},"content":"        ArrayList\u003cInteger\u003e matchingTasksIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"Jarrett0203"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"Jarrett0203"},"content":"            if (this.tasks.get(i).getDescription().contains(keyword)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"Jarrett0203"},"content":"                matchingTasksIndex.add(i);","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"Jarrett0203"},"content":"        ui.printMatchingTasks(matchingTasksIndex, this.tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":112,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":113}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":" * Ui class that handles all user interactions.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"public class Ui {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"    private Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"     * Prints a horizontal line.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Jarrett0203"},"content":"    public void showLine() {","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  ------------------------------------\");","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Jarrett0203"},"content":"     * Prints the welcome message.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Jarrett0203"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Jarrett0203"},"content":"        showLine();","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  Hello! I\u0027m Duke\\n  What can I do for you?\");","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"Jarrett0203"},"content":"        showLine();","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"Jarrett0203"},"content":"     * Prints the goodbye message.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Jarrett0203"},"content":"    public void showBye() {","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"Jarrett0203"},"content":"     * Takes in a file path and prints an attempt to load message to the user.","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"Jarrett0203"},"content":"     * @param filePath The file path of the data file.","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"Jarrett0203"},"content":"    public void showLoading(String filePath) {","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"%n  Trying to load tasks from %s...\", filePath));","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"Jarrett0203"},"content":"     * Prints a successful load message to the user if tasks is not empty.","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"Jarrett0203"},"content":"    public void showSuccessfulLoad(TaskList tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"Jarrett0203"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  Data file was loaded but no tasks could be found.\");","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"Jarrett0203"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  Tasks loaded successfully!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"Jarrett0203"},"content":"     * Prints the error message in the default way.","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"Jarrett0203"},"content":"     * @param message The error message to be printed.","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"Jarrett0203"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"  %s\", message));","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"Jarrett0203"},"content":"     * Prints the loading error message when the data file could not be found.","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"Jarrett0203"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(","lastModifiedDate":"2023-01-21"},{"lineNumber":78,"author":{"gitId":"Jarrett0203"},"content":"                \"\\n  Data file could not be found.\\n  A new data file will be auto generated upon insert of a task.\");","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":80,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"Jarrett0203"},"content":"     * Returns a Command upon receiving user input.","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"Jarrett0203"},"content":"     * @return String The user input.","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"Jarrett0203"},"content":"    public String readCommand() {","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"Jarrett0203"},"content":"        return this.sc.nextLine().trim();","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"Jarrett0203"},"content":"     * Closes the scanner after bye command has been read.","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"Jarrett0203"},"content":"    public void closeScanner() {","lastModifiedDate":"2023-01-21"},{"lineNumber":95,"author":{"gitId":"Jarrett0203"},"content":"        this.sc.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":97,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":98,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"Jarrett0203"},"content":"     * Prints task when it is added or removed.","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"Jarrett0203"},"content":"     * @param task The task to be printed.","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"Jarrett0203"},"content":"     * @param taskList The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"Jarrett0203"},"content":"     * @param toAdd True if task is to be added, false otherwise.","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"Jarrett0203"},"content":"    public void printTask(Task task, ArrayList\u003cTask\u003e taskList, boolean toAdd) {","lastModifiedDate":"2023-01-21"},{"lineNumber":107,"author":{"gitId":"Jarrett0203"},"content":"        if (toAdd) {","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":109,"author":{"gitId":"Jarrett0203"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":111,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":112,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"  %s\", task.toString()));","lastModifiedDate":"2023-01-21"},{"lineNumber":113,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"  Now you have %d %s in the list.\", taskList.size(),","lastModifiedDate":"2023-01-21"},{"lineNumber":114,"author":{"gitId":"Jarrett0203"},"content":"                taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\"));","lastModifiedDate":"2023-01-21"},{"lineNumber":115,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":116,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":117,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":118,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":119,"author":{"gitId":"Jarrett0203"},"content":"     * Prints task when it is marked as done or not done.","lastModifiedDate":"2023-01-22"},{"lineNumber":120,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":121,"author":{"gitId":"Jarrett0203"},"content":"     * @param task The task to be printed.","lastModifiedDate":"2023-01-22"},{"lineNumber":122,"author":{"gitId":"Jarrett0203"},"content":"     * @param toMark True if task is to be marked as done, false otherwise.","lastModifiedDate":"2023-01-22"},{"lineNumber":123,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":124,"author":{"gitId":"Jarrett0203"},"content":"    public void printMarkTask(Task task, boolean toMark) {","lastModifiedDate":"2023-01-21"},{"lineNumber":125,"author":{"gitId":"Jarrett0203"},"content":"        if (toMark) {","lastModifiedDate":"2023-01-22"},{"lineNumber":126,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":127,"author":{"gitId":"Jarrett0203"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":128,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  I\u0027ve marked this task as not done:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":129,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":130,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(String.format(\"  %s\", task.toString()));","lastModifiedDate":"2023-01-21"},{"lineNumber":131,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":132,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":133,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":134,"author":{"gitId":"Jarrett0203"},"content":"     * Prints the message when the task list is empty.","lastModifiedDate":"2023-01-22"},{"lineNumber":135,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":136,"author":{"gitId":"Jarrett0203"},"content":"    public void printNoTasks() {","lastModifiedDate":"2023-01-21"},{"lineNumber":137,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  No tasks added yet\");","lastModifiedDate":"2023-01-21"},{"lineNumber":138,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":139,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":140,"author":{"gitId":"Jarrett0203"},"content":"    ","lastModifiedDate":"2023-01-22"},{"lineNumber":141,"author":{"gitId":"Jarrett0203"},"content":"    /** ","lastModifiedDate":"2023-01-22"},{"lineNumber":142,"author":{"gitId":"Jarrett0203"},"content":"     * Prints the tasks in the task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":143,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":144,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":145,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":146,"author":{"gitId":"Jarrett0203"},"content":"    public void printTasks(TaskList tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":147,"author":{"gitId":"Jarrett0203"},"content":"        System.out.println(\"  Here are the tasks in your list:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":148,"author":{"gitId":"Jarrett0203"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-21"},{"lineNumber":149,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(String.format(\"  %d.%s\", i + 1, tasks.getTask(i).toString()));","lastModifiedDate":"2023-01-21"},{"lineNumber":150,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":151,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":152,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":153,"author":{"gitId":"Jarrett0203"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":154,"author":{"gitId":"Jarrett0203"},"content":"     * Prints all tasks that contain the keyword.","lastModifiedDate":"2023-01-22"},{"lineNumber":155,"author":{"gitId":"Jarrett0203"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":156,"author":{"gitId":"Jarrett0203"},"content":"     * @param matchingTasksIndex An arraylist of the indexes of the tasks that contain the keyword.","lastModifiedDate":"2023-01-22"},{"lineNumber":157,"author":{"gitId":"Jarrett0203"},"content":"     * @param tasks The current task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":158,"author":{"gitId":"Jarrett0203"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":159,"author":{"gitId":"Jarrett0203"},"content":"    public void printMatchingTasks(ArrayList\u003cInteger\u003e matchingTasksIndex, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-22"},{"lineNumber":160,"author":{"gitId":"Jarrett0203"},"content":"        if (matchingTasksIndex.isEmpty()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":161,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  No matching tasks found.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":162,"author":{"gitId":"Jarrett0203"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":163,"author":{"gitId":"Jarrett0203"},"content":"            System.out.println(\"  Here are the matching tasks in your list:\");","lastModifiedDate":"2023-01-22"},{"lineNumber":164,"author":{"gitId":"Jarrett0203"},"content":"            for (int i \u003d 0; i \u003c matchingTasksIndex.size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":165,"author":{"gitId":"Jarrett0203"},"content":"                int taskIndex \u003d matchingTasksIndex.get(i);","lastModifiedDate":"2023-01-22"},{"lineNumber":166,"author":{"gitId":"Jarrett0203"},"content":"                System.out.println(String.format(\"  %d.%s\", taskIndex + 1, tasks.get(taskIndex).toString()));","lastModifiedDate":"2023-01-22"},{"lineNumber":167,"author":{"gitId":"Jarrett0203"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":168,"author":{"gitId":"Jarrett0203"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":169,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":170,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":171,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Jarrett0203":171}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"  @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"  public void testToString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"    LocalDateTime by \u003d LocalDateTime.parse(\"2022-01-01T00:00\");","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"    assertEquals(\"[D][ ] test (by: Jan 01 2022 12:00AM)\", new Deadline(\"test\", by).toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"  }","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Jarrett0203":15}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"public class EventTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"    public void testToString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"        LocalDateTime from \u003d LocalDateTime.parse(\"2022-01-01T00:00\");","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Jarrett0203"},"content":"        LocalDateTime to \u003d LocalDateTime.parse(\"2023-01-01T00:00\");","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Jarrett0203"},"content":"        assertEquals(\"[E][ ] test (from: Jan 01 2022 12:00AM to: Jan 01 2023 12:00AM)\",","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Jarrett0203"},"content":"                new Event(\"test\", from, to).toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Jarrett0203":17}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"    public void testToString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"        assertEquals(\"[T][ ] test\", new Todo(\"test\").toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Jarrett0203":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"Jarrett0203"},"content":"todo borrow book","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"Jarrett0203"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"Jarrett0203"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"Jarrett0203"},"content":"mark 1","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"Jarrett0203"},"content":"mark 2","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"Jarrett0203"},"content":"unmark 2","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"Jarrett0203"},"content":"unmark 3","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"Jarrett0203"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"Jarrett0203"},"content":"bye","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"Jarrett0203":12}}]
