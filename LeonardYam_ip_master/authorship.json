[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"plugins {","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"    id \u0027idea\u0027","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"group \u0027iP\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"version \u00270.1-alpha\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"repositories {","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"    mavenCentral()","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"test {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"sourceSets {","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"    main {","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"        java {","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"            srcDirs \u003d [\u0027src/main/java\u0027]","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"dependencies {","lastModifiedDate":"2023-01-20"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"    implementation \u0027org.apache.commons:commons-lang3:3.12.0\u0027","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"LeonardYam":29}},{"path":"data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"E | false | next | 2011-01-01 | 2014-01-01","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"T | false | test","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"D | false | test | 2022-04-01","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":3}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"@rem","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"@rem","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"@rem","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"@rem","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"@rem limitations under the License.","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"@rem","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"@if \"%DEBUG%\"\u003d\u003d\"\" @echo off","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"@rem","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"@rem","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2023-01-20"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"if \"%DIRNAME%\"\u003d\u003d\"\" set DIRNAME\u003d.","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"LeonardYam"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"LeonardYam"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"LeonardYam"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"LeonardYam"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"LeonardYam"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"LeonardYam"},"content":"@rem Find java.exe","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"LeonardYam"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"LeonardYam"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"LeonardYam"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"LeonardYam"},"content":"if %ERRORLEVEL% equ 0 goto execute","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"LeonardYam"},"content":"echo.","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"LeonardYam"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"LeonardYam"},"content":"echo.","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"LeonardYam"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"LeonardYam"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"LeonardYam"},"content":"goto fail","lastModifiedDate":"2023-01-20"},{"lineNumber":52,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"LeonardYam"},"content":":findJavaFromJavaHome","lastModifiedDate":"2023-01-20"},{"lineNumber":54,"author":{"gitId":"LeonardYam"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"LeonardYam"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"LeonardYam"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":59,"author":{"gitId":"LeonardYam"},"content":"echo.","lastModifiedDate":"2023-01-20"},{"lineNumber":60,"author":{"gitId":"LeonardYam"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"LeonardYam"},"content":"echo.","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"LeonardYam"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-20"},{"lineNumber":63,"author":{"gitId":"LeonardYam"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-20"},{"lineNumber":64,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":65,"author":{"gitId":"LeonardYam"},"content":"goto fail","lastModifiedDate":"2023-01-20"},{"lineNumber":66,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"LeonardYam"},"content":":execute","lastModifiedDate":"2023-01-20"},{"lineNumber":68,"author":{"gitId":"LeonardYam"},"content":"@rem Setup the command line","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"LeonardYam"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"LeonardYam"},"content":"@rem Execute Gradle","lastModifiedDate":"2023-01-20"},{"lineNumber":74,"author":{"gitId":"LeonardYam"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2023-01-20"},{"lineNumber":75,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":76,"author":{"gitId":"LeonardYam"},"content":":end","lastModifiedDate":"2023-01-20"},{"lineNumber":77,"author":{"gitId":"LeonardYam"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-20"},{"lineNumber":78,"author":{"gitId":"LeonardYam"},"content":"if %ERRORLEVEL% equ 0 goto mainEnd","lastModifiedDate":"2023-01-20"},{"lineNumber":79,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":80,"author":{"gitId":"LeonardYam"},"content":":fail","lastModifiedDate":"2023-01-20"},{"lineNumber":81,"author":{"gitId":"LeonardYam"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2023-01-20"},{"lineNumber":82,"author":{"gitId":"LeonardYam"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2023-01-20"},{"lineNumber":83,"author":{"gitId":"LeonardYam"},"content":"set EXIT_CODE\u003d%ERRORLEVEL%","lastModifiedDate":"2023-01-20"},{"lineNumber":84,"author":{"gitId":"LeonardYam"},"content":"if %EXIT_CODE% equ 0 set EXIT_CODE\u003d1","lastModifiedDate":"2023-01-20"},{"lineNumber":85,"author":{"gitId":"LeonardYam"},"content":"if not \"\"\u003d\u003d\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%","lastModifiedDate":"2023-01-20"},{"lineNumber":86,"author":{"gitId":"LeonardYam"},"content":"exit /b %EXIT_CODE%","lastModifiedDate":"2023-01-20"},{"lineNumber":87,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":88,"author":{"gitId":"LeonardYam"},"content":":mainEnd","lastModifiedDate":"2023-01-20"},{"lineNumber":89,"author":{"gitId":"LeonardYam"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2023-01-20"},{"lineNumber":90,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":91,"author":{"gitId":"LeonardYam"},"content":":omega","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"LeonardYam":91}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"rootProject.name \u003d \"ip\"","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"LeonardYam":1}},{"path":"src/main/java/bob/Bob.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"public class Bob {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"    public Bob(String filePath) {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"        ui \u003d new Ui(5, \"~\", 30);","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"    private void readTasks() {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"        String command \u003d ui.readCommand();","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"        while (!command.equals(\"bye\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"                int index;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"                Task t;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"                if (command.equals(\"list\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"                    ui.printTasks(tasks.getList());","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"                } else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"                    t \u003d Parser.parseTodo(command);","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"                    tasks.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"                    ui.printTaskAdded(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"                } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"                    t \u003d Parser.parseEvent(command);","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"                    tasks.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"LeonardYam"},"content":"                    ui.printTaskAdded(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"LeonardYam"},"content":"                } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"LeonardYam"},"content":"                    t \u003d Parser.parseDeadline(command);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"LeonardYam"},"content":"                    tasks.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"LeonardYam"},"content":"                    ui.printTaskAdded(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"LeonardYam"},"content":"                } else if (command.startsWith(\"mark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"LeonardYam"},"content":"                    index \u003d Parser.parseIndex(command);","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"LeonardYam"},"content":"                    ui.printMarkTask(tasks.get(index));","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"LeonardYam"},"content":"                } else if (command.startsWith(\"unmark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"LeonardYam"},"content":"                    index \u003d Parser.parseIndex(command);","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"LeonardYam"},"content":"                    tasks.unmark(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"LeonardYam"},"content":"                    ui.printUnmarkTask(tasks.get(index));","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"LeonardYam"},"content":"                } else if (command.startsWith(\"delete\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"LeonardYam"},"content":"                    index \u003d Parser.parseIndex(command);","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"LeonardYam"},"content":"                    ui.printDeleteTask(tasks.delete(index));","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"LeonardYam"},"content":"                } else if (command.startsWith(\"find\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"LeonardYam"},"content":"                    String keyword \u003d Parser.parseFind(command);","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"LeonardYam"},"content":"                    ui.printFilteredTasks(tasks.find(keyword));","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"LeonardYam"},"content":"                } else { // Invalid command","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"LeonardYam"},"content":"                    throw new BobException(\"Sorry :( no valid command was entered\");","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"LeonardYam"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"LeonardYam"},"content":"            } catch (BobException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"LeonardYam"},"content":"                ui.errorPrint(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"LeonardYam"},"content":"            } finally {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"LeonardYam"},"content":"                command \u003d ui.readCommand();","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"LeonardYam"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":59,"author":{"gitId":"LeonardYam"},"content":"    private void loadTasks() {","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"LeonardYam"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"LeonardYam"},"content":"            storage.load(tasks);","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"LeonardYam"},"content":"        } catch (BobException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":63,"author":{"gitId":"LeonardYam"},"content":"            ui.errorPrint(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"LeonardYam"},"content":"        } ","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"LeonardYam"},"content":"    ","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"LeonardYam"},"content":"    private void saveTasks() {","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"LeonardYam"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"LeonardYam"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"LeonardYam"},"content":"        } catch (BobException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"LeonardYam"},"content":"            ui.errorPrint(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"LeonardYam"},"content":"     * Main program for Bob, our chat-bot","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"LeonardYam"},"content":"    public void start() {","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"LeonardYam"},"content":"        //Introduction message","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"LeonardYam"},"content":"        ui.printIntroduction();","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"LeonardYam"},"content":"        // Load task list from file","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"LeonardYam"},"content":"        loadTasks();","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"LeonardYam"},"content":"        // Read tasks from user","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"LeonardYam"},"content":"        readTasks();","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"LeonardYam"},"content":"        // Save task list to file","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"LeonardYam"},"content":"        saveTasks();","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"LeonardYam"},"content":"        // Goodbye message","lastModifiedDate":"2023-01-19"},{"lineNumber":93,"author":{"gitId":"LeonardYam"},"content":"        ui.printGoodbye();","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"LeonardYam"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"LeonardYam"},"content":"        Bob bob \u003d new Bob(\"data/taskList.txt\");","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"LeonardYam"},"content":"        bob.start();","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"LeonardYam":100}},{"path":"src/main/java/bob/BobException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"public class BobException extends Exception {","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"    public BobException(String message) {","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"        super(message);","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"LeonardYam":7}},{"path":"src/main/java/bob/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"    public Deadline(String description, LocalDate deadline) {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"        super(description, \"D\");","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"        DateTimeFormatter f \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"        return String.format(\"%s | by: %s\", this.description, this.deadline.format(f));","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"LeonardYam":17}},{"path":"src/main/java/bob/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"    protected LocalDate start;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"    protected LocalDate end;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"    public Event(String description, LocalDate start, LocalDate end) {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"        super(description, \"E\");","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"        DateTimeFormatter f \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"        return String.format(\"%s | %s to %s\", this.description, this.start.format(f), this.end.format(f));","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"LeonardYam":20}},{"path":"src/main/java/bob/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import org.apache.commons.lang3.StringUtils;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"public class Parser {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"    private static final DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd[ ha]\");","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"    // Check if string can be parsed to LocalDate","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isDate(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"            LocalDate.parse(s, format);","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"            return true;","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"            return false;","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"    //Check that the string is a number","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isInt(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"        if (s \u003d\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"            return false;","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"        // Check that every char is a digit","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"        for (int i \u003d 0, len \u003d s.length(); i \u003c len; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"            char c \u003d s.charAt(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"            if (c \u003c \u00270\u0027 || c \u003e \u00279\u0027) {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"LeonardYam"},"content":"                return false;","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"LeonardYam"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"LeonardYam"},"content":"        return true;","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"LeonardYam"},"content":"    // Command: todo \u003cdescription\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isTodo(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"LeonardYam"},"content":"        String[] command \u003d s.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"LeonardYam"},"content":"        return command.length \u003e 1 \u0026\u0026 command[0].equals(\"todo\");","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"LeonardYam"},"content":"    // Command: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003c4pm\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isEvent(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"LeonardYam"},"content":"        // A valid event would have only 1 /to and /from command","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"LeonardYam"},"content":"        Boolean validMatches \u003d StringUtils.countMatches(s, \" /from \") \u003d\u003d 1","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 StringUtils.countMatches(s, \" /to \") \u003d\u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"LeonardYam"},"content":"        // A valid command would have 3 different sections with this split","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"LeonardYam"},"content":"        String[] splitCommand \u003d s.split(\" /from | /to \");","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"LeonardYam"},"content":"        // Check if a description exists","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"LeonardYam"},"content":"        String[] command_desc \u003d splitCommand[0].split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"LeonardYam"},"content":"        return validMatches","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 splitCommand.length \u003d\u003d 3","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 command_desc.length \u003e 1","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 command_desc[0].equals(\"event\")","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 s.indexOf(\"/from\") \u003c s.indexOf(\"/to\") // A valid command has /from before /to","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 isDate(splitCommand[1])","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 isDate(splitCommand[2]);","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"LeonardYam"},"content":"    // Command: deadline \u003cdescription\u003e /by \u003cdeadline\u003e","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isDeadline(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"LeonardYam"},"content":"        String[] splitCommand \u003d s.split(\" /by \");","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"LeonardYam"},"content":"        String[] command_desc \u003d splitCommand[0].split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"LeonardYam"},"content":"        return splitCommand.length \u003d\u003d 2","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 command_desc.length \u003d\u003d 2","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 command_desc[0].equals(\"deadline\")","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 isDate(splitCommand[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"LeonardYam"},"content":"    // Determine if a string can be used to mark a task","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isMark(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"LeonardYam"},"content":"        String[] words \u003d s.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"LeonardYam"},"content":"        return words.length \u003d\u003d 2","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 words[0].equals(\"mark\") ","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 isInt(words[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"LeonardYam"},"content":"    // Determine if a string can be used to unmark a task","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isUnmark(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"LeonardYam"},"content":"        String[] words \u003d s.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"LeonardYam"},"content":"        return words.length \u003d\u003d 2","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 words[0].equals(\"unmark\") ","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"LeonardYam"},"content":"                \u0026\u0026 isInt(words[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"LeonardYam"},"content":"    } ","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isDelete(String input) {","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"LeonardYam"},"content":"        String[] command \u003d input.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"LeonardYam"},"content":"        return command.length \u003d\u003d 2 \u0026\u0026 command[0].equals(\"delete\") \u0026\u0026 isInt(command[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"LeonardYam"},"content":"    private static boolean isFind(String input) {","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"LeonardYam"},"content":"        String[] command \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"LeonardYam"},"content":"        return command.length \u003d\u003d 2 \u0026\u0026 command[0].equals(\"find\");","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"LeonardYam"},"content":"    // Return the index from a mark/unmark/delete command","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"LeonardYam"},"content":"    public static int parseIndex(String s) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"LeonardYam"},"content":"        if (!isMark(s) \u0026\u0026 !isUnmark(s) \u0026\u0026 !isDelete(s)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(\"Invalid mark/unmark command!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"LeonardYam"},"content":"        String[] commands \u003d s.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"LeonardYam"},"content":"        int index \u003d Integer.parseInt(commands[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"LeonardYam"},"content":"        return index;","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"LeonardYam"},"content":"     * Validates and parses a given string,","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"LeonardYam"},"content":"     * and returns a Todo object if the string is valid.","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"LeonardYam"},"content":"     * @param s String to be validated and parsed","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"LeonardYam"},"content":"     * @return Todo object","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If string is not a valid todo command","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"LeonardYam"},"content":"    public static Todo parseTodo(String s) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"LeonardYam"},"content":"        if (!isTodo(s)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(\"Invalid todo command!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"LeonardYam"},"content":"        String[] command \u003d s.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"LeonardYam"},"content":"        Todo t \u003d new Todo(command[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"LeonardYam"},"content":"        return t;","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"LeonardYam"},"content":"     * Validates and parses a given string,","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"LeonardYam"},"content":"     * and returns an Event object if the string is valid.","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"LeonardYam"},"content":"     * @param s String to be validated and parsed","lastModifiedDate":"2023-02-01"},{"lineNumber":136,"author":{"gitId":"LeonardYam"},"content":"     * @return Event object","lastModifiedDate":"2023-02-01"},{"lineNumber":137,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If string is not a valid Event command","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"LeonardYam"},"content":"    public static Event parseEvent(String s) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"LeonardYam"},"content":"        if (!isEvent(s)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(\"Invalid event command!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"LeonardYam"},"content":"        String[] command \u003d s.split( \" /from | /to \");","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"LeonardYam"},"content":"        String[] command_desc \u003d command[0].split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"LeonardYam"},"content":"        String description \u003d command_desc[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"LeonardYam"},"content":"        LocalDate start \u003d LocalDate.parse(command[1], format);","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"LeonardYam"},"content":"        LocalDate end \u003d LocalDate.parse(command[2], format);","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"LeonardYam"},"content":"        Event e \u003d new Event(description, start, end);","lastModifiedDate":"2023-02-01"},{"lineNumber":151,"author":{"gitId":"LeonardYam"},"content":"        return e;","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"LeonardYam"},"content":"     * Validates and parses a given string,","lastModifiedDate":"2023-02-01"},{"lineNumber":156,"author":{"gitId":"LeonardYam"},"content":"     * and returns a Deadline object if the string is valid.","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"LeonardYam"},"content":"     * @param s String to be validated and parsed","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"LeonardYam"},"content":"     * @return Deadline object","lastModifiedDate":"2023-02-01"},{"lineNumber":159,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If string is not a valid Deadline command","lastModifiedDate":"2023-02-01"},{"lineNumber":160,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":161,"author":{"gitId":"LeonardYam"},"content":"    public static Deadline parseDeadline(String s) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":162,"author":{"gitId":"LeonardYam"},"content":"        if (!isDeadline(s)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(\"Invalid deadline command!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":166,"author":{"gitId":"LeonardYam"},"content":"        String[] splitCommand \u003d s.split(\" /by \");","lastModifiedDate":"2023-02-01"},{"lineNumber":167,"author":{"gitId":"LeonardYam"},"content":"        String[] command_desc \u003d splitCommand[0].split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":168,"author":{"gitId":"LeonardYam"},"content":"        String description \u003d command_desc[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":169,"author":{"gitId":"LeonardYam"},"content":"        LocalDate deadline \u003d LocalDate.parse(splitCommand[1], format);","lastModifiedDate":"2023-02-01"},{"lineNumber":170,"author":{"gitId":"LeonardYam"},"content":"        ","lastModifiedDate":"2023-02-01"},{"lineNumber":171,"author":{"gitId":"LeonardYam"},"content":"        Deadline d \u003d new Deadline(description, deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":172,"author":{"gitId":"LeonardYam"},"content":"        return d;","lastModifiedDate":"2023-02-01"},{"lineNumber":173,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":174,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":175,"author":{"gitId":"LeonardYam"},"content":"    public static String parseFind(String s) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":176,"author":{"gitId":"LeonardYam"},"content":"        if (!isFind(s)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":177,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(\"Invalid find command!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":178,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":179,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":180,"author":{"gitId":"LeonardYam"},"content":"        String[] command \u003d s.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":181,"author":{"gitId":"LeonardYam"},"content":"        return command[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":182,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":183,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":183}},{"path":"src/main/java/bob/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"public class Storage {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"    private Path filePath;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"     * Returns a Storage object which can read and write tasks to a .txt file","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"     * @param filePath String file path of the input/output file","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"        this.filePath \u003d Paths.get(filePath);","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"    private Task decodeTask(String s) throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"        Task t;","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"        // Separator is \" | \", \\\\ for regex since | is a special character","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"        String[] input \u003d s.split(\" \\\\| \");","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"        String type \u003d input[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"        boolean isDone \u003d Boolean.parseBoolean(input[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"        String desc \u003d input[2];","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"LeonardYam"},"content":"        switch (type) {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"LeonardYam"},"content":"        case \"T\":","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"LeonardYam"},"content":"            t \u003d new Todo(desc);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"LeonardYam"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"LeonardYam"},"content":"        case \"D\":","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"LeonardYam"},"content":"            LocalDate deadline \u003d LocalDate.parse(input[3]);","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"LeonardYam"},"content":"            t \u003d new Deadline(desc, deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"LeonardYam"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"LeonardYam"},"content":"        case \"E\":","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"LeonardYam"},"content":"            LocalDate start \u003d LocalDate.parse(input[3]);","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"LeonardYam"},"content":"            LocalDate end \u003d LocalDate.parse(input[4]);","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"LeonardYam"},"content":"            t \u003d new Event(desc, start, end);","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"LeonardYam"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"LeonardYam"},"content":"        default:","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"LeonardYam"},"content":"            throw new IOException(\"Invalid file input encountered!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"LeonardYam"},"content":"        t.isDone \u003d isDone;","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"LeonardYam"},"content":"        return t;","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"LeonardYam"},"content":"    private String encodeTask(Task t) {","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"LeonardYam"},"content":"        String common \u003d String.format(\"%s | %s | %s\", t.type, t.isDone, t.description);","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"LeonardYam"},"content":"        StringBuilder encode \u003d new StringBuilder(common);","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"LeonardYam"},"content":"        switch (t.type) {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"LeonardYam"},"content":"        case \"D\":","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"LeonardYam"},"content":"            Deadline d \u003d (Deadline) t;","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"LeonardYam"},"content":"            encode.append(String.format(\" | %s\", d.deadline));","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"LeonardYam"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"LeonardYam"},"content":"        case \"E\":","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"LeonardYam"},"content":"            Event e \u003d (Event) t;","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"LeonardYam"},"content":"            encode.append(String.format(\" | %s | %s\", e.start, e.end));","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"LeonardYam"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"LeonardYam"},"content":"        return encode.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"LeonardYam"},"content":"     * Reads the existing file (if any) and loads the decoded Task objects into the given TaskList object.","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"LeonardYam"},"content":"     * @param taskList TaskList object that stores the tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If there was an error in reading the file","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"LeonardYam"},"content":"    public void load(TaskList taskList) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"LeonardYam"},"content":"        if (Files.exists(this.filePath)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"LeonardYam"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"LeonardYam"},"content":"                BufferedReader reader \u003d Files.newBufferedReader(this.filePath);","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"LeonardYam"},"content":"                String line \u003d reader.readLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"LeonardYam"},"content":"                while (line !\u003d null) { // While not EOF","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"LeonardYam"},"content":"                    Task t \u003d decodeTask(line);","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"LeonardYam"},"content":"                    taskList.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"LeonardYam"},"content":"                    line \u003d reader.readLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"LeonardYam"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"LeonardYam"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"LeonardYam"},"content":"                throw new BobException(\"Error while loading tasks :(\");","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"LeonardYam"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"LeonardYam"},"content":"     * Read tasks from a taskList object and writes it to the given file.","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"LeonardYam"},"content":"     * @param taskList TaskList object that has the tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If there was an error in writing to the file","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"LeonardYam"},"content":"    public void save(TaskList taskList) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"LeonardYam"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"LeonardYam"},"content":"            // Make all necessary directories","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"LeonardYam"},"content":"            Files.createDirectories(this.filePath.getParent());","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"LeonardYam"},"content":"            BufferedWriter writer \u003d Files.newBufferedWriter(this.filePath);","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"LeonardYam"},"content":"            for (Task t : taskList.getList()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"LeonardYam"},"content":"                String outputLine \u003d encodeTask(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"LeonardYam"},"content":"                writer.write(outputLine); // Write to buffer","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"LeonardYam"},"content":"                writer.newLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"LeonardYam"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"LeonardYam"},"content":"            writer.flush(); // Write to file","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"LeonardYam"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(\"Error while saving tasks :(\");","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"LeonardYam"},"content":"        } ","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":108}},{"path":"src/main/java/bob/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"    protected String description;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"    protected String type;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"    public Task(String description, String type) {","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"        return this.type;","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"    public void mark() {","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"LeonardYam":30}},{"path":"src/main/java/bob/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"public class TaskList {","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"     * Returns a new TaskList object that can be used to interact with the task list","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"        list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"    // Check if index is in list","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"    private boolean isInvalidIndex(int index) {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"        return index \u003c\u003d 0 || index \u003e list.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"     * Adds a given Task object to the list","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"     * @param t","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"        list.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"     * Mark the task at the given index","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"LeonardYam"},"content":"     * @param index Index of task to mark","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If index is out of range","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"LeonardYam"},"content":"    public void mark(int index) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"LeonardYam"},"content":"        if (isInvalidIndex(index)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"LeonardYam"},"content":"            String error \u003d String.format(\"Index given should be in range [1-%s]\", list.size());","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(error);","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"LeonardYam"},"content":"        // Since list is 0-indexed","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"LeonardYam"},"content":"        list.get(index - 1).mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"LeonardYam"},"content":"     * Unmark the task at the given index","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"LeonardYam"},"content":"     * @param index Index of task to unmark","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If index is out of range","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"LeonardYam"},"content":"    public void unmark(int index) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"LeonardYam"},"content":"        if (isInvalidIndex(index)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"LeonardYam"},"content":"            String error \u003d String.format(\"Index given should be in range [1-%s]\", list.size());","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(error);","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"LeonardYam"},"content":"        // Since list is 0-indexed","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"LeonardYam"},"content":"        list.get(index - 1).unmark();","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"LeonardYam"},"content":"     * Delete the task at the given index","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"LeonardYam"},"content":"     * @param index Index of task to delete","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If index is out of range","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"LeonardYam"},"content":"    public Task delete(int index) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"LeonardYam"},"content":"        if (isInvalidIndex(index)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"LeonardYam"},"content":"            String error \u003d String.format(\"Index given should be in range [1-%s]\", list.size());","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(error);","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"LeonardYam"},"content":"        // Since list is 0-indexed","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"LeonardYam"},"content":"        return list.remove(index - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"LeonardYam"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"LeonardYam"},"content":"     * Returns the task at the given index","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"LeonardYam"},"content":"     * @param index Index of task to return","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"LeonardYam"},"content":"     * @return Task at the given index","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"LeonardYam"},"content":"     * @throws BobException If index is out of range","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"LeonardYam"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"LeonardYam"},"content":"    public Task get(int index) throws BobException {","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"LeonardYam"},"content":"        if (isInvalidIndex(index)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"LeonardYam"},"content":"            String error \u003d String.format(\"Index given should be in range [1-%s]\", list.size());","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"LeonardYam"},"content":"            throw new BobException(error);","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"LeonardYam"},"content":"        // Since list is 0-indexed","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"LeonardYam"},"content":"        return list.get(index - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"LeonardYam"},"content":"    public ArrayList\u003cTask\u003e find(String keyword) {","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"LeonardYam"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"LeonardYam"},"content":"        for (Task t : list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"LeonardYam"},"content":"            // Check if task description contains keyword","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"LeonardYam"},"content":"            if (t.description.contains(keyword)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"LeonardYam"},"content":"                filteredTasks.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"LeonardYam"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"LeonardYam"},"content":"        return filteredTasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"LeonardYam"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"LeonardYam"},"content":"        return this.list;","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":105}},{"path":"src/main/java/bob/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"        super(description, \"T\");","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"        return this.description;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"        if (o instanceof Todo) {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"            Todo t \u003d (Todo) o;","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"            return t.description.equals(this.description);","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"        return false;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":20}},{"path":"src/main/java/bob/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"public class Ui {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"    private int spacing;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"    private String wrapper;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"    public Ui(int spacing, String deco, int length) {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"        this.spacing \u003d spacing;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"        this.wrapper \u003d padLeft(deco.repeat(length));","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"    private String padLeft (String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"        return \" \".repeat(spacing) + s;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"    private String getTaskDescription(Task t) {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"        return String.format(\"[%s][%s] %s\", t.getTaskType(), t.getStatusIcon(), t);","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"    private void printList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"        // Iterate through list items sequentially","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"LeonardYam"},"content":"        for (int i \u003d 0, n \u003d list.size(); i \u003c n; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"LeonardYam"},"content":"            Task t \u003d list.get(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"LeonardYam"},"content":"            String s \u003d String.format(\"%d. %s\", i + 1, getTaskDescription(t));","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"LeonardYam"},"content":"            System.out.println(padLeft(s));","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"LeonardYam"},"content":"    public String readCommand() {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"LeonardYam"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"LeonardYam"},"content":"    public void errorPrint(BobException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"LeonardYam"},"content":"        formattedPrint(\"Sorry! An error has occured :(\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"LeonardYam"},"content":"            + e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"LeonardYam"},"content":"    // Accepts string that can be separated by \\n","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"LeonardYam"},"content":"    private void formattedPrint(String s) {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"LeonardYam"},"content":"        String[] lines \u003d s.split(\"\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(wrapper);","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"LeonardYam"},"content":"        for (String line : lines) {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"LeonardYam"},"content":"            System.out.println(padLeft(line));","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(wrapper);","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"LeonardYam"},"content":"    public void printFilteredTasks(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(wrapper);","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(padLeft(\"Here are the matching tasks: \"));","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"LeonardYam"},"content":"        // Iterate through list items sequentially","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"LeonardYam"},"content":"        printList(list);","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(wrapper);","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"LeonardYam"},"content":"    public void printTasks(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(wrapper);","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(padLeft(\"Current task list: \"));","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"LeonardYam"},"content":"        printList(list);","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"LeonardYam"},"content":"        System.out.println(wrapper);","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"LeonardYam"},"content":"    public void printIntroduction() {","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"LeonardYam"},"content":"        formattedPrint(\"Hi, my name is Bob :)\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"LeonardYam"},"content":"                + \"How may I help you?\");","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"LeonardYam"},"content":"    public void printTaskAdded(Task t) {","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"LeonardYam"},"content":"        formattedPrint(\"Successfully added a new task :)\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"LeonardYam"},"content":"                + getTaskDescription(t));","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"LeonardYam"},"content":"    public void printMarkTask(Task t) {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"LeonardYam"},"content":"        formattedPrint(\"Successfully marked a task :)\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"LeonardYam"},"content":"                + getTaskDescription(t));","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"LeonardYam"},"content":"    public void printUnmarkTask(Task t) {","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"LeonardYam"},"content":"        formattedPrint(\"Successfully unmarked a task :)\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"LeonardYam"},"content":"                + getTaskDescription(t));","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"LeonardYam"},"content":"    public void printDeleteTask(Task t) {","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"LeonardYam"},"content":"        formattedPrint(\"Successfully deleted a task :)\\n\"","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"LeonardYam"},"content":"                + getTaskDescription(t));","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"LeonardYam"},"content":"    public void printGoodbye() {","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"LeonardYam"},"content":"        formattedPrint(\"Goodbye :)\");","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":96}},{"path":"src/test/java/bob/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"public class ParserTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"    public void parseTodo_normalInput_returnTodo() {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"        String input \u003d \"todo homework\";","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"            Task expected \u003d new Todo(\"homework\");","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"            Task actual \u003d Parser.parseTodo(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"            assertEquals(expected, actual);","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"        } catch (BobException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"            System.out.println(\"Error occurred!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"    public void parseTodo_invalidInput_throwException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"        String invalidInput \u003d \"todo\";","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"        BobException e \u003d assertThrows(BobException.class, () -\u003e Parser.parseTodo(invalidInput));","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"        assertEquals(\"Invalid todo command!\", e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":27}},{"path":"src/test/java/bob/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"package bob;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"public class TaskListTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"    @BeforeEach","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"LeonardYam"},"content":"    public void init() {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"LeonardYam"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"LeonardYam"},"content":"        Todo t \u003d new Todo(\"test\");","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"LeonardYam"},"content":"        tasks.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"LeonardYam"},"content":"    public void mark_invalidIndex_throwException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"        int invalidIndex \u003d 2;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"LeonardYam"},"content":"        BobException e \u003d assertThrows(BobException.class, () -\u003e tasks.mark(invalidIndex));","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"LeonardYam"},"content":"        assertEquals(\"Index given should be in range [1-1]\", e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"LeonardYam"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"LeonardYam"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"LeonardYam":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LeonardYam"},"content":"todo Buy groceries","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"LeonardYam"},"content":"deadline Do homework /by tomorrow","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"LeonardYam"},"content":"event CNY /from Saturday /to Tuesday","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"LeonardYam"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"LeonardYam"},"content":"mark 3","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"LeonardYam"},"content":"unmark 3","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"LeonardYam"},"content":"bye","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"LeonardYam":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"LeonardYam"},"content":"# Uses gradle shadowJar to build","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"LeonardYam"},"content":"cd ..","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"LeonardYam"},"content":"./gradlew clean shadowJar","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"LeonardYam"},"content":"if ! [ -d \"./build\" ]","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"LeonardYam"},"content":"# Go back to test directory","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"LeonardYam"},"content":"cd text-ui-test","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"LeonardYam"},"content":"java -cp \"../build/libs/ip-1.0-SNAPSHOT-all.jar:../build/classes/java/main\" Main \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":29,"LeonardYam":7}}]
