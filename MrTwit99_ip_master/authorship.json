[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"MrTwit99":1,"-":41}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" * Represents a task that is of type \"deadline\" and extends from Task class.","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    protected String formatDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"    protected String formatTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"    protected String originalDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    protected String originalTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    protected LocalDate date;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    protected LocalTime time;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"     * Returns a Deadline task object that stores information about the task: task description,","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"     * its due date and time.","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"     * Whenever due time not given, set the time to be empty","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"     * @param taskInfo Task Description.","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"     * @param dueDate Due date for the task.","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"     * @param dueTime Due time for the task.","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"    public Deadline(String taskInfo, String dueDate, String dueTime) {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        super(taskInfo);","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        this.originalDate \u003d dueDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        this.originalTime \u003d dueTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        this.date \u003d LocalDate.parse(dueDate);","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        this.formatDate \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"                .format(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        if (dueTime.equals(\"\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"            this.time \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"            this.formatTime \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"            this.time \u003d LocalTime.parse(dueTime);","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"            this.formatTime \u003d \" | \" + DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"                    .format(time);","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the Deadline task that is to be added to the ongoing taskList.","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the Deadline task description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"        return \"[D]\" + super.getTaskInfoStatus() + \"(by: \" + this.formatDate + this.formatTime + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the Deadline task that is to be saved to the file allocated by Storage.","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the Deadline task description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2023-01-20"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"        return \"[D]\" + super.getTaskInfoStatus() + \"/by \" + this.originalDate + \" \" + this.originalTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":70}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":" * Represents the Duke application, capable of storing 3 types of Tasks (\"ToDos\", \"Deadline\" \u0026 \"Event\")","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":" * in the hard disk for users to refer to at any point of time.","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":" * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":" * Acts as a form of reminder / tracker and supports the following functions:","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":" * add, remove, mark, unmark and display list.","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"     * Returns a Duke object that requires the filePath and folderPath to initialize the application,","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"     * retrieving tasks stored in the hard disk.","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"     * @param filePath  Relative path to locate the file with the stored tasks.","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"     * @param folderPath Relative path to locate the directory storing the file.","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"    public Duke(String filePath, String folderPath) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        this.storage \u003d new Storage(filePath, folderPath);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"            this.tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"            this.ui.showLoadingError(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"            this.tasks \u003d new TaskList(new ArrayList\u003cString\u003e());","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"     * Executes the Duke application, requires user input to perform necessary actions and stops the Duke application","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"     * when user inputs the given command to end.","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"     * Functions currently supported by Duke: add Task, remove Task, mark Task, unmark Task, delete Task, list, bye.","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    public void run() throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        while (!isExit) {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"            ArrayList\u003cString\u003e commandInfoList;","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"                commandInfoList \u003d Parser.parse(ui.readCommand());","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"            } catch (IncorrectNoOfArgumentException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"                System.out.println(e);","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"                continue;","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"            if (commandInfoList.size() !\u003d 0) {","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"                switch (commandInfoList.get(0)) {","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"                case \"bye\":","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"                    isExit \u003d true;","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"                    ui.showFarewellMessage();","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"                case \"list\":","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"                    ui.printCommand(tasks.list());","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"                case \"find\":","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"                    ui.printCommand(tasks.find(commandInfoList.get(1)));","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"                case \"mark\":","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"                    ui.printCommand(tasks.markTask(commandInfoList, this.storage));","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"                case \"unmark\":","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"                    ui.printCommand(tasks.unmarkTask(commandInfoList, this.storage));","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"                case \"delete\":","lastModifiedDate":"2023-01-20"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"                    ui.printCommand(tasks.deleteTask(commandInfoList, this.storage));","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-20"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"                case \"error\":","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"                default:","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"                        ui.printCommand(tasks.addTask(commandInfoList, this.storage));","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"                        ui.printInvalidDateError();","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"                        break;","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-20"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"     * This is the main method that creates the Duke object and boots the application up via run() method.","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"MrTwit99"},"content":"     * @param args Input given by users via the CLI","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"MrTwit99"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"MrTwit99"},"content":"        new Duke(\"data/storage.txt\", \"data\").run();","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"MrTwit99":104,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" * Represents a task that is of type \"event\" and extends from Task class.","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    protected String formatStartDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"    protected String formatEndDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"    protected String formatStartTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    protected String formatEndTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    protected String originalStartDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    protected String originalEndDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    protected String originalStartTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"    protected String originalEndTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"    protected LocalTime startTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"    protected LocalTime endTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"     * Returns an Event task object that stores information about the task: task description, start date,","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"     * start time, end date and endTime.","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"     * Whenever start time and end time not given, set them to be empty.","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"     * @param taskInfo Task description.","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"     * @param stringStartDate Date that the Event begins.","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"     * @param stringEndDate Date that the Event ends.","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"     * @param stringStartTime Start time of the Event.","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"     * @param stringEndTime End time of the Event.","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"    public Event(String taskInfo, String stringStartDate, String stringEndDate,","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"                 String stringStartTime, String stringEndTime) {","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        super(taskInfo);","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        this.originalStartDate \u003d stringStartDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        this.originalEndDate \u003d stringEndDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        this.originalStartTime \u003d \" \" + stringStartTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        this.originalEndTime \u003d \" \" + stringEndTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"        this.startDate \u003d LocalDate.parse(stringStartDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"        this.formatStartDate \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"                .format(startDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        this.endDate \u003d LocalDate.parse(stringEndDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        this.formatEndDate \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"                .format(endDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"        if (stringStartTime.equals(\"\")) { // no startTime provided","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"            this.startTime \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"            this.formatStartTime \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"            this.originalStartTime \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"            this.startTime \u003d LocalTime.parse(stringStartTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"            this.formatStartTime \u003d \" | \" + DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"                    .format(startTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"        if (stringEndTime.equals(\"\")) { // no endTime provided","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"            this.endTime \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"            this.formatEndTime \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"            this.originalEndTime \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"            this.endTime \u003d LocalTime.parse(stringEndTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"            this.formatEndTime \u003d \" | \" + DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"                    .format(endTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the Event task that is to be added to the ongoing taskList.","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the Event task description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"        return \"[E]\" + super.getTaskInfoStatus() + \"(from: \" + this.formatStartDate + this.formatStartTime + \" to: \"","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"                + this.formatEndDate + this.formatEndTime + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the Event task that is to be saved to the file allocated by Storage.","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the Event task description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2023-01-20"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"        return \"[E]\" + super.getTaskInfoStatus() + \"/from \" + this.originalStartDate + this.originalStartTime + \" /to \"","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"                + this.originalEndDate + this.originalEndTime;","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":98}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":" * Represents a Parser that takes in user input and process it into the necessary format for Duke application","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":" * to use.","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"public class Parser {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"     * Returns an ArrayList of String type that contains the processed command information,","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"     * derived from the user input via the CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"     * This method aids in processing user input.","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"     * @param taskInfo Command information obtained from user\u0027s input via the CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"     * @return ArrayList of String type, containing processed command information.","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"     * @throws IncorrectNoOfArgumentException When there is insufficient arguments provided by the user.","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"     * @see ArrayList","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"    protected static ArrayList\u003cString\u003e parse(String taskInfo) throws IncorrectNoOfArgumentException {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e parseInfoList \u003d new ArrayList\u003c\u003e(); // stores in the format \"command\" followed by \"args\"","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        boolean isFnAvailable \u003d false; // indicates whether user is calling a supported function provided by Duke","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        String tempCmd; // stores function call by user (eg todos, mark, etc)","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        String[] tempTaskInfo \u003d taskInfo.split(\"] \");","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        if (tempTaskInfo.length !\u003d 1) { // retrieving info from file and processing it","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"            switch (tempTaskInfo[0]) {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"            case \"[D][ \":","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d \"deadline\";","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"            case \"[D][X\":","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d \"deadline\";","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"                parseInfoList.add(\"done\");","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"            case \"[T][ \":","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d \"todo\";","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"            case \"[T][X\":","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d \"todo\";","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"                parseInfoList.add(\"done\");","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"            case \"[E][ \":","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d \"event\";","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"            case \"[E][X\":","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d \"event\";","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"                parseInfoList.add(\"done\");","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"            default:","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"        } else { // adding new task that is not from file and processing it","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"            tempTaskInfo \u003d taskInfo.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"            tempCmd \u003d tempTaskInfo[0].toLowerCase();","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"        if ((tempCmd.equals(\"mark\")) || (tempCmd.equals(\"unmark\")) || (tempCmd.equals(\"delete\")) || (tempCmd","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"                .equals(\"todo\")) || (tempCmd.equals(\"deadline\")) || (tempCmd.equals(\"event\")) || (tempCmd","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"                .equals(\"find\"))) {","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"            isFnAvailable \u003d true;","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"        try { // determine function called by the user has required arguments and does not have blank spaces","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"            DukeException.validate(isFnAvailable, tempCmd, tempTaskInfo);","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempCmd); // save function call (command) into parseInfo","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"        } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(ex);","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"            return parseInfoList;","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"        switch (tempCmd) { // retrieving arguments required by the commands","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"        case \"bye\": // format: bye","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"        case \"list\": // format: list","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"        case \"find\":","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempTaskInfo[1].toLowerCase());","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"        case \"mark\": // format: mark | index","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempTaskInfo[1]);","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"        case \"unmark\": // format: unmark | index","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempTaskInfo[1]); // index","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"        case \"delete\": // format: delete | index","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempTaskInfo[1]); // index","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"        case \"todo\": // format: done (optional) | String.toString(to+do) | taskInfo","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempTaskInfo[1]); // taskInfo","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"MrTwit99"},"content":"        case \"deadline\": // format: done (optional) | deadline | taskInfo | date | time","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"MrTwit99"},"content":"            String[] tempTaskInfo2 \u003d tempTaskInfo[1].split(\"/by\", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"MrTwit99"},"content":"            try { // checking the element \"cccc\" in \".../by cccc\"","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"MrTwit99"},"content":"                DukeException.validate(true, tempCmd, tempTaskInfo2);","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"MrTwit99"},"content":"            } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"MrTwit99"},"content":"                System.out.println(ex);","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"MrTwit99"},"content":"                parseInfoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"MrTwit99"},"content":"            String time;","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"MrTwit99"},"content":"            String[] dateTime \u003d tempTaskInfo2[1].split(\" \");","lastModifiedDate":"2023-02-02"},{"lineNumber":113,"author":{"gitId":"MrTwit99"},"content":"            if (dateTime.length !\u003d 3) {","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"MrTwit99"},"content":"                time \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"MrTwit99"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"MrTwit99"},"content":"                time \u003d dateTime[2];","lastModifiedDate":"2023-02-02"},{"lineNumber":117,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempTaskInfo2[0]); // taskInfo","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(dateTime[1]); // date","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(time); // time","lastModifiedDate":"2023-02-02"},{"lineNumber":122,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"MrTwit99"},"content":"        case \"event\": // format: done (optional) | event | taskInfo | startDate | startTime | endDate | endTime","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"MrTwit99"},"content":"            String[] tempTaskInfo3 \u003d tempTaskInfo[1].split(\"/from\", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"MrTwit99"},"content":"            try { // checking the element \"bbbb\" in \".../from bbbb /to aaaa\"","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"MrTwit99"},"content":"                DukeException.validate(true, tempCmd, tempTaskInfo3);","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"MrTwit99"},"content":"            } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"MrTwit99"},"content":"                System.out.println(ex);","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"MrTwit99"},"content":"                parseInfoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"MrTwit99"},"content":"            String startTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"MrTwit99"},"content":"            String[] startDateTime \u003d tempTaskInfo3[1].split(\" \");","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"MrTwit99"},"content":"            if (startDateTime.length \u003e 2) { // check if given a startDate","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"MrTwit99"},"content":"                if (startDateTime[2].equals(\"/to\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"MrTwit99"},"content":"                    startTime \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":137,"author":{"gitId":"MrTwit99"},"content":"                } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"MrTwit99"},"content":"                    startTime \u003d startDateTime[2];","lastModifiedDate":"2023-02-02"},{"lineNumber":139,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"MrTwit99"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"MrTwit99"},"content":"                DukeException.validate(\"\", \"event\");","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"MrTwit99"},"content":"            String[] testPortion \u003d tempTaskInfo3[1].split(\"/to\", 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":146,"author":{"gitId":"MrTwit99"},"content":"            try { // checking the element \"aaaa\" in \".../to aaaa\"","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"MrTwit99"},"content":"                DukeException.validate(true, tempCmd, testPortion);","lastModifiedDate":"2023-02-02"},{"lineNumber":148,"author":{"gitId":"MrTwit99"},"content":"            } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"MrTwit99"},"content":"                System.out.println(ex);","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"MrTwit99"},"content":"                parseInfoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":151,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"MrTwit99"},"content":"            String endTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"MrTwit99"},"content":"            String[] endDateTime \u003d testPortion[1].split(\" \");","lastModifiedDate":"2023-02-02"},{"lineNumber":156,"author":{"gitId":"MrTwit99"},"content":"            if (endDateTime.length \u003e 1) { // check if given a endDate","lastModifiedDate":"2023-02-02"},{"lineNumber":157,"author":{"gitId":"MrTwit99"},"content":"                if (endDateTime.length !\u003d 3) {","lastModifiedDate":"2023-02-02"},{"lineNumber":158,"author":{"gitId":"MrTwit99"},"content":"                    endTime \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":159,"author":{"gitId":"MrTwit99"},"content":"                } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":160,"author":{"gitId":"MrTwit99"},"content":"                    endTime \u003d endDateTime[2];","lastModifiedDate":"2023-02-02"},{"lineNumber":161,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":162,"author":{"gitId":"MrTwit99"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"MrTwit99"},"content":"                DukeException.validate(\"\", \"event\");","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":166,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":167,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(tempTaskInfo3[0]); // taskInfo","lastModifiedDate":"2023-02-02"},{"lineNumber":168,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(startDateTime[1]); // startDate","lastModifiedDate":"2023-02-02"},{"lineNumber":169,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(startTime); // startTime","lastModifiedDate":"2023-02-02"},{"lineNumber":170,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(endDateTime[1]); // endDate","lastModifiedDate":"2023-02-02"},{"lineNumber":171,"author":{"gitId":"MrTwit99"},"content":"            parseInfoList.add(endTime); // endTime","lastModifiedDate":"2023-02-02"},{"lineNumber":172,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":173,"author":{"gitId":"MrTwit99"},"content":"        default: // throw an error as the user is trying to call a function that does not exist","lastModifiedDate":"2023-02-01"},{"lineNumber":174,"author":{"gitId":"MrTwit99"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":175,"author":{"gitId":"MrTwit99"},"content":"                DukeException.validate2();","lastModifiedDate":"2023-02-01"},{"lineNumber":176,"author":{"gitId":"MrTwit99"},"content":"            } catch (InvalidCommandException ex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":177,"author":{"gitId":"MrTwit99"},"content":"                System.out.println(ex);","lastModifiedDate":"2023-02-01"},{"lineNumber":178,"author":{"gitId":"MrTwit99"},"content":"                parseInfoList.set(0, \"error\");","lastModifiedDate":"2023-02-02"},{"lineNumber":179,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":180,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":181,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":182,"author":{"gitId":"MrTwit99"},"content":"        return parseInfoList;","lastModifiedDate":"2023-02-02"},{"lineNumber":183,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":184,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":185,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"MrTwit99":185}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"import exceptions.FolderNotFoundException;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":" * Represents a storage system, in this case a place where extraction and supplying of information to and from the","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":" * hard disk occurs.","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"public class Storage {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"    private String filePath;","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"    private String folderPath;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"    private StringBuilder sb;","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"     * Returns a Storage object that retrieves and supplies information about the tasks to and from the file.","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"     * @param filePath Relative path to locate the file with the stored tasks.","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"     * @param folderPath Relative path to locate the directory storing the file.","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"    public Storage(String filePath, String folderPath) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        this.folderPath \u003d folderPath;","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        this.sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"     * Returns an ArrayList of String type that contains information about the task loaded from the file with the aid","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"     * of getFileContent().","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"     * This method helps to catch any unexpected \u003cb\u003eexceptions\u003c/b\u003e caused by getFileContent() and resolve them.","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"     * @return ArrayList of String type, containing task information.","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"     * @see ArrayList","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"    public ArrayList\u003cString\u003e load() throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileElements \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"            fileElements \u003d getFileContents();","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"        } catch (FolderNotFoundException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"            Path tempFilePath \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"            Files.createDirectories(tempFilePath.getParent());","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(tempFilePath);","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    File \u0027storage\u0027 cannot be found in the folder \u0027data\u0027.\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    A new file \u0027storage\u0027 has been created for you under the folder \u0027data\u0027\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    for storing the tasks!\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"            Path tempFilePath2 \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(tempFilePath2);","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(sb.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"            sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"        } finally {","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"            return fileElements;","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"     * Returns an ArrayList of String type that contains information about the task retrieved from the file.","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"     * @return ArrayList of String type, containing task information.","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"     * @throws FolderNotFoundException When the directory storing the file could not be located.","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"    public ArrayList\u003cString\u003e getFileContents() throws IOException, FolderNotFoundException {","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileElements \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"        DukeException.folderCheck(this.folderPath); // Checks if the folder exists","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"        BufferedReader fr \u003d new BufferedReader(new FileReader(this.filePath));","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"        // Checks if the storage file is in the right folder","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"        String currLine;","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"        while ((currLine \u003d fr.readLine()) !\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"            fileElements.add(currLine); // Copy tasks from file over","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"        fr.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"        return fileElements;","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"     * Writes to file allocated for storing task information whenever a new task has been created by the user.","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"MrTwit99"},"content":"     * @param taskInfo String message of the task description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"MrTwit99"},"content":"     * @param taskList ArrayList of Task type, containing all the tasks available on Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":105,"author":{"gitId":"MrTwit99"},"content":"    public void writeToFile(String taskInfo, ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"MrTwit99"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"MrTwit99"},"content":"            fileTasks \u003d load();","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"MrTwit99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"MrTwit99"},"content":"        } finally {","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"MrTwit99"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath, true);","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"MrTwit99"},"content":"            if (fileTasks.size() !\u003d 0) { // file has information inside","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"MrTwit99"},"content":"                fw.write(taskInfo);","lastModifiedDate":"2023-02-02"},{"lineNumber":115,"author":{"gitId":"MrTwit99"},"content":"            } else { // file is empty","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"MrTwit99"},"content":"                    fw.write(taskList.get(i).getTaskInfo() + \"\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"MrTwit99"},"content":"            fw.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":125,"author":{"gitId":"MrTwit99"},"content":"     * Overwrites the file allocated for storing task information whenever there is a modification to a task.","lastModifiedDate":"2023-02-02"},{"lineNumber":126,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":127,"author":{"gitId":"MrTwit99"},"content":"     * Example of modifications include deletion","lastModifiedDate":"2023-02-02"},{"lineNumber":128,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":129,"author":{"gitId":"MrTwit99"},"content":"     * @param currTaskInfo Current task description and status of the task.","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"MrTwit99"},"content":"     * @param newTaskInfo Modified task description and status of the task.","lastModifiedDate":"2023-02-02"},{"lineNumber":131,"author":{"gitId":"MrTwit99"},"content":"     * @param taskNumber Current index of the task in the taskList.","lastModifiedDate":"2023-02-02"},{"lineNumber":132,"author":{"gitId":"MrTwit99"},"content":"     * @param taskList ArrayList of Task type, containing all the tasks available on Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":133,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"MrTwit99"},"content":"    public void writeToFile(String currTaskInfo, String newTaskInfo, int taskNumber,","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"MrTwit99"},"content":"                            ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"MrTwit99"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"MrTwit99"},"content":"            fileTasks \u003d load();","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"MrTwit99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"MrTwit99"},"content":"        } finally {","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"MrTwit99"},"content":"            FileWriter fw \u003d new FileWriter(\"data/storage.txt\");","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"MrTwit99"},"content":"            if (fileTasks.size() !\u003d 0) { // file not empty","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c fileTasks.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"MrTwit99"},"content":"                    if ((fileTasks.get(i).equals(currTaskInfo)) \u0026\u0026 (i \u003d\u003d taskNumber)) {","lastModifiedDate":"2023-02-02"},{"lineNumber":148,"author":{"gitId":"MrTwit99"},"content":"                        if (!newTaskInfo.equals(\"\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":149,"author":{"gitId":"MrTwit99"},"content":"                            fw.write(newTaskInfo + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":150,"author":{"gitId":"MrTwit99"},"content":"                        }","lastModifiedDate":"2023-02-01"},{"lineNumber":151,"author":{"gitId":"MrTwit99"},"content":"                        continue;","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"MrTwit99"},"content":"                    fw.write(fileTasks.get(i) + \"\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"MrTwit99"},"content":"            } else { // file is empty","lastModifiedDate":"2023-02-01"},{"lineNumber":156,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"MrTwit99"},"content":"                    if (i \u003d\u003d taskNumber) {","lastModifiedDate":"2023-02-02"},{"lineNumber":158,"author":{"gitId":"MrTwit99"},"content":"                        if (newTaskInfo.equals(\"\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":159,"author":{"gitId":"MrTwit99"},"content":"                            continue;","lastModifiedDate":"2023-02-01"},{"lineNumber":160,"author":{"gitId":"MrTwit99"},"content":"                        }","lastModifiedDate":"2023-02-01"},{"lineNumber":161,"author":{"gitId":"MrTwit99"},"content":"                        fw.write(newTaskInfo + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":162,"author":{"gitId":"MrTwit99"},"content":"                        continue;","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"MrTwit99"},"content":"                    fw.write(taskList.get(i).getTaskInfo() + \"\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":166,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":167,"author":{"gitId":"MrTwit99"},"content":"            fw.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":168,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":169,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":170,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"MrTwit99":170}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":" * Represents a task (that can be of type \"event\", \"todos\" and \"deadline\")","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":" * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":" * \u003cb\u003eNote:\u003c/b\u003e Abstract class that needs to be implemented","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    protected String taskInfo;","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"    protected boolean hasCompleted;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"     * Returns a Task object that stores information about the task description.","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"     * @param taskInfo Task description.","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    public Task(String taskInfo) {","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        this.taskInfo \u003d taskInfo;","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        this.hasCompleted \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string that indicates the Task has been completed.","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"     * @return String message that indicates the completion of a Task.","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"    public String setDone() {","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        this.hasCompleted \u003d true;","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        return \"     Nice! I\u0027ve marked this task as done:\\n       \" + this.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string that indicates the Task yet to complete.","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"     * @return String message that indicates the Task is yet to complete.","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"    public String setIncomplete() {","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        this.hasCompleted \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        return \"     Alright, I\u0027ve marked this task as not done yet:\\n       \" + this.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the Task that is to be added to the ongoing taskList.","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the Task description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"        if (hasCompleted) {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"            return \"[X] \" + this.taskInfo;","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"            return \"[ ] \" + this.taskInfo;","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the Task that is to be saved to the file allocated by Storage.","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"     * \u003cb\u003eNote:\u003c/b\u003e Abstract method that needs to be implemented.","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the Task description and status..","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"    public abstract String getTaskInfo();","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"MrTwit99":66}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" * Represents a list used for storing all task information on Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":" * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":" * Represents a Central Processing Unit (CPU) as well to perform the various commands by user.","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-02","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"public class TaskList {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    private StringBuilder sb;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    private String message;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"     * Returns a TaskList object that stores all tasks in an ArrayList of type Task","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"     * @param fileTasks ArrayList of String type that contains all task information stored in the file that needs to","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"     *                  be added into Duke\u0027s TaskList upon boot up.","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"    public TaskList(ArrayList\u003cString\u003e fileTasks) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        this.taskList \u003d addAll(fileTasks);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        this.sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string message generated by the creation of the new task.","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"     * This method helps to create a new task and add its information into the hard disk.","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"     * @param parsedInfoList ArrayList of String type that contains parsed information about the task description and","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"     *                       status generated by Parser.parse().","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"     * @param file Duke\u0027s Storage object to allow file access.","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the new task\u0027s description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"    public String addTask(ArrayList\u003cString\u003e parsedInfoList, Storage file) { // returns message to be printed to user","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        boolean hasIssue \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        switch (parsedInfoList.size()) {","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        case 2: // new ToDos task","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"            newTask \u003d new ToDo(parsedInfoList.get(1));","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"        case 3: // new ToDos (COMPLETED) task","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"            newTask \u003d new ToDo(parsedInfoList.get(2));","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"            newTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"        case 4: // new Deadline task","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"            newTask \u003d new Deadline(parsedInfoList.get(1), parsedInfoList.get(2), parsedInfoList.get(3));","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"        case 5: // new Deadline (COMPLETED) task","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"            newTask \u003d new Deadline(parsedInfoList.get(2), parsedInfoList.get(3), parsedInfoList.get(4));","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"            newTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        case 6: // new Event task","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"            newTask \u003d new Event(parsedInfoList.get(1), parsedInfoList.get(2), parsedInfoList.get(4),","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"                    parsedInfoList.get(3), parsedInfoList.get(5));","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"        case 7: // new Event (COMPLETED) task","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"            newTask \u003d new Event(parsedInfoList.get(2), parsedInfoList.get(3), parsedInfoList.get(5),","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"                    parsedInfoList.get(4), parsedInfoList.get(6));","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"            newTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"        default:","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"            hasIssue \u003d true;","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"        if (!hasIssue) {","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"            this.taskList.add(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"                file.writeToFile(newTask.getTaskInfo() + \"\\n\", this.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"                sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"                        .append(\"    Got it. I\u0027ve added this task to the list:\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"                        .append(\"      \").append(newTask.getTaskInfoStatus())","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"                        .append(\"\\n    Now you have \").append(this.taskList.size()).append(\" tasks in the list.\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"                        .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"                this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"                sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"                this.message \u003d \"An unexpected error has occurred: \" + e.getMessage();","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"        return this.message;","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string message generated by the deletion of a task.","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"     * This method aids in the removal of task from the taskList and the hard disk.","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"     * @param parsedInfoList ArrayList of String type that contains parsed information about the task description and","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"     *                       status generated by Parser.parse().","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"MrTwit99"},"content":"     * @param file Duke\u0027s Storage object to allow file access.","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the deleted task\u0027s description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"MrTwit99"},"content":"    public String deleteTask(ArrayList\u003cString\u003e parsedInfoList, Storage file) {","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"MrTwit99"},"content":"        int taskNumber \u003d Integer.parseInt(parsedInfoList.get(1));","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"MrTwit99"},"content":"        if ((taskNumber \u003c\u003d this.taskList.size()) \u0026\u0026 (taskNumber \u003e 0)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"MrTwit99"},"content":"            Task tempTask \u003d this.taskList.remove(taskNumber - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    Noted. I\u0027ve removed this task:\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"      \").append(tempTask.getTaskInfoStatus())","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"\\n    Now you have \").append(this.taskList.size()).append(\" tasks in the list.\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"MrTwit99"},"content":"            this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"MrTwit99"},"content":"            sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"MrTwit99"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"MrTwit99"},"content":"                file.writeToFile(tempTask.getTaskInfo(), \"\", taskNumber - 1, this.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"MrTwit99"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"MrTwit99"},"content":"                this.message \u003d \"An unexpected error has occurred: \" + e.getMessage();","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    The task you are trying to delete is out of range! Try again!\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"MrTwit99"},"content":"            this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"MrTwit99"},"content":"            sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"MrTwit99"},"content":"        return this.message;","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":129,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string message of the task that was marked as complete.","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":131,"author":{"gitId":"MrTwit99"},"content":"     * @param parsedInfoList ArrayList of String type that contains parsed information about the task description and","lastModifiedDate":"2023-02-02"},{"lineNumber":132,"author":{"gitId":"MrTwit99"},"content":"     *                       status generated by Parser.parse().","lastModifiedDate":"2023-02-02"},{"lineNumber":133,"author":{"gitId":"MrTwit99"},"content":"     * @param file Duke\u0027s Storage object to allow file access.","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the completed task\u0027s description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"MrTwit99"},"content":"    public String markTask(ArrayList\u003cString\u003e parsedInfoList, Storage file) {","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"MrTwit99"},"content":"        int taskNumber \u003d Integer.parseInt(parsedInfoList.get(1));","lastModifiedDate":"2023-02-02"},{"lineNumber":138,"author":{"gitId":"MrTwit99"},"content":"        if ((taskNumber \u003c\u003d this.taskList.size()) \u0026\u0026 (taskNumber \u003e 0)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"MrTwit99"},"content":"            Task tempTask \u003d this.taskList.get(taskNumber - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"MrTwit99"},"content":"            String oldTaskInfo \u003d tempTask.getTaskInfo();","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"MrTwit99"},"content":"                    .append(tempTask.setDone())","lastModifiedDate":"2023-02-02"},{"lineNumber":143,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"\\n    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"MrTwit99"},"content":"            taskList.set(taskNumber - 1, tempTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"MrTwit99"},"content":"            this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"MrTwit99"},"content":"            sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"MrTwit99"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"MrTwit99"},"content":"                file.writeToFile(oldTaskInfo, tempTask.getTaskInfo(), taskNumber - 1, taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"MrTwit99"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":151,"author":{"gitId":"MrTwit99"},"content":"                this.message \u003d \"An unexpected error has occurred: \" + e.getMessage();","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    The task you are trying to mark is out of range! Try again!\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":156,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"MrTwit99"},"content":"            this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"MrTwit99"},"content":"            sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":159,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":160,"author":{"gitId":"MrTwit99"},"content":"        return this.message;","lastModifiedDate":"2023-02-01"},{"lineNumber":161,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":162,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":164,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string message of the task that was marked as incomplete.","lastModifiedDate":"2023-02-02"},{"lineNumber":165,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":166,"author":{"gitId":"MrTwit99"},"content":"     * @param parsedInfoList ArrayList of String type that contains parsed information about the task description and","lastModifiedDate":"2023-02-02"},{"lineNumber":167,"author":{"gitId":"MrTwit99"},"content":"     *                       status generated by Parser.parse().","lastModifiedDate":"2023-02-02"},{"lineNumber":168,"author":{"gitId":"MrTwit99"},"content":"     * @param file Duke\u0027s Storage object to allow file access.","lastModifiedDate":"2023-02-02"},{"lineNumber":169,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the incomplete task\u0027s description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":170,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":171,"author":{"gitId":"MrTwit99"},"content":"    public String unmarkTask(ArrayList\u003cString\u003e parsedInfoList, Storage file) {","lastModifiedDate":"2023-02-02"},{"lineNumber":172,"author":{"gitId":"MrTwit99"},"content":"        int taskNumber \u003d Integer.parseInt(parsedInfoList.get(1));","lastModifiedDate":"2023-02-02"},{"lineNumber":173,"author":{"gitId":"MrTwit99"},"content":"        if ((taskNumber \u003c\u003d this.taskList.size()) \u0026\u0026 (taskNumber \u003e 0)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":174,"author":{"gitId":"MrTwit99"},"content":"            Task tempTask \u003d this.taskList.get(taskNumber - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":175,"author":{"gitId":"MrTwit99"},"content":"            String oldTaskInfo \u003d tempTask.getTaskInfo();","lastModifiedDate":"2023-02-01"},{"lineNumber":176,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":177,"author":{"gitId":"MrTwit99"},"content":"                    .append(tempTask.setIncomplete())","lastModifiedDate":"2023-02-02"},{"lineNumber":178,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"\\n    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":179,"author":{"gitId":"MrTwit99"},"content":"            taskList.set(taskNumber - 1, tempTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":180,"author":{"gitId":"MrTwit99"},"content":"            this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":181,"author":{"gitId":"MrTwit99"},"content":"            sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":182,"author":{"gitId":"MrTwit99"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":183,"author":{"gitId":"MrTwit99"},"content":"                file.writeToFile(oldTaskInfo, tempTask.getTaskInfo(), taskNumber - 1, taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":184,"author":{"gitId":"MrTwit99"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":185,"author":{"gitId":"MrTwit99"},"content":"                this.message \u003d \"An unexpected error has occurred: \" + e.getMessage();","lastModifiedDate":"2023-02-01"},{"lineNumber":186,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":187,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":188,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":189,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    The task you are trying to unmark is out of range! Try again!\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":190,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":191,"author":{"gitId":"MrTwit99"},"content":"            this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":192,"author":{"gitId":"MrTwit99"},"content":"            sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":193,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":194,"author":{"gitId":"MrTwit99"},"content":"        return this.message;","lastModifiedDate":"2023-02-01"},{"lineNumber":195,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":196,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":197,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":198,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string message of all the tasks stored in the taskList.","lastModifiedDate":"2023-02-02"},{"lineNumber":199,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":200,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of all the tasks\u0027 descriptions and statuses in the taskList.","lastModifiedDate":"2023-02-02"},{"lineNumber":201,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":202,"author":{"gitId":"MrTwit99"},"content":"    public String list() {","lastModifiedDate":"2023-02-02"},{"lineNumber":203,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":204,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":205,"author":{"gitId":"MrTwit99"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":206,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    \").append(i + 1).append(\".\").append(this.taskList.get(i).getTaskInfoStatus())","lastModifiedDate":"2023-02-01"},{"lineNumber":207,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":208,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":209,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":210,"author":{"gitId":"MrTwit99"},"content":"        this.message \u003d sb.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":211,"author":{"gitId":"MrTwit99"},"content":"        sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":212,"author":{"gitId":"MrTwit99"},"content":"        return this.message;","lastModifiedDate":"2023-02-01"},{"lineNumber":213,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":214,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":215,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":216,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string message of all the tasks that have the corresponding substring as requested.","lastModifiedDate":"2023-02-02"},{"lineNumber":217,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":218,"author":{"gitId":"MrTwit99"},"content":"     * @param subString String that is to be checked with all tasks and find tasks with this string.","lastModifiedDate":"2023-02-02"},{"lineNumber":219,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of all tasks\u0027 descriptions and statuses in the taskList that have the corresponding","lastModifiedDate":"2023-02-02"},{"lineNumber":220,"author":{"gitId":"MrTwit99"},"content":"     *     substring in its task information.","lastModifiedDate":"2023-02-02"},{"lineNumber":221,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":222,"author":{"gitId":"MrTwit99"},"content":"    public String find(String subString) {","lastModifiedDate":"2023-02-02"},{"lineNumber":223,"author":{"gitId":"MrTwit99"},"content":"        int taskIndex \u003d 1;","lastModifiedDate":"2023-02-02"},{"lineNumber":224,"author":{"gitId":"MrTwit99"},"content":"        String[] words \u003d subString.split(\" \");","lastModifiedDate":"2023-02-02"},{"lineNumber":225,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-02"},{"lineNumber":226,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":227,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":228,"author":{"gitId":"MrTwit99"},"content":"        switch (words.length) {","lastModifiedDate":"2023-02-02"},{"lineNumber":229,"author":{"gitId":"MrTwit99"},"content":"        case 1:","lastModifiedDate":"2023-02-02"},{"lineNumber":230,"author":{"gitId":"MrTwit99"},"content":"            for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":231,"author":{"gitId":"MrTwit99"},"content":"                if (this.taskList.get(i).getTaskInfo().toLowerCase().contains(subString)) {","lastModifiedDate":"2023-02-02"},{"lineNumber":232,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    \").append(taskIndex++).append(\".\").append(this.taskList.get(i).getTaskInfoStatus())","lastModifiedDate":"2023-02-02"},{"lineNumber":233,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":234,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-02-02"},{"lineNumber":235,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":236,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-02"},{"lineNumber":237,"author":{"gitId":"MrTwit99"},"content":"        default:","lastModifiedDate":"2023-02-02"},{"lineNumber":238,"author":{"gitId":"MrTwit99"},"content":"            for (String word: words) {","lastModifiedDate":"2023-02-02"},{"lineNumber":239,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":240,"author":{"gitId":"MrTwit99"},"content":"                    if (this.taskList.get(i).getTaskInfo().toLowerCase().contains(word)) {","lastModifiedDate":"2023-02-02"},{"lineNumber":241,"author":{"gitId":"MrTwit99"},"content":"                        sb.append(\"    \").append(taskIndex++).append(\".\").append(this.taskList.get(i)","lastModifiedDate":"2023-02-02"},{"lineNumber":242,"author":{"gitId":"MrTwit99"},"content":"                                .getTaskInfoStatus()).append(\"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":243,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-02-02"},{"lineNumber":244,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-02-02"},{"lineNumber":245,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":246,"author":{"gitId":"MrTwit99"},"content":"            break;","lastModifiedDate":"2023-02-02"},{"lineNumber":247,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":248,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":249,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":250,"author":{"gitId":"MrTwit99"},"content":"        this.message \u003d sb.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":251,"author":{"gitId":"MrTwit99"},"content":"        sb.setLength(0);","lastModifiedDate":"2023-02-02"},{"lineNumber":252,"author":{"gitId":"MrTwit99"},"content":"        return this.message;","lastModifiedDate":"2023-02-02"},{"lineNumber":253,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":254,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":255,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":256,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string message of all the tasks that got added into the taskList from the hard disk.","lastModifiedDate":"2023-02-02"},{"lineNumber":257,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":258,"author":{"gitId":"MrTwit99"},"content":"     * This method \u003cb\u003emust\u003c/b\u003e only be called during Duke\u0027s boot up.","lastModifiedDate":"2023-02-02"},{"lineNumber":259,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":260,"author":{"gitId":"MrTwit99"},"content":"     * @param fileTasks ArrayList of String type that stores all tasks\u0027 descriptions and statuses obtained from the","lastModifiedDate":"2023-02-02"},{"lineNumber":261,"author":{"gitId":"MrTwit99"},"content":"     *                  hard disk.","lastModifiedDate":"2023-02-02"},{"lineNumber":262,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of all tasks\u0027 descriptions and statues that got added into taskList from hard disk.","lastModifiedDate":"2023-02-02"},{"lineNumber":263,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":264,"author":{"gitId":"MrTwit99"},"content":"    private static ArrayList\u003cTask\u003e addAll(ArrayList\u003cString\u003e fileTasks) {","lastModifiedDate":"2023-02-01"},{"lineNumber":265,"author":{"gitId":"MrTwit99"},"content":"        String taskInfo;","lastModifiedDate":"2023-02-01"},{"lineNumber":266,"author":{"gitId":"MrTwit99"},"content":"        boolean hasIssue \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":267,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":268,"author":{"gitId":"MrTwit99"},"content":"        for (int i \u003d 0; i \u003c fileTasks.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":269,"author":{"gitId":"MrTwit99"},"content":"            taskInfo \u003d fileTasks.get(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":270,"author":{"gitId":"MrTwit99"},"content":"            Task newTask \u003d null;","lastModifiedDate":"2023-02-01"},{"lineNumber":271,"author":{"gitId":"MrTwit99"},"content":"            ArrayList\u003cString\u003e parsedInfoList;","lastModifiedDate":"2023-02-02"},{"lineNumber":272,"author":{"gitId":"MrTwit99"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":273,"author":{"gitId":"MrTwit99"},"content":"                parsedInfoList \u003d Parser.parse(taskInfo);","lastModifiedDate":"2023-02-02"},{"lineNumber":274,"author":{"gitId":"MrTwit99"},"content":"            } catch (IncorrectNoOfArgumentException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":275,"author":{"gitId":"MrTwit99"},"content":"                System.out.println(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":276,"author":{"gitId":"MrTwit99"},"content":"                continue;","lastModifiedDate":"2023-02-01"},{"lineNumber":277,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":278,"author":{"gitId":"MrTwit99"},"content":"            switch (parsedInfoList.size()) {","lastModifiedDate":"2023-02-02"},{"lineNumber":279,"author":{"gitId":"MrTwit99"},"content":"            case 2: // new ToDos task","lastModifiedDate":"2023-02-02"},{"lineNumber":280,"author":{"gitId":"MrTwit99"},"content":"                newTask \u003d new ToDo(parsedInfoList.get(1));","lastModifiedDate":"2023-02-02"},{"lineNumber":281,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":282,"author":{"gitId":"MrTwit99"},"content":"            case 3: // new ToDos (COMPLETED) task","lastModifiedDate":"2023-02-02"},{"lineNumber":283,"author":{"gitId":"MrTwit99"},"content":"                newTask \u003d new ToDo(parsedInfoList.get(2));","lastModifiedDate":"2023-02-02"},{"lineNumber":284,"author":{"gitId":"MrTwit99"},"content":"                newTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":285,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":286,"author":{"gitId":"MrTwit99"},"content":"            case 4: // new Deadline task","lastModifiedDate":"2023-02-02"},{"lineNumber":287,"author":{"gitId":"MrTwit99"},"content":"                newTask \u003d new Deadline(parsedInfoList.get(1), parsedInfoList.get(2), parsedInfoList.get(3));","lastModifiedDate":"2023-02-02"},{"lineNumber":288,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":289,"author":{"gitId":"MrTwit99"},"content":"            case 5: // new Deadline (COMPLETED) task","lastModifiedDate":"2023-02-02"},{"lineNumber":290,"author":{"gitId":"MrTwit99"},"content":"                newTask \u003d new Deadline(parsedInfoList.get(2), parsedInfoList.get(3), parsedInfoList.get(4));","lastModifiedDate":"2023-02-02"},{"lineNumber":291,"author":{"gitId":"MrTwit99"},"content":"                newTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":292,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":293,"author":{"gitId":"MrTwit99"},"content":"            case 6: // new Event task","lastModifiedDate":"2023-02-02"},{"lineNumber":294,"author":{"gitId":"MrTwit99"},"content":"                newTask \u003d new Event(parsedInfoList.get(1), parsedInfoList.get(2), parsedInfoList.get(4),","lastModifiedDate":"2023-02-02"},{"lineNumber":295,"author":{"gitId":"MrTwit99"},"content":"                        parsedInfoList.get(3), parsedInfoList.get(5));","lastModifiedDate":"2023-02-02"},{"lineNumber":296,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":297,"author":{"gitId":"MrTwit99"},"content":"            case 7: // new Event (COMPLETED) task","lastModifiedDate":"2023-02-02"},{"lineNumber":298,"author":{"gitId":"MrTwit99"},"content":"                newTask \u003d new Event(parsedInfoList.get(2), parsedInfoList.get(3), parsedInfoList.get(5),","lastModifiedDate":"2023-02-02"},{"lineNumber":299,"author":{"gitId":"MrTwit99"},"content":"                        parsedInfoList.get(4), parsedInfoList.get(6));","lastModifiedDate":"2023-02-02"},{"lineNumber":300,"author":{"gitId":"MrTwit99"},"content":"                newTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":301,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":302,"author":{"gitId":"MrTwit99"},"content":"            default:","lastModifiedDate":"2023-02-01"},{"lineNumber":303,"author":{"gitId":"MrTwit99"},"content":"                hasIssue \u003d true;","lastModifiedDate":"2023-02-01"},{"lineNumber":304,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":305,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":306,"author":{"gitId":"MrTwit99"},"content":"            if (!hasIssue) {","lastModifiedDate":"2023-02-01"},{"lineNumber":307,"author":{"gitId":"MrTwit99"},"content":"                newTaskList.add(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":308,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":309,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":310,"author":{"gitId":"MrTwit99"},"content":"        return newTaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":311,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":312,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"MrTwit99":312}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":" * Represents a task that is of type \"todos\" and extends from Task class.","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"     * Returns a ToDos task object that stores information about the task description.","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"     * @param taskInfo Task Description","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"    public ToDo(String taskInfo) {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        super(taskInfo);","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the ToDos task that is to be added to the ongoing taskList.","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the ToDos task description and status..","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        return \"[T]\" + super.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string on the information about the ToDos task that is to be saved to the file allocated by Storage.","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"     * @return String message of the ToDos task description and status.","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        return \"[T]\" + super.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":39}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"import java.io.OutputStreamWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":" * Represents the user interface (UI) that deals with the user inputs and outputs the corresponding texts and messages","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":" * generated by Duke system.","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-01","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"public class Ui {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    private PrintWriter pw;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    private StringBuilder sb;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    private BufferedReader br;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"     * Returns a UI object that reads inputs from user using BufferedReader and outputs messages from the system to","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"     * the user with the means of StringBuilder and PrintWriter.","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"    public Ui() {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        this.pw \u003d new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        this.sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        this.br \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"     * Displays the welcome message generated by Duke system upon boot up.","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"Hello from\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"                .append(\" ____        _        \\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"                .append(\"|  _ \\\\ _   _| | _____ \\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"                .append(\"| | | | | | | |/ / _ \\\\\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"                .append(\"| |_| | |_| |   \u003c  __/\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"                .append(\"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    Hello! I\u0027m Duke.\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    What can I do for you?\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        pw.println(sb.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        pw.flush(); // Flush the message out and print to user","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"        sb.setLength(0); // Clear string stored in StringBuilder","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"     * Displays the farewell message generated by Duke system during termination.","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"    public void showFarewellMessage() throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    Bye. Hope to see you again soon!\\n\")","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"        pw.println(sb.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"        pw.flush();","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"        sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"        pw.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"        br.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"     * Displays the attached corresponding message attached as this method\u0027s argument to user.","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"     * @param message Message generated by Duke system that needs to be printed out to the user.","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"    public void printCommand(String message) {","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"        pw.println(message);","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"        pw.flush();","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"        sb.setLength(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"     * Displays an error message to user, informing him/her that the date/time given were of the wrong format and","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"     * informs them of the correct format.","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"    public void printInvalidDateError() {","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"Invalid inputs!\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"Please enter your date \u0026 time in the format: YYYY-MM-DD HH:MM \\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"Please also ensure they are valid values!\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"        pw.println(sb);","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"        pw.flush();","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"        sb.setLength(0);","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"     * Displays the error message generated by the input Exception.","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"     * @param e Exception that was generated by Duke system.","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"    public void showLoadingError(Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"MrTwit99"},"content":"        pw.println(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"MrTwit99"},"content":"     * Returns a string that corresponds to the user input on the CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":105,"author":{"gitId":"MrTwit99"},"content":"     * @return A string the corresponds to the user input on the CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"MrTwit99"},"content":"     * @throws IOException On input error.","lastModifiedDate":"2023-02-02"},{"lineNumber":107,"author":{"gitId":"MrTwit99"},"content":"     * @see IOException","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"MrTwit99"},"content":"    public String readCommand() throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"MrTwit99"},"content":"        return br.readLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"MrTwit99":112}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.io.File;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":" * Represents the Exception class unique and created for Duke to handle certain unexpected and unwanted situations.","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-02","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"public class DukeException {","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    private static int expectedArgs \u003d 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"     * This method helps to check if a certain command to run has the necessary arguments supplied to it.","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"     * This method is also able to prompt for a secondary check for cases where blank spaces or blank texts","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"     * may cause an issue.","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"     * @param hasToEvaluate Boolean value that indicates whether there\u0027s a need for secondary check.","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"     * @param command String message of the command / action input by users via CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"     * @param testPortion String array of the affected portion of the command that needs to be checked.","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"     * @throws IncorrectNoOfArgumentException When arguments supplied are insufficient.","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"    public static void validate(boolean hasToEvaluate, String command,","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"                                String[] testPortion) throws IncorrectNoOfArgumentException {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        if (hasToEvaluate) {","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"            expectedArgs \u003d 2;","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"            expectedArgs \u003d 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        if (testPortion.length !\u003d expectedArgs) {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     ☹ OOPS!!! You have provided incorrect number of arguments for the command \u0027\")","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"                    .append(command).append(\"\u0027.\\n     Please try again after checking!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"            throw new IncorrectNoOfArgumentException(sb.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        if (hasToEvaluate) {","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"            validate(testPortion[1], command);","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"     * This method helps to check if a certain command has blank spaces or blank texts as arguments supplied to it.","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"     * @param testText String that needs to be checked for blank space or blank text.","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"     * @param command String message of the command / action input by users via CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"     * @throws IncorrectNoOfArgumentException When arguments supplied are insufficient due to blank text / blank space.","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"    public static void validate(String testText, String command) throws IncorrectNoOfArgumentException {","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        // Checking for blank spaces","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        if ((testText.equals(\"\")) || (testText.isBlank())) {","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     ☹ OOPS!!! You have provided incorrect number of arguments for the command \u0027\")","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"                    .append(command).append(\"\u0027.\\n     Please try again after checking!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"            throw new IncorrectNoOfArgumentException(sb.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"     * This method is used to throw the InvalidCommandException whenever a command input by user via CLI is invalid","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"     * or unsupported by Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"     * @throws InvalidCommandException When command called by user is invalid or unsupported by Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"    public static void validate2() throws InvalidCommandException {","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"                .append(\"     ☹ OOPS!!! This is an incorrect command!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"                .append(\"     Please try again with a valid command!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"        throw new InvalidCommandException(sb.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"     * This method helps to check if the directory for the file could be located.","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"     * \u003cp\u003e\u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"     * If it cannot be found, this method will throw a FolderNotFoundException to aid in the creation of the directory","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"     * and the file.","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"     * @param directory String message of the relative path to check if the directory exists","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"     * @throws FolderNotFoundException When the directory cannot be located.","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"    public static void folderCheck(String directory) throws FolderNotFoundException {","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"        File tempFolder \u003d new File(directory);","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"        if ((!tempFolder.isDirectory()) || (!tempFolder.exists())) {","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     Folder \u0027\").append(directory).append(\"\u0027 cannot be found.\\n\")","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     A new folder \u0027\").append(directory).append(\"\u0027 has been created for you!\\n\")","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     A new file \u0027storage\u0027 for storing the tasks has been created for you as well!\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"            throw new FolderNotFoundException(sb.toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":100}},{"path":"src/main/java/exceptions/FolderNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":" * Represents the FolderNotFoundException that is thrown whenever a directory cannot be located and extends from","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":" * the Exception class.","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-02","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"public class FolderNotFoundException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"     * Returns a FolderNotFoundException object that is thrown whenever a directory cannot be located.","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"     * @param str String message that is to be printed with the error.","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"    public FolderNotFoundException(String str) {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        super(str);","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":19}},{"path":"src/main/java/exceptions/IncorrectNoOfArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":" * Represents the IncorrectNoOfArgumentException that is thrown whenever a command is supplied with insufficient","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":" * amount of arguments and extends from the Exception class.","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-02","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"public class IncorrectNoOfArgumentException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"     * Returns an IncorrectNoOfArgumentException object whenever a command is supplied with insufficient amount of","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"     * arguments","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"     * @param str String message that is to be printed with the error.","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"    public IncorrectNoOfArgumentException(String str) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        super(str);","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":20}},{"path":"src/main/java/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":" * Represents the InvalidCommandException that is thrown whenever a command called is invalid or unsupported by Duke","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":" * and extends from the Exception class.","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":" *","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":" * @author MrTwit99","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":" * @since 2023-02-02","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"     * Returns an InvalidCommandException object whenever a command called is invalid or unsupported by Duke","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"     * @param str String message that is to be printed with the error.","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"    public InvalidCommandException(String str) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        super(str);","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":20}},{"path":"src/test/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new Deadline(\"Assignment Submission\", \"2023-01-12\", \"12:30\");","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask2 \u003d new Deadline(\"Assignment Submission\", \"2023-01-12\", \"\");","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission(by: January 12, 2023 | 12:30:00 PM)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of marking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission(by: January 12, 2023)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of marking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission(by: January 12, 2023 | 12:30:00 PM)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of unmarking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission(by: January 12, 2023)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of unmarking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission/by 2023-01-12 12:30\",","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of marking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission/by 2023-01-12 \",","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of marking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission/by 2023-01-12 12:30\",","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of unmarking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission/by 2023-01-12 \",","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of unmarking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"MrTwit99":50}},{"path":"src/test/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"public class DukeTest {","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        new Duke(\"data/storage.txt\", \"data\").run();","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    public void run() throws IOException, IncorrectNoOfArgumentException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo \u003d Parser.parse(\"event Birthday /from 2012-12-22 /to 2012-12-23\");","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"event\");","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"Birthday \");","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"2012-12-22\");","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"\");","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"2012-12-23\");","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"\");","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo, actualCommandInfo);","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo2 \u003d Parser.parse(\"event Birthday /from 2012-12-22 15:00 /to 2012-12-23\");","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"event\");","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"Birthday \");","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"2012-12-22\");","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"15:00\");","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"2012-12-23\");","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"\");","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo2, actualCommandInfo2);","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo3 \u003d Parser.parse(\"event Birthday /from 2012-12-22 /to 2012-12-23 16:00\");","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo3 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"event\");","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"Birthday \");","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"2012-12-22\");","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"\");","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"2012-12-23\");","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"16:00\");","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo3, actualCommandInfo3);","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo4 \u003d Parser.parse(\"event Birthday /from 2012-12-22 15:00 /to 2012-12-23 16:00\");","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo4 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"event\");","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"Birthday \");","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"2012-12-22\");","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"15:00\");","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"2012-12-23\");","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"16:00\");","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo4, actualCommandInfo4);","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"        Storage storage \u003d new Storage(\"data/storageTest(delete before each test).txt\", \"data\");","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"        TaskList tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"        String actualCommandOutput \u003d \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"                \"    Got it. I\u0027ve added this task to the list:\\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"                \"      [E][ ] Birthday (from: December 22, 2012 | 3:00:00 PM to: December 23, 2012 | 4:00:00 PM)\\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"                \"    Now you have 1 tasks in the list.\\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"                \"    ____________________________________________________________\\n\";","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(actualCommandOutput, tasks.addTask(actualCommandInfo4, storage));","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of creating task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"MrTwit99":77}},{"path":"src/test/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class EventTest {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"00:00\", \"23:59\");","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask2 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"\", \"23:59\");","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask3 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"00:00\", \"\");","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask4 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"\", \"\");","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 to: February 5, 2023)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 to: February 5, 2023)\",","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 00:00 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 00:00 /to 2023-02-05\",","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 /to 2023-02-05\",","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 00:00 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 00:00 /to 2023-02-05\",","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 /to 2023-02-05\",","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"MrTwit99":85}},{"path":"src/test/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class ToDoTest {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new ToDo(\"borrow book\");","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][X] borrow book\", tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of marking tasks: ToDo.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][ ] borrow book\", tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of unmarking tasks: ToDo.getTaskInfoStatus()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][X] borrow book\", tempTask.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of marking tasks: ToDo.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][ ] borrow book\", tempTask.getTaskInfo());","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of unmarking tasks: ToDo.getTaskInfo()\");","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"MrTwit99":30}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new Deadline(\"Assignment Submission\", \"2023-01-12\", \"12:30\");","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask2 \u003d new Deadline(\"Assignment Submission\", \"2023-01-12\", \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission(by: January 12, 2023 | 12:30:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of marking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission(by: January 12, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of marking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission(by: January 12, 2023 | 12:30:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of unmarking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission(by: January 12, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of unmarking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission/by 2023-01-12 12:30\",","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of marking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission/by 2023-01-12 \",","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of marking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission/by 2023-01-12 12:30\",","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of unmarking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission/by 2023-01-12 \",","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of unmarking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":50}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"public class DukeTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        new Duke(\"data/storage.txt\", \"data\").run();","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    public void run() throws IOException, IncorrectNoOfArgumentException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo \u003d Parser.parse(\"event Birthday /from 2012-12-22 /to 2012-12-23\");","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"event\");","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"Birthday \");","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"2012-12-22\");","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"\");","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"2012-12-23\");","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo.add(\"\");","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo, actualCommandInfo);","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo2 \u003d Parser.parse(\"event Birthday /from 2012-12-22 15:00 /to 2012-12-23\");","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"event\");","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"Birthday \");","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"2012-12-22\");","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"15:00\");","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"2012-12-23\");","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo2.add(\"\");","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo2, actualCommandInfo2);","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo3 \u003d Parser.parse(\"event Birthday /from 2012-12-22 /to 2012-12-23 16:00\");","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo3 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"event\");","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"Birthday \");","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"2012-12-22\");","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"\");","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"2012-12-23\");","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo3.add(\"16:00\");","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo3, actualCommandInfo3);","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e actualCommandInfo4 \u003d Parser.parse(\"event Birthday /from 2012-12-22 15:00 /to 2012-12-23 16:00\");","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e expectedCommandInfo4 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"event\");","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"Birthday \");","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"2012-12-22\");","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"15:00\");","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"2012-12-23\");","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"        expectedCommandInfo4.add(\"16:00\");","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(expectedCommandInfo4, actualCommandInfo4);","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of parsing task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"        Storage storage \u003d new Storage(\"data/storageTest(delete before each test).txt\", \"data\");","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"        TaskList tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"        String actualCommandOutput \u003d \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"                \"    Got it. I\u0027ve added this task to the list:\\n\" +","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"                \"      [E][ ] Birthday (from: December 22, 2012 | 3:00:00 PM to: December 23, 2012 | 4:00:00 PM)\\n\" +","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"                \"    Now you have 1 tasks in the list.\\n\" +","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"                \"    ____________________________________________________________\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(actualCommandOutput, tasks.addTask(actualCommandInfo4, storage));","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of creating task \u0027event\u0027: Duke.run()\");","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"MrTwit99":77}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class EventTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"00:00\", \"23:59\");","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask2 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"\", \"23:59\");","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask3 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"00:00\", \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask4 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"\", \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 00:00 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 00:00 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 00:00 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 00:00 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":85}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class ToDoTest {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new ToDo(\"borrow book\");","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][X] borrow book\", tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of marking tasks: ToDo.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][ ] borrow book\", tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of unmarking tasks: ToDo.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][X] borrow book\", tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of marking tasks: ToDo.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        tempTask.setIncomplete();","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][ ] borrow book\", tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of unmarking tasks: ToDo.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":30}}]
