[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"MrTwit99":1,"-":41}},{"path":"data/storage.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"[T][ ] borrow book","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"[D][ ] Assignment 1 /by 2023-12-12 ","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"[D][X] Assignment 1 /by 2023-12-12 12:40","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"[E][ ] Birthday /from 2023-05-29 12:30 /to 2024-04-23 13:00","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"[T][X] sleep","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"[T][ ] eat","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":6}},{"path":"src/main/java/classes/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    protected String newDate, newTime, oldDate, oldTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"    protected LocalDate date;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    protected LocalTime time;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"    public Deadline(String taskInfo, String stringDate, String stringTime) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"        super(taskInfo);","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        this.oldDate \u003d stringDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        this.oldTime \u003d stringTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        this.date \u003d LocalDate.parse(stringDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"        this.newDate \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"                .format(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        if (stringTime.equals(\"\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"            this.time \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"            this.newTime \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"            this.time \u003d LocalTime.parse(stringTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"            this.newTime \u003d \" | \" + DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"                    .format(time);","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        return \"[D]\" + super.getTaskInfoStatus() + \"(by: \" + this.newDate + this.newTime + \")\";","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        return \"[D]\" + super.getTaskInfoStatus() + \"/by \" + this.oldDate + \" \" + this.oldTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":41}},{"path":"src/main/java/classes/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"import java.io.OutputStreamWriter;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"import java.lang.StringBuilder;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"import exceptions.FolderNotFoundException;","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"    private static ArrayList\u003cString\u003e getFileContents(String filePath, String folderPath) throws IOException,","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"            FolderNotFoundException {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileElements \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        DukeException.folderCheck(folderPath);  // Checks if the folder exists","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        BufferedReader fr \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        // Checks if the storage file is in the right folder","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        String currLine;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        while ( (currLine \u003d fr.readLine()) !\u003d null) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"            fileElements.add(currLine);  // Copy tasks from file over","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        fr.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        return fileElements;","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"    private static void printMessage(PrintWriter pw, StringBuilder sb) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        pw.println(sb.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        pw.flush(); // Flush the message out and print to user","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        sb.setLength(0);    // Clear string stored in StringBuilder","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    private static void writeToFile(String filePath, String textToAdd, PrintWriter pw, StringBuilder sb,","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"                                    ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"            fileTasks \u003d getFileContents(\"data/storage.txt\", \"data\");","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        } catch (FolderNotFoundException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"            Path filePath3 \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"            Files.createDirectories(filePath3.getParent());","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(filePath3);","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    File \u0027storage\u0027 cannot be found in the folder \u0027data\u0027.\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    A new file \u0027storage\u0027 has been created for you under the folder \u0027data\u0027\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    for storing the tasks!\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"            Path filePath4 \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(filePath4);","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"            printMessage(pw, sb);","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"        } finally {","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"            FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"            if (fileTasks.size() !\u003d 0) {","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"                fw.write(textToAdd);","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"            } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"                    fw.write(taskList.get(i).getTaskInfo() + \"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"            fw.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"    private static void writeToFile(String oldText, String newText, int oldTextIndex, PrintWriter pw,","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"                                    StringBuilder sb, ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"MrTwit99"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"MrTwit99"},"content":"            fileTasks \u003d getFileContents(\"data/storage.txt\", \"data\");","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"MrTwit99"},"content":"        } catch (FolderNotFoundException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"MrTwit99"},"content":"            Path filePath1 \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"MrTwit99"},"content":"            Files.createDirectories(filePath1.getParent());","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(filePath1);","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"MrTwit99"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    File \u0027storage\u0027 cannot be found in the folder \u0027data\u0027.\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    A new file \u0027storage\u0027 has been created for you under the folder \u0027data\u0027\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    for storing the tasks!\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"MrTwit99"},"content":"            Path filePath2 \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(filePath2);","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"MrTwit99"},"content":"            printMessage(pw, sb);","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"MrTwit99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"MrTwit99"},"content":"        } finally {","lastModifiedDate":"2023-01-30"},{"lineNumber":106,"author":{"gitId":"MrTwit99"},"content":"            FileWriter fw \u003d new FileWriter(\"data/storage.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"MrTwit99"},"content":"            if (fileTasks.size() !\u003d 0) {","lastModifiedDate":"2023-01-30"},{"lineNumber":108,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c fileTasks.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"MrTwit99"},"content":"                    if ( (fileTasks.get(i).equals(oldText)) \u0026\u0026 (i \u003d\u003d oldTextIndex) ) {","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"MrTwit99"},"content":"                        if (newText.equals(\"\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"MrTwit99"},"content":"                            continue;","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"MrTwit99"},"content":"                        }","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"MrTwit99"},"content":"                        fw.write(newText + \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"MrTwit99"},"content":"                        continue;","lastModifiedDate":"2023-01-29"},{"lineNumber":115,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"MrTwit99"},"content":"                    fw.write(fileTasks.get(i) + \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"MrTwit99"},"content":"            } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":119,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":120,"author":{"gitId":"MrTwit99"},"content":"                    if (i \u003d\u003d oldTextIndex) {","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"MrTwit99"},"content":"                        if (newText.equals(\"\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"MrTwit99"},"content":"                            continue;","lastModifiedDate":"2023-01-30"},{"lineNumber":123,"author":{"gitId":"MrTwit99"},"content":"                        }","lastModifiedDate":"2023-01-30"},{"lineNumber":124,"author":{"gitId":"MrTwit99"},"content":"                        fw.write(newText + \"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":125,"author":{"gitId":"MrTwit99"},"content":"                        continue;","lastModifiedDate":"2023-01-30"},{"lineNumber":126,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-30"},{"lineNumber":127,"author":{"gitId":"MrTwit99"},"content":"                    fw.write(taskList.get(i).getTaskInfo() + \"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":128,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":129,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":130,"author":{"gitId":"MrTwit99"},"content":"            fw.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"MrTwit99"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-01-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":141,"author":{"gitId":"MrTwit99"},"content":"        BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2023-01-19"},{"lineNumber":142,"author":{"gitId":"MrTwit99"},"content":"        PrintWriter pw \u003d new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));","lastModifiedDate":"2023-01-19"},{"lineNumber":143,"author":{"gitId":"MrTwit99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-19"},{"lineNumber":144,"author":{"gitId":"MrTwit99"},"content":"        boolean isFileData \u003d true;  // whether to retrieve tasks from the saved file","lastModifiedDate":"2023-01-29"},{"lineNumber":145,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cString\u003e fileTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":146,"author":{"gitId":"MrTwit99"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":147,"author":{"gitId":"MrTwit99"},"content":"        String text;","lastModifiedDate":"2023-01-29"},{"lineNumber":148,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":149,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    Hello! I\u0027m Duke.\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":150,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    What can I do for you?\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":151,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":152,"author":{"gitId":"MrTwit99"},"content":"        printMessage(pw, sb);","lastModifiedDate":"2023-01-29"},{"lineNumber":153,"author":{"gitId":"MrTwit99"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":154,"author":{"gitId":"MrTwit99"},"content":"            fileTasks \u003d getFileContents(\"data/storage.txt\", \"data\");","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"MrTwit99"},"content":"        } catch (FolderNotFoundException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":156,"author":{"gitId":"MrTwit99"},"content":"            Path filePath \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":157,"author":{"gitId":"MrTwit99"},"content":"            Files.createDirectories(filePath.getParent());","lastModifiedDate":"2023-01-30"},{"lineNumber":158,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2023-01-30"},{"lineNumber":159,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-29"},{"lineNumber":160,"author":{"gitId":"MrTwit99"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":161,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-22"},{"lineNumber":162,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    File \u0027storage\u0027 cannot be found in the folder \u0027data\u0027.\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    A new file \u0027storage\u0027 has been created for you under the folder \u0027data\u0027\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":164,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    for storing the tasks!\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":165,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":166,"author":{"gitId":"MrTwit99"},"content":"            Path filePath1 \u003d Paths.get(\"data/storage.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":167,"author":{"gitId":"MrTwit99"},"content":"            Files.createFile(filePath1);","lastModifiedDate":"2023-01-30"},{"lineNumber":168,"author":{"gitId":"MrTwit99"},"content":"            printMessage(pw, sb);","lastModifiedDate":"2023-01-29"},{"lineNumber":169,"author":{"gitId":"MrTwit99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":170,"author":{"gitId":"MrTwit99"},"content":"            System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":171,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":172,"author":{"gitId":"MrTwit99"},"content":"        while (true) {","lastModifiedDate":"2023-01-30"},{"lineNumber":173,"author":{"gitId":"MrTwit99"},"content":"            boolean hasIssue \u003d false;   // check if there\u0027s insufficient arguments provided by user","lastModifiedDate":"2023-01-22"},{"lineNumber":174,"author":{"gitId":"MrTwit99"},"content":"            boolean isAvailable \u003d false;    // check if user is calling a supported function provided by Duke","lastModifiedDate":"2023-01-22"},{"lineNumber":175,"author":{"gitId":"MrTwit99"},"content":"            boolean isTaskCompleted \u003d false;    // indicates if the task is completed","lastModifiedDate":"2023-01-29"},{"lineNumber":176,"author":{"gitId":"MrTwit99"},"content":"            int taskNumber; // stores the task index in the list","lastModifiedDate":"2023-01-29"},{"lineNumber":177,"author":{"gitId":"MrTwit99"},"content":"            String tempCmd; // stores function call by user (eg todo, mark, etc)","lastModifiedDate":"2023-01-29"},{"lineNumber":178,"author":{"gitId":"MrTwit99"},"content":"            String[] tempText;  // stores the command called by user in CLI","lastModifiedDate":"2023-01-29"},{"lineNumber":179,"author":{"gitId":"MrTwit99"},"content":"            if (fileTasks.size() !\u003d 0) {","lastModifiedDate":"2023-01-29"},{"lineNumber":180,"author":{"gitId":"MrTwit99"},"content":"                text \u003d fileTasks.remove(0);","lastModifiedDate":"2023-01-29"},{"lineNumber":181,"author":{"gitId":"MrTwit99"},"content":"            } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":182,"author":{"gitId":"MrTwit99"},"content":"                isFileData \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":183,"author":{"gitId":"MrTwit99"},"content":"                text \u003d br.readLine();","lastModifiedDate":"2023-01-19"},{"lineNumber":184,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":185,"author":{"gitId":"MrTwit99"},"content":"            if (isFileData) {","lastModifiedDate":"2023-01-29"},{"lineNumber":186,"author":{"gitId":"MrTwit99"},"content":"                tempText \u003d text.split(\"] \");","lastModifiedDate":"2023-01-29"},{"lineNumber":187,"author":{"gitId":"MrTwit99"},"content":"                switch (tempText[0]) {","lastModifiedDate":"2023-01-29"},{"lineNumber":188,"author":{"gitId":"MrTwit99"},"content":"                case \"[D][ \":","lastModifiedDate":"2023-01-29"},{"lineNumber":189,"author":{"gitId":"MrTwit99"},"content":"                    tempCmd \u003d \"deadline\";","lastModifiedDate":"2023-01-29"},{"lineNumber":190,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":191,"author":{"gitId":"MrTwit99"},"content":"                case \"[D][X\":","lastModifiedDate":"2023-01-29"},{"lineNumber":192,"author":{"gitId":"MrTwit99"},"content":"                    tempCmd \u003d \"deadline\";","lastModifiedDate":"2023-01-29"},{"lineNumber":193,"author":{"gitId":"MrTwit99"},"content":"                    isTaskCompleted \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":195,"author":{"gitId":"MrTwit99"},"content":"                case \"[T][ \":","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"MrTwit99"},"content":"                    tempCmd \u003d \"todo\";","lastModifiedDate":"2023-01-29"},{"lineNumber":197,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":198,"author":{"gitId":"MrTwit99"},"content":"                case \"[T][X\":","lastModifiedDate":"2023-01-29"},{"lineNumber":199,"author":{"gitId":"MrTwit99"},"content":"                    tempCmd \u003d \"todo\";","lastModifiedDate":"2023-01-29"},{"lineNumber":200,"author":{"gitId":"MrTwit99"},"content":"                    isTaskCompleted \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":201,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":202,"author":{"gitId":"MrTwit99"},"content":"                case \"[E][ \":","lastModifiedDate":"2023-01-29"},{"lineNumber":203,"author":{"gitId":"MrTwit99"},"content":"                    tempCmd \u003d \"event\";","lastModifiedDate":"2023-01-29"},{"lineNumber":204,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":205,"author":{"gitId":"MrTwit99"},"content":"                case \"[E][X\":","lastModifiedDate":"2023-01-30"},{"lineNumber":206,"author":{"gitId":"MrTwit99"},"content":"                    tempCmd \u003d \"event\";","lastModifiedDate":"2023-01-29"},{"lineNumber":207,"author":{"gitId":"MrTwit99"},"content":"                    isTaskCompleted \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":208,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":209,"author":{"gitId":"MrTwit99"},"content":"                default:","lastModifiedDate":"2023-01-30"},{"lineNumber":210,"author":{"gitId":"MrTwit99"},"content":"                    tempCmd \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":211,"author":{"gitId":"MrTwit99"},"content":"                    isTaskCompleted \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":212,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":213,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":214,"author":{"gitId":"MrTwit99"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":215,"author":{"gitId":"MrTwit99"},"content":"                tempText \u003d text.split(\" \", 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":216,"author":{"gitId":"MrTwit99"},"content":"                tempCmd \u003d tempText[0].toLowerCase();","lastModifiedDate":"2023-01-29"},{"lineNumber":217,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":218,"author":{"gitId":"MrTwit99"},"content":"            if ( (tempCmd.equals(\"mark\")) || (tempCmd.equals(\"unmark\")) || (tempCmd.equals(\"delete\")) ||","lastModifiedDate":"2023-01-21"},{"lineNumber":219,"author":{"gitId":"MrTwit99"},"content":"                    (tempCmd.equals(\"todo\")) || (tempCmd.equals(\"deadline\")) || (tempCmd.equals(\"event\")) ) {","lastModifiedDate":"2023-01-21"},{"lineNumber":220,"author":{"gitId":"MrTwit99"},"content":"                isAvailable \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":221,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":222,"author":{"gitId":"MrTwit99"},"content":"            try {   // determine function called by the user has required arguments and if its valid","lastModifiedDate":"2023-01-29"},{"lineNumber":223,"author":{"gitId":"MrTwit99"},"content":"                DukeException.validate(isAvailable, tempCmd, tempText);","lastModifiedDate":"2023-01-22"},{"lineNumber":224,"author":{"gitId":"MrTwit99"},"content":"            } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-01-20"},{"lineNumber":225,"author":{"gitId":"MrTwit99"},"content":"                System.out.println(ex);","lastModifiedDate":"2023-01-20"},{"lineNumber":226,"author":{"gitId":"MrTwit99"},"content":"                continue;","lastModifiedDate":"2023-01-21"},{"lineNumber":227,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":228,"author":{"gitId":"MrTwit99"},"content":"            switch (tempCmd) {","lastModifiedDate":"2023-01-21"},{"lineNumber":229,"author":{"gitId":"MrTwit99"},"content":"            case \"bye\":","lastModifiedDate":"2023-01-21"},{"lineNumber":230,"author":{"gitId":"MrTwit99"},"content":"                sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":231,"author":{"gitId":"MrTwit99"},"content":"                        .append(\"    Bye. Hope to see you again soon!\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":232,"author":{"gitId":"MrTwit99"},"content":"                        .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":233,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-01-19"},{"lineNumber":234,"author":{"gitId":"MrTwit99"},"content":"            case \"list\":","lastModifiedDate":"2023-01-19"},{"lineNumber":235,"author":{"gitId":"MrTwit99"},"content":"                sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":236,"author":{"gitId":"MrTwit99"},"content":"                        .append(\"    Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":237,"author":{"gitId":"MrTwit99"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":238,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    \").append(i + 1).append(\".\").append(taskList.get(i).getTaskInfoStatus())","lastModifiedDate":"2023-01-30"},{"lineNumber":239,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":240,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":241,"author":{"gitId":"MrTwit99"},"content":"                sb.append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":242,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-01-19"},{"lineNumber":243,"author":{"gitId":"MrTwit99"},"content":"            case \"mark\":","lastModifiedDate":"2023-01-19"},{"lineNumber":244,"author":{"gitId":"MrTwit99"},"content":"                taskNumber \u003d Integer.parseInt(tempText[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":245,"author":{"gitId":"MrTwit99"},"content":"                if ((taskNumber \u003c\u003d taskList.size()) \u0026\u0026 (taskNumber \u003e 0)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":246,"author":{"gitId":"MrTwit99"},"content":"                    Task tempTask \u003d taskList.get(taskNumber - 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":247,"author":{"gitId":"MrTwit99"},"content":"                    String oldTaskInfo \u003d tempTask.getTaskInfo();","lastModifiedDate":"2023-01-29"},{"lineNumber":248,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":249,"author":{"gitId":"MrTwit99"},"content":"                            .append(tempTask.markAsDone())","lastModifiedDate":"2023-01-19"},{"lineNumber":250,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"\\n    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":251,"author":{"gitId":"MrTwit99"},"content":"                    taskList.set(taskNumber - 1, tempTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":252,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":253,"author":{"gitId":"MrTwit99"},"content":"                        writeToFile(oldTaskInfo, tempTask.getTaskInfo(), taskNumber - 1, pw, sb, taskList);","lastModifiedDate":"2023-01-30"},{"lineNumber":254,"author":{"gitId":"MrTwit99"},"content":"                    } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":255,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":256,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":257,"author":{"gitId":"MrTwit99"},"content":"                } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":258,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":259,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    The task you are trying to mark is out of range! Try again!\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":260,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":261,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":262,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-01-19"},{"lineNumber":263,"author":{"gitId":"MrTwit99"},"content":"            case \"unmark\":","lastModifiedDate":"2023-01-19"},{"lineNumber":264,"author":{"gitId":"MrTwit99"},"content":"                taskNumber \u003d Integer.parseInt(tempText[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":265,"author":{"gitId":"MrTwit99"},"content":"                if ((taskNumber \u003c\u003d taskList.size()) \u0026\u0026 (taskNumber \u003e 0)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":266,"author":{"gitId":"MrTwit99"},"content":"                    Task tempTask \u003d taskList.get(taskNumber - 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":267,"author":{"gitId":"MrTwit99"},"content":"                    String oldTaskInfo \u003d tempTask.getTaskInfo();","lastModifiedDate":"2023-01-29"},{"lineNumber":268,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":269,"author":{"gitId":"MrTwit99"},"content":"                            .append(tempTask.markAsIncomplete())","lastModifiedDate":"2023-01-19"},{"lineNumber":270,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"\\n    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":271,"author":{"gitId":"MrTwit99"},"content":"                    taskList.set(taskNumber - 1, tempTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":272,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":273,"author":{"gitId":"MrTwit99"},"content":"                        writeToFile(oldTaskInfo, tempTask.getTaskInfo(), taskNumber - 1, pw, sb, taskList);","lastModifiedDate":"2023-01-30"},{"lineNumber":274,"author":{"gitId":"MrTwit99"},"content":"                    } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":275,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":276,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":277,"author":{"gitId":"MrTwit99"},"content":"                } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":278,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":279,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    The task you are trying to unmark is out of range! Try again!\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":280,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":281,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":282,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-01-19"},{"lineNumber":283,"author":{"gitId":"MrTwit99"},"content":"            case \"delete\":","lastModifiedDate":"2023-01-20"},{"lineNumber":284,"author":{"gitId":"MrTwit99"},"content":"                taskNumber \u003d Integer.parseInt(tempText[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":285,"author":{"gitId":"MrTwit99"},"content":"                if ((taskNumber \u003c\u003d taskList.size()) \u0026\u0026 (taskNumber \u003e 0)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":286,"author":{"gitId":"MrTwit99"},"content":"                    Task tempTask \u003d taskList.remove(taskNumber - 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":287,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":288,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    Noted. I\u0027ve removed this task:\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":289,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"      \").append(tempTask.getTaskInfoStatus())","lastModifiedDate":"2023-01-29"},{"lineNumber":290,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"\\n    Now you have \").append(taskList.size()).append(\" tasks in the list.\\n\")","lastModifiedDate":"2023-01-29"},{"lineNumber":291,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":292,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":293,"author":{"gitId":"MrTwit99"},"content":"                        writeToFile(tempTask.getTaskInfo(), \"\", taskNumber - 1, pw, sb, taskList);","lastModifiedDate":"2023-01-30"},{"lineNumber":294,"author":{"gitId":"MrTwit99"},"content":"                    } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":295,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":296,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":297,"author":{"gitId":"MrTwit99"},"content":"                } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":298,"author":{"gitId":"MrTwit99"},"content":"                    sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":299,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    The task you are trying to delete is out of range! Try again!\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":300,"author":{"gitId":"MrTwit99"},"content":"                            .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":301,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-20"},{"lineNumber":302,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-01-20"},{"lineNumber":303,"author":{"gitId":"MrTwit99"},"content":"            default:    // add new Task into the Reminder list","lastModifiedDate":"2023-01-21"},{"lineNumber":304,"author":{"gitId":"MrTwit99"},"content":"                Task newTask \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":305,"author":{"gitId":"MrTwit99"},"content":"                switch (tempCmd) {","lastModifiedDate":"2023-01-21"},{"lineNumber":306,"author":{"gitId":"MrTwit99"},"content":"                case \"todo\":","lastModifiedDate":"2023-01-21"},{"lineNumber":307,"author":{"gitId":"MrTwit99"},"content":"                    newTask \u003d new ToDos(tempText[1]);","lastModifiedDate":"2023-01-20"},{"lineNumber":308,"author":{"gitId":"MrTwit99"},"content":"                    if (isTaskCompleted) {","lastModifiedDate":"2023-01-29"},{"lineNumber":309,"author":{"gitId":"MrTwit99"},"content":"                        newTask.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":310,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":311,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-20"},{"lineNumber":312,"author":{"gitId":"MrTwit99"},"content":"                case \"deadline\":","lastModifiedDate":"2023-01-20"},{"lineNumber":313,"author":{"gitId":"MrTwit99"},"content":"                    String[] tempText2 \u003d tempText[1].split(\"/by\", 2);","lastModifiedDate":"2023-01-20"},{"lineNumber":314,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-20"},{"lineNumber":315,"author":{"gitId":"MrTwit99"},"content":"                        DukeException.validate(true, tempCmd, tempText2);","lastModifiedDate":"2023-01-21"},{"lineNumber":316,"author":{"gitId":"MrTwit99"},"content":"                    } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-01-20"},{"lineNumber":317,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(ex);","lastModifiedDate":"2023-01-20"},{"lineNumber":318,"author":{"gitId":"MrTwit99"},"content":"                        hasIssue \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":319,"author":{"gitId":"MrTwit99"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":320,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-20"},{"lineNumber":321,"author":{"gitId":"MrTwit99"},"content":"                    String time;","lastModifiedDate":"2023-01-29"},{"lineNumber":322,"author":{"gitId":"MrTwit99"},"content":"                    String[] tempDateTime \u003d tempText2[1].split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":323,"author":{"gitId":"MrTwit99"},"content":"                    if (tempDateTime.length !\u003d 3) {","lastModifiedDate":"2023-01-29"},{"lineNumber":324,"author":{"gitId":"MrTwit99"},"content":"                        time \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":325,"author":{"gitId":"MrTwit99"},"content":"                    } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":326,"author":{"gitId":"MrTwit99"},"content":"                        time \u003d tempDateTime[2];","lastModifiedDate":"2023-01-29"},{"lineNumber":327,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":328,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":329,"author":{"gitId":"MrTwit99"},"content":"                        newTask \u003d new Deadline(tempText2[0], tempDateTime[1], time);","lastModifiedDate":"2023-01-29"},{"lineNumber":330,"author":{"gitId":"MrTwit99"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":331,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"Invalid inputs!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":332,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"Please enter your date \u0026 time in the format: YYYY-MM-DD HH:MM \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":333,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"Please also ensure they are valid values!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":334,"author":{"gitId":"MrTwit99"},"content":"                        hasIssue \u003d true;","lastModifiedDate":"2023-01-30"},{"lineNumber":335,"author":{"gitId":"MrTwit99"},"content":"                        break;","lastModifiedDate":"2023-01-29"},{"lineNumber":336,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":337,"author":{"gitId":"MrTwit99"},"content":"                    if (isTaskCompleted) {","lastModifiedDate":"2023-01-29"},{"lineNumber":338,"author":{"gitId":"MrTwit99"},"content":"                        newTask.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":339,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":340,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-20"},{"lineNumber":341,"author":{"gitId":"MrTwit99"},"content":"                case \"event\":","lastModifiedDate":"2023-01-20"},{"lineNumber":342,"author":{"gitId":"MrTwit99"},"content":"                    String[] tempText3 \u003d tempText[1].split(\"/from\", 2);","lastModifiedDate":"2023-01-20"},{"lineNumber":343,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-20"},{"lineNumber":344,"author":{"gitId":"MrTwit99"},"content":"                        DukeException.validate(true, tempCmd, tempText3);","lastModifiedDate":"2023-01-21"},{"lineNumber":345,"author":{"gitId":"MrTwit99"},"content":"                    } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-01-20"},{"lineNumber":346,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(ex);","lastModifiedDate":"2023-01-20"},{"lineNumber":347,"author":{"gitId":"MrTwit99"},"content":"                        hasIssue \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":348,"author":{"gitId":"MrTwit99"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":349,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-20"},{"lineNumber":350,"author":{"gitId":"MrTwit99"},"content":"                    String startTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":351,"author":{"gitId":"MrTwit99"},"content":"                    String[] tempStartDateTime \u003d tempText3[1].split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":352,"author":{"gitId":"MrTwit99"},"content":"                    if (tempStartDateTime[2].equals(\"/to\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":353,"author":{"gitId":"MrTwit99"},"content":"                        startTime \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":354,"author":{"gitId":"MrTwit99"},"content":"                    } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":355,"author":{"gitId":"MrTwit99"},"content":"                        startTime \u003d tempStartDateTime[2];","lastModifiedDate":"2023-01-29"},{"lineNumber":356,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":357,"author":{"gitId":"MrTwit99"},"content":"                    String[] tempText4 \u003d tempText3[1].split(\"/to\", 2);","lastModifiedDate":"2023-01-20"},{"lineNumber":358,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-20"},{"lineNumber":359,"author":{"gitId":"MrTwit99"},"content":"                        DukeException.validate(true, tempCmd, tempText4);","lastModifiedDate":"2023-01-21"},{"lineNumber":360,"author":{"gitId":"MrTwit99"},"content":"                    } catch (IncorrectNoOfArgumentException ex) {","lastModifiedDate":"2023-01-20"},{"lineNumber":361,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(ex);","lastModifiedDate":"2023-01-20"},{"lineNumber":362,"author":{"gitId":"MrTwit99"},"content":"                        hasIssue \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":363,"author":{"gitId":"MrTwit99"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":364,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-20"},{"lineNumber":365,"author":{"gitId":"MrTwit99"},"content":"                    String endTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":366,"author":{"gitId":"MrTwit99"},"content":"                    String[] tempEndDateTime \u003d tempText4[1].split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":367,"author":{"gitId":"MrTwit99"},"content":"                    if (tempEndDateTime.length !\u003d 3) {","lastModifiedDate":"2023-01-29"},{"lineNumber":368,"author":{"gitId":"MrTwit99"},"content":"                        endTime \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":369,"author":{"gitId":"MrTwit99"},"content":"                    } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":370,"author":{"gitId":"MrTwit99"},"content":"                        endTime \u003d tempEndDateTime[2];","lastModifiedDate":"2023-01-29"},{"lineNumber":371,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":372,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":373,"author":{"gitId":"MrTwit99"},"content":"                        newTask \u003d new Event(tempText3[0], tempStartDateTime[1], tempEndDateTime[1],","lastModifiedDate":"2023-01-29"},{"lineNumber":374,"author":{"gitId":"MrTwit99"},"content":"                                startTime, endTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":375,"author":{"gitId":"MrTwit99"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":376,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"Invalid inputs!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":377,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"Please enter your date \u0026 time in the format: YYYY-MM-DD HH:MM \\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":378,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(\"Please also ensure they are valid values!\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":379,"author":{"gitId":"MrTwit99"},"content":"                        hasIssue \u003d true;","lastModifiedDate":"2023-01-30"},{"lineNumber":380,"author":{"gitId":"MrTwit99"},"content":"                        break;","lastModifiedDate":"2023-01-29"},{"lineNumber":381,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":382,"author":{"gitId":"MrTwit99"},"content":"                    if (isTaskCompleted) {","lastModifiedDate":"2023-01-29"},{"lineNumber":383,"author":{"gitId":"MrTwit99"},"content":"                        newTask.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":384,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":385,"author":{"gitId":"MrTwit99"},"content":"                    break;","lastModifiedDate":"2023-01-20"},{"lineNumber":386,"author":{"gitId":"MrTwit99"},"content":"                default:    // throw an error as the user is trying to call a function that does not exist","lastModifiedDate":"2023-01-21"},{"lineNumber":387,"author":{"gitId":"MrTwit99"},"content":"                    try {","lastModifiedDate":"2023-01-20"},{"lineNumber":388,"author":{"gitId":"MrTwit99"},"content":"                        DukeException.validate2();","lastModifiedDate":"2023-01-20"},{"lineNumber":389,"author":{"gitId":"MrTwit99"},"content":"                    } catch (InvalidCommandException ex) {","lastModifiedDate":"2023-01-20"},{"lineNumber":390,"author":{"gitId":"MrTwit99"},"content":"                        System.out.println(ex);","lastModifiedDate":"2023-01-20"},{"lineNumber":391,"author":{"gitId":"MrTwit99"},"content":"                        hasIssue \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":392,"author":{"gitId":"MrTwit99"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":393,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-20"},{"lineNumber":394,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-20"},{"lineNumber":395,"author":{"gitId":"MrTwit99"},"content":"                if (!hasIssue) {","lastModifiedDate":"2023-01-22"},{"lineNumber":396,"author":{"gitId":"MrTwit99"},"content":"                    taskList.add(newTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":397,"author":{"gitId":"MrTwit99"},"content":"                    if (!isFileData) {  // if current task added to taskList is not from the saved file","lastModifiedDate":"2023-01-29"},{"lineNumber":398,"author":{"gitId":"MrTwit99"},"content":"                        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":399,"author":{"gitId":"MrTwit99"},"content":"                            writeToFile(\"data/storage.txt\", newTask.getTaskInfo() + \"\\n\", pw, sb,","lastModifiedDate":"2023-01-30"},{"lineNumber":400,"author":{"gitId":"MrTwit99"},"content":"                                    taskList);","lastModifiedDate":"2023-01-30"},{"lineNumber":401,"author":{"gitId":"MrTwit99"},"content":"                        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":402,"author":{"gitId":"MrTwit99"},"content":"                            System.out.println(\"An unexpected error has occurred: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":403,"author":{"gitId":"MrTwit99"},"content":"                        }","lastModifiedDate":"2023-01-20"},{"lineNumber":404,"author":{"gitId":"MrTwit99"},"content":"                        sb.append(\"    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-19"},{"lineNumber":405,"author":{"gitId":"MrTwit99"},"content":"                                .append(\"    Got it. I\u0027ve added this task to the list:\\n\")","lastModifiedDate":"2023-01-21"},{"lineNumber":406,"author":{"gitId":"MrTwit99"},"content":"                                .append(\"      \").append(newTask.getTaskInfoStatus())","lastModifiedDate":"2023-01-29"},{"lineNumber":407,"author":{"gitId":"MrTwit99"},"content":"                                .append(\"\\n    Now you have \").append(taskList.size()).append(\" tasks in the list.\\n\")","lastModifiedDate":"2023-01-29"},{"lineNumber":408,"author":{"gitId":"MrTwit99"},"content":"                                .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":409,"author":{"gitId":"MrTwit99"},"content":"                    }","lastModifiedDate":"2023-01-19"},{"lineNumber":410,"author":{"gitId":"MrTwit99"},"content":"                } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":411,"author":{"gitId":"MrTwit99"},"content":"                    sb.setLength(0);    // Clear the cache created by the unknown function call by user","lastModifiedDate":"2023-01-30"},{"lineNumber":412,"author":{"gitId":"MrTwit99"},"content":"                }","lastModifiedDate":"2023-01-23"},{"lineNumber":413,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":414,"author":{"gitId":"MrTwit99"},"content":"            if (!isFileData) {  // Prints a message pertaining to the function called by the user","lastModifiedDate":"2023-01-29"},{"lineNumber":415,"author":{"gitId":"MrTwit99"},"content":"                printMessage(pw, sb);","lastModifiedDate":"2023-01-29"},{"lineNumber":416,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":417,"author":{"gitId":"MrTwit99"},"content":"            if (tempCmd.equals(\"bye\")) {    // Terminate the program as desired by user","lastModifiedDate":"2023-01-22"},{"lineNumber":418,"author":{"gitId":"MrTwit99"},"content":"                break;","lastModifiedDate":"2023-01-19"},{"lineNumber":419,"author":{"gitId":"MrTwit99"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":420,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":421,"author":{"gitId":"MrTwit99"},"content":"        br.close();","lastModifiedDate":"2023-01-19"},{"lineNumber":422,"author":{"gitId":"MrTwit99"},"content":"        pw.close();","lastModifiedDate":"2023-01-19"},{"lineNumber":423,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":424,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"MrTwit99":415,"-":9}},{"path":"src/main/java/classes/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    protected String newStartDate, newEndDate, newStartTime, newEndTime,","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"            oldStartDate, oldEndDate, oldStartTime, oldEndTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    protected LocalTime startTime, endTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"    protected LocalDate startDate, endDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"    public Event(String taskInfo, String stringStartDate, String stringEndDate, String stringStartTime","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"            , String stringEndTime) {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        super(taskInfo);","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"        this.oldStartDate \u003d stringStartDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"        this.oldEndDate \u003d stringEndDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        this.oldStartTime \u003d \" \" + stringStartTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        this.oldEndTime \u003d \" \" + stringEndTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        this.startDate \u003d LocalDate.parse(stringStartDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        this.newStartDate \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"                .format(startDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        this.endDate \u003d LocalDate.parse(stringEndDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        this.newEndDate \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"                .format(endDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        if (stringStartTime.equals(\"\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"            this.startTime \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"            this.newStartTime \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"            this.oldStartTime \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"            this.startTime \u003d LocalTime.parse(stringStartTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"            this.newStartTime \u003d \" | \" + DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"                    .format(startTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        if (stringEndTime.equals(\"\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"            this.endTime \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"            this.newEndTime \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"            this.oldEndTime \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"            this.endTime \u003d LocalTime.parse(stringEndTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"            this.newEndTime \u003d \" | \" + DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"                    .format(endTime);","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        return \"[E]\" + super.getTaskInfoStatus() + \"(from: \" + this.newStartDate + this.newStartTime + \" to: \"","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"                + this.newEndDate + this.newEndTime + \")\";","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2023-01-20"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        return \"[E]\" + super.getTaskInfoStatus() + \"/from \" + this.oldStartDate + this.oldStartTime + \" /to \"","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"                + this.oldEndDate + this.oldEndTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":62}},{"path":"src/main/java/classes/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"    protected String taskInfo;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"    protected boolean hasCompleted;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"    public Task(String taskInfo) {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"        this.taskInfo \u003d taskInfo;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"        this.hasCompleted \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    public String markAsDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"        this.hasCompleted \u003d true;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        return \"     Nice! I\u0027ve marked this task as done:\\n       \" + this.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"    public String markAsIncomplete() {","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        this.hasCompleted \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"        return \"     Alright, I\u0027ve marked this task as not done yet:\\n       \" + this.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        if (hasCompleted) {","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"            return \"[X] \" + this.taskInfo;","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"            return \"[ ] \" + this.taskInfo;","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"    public abstract String getTaskInfo();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"MrTwit99":31}},{"path":"src/main/java/classes/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"public class ToDos extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"    public ToDos(String taskInfo) {","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"        super(taskInfo);","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfoStatus() {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"        return \"[T]\" + super.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        return \"[T]\" + super.getTaskInfoStatus();","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":16}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import java.lang.StringBuilder;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"import java.io.File;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"public class DukeException {","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"    private static int expectedArgs \u003d 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    public static void validate(boolean secondaryCheck, String command, String[] text) throws IncorrectNoOfArgumentException {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"        if (secondaryCheck) {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"            expectedArgs \u003d 2;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"        } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"            expectedArgs \u003d 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        if (text.length !\u003d expectedArgs) {","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     ☹ OOPS!!! You have provided incorrect number of arguments for the command \u0027\")","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"                    .append(command).append(\"\u0027.\\n     Please try again after checking!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"            throw new IncorrectNoOfArgumentException(sb.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        if (secondaryCheck) {","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"            validate(text[1], command);","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"    public static void validate(String text, String command) throws IncorrectNoOfArgumentException {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        // Checking for blank spaces","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        if ( (text.equals(\"\")) || (text.isBlank()) ) {","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     ☹ OOPS!!! You have provided incorrect number of arguments for the command \u0027\")","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"                    .append(command).append(\"\u0027.\\n     Please try again after checking!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"            throw new IncorrectNoOfArgumentException(sb.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"    public static void validate2() throws InvalidCommandException {","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"                .append(\"     ☹ OOPS!!! This is an incorrect command!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"                .append(\"     Please try again with a valid command!\\n\")","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"                .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        throw new InvalidCommandException(sb.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"    public static void folderCheck(String str) throws FolderNotFoundException {","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"        File tempFolder \u003d new File(str);","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"        if ( (!tempFolder.isDirectory()) || (!tempFolder.exists()) ) {","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"            sb.append(\"\\n    ____________________________________________________________\\n\")","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     Folder \u0027\").append(str).append(\"\u0027 cannot be found.\\n\")","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     A new folder \u0027\").append(str).append(\"\u0027 has been created for you!\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"     A new file \u0027storage\u0027 for storing the tasks has been created for you as well!\\n\")","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"                    .append(\"    ____________________________________________________________\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"            throw new FolderNotFoundException(sb.toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"MrTwit99":61}},{"path":"src/main/java/exceptions/FolderNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"public class FolderNotFoundException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"    public FolderNotFoundException (String str) {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"        super(str);","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":7}},{"path":"src/main/java/exceptions/IncorrectNoOfArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"public class IncorrectNoOfArgumentException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"    public IncorrectNoOfArgumentException (String str) {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"        super(str);","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":7}},{"path":"src/main/java/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package exceptions;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"    public InvalidCommandException (String str) {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"        super(str);","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":7}},{"path":"src/test/java/classes/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new Deadline(\"Assignment Submission\", \"2023-01-12\", \"12:30\");","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask2 \u003d new Deadline(\"Assignment Submission\", \"2023-01-12\", \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission(by: January 12, 2023 | 12:30:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of marking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission(by: January 12, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of marking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission(by: January 12, 2023 | 12:30:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of unmarking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission(by: January 12, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of unmarking tasks: Deadline.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission/by 2023-01-12 12:30\",","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of marking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][X] Assignment Submission/by 2023-01-12 \",","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of marking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission/by 2023-01-12 12:30\",","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/2 checks of unmarking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[D][ ] Assignment Submission/by 2023-01-12 \",","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/2 checks of unmarking tasks: Deadline.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":51}},{"path":"src/test/java/classes/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class EventTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"00:00\", \"23:59\");","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask2 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"\", \"23:59\");","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask3 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"00:00\", \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask4 \u003d new Event(\"Birthday\", \"2023-02-05\", \"2023-02-05\", \"\", \"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday(from: February 5, 2023 to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of marking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 to: February 5, 2023 | 11:59:00 PM)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 | 12:00:00 AM to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday(from: February 5, 2023 to: February 5, 2023)\",","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of unmarking tasks: Event.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 00:00 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 00:00 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][X] Birthday/from 2023-02-05 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of marking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 00:00 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"MrTwit99"},"content":"                tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"MrTwit99"},"content":"        tempTask2.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 /to 2023-02-05 23:59\",","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"MrTwit99"},"content":"                tempTask2.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 2/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"MrTwit99"},"content":"        tempTask3.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 00:00 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"MrTwit99"},"content":"                tempTask3.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 3/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"MrTwit99"},"content":"        tempTask4.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[E][ ] Birthday/from 2023-02-05 /to 2023-02-05\",","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"MrTwit99"},"content":"                tempTask4.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 4/4 checks of unmarking tasks: Event.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":85}},{"path":"src/test/java/classes/ToDosTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MrTwit99"},"content":"package classes;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"MrTwit99"},"content":"import exceptions.IncorrectNoOfArgumentException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"MrTwit99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"MrTwit99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"MrTwit99"},"content":"public class ToDosTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"MrTwit99"},"content":"    Task tempTask \u003d new ToDos(\"borrow book\");","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfoStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][X] borrow book\", tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of marking tasks: ToDo.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][ ] borrow book\", tempTask.getTaskInfoStatus());","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of unmarking tasks: ToDo.getTaskInfoStatus()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"MrTwit99"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"MrTwit99"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"MrTwit99"},"content":"    public void getTaskInfo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][X] borrow book\", tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of marking tasks: ToDo.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"MrTwit99"},"content":"        tempTask.markAsIncomplete();","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"MrTwit99"},"content":"        assertEquals(\"[T][ ] borrow book\", tempTask.getTaskInfo());","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"MrTwit99"},"content":"        System.out.println(\"Passed 1/1 check of unmarking tasks: ToDo.getTaskInfo()\");","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"MrTwit99"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"MrTwit99"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"MrTwit99":30}}]
