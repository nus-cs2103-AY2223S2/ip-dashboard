[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"        ","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"        /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"         * allTasks: the file that constains all the tasks","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"         * taskFolder: the folder taht contains allTasks","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"         */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"        File allTasks \u003d new File(\"data/tasks.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"        File taskFolder \u003d new File(\"data\");","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"        /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"         * print different starting messages depending on whether allTasks and/or","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"         * taskFolder exist","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"         */","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"        if (!taskFolder.exists()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"            printToFormat(\"The default Task Folder is not found, creating data folder with task file...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"            taskFolder.mkdir();","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"---Task Folder created successfully\");","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"            File f \u003d new File(taskFolder, \"task.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"                f.createNewFile();","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"                System.out.printf(\"---Task File created successfully\\n---ready to create tasks\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"                System.out.println(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"        } else if (!allTasks.exists()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"            printToFormat(\"The default tasks do not exist, creating default task file...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"            File f \u003d new File(taskFolder, \"task.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"                f.createNewFile();","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"                System.out.printf(\"---Task File created successfully\\n---ready to create tasks\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"                System.out.println(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"NBQian"},"content":"                loadDefaultTasks(tasks, allTasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"NBQian"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"NBQian"},"content":"                System.out.println(\"Could not load the default tasks: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"NBQian"},"content":"            printToFormat(\"---Default Task List successfully loaded\");","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"NBQian"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":65,"author":{"gitId":"NBQian"},"content":"            int byeIndicator \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"NBQian"},"content":"                /**","lastModifiedDate":"2023-01-20"},{"lineNumber":68,"author":{"gitId":"NBQian"},"content":"                 * @param inputLine: a String that is the command entered by the user","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"NBQian"},"content":"                 * @param words[]: an array whose elements are from inputline separated by","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"NBQian"},"content":"                 * a space. used to determine which command is entered","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"NBQian"},"content":"                 */","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"NBQian"},"content":"                String inputLine \u003d sc.nextLine();","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"NBQian"},"content":"                DukeException.checkInput(inputLine);","lastModifiedDate":"2023-01-20"},{"lineNumber":74,"author":{"gitId":"NBQian"},"content":"                String words[] \u003d inputLine.split(\" \");","lastModifiedDate":"2023-01-20"},{"lineNumber":75,"author":{"gitId":"NBQian"},"content":"                Command command \u003d Command.valueOf(words[0].toUpperCase());","lastModifiedDate":"2023-01-20"},{"lineNumber":76,"author":{"gitId":"NBQian"},"content":"                switch (command) {","lastModifiedDate":"2023-01-20"},{"lineNumber":77,"author":{"gitId":"NBQian"},"content":"                    case BYE: ","lastModifiedDate":"2023-01-20"},{"lineNumber":78,"author":{"gitId":"NBQian"},"content":"                        byeIndicator \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"NBQian"},"content":"                        printToFormat(\"    Bye, have a nice day!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":81,"author":{"gitId":"NBQian"},"content":"                    case LIST:","lastModifiedDate":"2023-01-20"},{"lineNumber":82,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":83,"author":{"gitId":"NBQian"},"content":"                     * loop through all tasks in the arraylist and print out each task","lastModifiedDate":"2023-01-20"},{"lineNumber":84,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":85,"author":{"gitId":"NBQian"},"content":"                        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-20"},{"lineNumber":86,"author":{"gitId":"NBQian"},"content":"                        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2023-01-20"},{"lineNumber":87,"author":{"gitId":"NBQian"},"content":"                            sb.append(\"    \" + i + \". \" + tasks.get(i - 1) + \"\\n\");","lastModifiedDate":"2023-01-20"},{"lineNumber":88,"author":{"gitId":"NBQian"},"content":"                        }","lastModifiedDate":"2023-01-20"},{"lineNumber":89,"author":{"gitId":"NBQian"},"content":"                        printToFormat(sb.toString());","lastModifiedDate":"2023-01-20"},{"lineNumber":90,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":91,"author":{"gitId":"NBQian"},"content":"                    case MARK:","lastModifiedDate":"2023-01-20"},{"lineNumber":92,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":93,"author":{"gitId":"NBQian"},"content":"                     * change the specified task\u0027s status to \"[X]\"","lastModifiedDate":"2023-01-20"},{"lineNumber":94,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":95,"author":{"gitId":"NBQian"},"content":"                        int ind \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-01-20"},{"lineNumber":96,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":97,"author":{"gitId":"NBQian"},"content":"                     * prints error message if the index is too large","lastModifiedDate":"2023-01-20"},{"lineNumber":98,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":99,"author":{"gitId":"NBQian"},"content":"                        if (ind \u003e tasks.size()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":100,"author":{"gitId":"NBQian"},"content":"                            printToFormat(\"    This task does not exist\");","lastModifiedDate":"2023-01-20"},{"lineNumber":101,"author":{"gitId":"NBQian"},"content":"                        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":102,"author":{"gitId":"NBQian"},"content":"                            Task updatedTask \u003d tasks.get(ind - 1);","lastModifiedDate":"2023-01-20"},{"lineNumber":103,"author":{"gitId":"NBQian"},"content":"                            tasks.get(ind - 1).mark();","lastModifiedDate":"2023-01-20"},{"lineNumber":104,"author":{"gitId":"NBQian"},"content":"                            printToFormat(\"    Congrats on completing the following task:\\n    \" + updatedTask);","lastModifiedDate":"2023-01-20"},{"lineNumber":105,"author":{"gitId":"NBQian"},"content":"                        }","lastModifiedDate":"2023-01-20"},{"lineNumber":106,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":107,"author":{"gitId":"NBQian"},"content":"                    case UNMARK:","lastModifiedDate":"2023-01-20"},{"lineNumber":108,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":109,"author":{"gitId":"NBQian"},"content":"                     * changed the specified task\u0027s staus to \"[ ]\"","lastModifiedDate":"2023-01-20"},{"lineNumber":110,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":111,"author":{"gitId":"NBQian"},"content":"                        int ind1 \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-01-20"},{"lineNumber":112,"author":{"gitId":"NBQian"},"content":"                        if (ind1 \u003e tasks.size()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":113,"author":{"gitId":"NBQian"},"content":"                            printToFormat(\"    This task does not exist\");","lastModifiedDate":"2023-01-20"},{"lineNumber":114,"author":{"gitId":"NBQian"},"content":"                        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":115,"author":{"gitId":"NBQian"},"content":"                            Task updatedTask \u003d tasks.get(ind1 - 1);","lastModifiedDate":"2023-01-20"},{"lineNumber":116,"author":{"gitId":"NBQian"},"content":"                            tasks.get(ind1 - 1).unmark();","lastModifiedDate":"2023-01-20"},{"lineNumber":117,"author":{"gitId":"NBQian"},"content":"                            printToFormat(\"    Unchecked the following task:\\n    \" + updatedTask);","lastModifiedDate":"2023-01-20"},{"lineNumber":118,"author":{"gitId":"NBQian"},"content":"                        }","lastModifiedDate":"2023-01-20"},{"lineNumber":119,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":120,"author":{"gitId":"NBQian"},"content":"                    case DEADLINE:","lastModifiedDate":"2023-01-20"},{"lineNumber":121,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":122,"author":{"gitId":"NBQian"},"content":"                     * creates and adds a deadline task to the arraylist of all tasks","lastModifiedDate":"2023-01-20"},{"lineNumber":123,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":124,"author":{"gitId":"NBQian"},"content":"                        String[] parts \u003d inputLine.split(\"/\");","lastModifiedDate":"2023-01-20"},{"lineNumber":125,"author":{"gitId":"NBQian"},"content":"                        Deadline task \u003d new Deadline(parts[0].split(\" \", 2)[1], 0, parts[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"NBQian"},"content":"                        tasks.add(task);","lastModifiedDate":"2023-01-20"},{"lineNumber":128,"author":{"gitId":"NBQian"},"content":"                        printToFormat(\"    Successfully added the following task:\\n    \" + task);","lastModifiedDate":"2023-01-20"},{"lineNumber":129,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":130,"author":{"gitId":"NBQian"},"content":"                    case EVENT:","lastModifiedDate":"2023-01-20"},{"lineNumber":131,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":132,"author":{"gitId":"NBQian"},"content":"                     * creates and adds an event task to the arraylist of all tasks","lastModifiedDate":"2023-01-20"},{"lineNumber":133,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":134,"author":{"gitId":"NBQian"},"content":"                        String[] parts1 \u003d inputLine.split(\" /\");","lastModifiedDate":"2023-01-20"},{"lineNumber":135,"author":{"gitId":"NBQian"},"content":"                        Event event \u003d new Event(parts1[0].split(\" \", 2)[1], 0, parts1[1], parts1[2]);","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"NBQian"},"content":"                        tasks.add(event);","lastModifiedDate":"2023-01-20"},{"lineNumber":138,"author":{"gitId":"NBQian"},"content":"                        printToFormat(\"    Successfully added the following task:\\n    \" + event);","lastModifiedDate":"2023-01-20"},{"lineNumber":139,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":140,"author":{"gitId":"NBQian"},"content":"                    case TODO:","lastModifiedDate":"2023-01-20"},{"lineNumber":141,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":142,"author":{"gitId":"NBQian"},"content":"                     * creates and adds a todo task to the arraylist of all tasks","lastModifiedDate":"2023-01-20"},{"lineNumber":143,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":144,"author":{"gitId":"NBQian"},"content":"                        Todo todo \u003d new Todo(inputLine.split(\" \", 2)[1], 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":145,"author":{"gitId":"NBQian"},"content":"                        tasks.add(todo);","lastModifiedDate":"2023-01-20"},{"lineNumber":146,"author":{"gitId":"NBQian"},"content":"                        printToFormat(\"    Successfully added the following task:\\n    \" + todo);","lastModifiedDate":"2023-01-20"},{"lineNumber":147,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":148,"author":{"gitId":"NBQian"},"content":"                    case DELETE:","lastModifiedDate":"2023-01-20"},{"lineNumber":149,"author":{"gitId":"NBQian"},"content":"                    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":150,"author":{"gitId":"NBQian"},"content":"                     * removes the task at the specified index","lastModifiedDate":"2023-01-20"},{"lineNumber":151,"author":{"gitId":"NBQian"},"content":"                     */","lastModifiedDate":"2023-01-20"},{"lineNumber":152,"author":{"gitId":"NBQian"},"content":"                        printToFormat(\"    The following task is removed:\\n    \" + tasks.remove(Integer.parseInt(words[1]) - 1));","lastModifiedDate":"2023-01-20"},{"lineNumber":153,"author":{"gitId":"NBQian"},"content":"                        break;","lastModifiedDate":"2023-01-20"},{"lineNumber":154,"author":{"gitId":"NBQian"},"content":"                    }","lastModifiedDate":"2023-01-20"},{"lineNumber":155,"author":{"gitId":"NBQian"},"content":"                    try {","lastModifiedDate":"2023-01-29"},{"lineNumber":156,"author":{"gitId":"NBQian"},"content":"                        updateAllTasks(tasks, allTasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":157,"author":{"gitId":"NBQian"},"content":"                    } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":158,"author":{"gitId":"NBQian"},"content":"                        System.out.println(\"local update failed: \" + e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":159,"author":{"gitId":"NBQian"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":160,"author":{"gitId":"NBQian"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":161,"author":{"gitId":"NBQian"},"content":"                /**","lastModifiedDate":"2023-01-20"},{"lineNumber":162,"author":{"gitId":"NBQian"},"content":"                 * prints out the error message if an error is caught","lastModifiedDate":"2023-01-20"},{"lineNumber":163,"author":{"gitId":"NBQian"},"content":"                 */","lastModifiedDate":"2023-01-20"},{"lineNumber":164,"author":{"gitId":"NBQian"},"content":"                printToFormat(\"    \" + e.getMessage());","lastModifiedDate":"2023-01-20"},{"lineNumber":165,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":166,"author":{"gitId":"NBQian"},"content":"            if (byeIndicator \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":167,"author":{"gitId":"NBQian"},"content":"                sc.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":168,"author":{"gitId":"NBQian"},"content":"                break;","lastModifiedDate":"2023-01-29"},{"lineNumber":169,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":170,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":171,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":172,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":173,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":174,"author":{"gitId":"NBQian"},"content":"     * method to print messages in desired format with a starting line and an ending line","lastModifiedDate":"2023-01-29"},{"lineNumber":175,"author":{"gitId":"NBQian"},"content":"     * @param message a string describing the message","lastModifiedDate":"2023-01-29"},{"lineNumber":176,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":177,"author":{"gitId":"NBQian"},"content":"    private static void printToFormat(String message) {","lastModifiedDate":"2023-01-29"},{"lineNumber":178,"author":{"gitId":"NBQian"},"content":"        String lineBreak1 \u003d \"--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":179,"author":{"gitId":"NBQian"},"content":"        String lineBreak2 \u003d \"\\n\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\\n\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":180,"author":{"gitId":"NBQian"},"content":"        System.out.println(lineBreak1 + message + lineBreak2);","lastModifiedDate":"2023-01-29"},{"lineNumber":181,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":182,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":183,"author":{"gitId":"NBQian"},"content":"    private static void loadDefaultTasks(ArrayList\u003cTask\u003e tasks, File file) throws FileNotFoundException {","lastModifiedDate":"2023-01-29"},{"lineNumber":184,"author":{"gitId":"NBQian"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2023-01-29"},{"lineNumber":185,"author":{"gitId":"NBQian"},"content":"        while(s.hasNext()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":186,"author":{"gitId":"NBQian"},"content":"            String[] lineArr \u003d s.nextLine().split(\"/\");","lastModifiedDate":"2023-01-29"},{"lineNumber":187,"author":{"gitId":"NBQian"},"content":"            switch (lineArr[0]) {","lastModifiedDate":"2023-01-29"},{"lineNumber":188,"author":{"gitId":"NBQian"},"content":"                case \"D\":","lastModifiedDate":"2023-01-29"},{"lineNumber":189,"author":{"gitId":"NBQian"},"content":"                    tasks.add(new Deadline(lineArr[1], Integer.parseInt(lineArr[2]), lineArr[3]));","lastModifiedDate":"2023-01-29"},{"lineNumber":190,"author":{"gitId":"NBQian"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":191,"author":{"gitId":"NBQian"},"content":"                case \"T\":","lastModifiedDate":"2023-01-29"},{"lineNumber":192,"author":{"gitId":"NBQian"},"content":"                    tasks.add(new Todo(lineArr[1], Integer.parseInt(lineArr[2])));","lastModifiedDate":"2023-01-29"},{"lineNumber":193,"author":{"gitId":"NBQian"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"NBQian"},"content":"                case \"E\":","lastModifiedDate":"2023-01-29"},{"lineNumber":195,"author":{"gitId":"NBQian"},"content":"                    tasks.add(new Event(lineArr[1], Integer.parseInt(lineArr[2]), lineArr[3], lineArr[4]));","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"NBQian"},"content":"                    break;","lastModifiedDate":"2023-01-29"},{"lineNumber":197,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":198,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":199,"author":{"gitId":"NBQian"},"content":"        s.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":200,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":201,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":202,"author":{"gitId":"NBQian"},"content":"    private static void updateAllTasks(ArrayList\u003cTask\u003e tasks, File allTasks) throws IOException {","lastModifiedDate":"2023-01-29"},{"lineNumber":203,"author":{"gitId":"NBQian"},"content":"        FileWriter fw \u003d new FileWriter(allTasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":204,"author":{"gitId":"NBQian"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-01-29"},{"lineNumber":205,"author":{"gitId":"NBQian"},"content":"            fw.write(task.toStoreFormatString() + System.lineSeparator());","lastModifiedDate":"2023-01-29"},{"lineNumber":206,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":207,"author":{"gitId":"NBQian"},"content":"        fw.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":208,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":209,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":210,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":211,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":212,"author":{"gitId":"NBQian"},"content":" * Creates a Task class to handle different tasks","lastModifiedDate":"2023-01-20"},{"lineNumber":213,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":214,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":215,"author":{"gitId":"NBQian"},"content":"class Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":216,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":217,"author":{"gitId":"NBQian"},"content":"     * @param name: a string indicating the name of the task","lastModifiedDate":"2023-01-20"},{"lineNumber":218,"author":{"gitId":"NBQian"},"content":"     * @param status: a boolean indicating whether the task is done or not","lastModifiedDate":"2023-01-20"},{"lineNumber":219,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":220,"author":{"gitId":"NBQian"},"content":"    protected String name;","lastModifiedDate":"2023-01-20"},{"lineNumber":221,"author":{"gitId":"NBQian"},"content":"    protected String status;","lastModifiedDate":"2023-01-20"},{"lineNumber":222,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":223,"author":{"gitId":"NBQian"},"content":"    public Task(String name, int status) {","lastModifiedDate":"2023-01-29"},{"lineNumber":224,"author":{"gitId":"NBQian"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-20"},{"lineNumber":225,"author":{"gitId":"NBQian"},"content":"        if (status \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":226,"author":{"gitId":"NBQian"},"content":"            this.status \u003d \"[X]\";","lastModifiedDate":"2023-01-20"},{"lineNumber":227,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":228,"author":{"gitId":"NBQian"},"content":"            this.status \u003d \"[ ]\";","lastModifiedDate":"2023-01-20"},{"lineNumber":229,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":230,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":231,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":232,"author":{"gitId":"NBQian"},"content":"     * overrides the toString method","lastModifiedDate":"2023-01-20"},{"lineNumber":233,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":234,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":235,"author":{"gitId":"NBQian"},"content":"        return \".\" + status + \" \" + name;","lastModifiedDate":"2023-01-20"},{"lineNumber":236,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":237,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":238,"author":{"gitId":"NBQian"},"content":"     * method to update a task as done.","lastModifiedDate":"2023-01-20"},{"lineNumber":239,"author":{"gitId":"NBQian"},"content":"     * @return a new Task with status being true","lastModifiedDate":"2023-01-20"},{"lineNumber":240,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":241,"author":{"gitId":"NBQian"},"content":"    public void mark() {","lastModifiedDate":"2023-01-20"},{"lineNumber":242,"author":{"gitId":"NBQian"},"content":"        this.status \u003d \"[X]\";","lastModifiedDate":"2023-01-20"},{"lineNumber":243,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":244,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":245,"author":{"gitId":"NBQian"},"content":"     * method to update a task as undone","lastModifiedDate":"2023-01-20"},{"lineNumber":246,"author":{"gitId":"NBQian"},"content":"     * @return a new Task with status being false","lastModifiedDate":"2023-01-20"},{"lineNumber":247,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":248,"author":{"gitId":"NBQian"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-20"},{"lineNumber":249,"author":{"gitId":"NBQian"},"content":"        this.status \u003d \"[ ]\";","lastModifiedDate":"2023-01-20"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":251,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":252,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":253,"author":{"gitId":"NBQian"},"content":"        return \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":254,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":255,"author":{"gitId":"NBQian"},"content":"    protected static LocalDateTime formatDateTime(String input) {","lastModifiedDate":"2023-01-29"},{"lineNumber":256,"author":{"gitId":"NBQian"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-01-29"},{"lineNumber":257,"author":{"gitId":"NBQian"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(input, formatter);","lastModifiedDate":"2023-01-29"},{"lineNumber":258,"author":{"gitId":"NBQian"},"content":"        return dateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":259,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":260,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":261,"author":{"gitId":"NBQian"},"content":"    protected static String reverseFormatDateTime(LocalDateTime input) {","lastModifiedDate":"2023-01-29"},{"lineNumber":262,"author":{"gitId":"NBQian"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-01-29"},{"lineNumber":263,"author":{"gitId":"NBQian"},"content":"        return input.format(formatter);","lastModifiedDate":"2023-01-29"},{"lineNumber":264,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":265,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":266,"author":{"gitId":"NBQian"},"content":"    protected static String TransformDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-01-29"},{"lineNumber":267,"author":{"gitId":"NBQian"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy \u0027at\u0027 HH:mm\");","lastModifiedDate":"2023-01-29"},{"lineNumber":268,"author":{"gitId":"NBQian"},"content":"        return dateTime.format(outputFormatter);","lastModifiedDate":"2023-01-29"},{"lineNumber":269,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":271,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":272,"author":{"gitId":"NBQian"},"content":" * Creates a Deadline class that inherits from Task","lastModifiedDate":"2023-01-20"},{"lineNumber":273,"author":{"gitId":"NBQian"},"content":" * to handle deadline tasks","lastModifiedDate":"2023-01-20"},{"lineNumber":274,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":275,"author":{"gitId":"NBQian"},"content":"class Deadline extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":276,"author":{"gitId":"NBQian"},"content":"    protected final LocalDateTime deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":277,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":278,"author":{"gitId":"NBQian"},"content":"     * @param name: a string indicating the name of the task","lastModifiedDate":"2023-01-20"},{"lineNumber":279,"author":{"gitId":"NBQian"},"content":"     * @param status: a String indicating whether the task is done or not","lastModifiedDate":"2023-01-20"},{"lineNumber":280,"author":{"gitId":"NBQian"},"content":"     * @param deadline: a string indicating the deadline of the task","lastModifiedDate":"2023-01-20"},{"lineNumber":281,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":282,"author":{"gitId":"NBQian"},"content":"    Deadline (String name, int status, String dlString) {","lastModifiedDate":"2023-01-29"},{"lineNumber":283,"author":{"gitId":"NBQian"},"content":"        super(name, status);","lastModifiedDate":"2023-01-20"},{"lineNumber":284,"author":{"gitId":"NBQian"},"content":"        this.deadline \u003d formatDateTime(dlString);","lastModifiedDate":"2023-01-29"},{"lineNumber":285,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":286,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":287,"author":{"gitId":"NBQian"},"content":"    private int getStatusNo() {","lastModifiedDate":"2023-01-29"},{"lineNumber":288,"author":{"gitId":"NBQian"},"content":"        if (super.status.equals(\"[ ]\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":289,"author":{"gitId":"NBQian"},"content":"            return 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":290,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":291,"author":{"gitId":"NBQian"},"content":"            return 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":292,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":293,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":294,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":295,"author":{"gitId":"NBQian"},"content":"     * overrides the toString method","lastModifiedDate":"2023-01-20"},{"lineNumber":296,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":297,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":298,"author":{"gitId":"NBQian"},"content":"        return \"[D]\" + status + \" \" + name + \"(by \" + TransformDateTime(deadline) + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":299,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":300,"author":{"gitId":"NBQian"},"content":"    ","lastModifiedDate":"2023-01-29"},{"lineNumber":301,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":302,"author":{"gitId":"NBQian"},"content":"        return String.format(\"D/%s/%d/%s\", super.name, this.getStatusNo(), reverseFormatDateTime(deadline));","lastModifiedDate":"2023-01-29"},{"lineNumber":303,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":304,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":305,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":306,"author":{"gitId":"NBQian"},"content":"class Event extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":307,"author":{"gitId":"NBQian"},"content":"    protected final LocalDateTime from;","lastModifiedDate":"2023-01-29"},{"lineNumber":308,"author":{"gitId":"NBQian"},"content":"    protected final LocalDateTime to;","lastModifiedDate":"2023-01-29"},{"lineNumber":309,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":310,"author":{"gitId":"NBQian"},"content":"     * ","lastModifiedDate":"2023-01-20"},{"lineNumber":311,"author":{"gitId":"NBQian"},"content":"     * @param name: a string indicating thename of the Event task","lastModifiedDate":"2023-01-20"},{"lineNumber":312,"author":{"gitId":"NBQian"},"content":"     * @param status: a String that checks if the Event is done or not","lastModifiedDate":"2023-01-20"},{"lineNumber":313,"author":{"gitId":"NBQian"},"content":"     * @param from: a string representing the starting time passed in by the user","lastModifiedDate":"2023-01-20"},{"lineNumber":314,"author":{"gitId":"NBQian"},"content":"     * @param to: a string representing the ending time passed in by the user","lastModifiedDate":"2023-01-20"},{"lineNumber":315,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":316,"author":{"gitId":"NBQian"},"content":"    Event(String name, int status, String from, String to) {","lastModifiedDate":"2023-01-29"},{"lineNumber":317,"author":{"gitId":"NBQian"},"content":"        super(name, status);","lastModifiedDate":"2023-01-20"},{"lineNumber":318,"author":{"gitId":"NBQian"},"content":"        this.from \u003d formatDateTime(from);","lastModifiedDate":"2023-01-29"},{"lineNumber":319,"author":{"gitId":"NBQian"},"content":"        this.to \u003d formatDateTime(to);","lastModifiedDate":"2023-01-29"},{"lineNumber":320,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":321,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":322,"author":{"gitId":"NBQian"},"content":"    private int getStatusNo() {","lastModifiedDate":"2023-01-29"},{"lineNumber":323,"author":{"gitId":"NBQian"},"content":"        if (super.status.equals(\"[ ]\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":324,"author":{"gitId":"NBQian"},"content":"            return 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":325,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":326,"author":{"gitId":"NBQian"},"content":"            return 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":327,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":328,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":329,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":330,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":331,"author":{"gitId":"NBQian"},"content":"     * overrrides toString method","lastModifiedDate":"2023-01-20"},{"lineNumber":332,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":333,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":334,"author":{"gitId":"NBQian"},"content":"        return String.format(\"[E]%s %s (from %s to %s)\", status, name, TransformDateTime(from), ","lastModifiedDate":"2023-01-29"},{"lineNumber":335,"author":{"gitId":"NBQian"},"content":"        TransformDateTime(to));","lastModifiedDate":"2023-01-29"},{"lineNumber":336,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":337,"author":{"gitId":"NBQian"},"content":"    ","lastModifiedDate":"2023-01-29"},{"lineNumber":338,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":339,"author":{"gitId":"NBQian"},"content":"        return String.format(\"E/%s/%d/%s/%s\", super.name, this.getStatusNo(), reverseFormatDateTime(from), reverseFormatDateTime(to));","lastModifiedDate":"2023-01-29"},{"lineNumber":340,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":341,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":342,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":343,"author":{"gitId":"NBQian"},"content":"class Todo extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":344,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":345,"author":{"gitId":"NBQian"},"content":"     * ","lastModifiedDate":"2023-01-20"},{"lineNumber":346,"author":{"gitId":"NBQian"},"content":"     * @param name: a String indicating the name of the todo task","lastModifiedDate":"2023-01-20"},{"lineNumber":347,"author":{"gitId":"NBQian"},"content":"     * @param status: a String indicating whether the task is done","lastModifiedDate":"2023-01-20"},{"lineNumber":348,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":349,"author":{"gitId":"NBQian"},"content":"    Todo(String name, int status) {","lastModifiedDate":"2023-01-29"},{"lineNumber":350,"author":{"gitId":"NBQian"},"content":"        super(name, status);","lastModifiedDate":"2023-01-20"},{"lineNumber":351,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":352,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":353,"author":{"gitId":"NBQian"},"content":"    private int getStatusNo() {","lastModifiedDate":"2023-01-29"},{"lineNumber":354,"author":{"gitId":"NBQian"},"content":"        if (super.status.equals(\"[ ]\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":355,"author":{"gitId":"NBQian"},"content":"            return 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":356,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":357,"author":{"gitId":"NBQian"},"content":"            return 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":358,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":359,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":360,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":361,"author":{"gitId":"NBQian"},"content":"     * overrides toString method","lastModifiedDate":"2023-01-20"},{"lineNumber":362,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":363,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":364,"author":{"gitId":"NBQian"},"content":"        return \"[T]\" + status + \" \" + name;","lastModifiedDate":"2023-01-20"},{"lineNumber":365,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":366,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":367,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":368,"author":{"gitId":"NBQian"},"content":"        return String.format(\"T/%s/%d\", super.name, this.getStatusNo());","lastModifiedDate":"2023-01-29"},{"lineNumber":369,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":370,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":371,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":372,"author":{"gitId":"NBQian"},"content":"class DukeException extends Exception {","lastModifiedDate":"2023-01-20"},{"lineNumber":373,"author":{"gitId":"NBQian"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-20"},{"lineNumber":374,"author":{"gitId":"NBQian"},"content":"        super(message);","lastModifiedDate":"2023-01-20"},{"lineNumber":375,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":376,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":377,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":378,"author":{"gitId":"NBQian"},"content":"     * ","lastModifiedDate":"2023-01-20"},{"lineNumber":379,"author":{"gitId":"NBQian"},"content":"     * @param inputLine: a line of command entered by the user, to be checked if it is valid","lastModifiedDate":"2023-01-20"},{"lineNumber":380,"author":{"gitId":"NBQian"},"content":"     * @throws DukeException: throws a customised exception message if the command input is ","lastModifiedDate":"2023-01-20"},{"lineNumber":381,"author":{"gitId":"NBQian"},"content":"     * not valid.","lastModifiedDate":"2023-01-20"},{"lineNumber":382,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":383,"author":{"gitId":"NBQian"},"content":"    public static void checkInput(String inputLine) throws DukeException {","lastModifiedDate":"2023-01-20"},{"lineNumber":384,"author":{"gitId":"NBQian"},"content":"        if (inputLine.equals(\"deadline\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":385,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-20"},{"lineNumber":386,"author":{"gitId":"NBQian"},"content":"        } else if (inputLine.equals(\"todo\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":387,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-20"},{"lineNumber":388,"author":{"gitId":"NBQian"},"content":"        } else if (inputLine.equals(\"event\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":389,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-01-20"},{"lineNumber":390,"author":{"gitId":"NBQian"},"content":"        } else if (inputLine.equals(\"delete\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":391,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! Please specify which task to delete.\");","lastModifiedDate":"2023-01-20"},{"lineNumber":392,"author":{"gitId":"NBQian"},"content":"        } ","lastModifiedDate":"2023-01-20"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":394,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":395,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":396,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":397,"author":{"gitId":"NBQian"},"content":" * a list of valid Commands as enum","lastModifiedDate":"2023-01-20"},{"lineNumber":398,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":399,"author":{"gitId":"NBQian"},"content":"enum Command {","lastModifiedDate":"2023-01-20"},{"lineNumber":400,"author":{"gitId":"NBQian"},"content":"    BYE, LIST, MARK, UNMARK, DELETE, TODO, DEADLINE, EVENT","lastModifiedDate":"2023-01-20"},{"lineNumber":401,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"NBQian":389,"-":12}},{"path":"src/main/java/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"D/Return books/0/06-09-2000 1800","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"T/Borrow book/0","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"E/project/0/27-01-2023 0000/29-01-2023 2359","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"D/reach diamond in league of legends /0/08-08-2023 2359","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"T/reach diamond in league of legends/0","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"E/reach diamond in league of legends/0/01-01-2023 0000/08-08-2023 2359","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"D/testwrite /0/01-01-2023 0000","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"E/reach diamond/0/01-01-2023 0000/08-08-2023 2359","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"NBQian":8}},{"path":"src/main/java/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"todo borrow book","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"mark 1","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"mark 2","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"unmark 3","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"delete 3","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"bye","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"NBQian":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"todo borrow book","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"mark 1","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"mark 2","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"bye","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"NBQian":8}}]
