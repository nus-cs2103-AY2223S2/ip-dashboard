[{"path":"bin/main/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"E/play league/0/01-01-2023 0000/31-12-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"D/reach diamond in league /0/08-08-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"T/try adding/0","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"E/play league/0/01-01-2023 0000/08-08-2023 2359","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"checkstyle {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"    mainClassName \u003d \"Duke\"","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"NBQian":6,"-":40}},{"path":"build/scripts/ip.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"@rem limitations under the License.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"@rem  ip startup script for Windows","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"set APP_HOME\u003d%DIRNAME%..","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and IP_OPTS to pass JVM options to this script.","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"set DEFAULT_JVM_OPTS\u003d","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"@rem Find java.exe","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"goto fail","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":":findJavaFromJavaHome","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"NBQian"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"NBQian"},"content":"if exist \"%JAVA_EXE%\" goto init","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"NBQian"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"NBQian"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"NBQian"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"NBQian"},"content":"goto fail","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"NBQian"},"content":":init","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"NBQian"},"content":"@rem Get command-line arguments, handling Windows variants","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"NBQian"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"NBQian"},"content":":win9xME_args","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"NBQian"},"content":"@rem Slurp the command line arguments.","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"NBQian"},"content":"set CMD_LINE_ARGS\u003d","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"NBQian"},"content":"set _SKIP\u003d2","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"NBQian"},"content":":win9xME_args_slurp","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"NBQian"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"NBQian"},"content":"set CMD_LINE_ARGS\u003d%*","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"NBQian"},"content":":execute","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"NBQian"},"content":"@rem Setup the command line","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"NBQian"},"content":"set CLASSPATH\u003d%APP_HOME%\\lib\\ip.jar","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"NBQian"},"content":"@rem Execute ip","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"NBQian"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %IP_OPTS%  -classpath \"%CLASSPATH%\" duke.Duke %CMD_LINE_ARGS%","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"NBQian"},"content":":end","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"NBQian"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"NBQian"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"NBQian"},"content":":fail","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"NBQian"},"content":"rem Set variable IP_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"NBQian"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"NBQian"},"content":"if  not \"\" \u003d\u003d \"%IP_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"NBQian"},"content":"exit /b 1","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"NBQian"},"content":":mainEnd","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"NBQian"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"NBQian"},"content":":omega","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":103}},{"path":"build/scriptsShadow/ip.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"@rem  ip startup script for Windows","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"@rem","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"set APP_HOME\u003d%DIRNAME%..","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and IP_OPTS to pass JVM options to this script.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"set DEFAULT_JVM_OPTS\u003d","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"@rem Find java.exe","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"goto fail","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":":findJavaFromJavaHome","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"if exist \"%JAVA_EXE%\" goto init","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"echo.","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"goto fail","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":":init","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"@rem Get command-line arguments, handling Windows variants","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":":win9xME_args","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"@rem Slurp the command line arguments.","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"NBQian"},"content":"set CMD_LINE_ARGS\u003d","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"NBQian"},"content":"set _SKIP\u003d2","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"NBQian"},"content":":win9xME_args_slurp","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"NBQian"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"NBQian"},"content":"set CMD_LINE_ARGS\u003d%*","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"NBQian"},"content":":execute","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"NBQian"},"content":"@rem Setup the command line","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"NBQian"},"content":"set CLASSPATH\u003d%APP_HOME%\\lib\\duke.jar","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"NBQian"},"content":"@rem Execute ip","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"NBQian"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %IP_OPTS%  -jar \"%CLASSPATH%\" %CMD_LINE_ARGS%","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"NBQian"},"content":":end","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"NBQian"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"NBQian"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"NBQian"},"content":":fail","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"NBQian"},"content":"rem Set variable IP_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"NBQian"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"NBQian"},"content":"if  not \"\" \u003d\u003d \"%IP_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"NBQian"},"content":"exit /b 1","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"NBQian"},"content":":mainEnd","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"NBQian"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"NBQian"},"content":":omega","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":84}},{"path":"out/production/ip/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"D/Return books/0/06-09-2000 1800","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"T/Borrow book/0","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"E/project/0/27-01-2023 0000/29-01-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"D/reach diamond in league of legends /0/08-08-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"T/reach diamond in league of legends/0","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"E/reach diamond in league of legends/0/01-01-2023 0000/08-08-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"D/testwrite /0/01-01-2023 0000","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"E/reach diamond/0/01-01-2023 0000/08-08-2023 2359","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":8}},{"path":"out/production/ip/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"todo borrow book","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"mark 1","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"mark 2","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"unmark 3","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"delete 3","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"bye","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":11}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"import duke.dukeexception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":" * The main class for running the application","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"     * Initialises the Duke object","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"     * @param filePath A string representing the path of the file containing all tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"     * @param folderPath A string representing the path of the folder containing the above file","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"    public Duke(String filePath, String folderPath) {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"        storage \u003d new Storage(filePath, folderPath);","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"     * a function that runs the program by repeatedly accepting user input and respond to them until","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"     * the user wants to exit the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"    public void run() {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"        ui.welcome();","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"        while (!isExit) {","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"                String inputLine \u003d ui.readCommand();","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"                Command c \u003d Parser.parse(inputLine);","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":"     * main method that starts running the program","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"NBQian"},"content":"        new Duke(\"data/tasks.txt\", \"data\").run();","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"NBQian":54,"-":4}},{"path":"src/main/java/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"E/play league/0/01-01-2023 0000/31-12-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"D/reach diamond in league /0/08-08-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"T/try adding/0","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"E/play league/0/01-01-2023 0000/08-08-2023 2359","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"T/get A for CS2103T/0","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"E/start a business/0/01-01-2023 0000/08-08-2023 2359","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":6}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":" * Command to add tasks to the TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    private Task task;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"     * Constructor","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"     * @param task Task to be added to TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"     * on execution, add the new Task to the TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"     * @param tasks TaskList to be updated if needed","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"     * @param ui Ui for displaying messages in a unique way","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"     * @param storage Storage for updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"        ui.printToFormat(\"Task successfully added:\\n    \" + task);","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"            storage.update(tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"failed to update tasks locally: \" + e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":40}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":" * Command that handles user exiting the program","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"     * determines that user wants to exit the program","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"     * @return boolean: true","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"        return true;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"     * on execution, prints goodbye message","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"     * @param tasks TaskList to be updated if needed","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"     * @param ui Ui for displaying messages in a unique way","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"     * @param storage Storage for updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"        ui.printToFormat(\"Bye, have a nice day.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":30}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":" * an abstract class that determines what to be done after receiving user input","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"     * method to determine what to be done after a command is given","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"     * @param tasks TaskList to be updated if needed","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"     * @param ui Ui for displaying messages in a unique way","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"     * @param storage Storage for updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"     * method that determines whether the user wants to exit the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"     * @return","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"        return false;","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":26}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import duke.dukeexception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":" * Command that handles deleting a Task","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"    private int taskNo;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"     * Constructor that passes in the number of the task to be deleted","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"     * @param n","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"    public DeleteCommand(int n) {","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"        this.taskNo \u003d n;","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"     * on execution, delete the target task from the TaskList and print out customised message","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"     * @param tasks TaskList to be updated if needed","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"     * @param ui Ui for displaying messages in a unique way","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"     * @param storage Storage for updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"            ui.printToFormat(\"The following task is removed:\\n    \" + tasks.remove(taskNo));","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"            storage.update(tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"failed to update tasks locally: \" + e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":45}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":" * Command to find a list of tasks whose name contains a search phrase","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    private String searchLine;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"    public FindCommand(String searchLine) {","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"        this.searchLine \u003d searchLine;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"        ui.printToFormat(tasks.find(searchLine));","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":21}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":" * Command that handles listing all tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"     * on execution, print in style all tasks in the TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"     * @param tasks TaskList to be updated if needed","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"     * @param ui Ui for displaying messages in a unique way","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"     * @param storage Storage for updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"        ui.printToFormat(tasks.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":20}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.dukeexception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":" * Command that handles marking a specific Task as done","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    private int taskNo;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"     * Constructor that takes in the number of the Task to be marked","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"     * @param n","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"    public MarkCommand(int n) {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"        this.taskNo \u003d n;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"     * on execution, mark the target Task in the TaskList as done and print out customised message","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"     * @param tasks TaskList to be updated if needed","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"     * @param ui Ui for displaying messages in a unique way","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"     * @param storage Storage for updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"            ui.printToFormat(\"Marked as completed:\\n    \" + tasks.mark(taskNo));","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"            storage.update(tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"failed to update tasks locally: \" + e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":43}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.dukeexception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":" * Command that handles marking a specific task in the TaskList as undone","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"    private int taskNo;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"    public UnmarkCommand(int n) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"        this.taskNo \u003d n;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"     * on execution, mark the target Task in the TaskList as undone and print out customised message","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"     * @param tasks TaskList to be updated if needed","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"     * @param ui Ui for displaying messages in a unique way","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"     * @param storage Storage for updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"            ui.printToFormat(\"Marked as yet to complete:\\n    \" + tasks.unmark(taskNo));","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"            storage.update(tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"failed to update tasks locally: \" + e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":39}},{"path":"src/main/java/duke/commandtype/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.commandtype;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":" * a list of valid Commands as enum","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"public enum CommandType {","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"    BYE, LIST, MARK, UNMARK, DELETE, TODO, DEADLINE, EVENT, FIND","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":8}},{"path":"src/main/java/duke/dukeexception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.dukeexception;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":" * class that handles exceptions unique to the Duke application","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"        super(message);","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"     * @param inputLine a line of command entered by the user, to be checked if it is valid","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"     * @throws DukeException throws a customised exception message if the command input is not valid","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    public static void checkInput(String inputLine) throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"        if (inputLine.equals(\"deadline\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"        } else if (inputLine.equals(\"todo\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"        } else if (inputLine.equals(\"event\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"        } else if (inputLine.equals(\"delete\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(\"☹ OOPS!!! Please specify which task to delete.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":25}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"import duke.commandtype.CommandType;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"import duke.dukeexception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":" * class that helps with interpreting user input","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"public class Parser {","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"     * method that determines what command to run","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"     * @param inputLine a String input by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"     * @return a Command depending on what the user has input","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"     * @throws DukeException if the input is not recognised","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"    public static Command parse(String inputLine) throws DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"            DukeException.checkInput(inputLine);","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"            String[] words \u003d inputLine.split(\" \");","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"            CommandType commandtype \u003d CommandType.valueOf(words[0].toUpperCase());","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"            switch (commandtype) {","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"            case BYE:","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"                return new ByeCommand();","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"            case LIST:","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"                return new ListCommand();","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"            case MARK:","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"                int taskNoMark \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"                return new MarkCommand(taskNoMark);","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"            case UNMARK:","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"                int taskNoUnmark \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"                return new UnmarkCommand(taskNoUnmark);","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"            case DEADLINE:","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"                String[] parts \u003d inputLine.split(\"/\");","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":"                Deadline task \u003d new Deadline(parts[0].split(\" \", 2)[1], 0, parts[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"                return new AddCommand(task);","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"NBQian"},"content":"            case EVENT:","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"NBQian"},"content":"                String[] parts1 \u003d inputLine.split(\" /\");","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"NBQian"},"content":"                Event event \u003d new Event(parts1[0].split(\" \", 2)[1], 0, parts1[1], parts1[2]);","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"NBQian"},"content":"                return new AddCommand(event);","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"NBQian"},"content":"            case TODO:","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"NBQian"},"content":"                Todo todo \u003d new Todo(inputLine.split(\" \", 2)[1], 0);","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"NBQian"},"content":"                return new AddCommand(todo);","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"NBQian"},"content":"            case DELETE:","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"NBQian"},"content":"                return new DeleteCommand(Integer.parseInt(words[1]));","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"NBQian"},"content":"            case FIND:","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"NBQian"},"content":"                return new FindCommand(inputLine.split(\" \", 2)[1]);","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"NBQian"},"content":"            default:","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"NBQian"},"content":"                throw new DukeException(\"Not a valid command: \" + inputLine);","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"NBQian"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"NBQian"},"content":"            throw e;","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"NBQian"},"content":"     * public method to interpret user input time","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"NBQian"},"content":"     * @param input a String representing time in the format dd-MM-yyyy HHmm","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"NBQian"},"content":"     * @return a LocalDateTime to be stored in the Task object","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"NBQian"},"content":"    public static LocalDateTime formatDateTime(String input) {","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"NBQian"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"NBQian"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(input, formatter);","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"NBQian"},"content":"        return dateTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"NBQian"},"content":"     * reverse the process of the previous method for easy storage of the tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"NBQian"},"content":"     * @param input a LocalDateTime stored by the Task object","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"NBQian"},"content":"     * @return a String representing the original user input time","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"NBQian"},"content":"    public static String reverseFormatDateTime(LocalDateTime input) {","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"NBQian"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"NBQian"},"content":"        return input.format(formatter);","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"NBQian"},"content":"     * Transforms the saved LocalDateTime time to one that is more readable","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"NBQian"},"content":"     * @param dateTime LocalDateTime saved by Task object","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"NBQian"},"content":"     * @return a readable time as a String","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"NBQian"},"content":"    public static String transformDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"NBQian"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy \u0027at\u0027 HH:mm\");","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"NBQian"},"content":"        return dateTime.format(outputFormatter);","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":104}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.io.File;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"import duke.dukeexception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":" * class that handles saving and reading tasks saved on the local hard disk","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"public class Storage {","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"    private File allTasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"    private File taskFolder;","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"     * Constructor","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"     * @param filePath A string representing the location of the local file containing all tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"     * @param folderPath A string representing the location of the folder containing the above file","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"    public Storage(String filePath, String folderPath) {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"        this.allTasks \u003d new File(filePath);","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"        this.taskFolder \u003d new File(folderPath);","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"     * a method that loads the local tasks into the TaskList if they exist. prints customised","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"     * messages if the file and/or folder does not exist, and create them accordingly","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"     * @return an empty ArrayList of Tasks if no local tasks are found, or an ArrayList","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"     *         containing all local tasks if they are found.","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"        ArrayList\u003cTask\u003e defaultTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"        if (!taskFolder.exists()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"---The default duke.task.Task Folder is not found, creating data folder...\");","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"            taskFolder.mkdir();","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"---Task Folder created successfully\");","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"            File f \u003d new File(taskFolder, \"task.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"                f.createNewFile();","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"                System.out.printf(\"---Task File created successfully\\n---ready to create tasks\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"                throw new DukeException(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"        } else if (!allTasks.exists()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"The default tasks do not exist, creating default task file...\");","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"NBQian"},"content":"            File f \u003d new File(taskFolder, \"task.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"NBQian"},"content":"                f.createNewFile();","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"NBQian"},"content":"                System.out.printf(\"---Task File created successfully\\n---ready to create tasks\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"NBQian"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"NBQian"},"content":"                throw new DukeException(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"NBQian"},"content":"            try {","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"NBQian"},"content":"                defaultTasks \u003d loadDefaultTasks(new ArrayList\u003cTask\u003e(), allTasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"NBQian"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"NBQian"},"content":"                throw new DukeException(\"Could not load the default tasks: \" + e.getMessage());","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"NBQian"},"content":"            System.out.println(\"\\n\\n---Default duke.task.Task List successfully loaded\\n\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"NBQian"},"content":"        return defaultTasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"NBQian"},"content":"     * method that loads all local tasks to an ArrayList of Tasks to be passed to TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"NBQian"},"content":"     * @param tasks default ArrayList of Tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"NBQian"},"content":"     * @param file local file that contains all local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"NBQian"},"content":"     * @return an ArrayList of Tasks containing all local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"NBQian"},"content":"     * @throws FileNotFoundException if the local file is not found.","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"NBQian"},"content":"    private static ArrayList\u003cTask\u003e loadDefaultTasks(ArrayList\u003cTask\u003e tasks, File file)","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"NBQian"},"content":"            throws FileNotFoundException {","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"NBQian"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"NBQian"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"NBQian"},"content":"            String[] lineArr \u003d s.nextLine().split(\"/\");","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"NBQian"},"content":"            switch (lineArr[0]) {","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"NBQian"},"content":"            case \"D\":","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"NBQian"},"content":"                tasks.add(new Deadline(lineArr[1], Integer.parseInt(lineArr[2]), lineArr[3]));","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"NBQian"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"NBQian"},"content":"            case \"T\":","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"NBQian"},"content":"                tasks.add(new Todo(lineArr[1], Integer.parseInt(lineArr[2])));","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"NBQian"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"NBQian"},"content":"            case \"E\":","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"NBQian"},"content":"                tasks.add(new Event(lineArr[1], Integer.parseInt(lineArr[2]), lineArr[3], lineArr[4]));","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"NBQian"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"NBQian"},"content":"            default:","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"NBQian"},"content":"                continue;","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"NBQian"},"content":"        s.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"NBQian"},"content":"        return tasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"NBQian"},"content":"     * method used to update the locally saved tasks according to the TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"NBQian"},"content":"     * @param tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"NBQian"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"NBQian"},"content":"    public void update(TaskList tasks) throws IOException {","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"NBQian"},"content":"        FileWriter fw \u003d new FileWriter(this.allTasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"NBQian"},"content":"        fw.write(tasks.getWriteString());","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"NBQian"},"content":"        fw.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":114,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":114}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":" * A Deadline task comes with a deadline","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    protected final LocalDateTime deadline;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"     * @param name a string indicating the name of the task","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"     * @param status a String indicating whether the task is done or not","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"     * @param deadline a string indicating the deadline of the task","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"    public Deadline(String name, int status, String deadline) {","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"        super(name, status);","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"        this.deadline \u003d Parser.formatDateTime(deadline);","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"     * private method that helps to store the status of the task as binary numbers","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"     * @return 0 is the task is not done, 1 if the task is done.","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"    private int getStatusNo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"        if (super.status.equals(\"[ ]\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"            return 0;","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"            return 1;","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"     * overrides the toString method: displays the type, then status, then name, then deadline","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"        return \"[D]\" + status + \" \" + name + \"(by \" + Parser.transformDateTime(deadline) + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"     * method that helps with updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"     * @return a String to be written to local hard disk","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"        return String.format(\"D/%s/%d/%s\", super.name, this.getStatusNo(),","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"                Parser.reverseFormatDateTime(deadline));","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":50}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":" * an Event is a task that has a starting time and an ending time","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    protected final LocalDateTime from;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"    protected final LocalDateTime to;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"     * @param name a string indicating thename of the duke.task.Event task","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"     * @param status a String that checks if the duke.task.Event is done or not","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"     * @param from a string representing the starting time passed in by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"     * @param to a string representing the ending time passed in by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"    public Event(String name, int status, String from, String to) {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"        super(name, status);","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"        this.from \u003d Parser.formatDateTime(from);","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"        this.to \u003d Parser.formatDateTime(to);","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"     * private method that helps with saving the Task status in binary numbers","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"     * @return 0 is the task is not done, 1 if the task is done.","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"    private int getStatusNo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"        if (super.status.equals(\"[ ]\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"            return 0;","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"            return 1;","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"     * overrrides toString method: displayes type, then status, then name, then start time, then","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"     * ending time.","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"        return String.format(\"[E]%s %s (from %s to %s)\", status, name,","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"                Parser.transformDateTime(from), Parser.transformDateTime(to));","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"     * method that helps with updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"     * @return a string to be written to the local hard disk","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"        return String.format(\"E/%s/%d/%s/%s\", super.name, this.getStatusNo(),","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":"                Parser.reverseFormatDateTime(from), Parser.reverseFormatDateTime(to));","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":55}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":" * class that represents tasks created by the user, can be marked as done or undone","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"public class Task {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"    protected String name;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"    protected String status;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"     * Constructor","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"     * @param name the name of the task","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"     * @param status a number that indicates the task is done if it is 1","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"    public Task(String name, int status) {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"        if (status \u003d\u003d 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"            this.status \u003d \"[X]\";","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"            this.status \u003d \"[ ]\";","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"     * method to update a task as done.","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"    public void mark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"        this.status \u003d \"[X]\";","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"     * method to update a task as undone","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"        this.status \u003d \"[ ]\";","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"     * a method that helps with updating local hard disk","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"     * @return a Strnig to be written to the local hard disk","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"        return \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":45}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":" * A Todo is a Task that does not have any time limit","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"     * @param name a String indicating the name of the todo task","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"     * @param status an int indicating whether the task is done","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    public Todo(String name, int status) {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"        super(name, status);","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    private int getStatusNo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"        if (super.status.equals(\"[ ]\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"            return 0;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"            return 1;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"     * overrides toString method to display the type of the task, its status, and then its name.","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"        return \"[T]\" + status + \" \" + name;","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"     * method that helps with updating local tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"     * @return a String to be written to local hard disk","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"    public String toStoreFormatString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"        return String.format(\"T/%s/%d\", super.name, this.getStatusNo());","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":38}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.tasklist;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import duke.dukeexception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":" * A TaskList stores all tasks temporarily for easy access of the tasks while the program is","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":" * running. It behaves like an ArrayList of Tasks but supports more functions such as updating tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":" * and formatting itself to be saved to the local hard disk.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"public class TaskList {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"     * @return all the tasks row by row","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"            return \"You do not have any tasks yet\";","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"        sb.append(\"All Tasks:\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"            sb.append(\"    \" + i + \". \" + tasks.get(i - 1) + \"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"        return sb.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"     * a method that marks a particular task as \"Done\"","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"     * @param taskNumber the number of the Task to be marked","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"     * @return the updated Task","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"     * @throws DukeException if the user wants to mark a Task that does not exist","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"NBQian"},"content":"    public Task mark(int taskNumber) throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"NBQian"},"content":"            tasks.get(taskNumber - 1).mark();","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"NBQian"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"NBQian"},"content":"                    \"duke.task.Task does not exist, current number of tasks: \" + tasks.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"NBQian"},"content":"        return tasks.get(taskNumber - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"NBQian"},"content":"     * Similar to mark, unmark marks a Task as \"not done\".","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"NBQian"},"content":"     * @param taskNumber the number of the Task to be unmarked","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"NBQian"},"content":"     * @return the updated Task","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"NBQian"},"content":"     * @throws DukeException if the user wants to unmark a Task that does not exist","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"NBQian"},"content":"    public Task unmark(int taskNumber) throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"NBQian"},"content":"            tasks.get(taskNumber - 1).unmark();","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"NBQian"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"NBQian"},"content":"                    \"duke.task.Task does not exist, current number of tasks: \" + tasks.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"NBQian"},"content":"        return tasks.get(taskNumber - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"NBQian"},"content":"     * a method that removes a Task from the list","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"NBQian"},"content":"     * @param taskNumber the number of the Task to be removed","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"NBQian"},"content":"     * @return the removed Task","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"NBQian"},"content":"     * @throws DukeException if the user wants to remove a task that does not exist","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"NBQian"},"content":"    public Task remove(int taskNumber) throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"NBQian"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"NBQian"},"content":"            return tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"NBQian"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"NBQian"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"NBQian"},"content":"                    \"duke.task.Task does not exist, current number of tasks: \" + tasks.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"NBQian"},"content":"     * method used to find all tasks that contains the search phrase","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"NBQian"},"content":"     * @param searchLine a String that is the phrase user is interested in","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"NBQian"},"content":"     * @return a String that represents all target tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"NBQian"},"content":"    public String find(String searchLine) {","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"NBQian"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"NBQian"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"NBQian"},"content":"            if (task.toString().contains(searchLine)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"NBQian"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"NBQian"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"NBQian"},"content":"        if (foundTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"NBQian"},"content":"            return \"No related tasks found\";","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"NBQian"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"NBQian"},"content":"        sb.append(\"Found related tasks:\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"NBQian"},"content":"        for (int i \u003d 1; i \u003c\u003d foundTasks.size(); i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"NBQian"},"content":"            sb.append(\"    \" + i + \". \" + foundTasks.get(i - 1) + \"\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":110,"author":{"gitId":"NBQian"},"content":"        return sb.toString();","lastModifiedDate":"2023-01-31"},{"lineNumber":111,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"NBQian"},"content":"     * method that helps write the Tasks to the local hard drive","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"NBQian"},"content":"     * @return a String to be written to the local file containing all Tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"NBQian"},"content":"    public String getWriteString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"NBQian"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":119,"author":{"gitId":"NBQian"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-01-30"},{"lineNumber":120,"author":{"gitId":"NBQian"},"content":"            sb.append(task.toStoreFormatString() + System.lineSeparator());","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"NBQian"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"NBQian"},"content":"        return sb.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":123,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":124,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":124}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":" * this class is mainly used for displaying and formatting messages.","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"public class Ui {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"     * the welcome message to be displayed when the programm starts running","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"    private String welcomeMessage \u003d \"Hello from\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"        + \" ____        _        \\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"        + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"        + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"NBQian"},"content":"        + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"NBQian"},"content":"        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"NBQian"},"content":"    public void welcome() {","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"NBQian"},"content":"        System.out.println(welcomeMessage);","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"NBQian"},"content":"     * method to take in user input","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"NBQian"},"content":"     * @return a String that is the same as what the use has input","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"NBQian"},"content":"    public String readCommand() {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"NBQian"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"NBQian"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"NBQian"},"content":"        return input;","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"NBQian"},"content":"     * Displays an error message if the default tasks cannot be loaded.","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"NBQian"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"NBQian"},"content":"        this.printToFormat(\"Sorry, default tasks could not be loaded, starting a fresh task list\");","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"NBQian"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"NBQian"},"content":"     * a unique way to display all non-error messages","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"NBQian"},"content":"     * @param message a String to be displayed","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"NBQian"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"NBQian"},"content":"    public void printToFormat(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"NBQian"},"content":"        String lineBreak1 \u003d \"--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e--\u003e\\n    \";","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"NBQian"},"content":"        String lineBreak2 \u003d \"\\n\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\u003c--\\n\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"NBQian"},"content":"        System.out.println(lineBreak1 + message + lineBreak2);","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":48}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"public class EventTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"    public void testToString() {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"        assertEquals(","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"                \"[E][ ] finish individual project (from Jan 01 2023 at 00:00 to Aug 08 2023 at 23:59)\",","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"                new Event(\"finish individual project\", 0, \"01-01-2023 0000\", \"08-08-2023 2359\")","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"NBQian"},"content":"                        .toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"NBQian":15}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"package duke.task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"NBQian"},"content":"    public void testToString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"NBQian"},"content":"        assertEquals(new Todo(\"finish individual project\", 0).toString(), \"[T][ ] finish individual project\");","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"NBQian"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"NBQian"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"NBQian":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NBQian"},"content":"todo borrow book","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"NBQian"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"NBQian"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"NBQian"},"content":"mark 1","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"NBQian"},"content":"mark 2","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"NBQian"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"NBQian"},"content":"bye","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"NBQian":8}}]
