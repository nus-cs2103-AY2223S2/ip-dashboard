[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Nicklelodeon":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Nicklelodeon":1,"-":40}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"T | 0 | eat food","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"T | 0 | run around","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"D | 0 |  tern  | 2022-01-02","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"E | 0 |  turn aorund  | 2011-09-02 2011-01-02","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Nicklelodeon":4}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":" * Deadline is a subclass of Task. It contains a specified deadline for a task.","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"    LocalDate date;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"     * Constructor for Deadline","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"     * @param description Details of the Deadline task","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"     * @param isDone Keeps track of whether the Deadline task is completed","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"     * @param duration Due date of the Deadline task, formatted as yyyy-mm-dd","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"     * @throws NeroException When the date is entered in the incorrect format (not yyyy-mm-dd)","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"    public Deadline(String description, boolean isDone,","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"            String duration) throws NeroException {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"            this.date \u003d LocalDate.parse(duration);","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Invalid Date!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"     * Similar as above constructor, except it initialises isDone to False by default","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"    public Deadline(String description, String duration)","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"            throws NeroException {","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"            this.date \u003d LocalDate.parse(duration.trim());","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Invalid Date!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"     * @return String of task icon","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"        return \"D\";","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"     * @return String formatted as d MMM yyyy (e.g 1 Jan 2020)","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"    String dateFormatter() {","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"        return \"by: \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"Nicklelodeon"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"Nicklelodeon"},"content":"     * @return String with task formatted to be saved into duke.txt","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"Nicklelodeon"},"content":"    public String toSave() {","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"Nicklelodeon"},"content":"        return this.getTaskIcon() + SEPARATOR + convertBoolean()","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Nicklelodeon"},"content":"                + SEPARATOR + this.getDescription()","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Nicklelodeon"},"content":"                + SEPARATOR + this.date;","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Nicklelodeon"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Nicklelodeon"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Nicklelodeon"},"content":"        return String.format(\"[%s]%s %s %s\",","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"Nicklelodeon"},"content":"                this.getTaskIcon(), this.getStatusIcon(),","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"Nicklelodeon"},"content":"                this.getDescription(), this.dateFormatter());","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Nicklelodeon":77}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":" * Duke is the main class of this app and runs the program.","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"public class Duke {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"    public static final String DIRECTORY_PATH \u003d \"data\";","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"    public static final String FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"    Storage storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"    TaskList\u003cTask\u003e taskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"    Parser parser;","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"    Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"     * Constructor for Duke","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"     * @param filePath Contains file path to the saved duke.txt file","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"     * @param directoryPath Contains directory path to the saved duke.txt file","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"    public Duke(String filePath, String directoryPath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"        this.storage \u003d new Storage(filePath, directoryPath);","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"            this.taskList \u003d storage.readFile();","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (NeroException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"            this.taskList \u003d new TaskList\u003cTask\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"     * Runs the program and catches IOException if file is not found","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"     * or NeroException if an error occurs, printing the error message","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"     * accordingly","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"    public void run() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"        boolean toEnd \u003d false;","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"        while (!toEnd) {","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"            String originalString \u003d ui.readLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"            try {","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"                toEnd \u003d parser.parseCommand(originalString, taskList, ui);","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"                storage.saveFile(taskList);","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"                ui.printFileNotFound();","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"            } catch (NeroException ne) {","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"                ne.printStackTrace();","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"        new Duke(FILE_PATH, DIRECTORY_PATH).run();","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"Nicklelodeon":59}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":" * Event is a subclass of Task. It specifies the start date and","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":" * end date of a task.","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"    LocalDate startDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"    LocalDate endDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"     * Constructor for Event","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"     * @param description Contains details on the Event","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"     * @param isDone Keeps track of whether the Event is completed","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"     * @param startDate Date where the Event starts","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"     * @param endDate Date where the Event ends","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"     * @throws NeroException Thrown when date is formatted incorrectly (not in yyyy-mm-dd)","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"    public Event(String description, boolean isDone,","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"                 String startDate, String endDate) throws NeroException {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"            this.startDate \u003d LocalDate.parse(startDate);","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"            this.endDate \u003d LocalDate.parse(endDate);","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Invalid Date!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"     * Same as above constructor, except isDone is initialised to False","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"     * @param description","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"     * @param startDate","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"     * @param endDate","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"     * @throws NeroException","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"    public Event(String description, String startDate,","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"            String endDate) throws NeroException {","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"            this.startDate \u003d LocalDate.parse(startDate.trim());","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"            this.endDate \u003d LocalDate.parse(endDate.trim());","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Invalid Date!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"     * @return String formatted as d MMM yyyy","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"    public String dateFormatter() {","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"        return \"from: \" + startDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \" to: \"","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"                + endDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"Nicklelodeon"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"Nicklelodeon"},"content":"        return \"E\";","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Nicklelodeon"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Nicklelodeon"},"content":"     * @return String with task formatted to be saved into duke.txt","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"Nicklelodeon"},"content":"    public String toSave() {","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Nicklelodeon"},"content":"        return this.getTaskIcon() + SEPARATOR + convertBoolean()","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"Nicklelodeon"},"content":"                + SEPARATOR + this.getDescription()","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"Nicklelodeon"},"content":"                + SEPARATOR + this.startDate + \" \" + this.endDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"Nicklelodeon"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"Nicklelodeon"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Nicklelodeon"},"content":"        return String.format(\"[%s]%s %s %s\", this.getTaskIcon(),","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"Nicklelodeon"},"content":"                this.getStatusIcon(), this.getDescription(),","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"Nicklelodeon"},"content":"                this.dateFormatter());","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Nicklelodeon":82}},{"path":"src/main/java/duke/NeroException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":" * Class of exceptions that inherit from Exception","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"public class NeroException extends Exception {","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"    public NeroException(String errorMessage) {","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Nicklelodeon":11}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"    package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"    * Handles the reading and execution of inputs","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"    */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"    public class Parser {","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"    int counter;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"    enum Types {LIST, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, BYE, FIND}","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"    Parser() {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"     * Reads input from user and splits it into cases based on Types specified","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"     * in enum Types","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"     * @param originalString Input from user","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"     * @param taskList List containing all current tasks","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"     * @param ui Ui that runs output","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"     * @return Boolean based on input. Only returns true when command is bye, which","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"     * exits the chat bot. Else, returns false which continues the chat bot","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"     * @throws NeroException Throws an exception depending on the exception faced","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"    boolean parseCommand(String originalString, TaskList\u003cTask\u003e taskList, Ui ui)","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"    throws NeroException {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"    try {","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"    String[] input \u003d originalString.split(\" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"    switch (Enum.valueOf(Types.class, input[0].toUpperCase())) {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"    case BYE:","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"        ui.printGoodbyeMessage();","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"        return true;","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"    case LIST:","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"        ui.printTasksMessage();","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"        taskList.printTasks();","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"    case MARK: {","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"            int taskToMark \u003d Integer.parseInt(input[1]) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"            Task currTask \u003d taskList.get(taskToMark);","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"            currTask.setAsDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printMarkedTaskMessage(currTask.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Please add the correct index from 0 to \"","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"                    + taskList.getSize());","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"    case UNMARK: {","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"            int taskToUnmark \u003d Integer.parseInt(input[1]) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"            Task currTask \u003d taskList.get(taskToUnmark);","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"            currTask.setAsUndone();","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printUnmarkedTaskMessage(currTask.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Please add the correct index from 0 to \"","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"                    + taskList.getSize());","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Nicklelodeon"},"content":"    case TODO:","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Nicklelodeon"},"content":"        int index \u003d originalString.indexOf(\"todo\");","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Nicklelodeon"},"content":"            String toAdd \u003d originalString.substring(index + 5);","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"Nicklelodeon"},"content":"            Task newTask \u003d new ToDo(toAdd);","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"Nicklelodeon"},"content":"            taskList.addTask(newTask);","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printAddedTasks(newTask.toString(), taskList.getSize());","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Description cannot be empty!!!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Nicklelodeon"},"content":"    case DEADLINE:","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"Nicklelodeon"},"content":"            String[] splitString \u003d originalString.split(\"/\");","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"Nicklelodeon"},"content":"            String description \u003d splitString[0].replace(\"deadline\", \"\");","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"Nicklelodeon"},"content":"            String duration \u003d splitString[1].replace(\"by\", \"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"Nicklelodeon"},"content":"            Task newTask \u003d new Deadline(description, duration);","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"Nicklelodeon"},"content":"            taskList.addTask(newTask);","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printAddedTasks(newTask.toString(), taskList.getSize());","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"Nicklelodeon"},"content":"            System.out.println(\"Add a task description and deadline!!!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Nicklelodeon"},"content":"    case EVENT:","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Nicklelodeon"},"content":"            String[] splitString \u003d originalString.split(\"/\");","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Nicklelodeon"},"content":"            String description \u003d splitString[0].replace(\"event\", \"\");","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"Nicklelodeon"},"content":"            String startDate \u003d splitString[1].replace(\"from\", \"\") ;","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"Nicklelodeon"},"content":"            String endDate \u003d splitString[2].replace(\"to\", \"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"Nicklelodeon"},"content":"            Task newTask \u003d new Event(description, startDate, endDate);","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"Nicklelodeon"},"content":"            taskList.addTask(newTask);","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printAddedTasks(newTask.toString(), taskList.getSize());","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Add a task description, from and to date!!!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Nicklelodeon"},"content":"    case DELETE:","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"Nicklelodeon"},"content":"            int toDelete \u003d Integer.parseInt(input[1]) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"Nicklelodeon"},"content":"            Task removedTask \u003d taskList.get(toDelete);","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"Nicklelodeon"},"content":"            taskList.removeTask(toDelete);","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printDeletedTasks(removedTask.toString(), taskList.getSize());","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":105,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Add a correct task number\");","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":107,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Nicklelodeon"},"content":"    case FIND:","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"Nicklelodeon"},"content":"        TaskList\u003cTask\u003e newTaskList \u003d new TaskList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"Nicklelodeon"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"Nicklelodeon"},"content":"            if (taskList.get(i).containsWord(input[1])) {","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"Nicklelodeon"},"content":"                newTaskList.addTask(taskList.get(i));","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"Nicklelodeon"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"Nicklelodeon"},"content":"        if (newTaskList.getSize() \u003e 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printMatchingTasks();","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"Nicklelodeon"},"content":"            newTaskList.printTasks();","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"Nicklelodeon"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"Nicklelodeon"},"content":"            ui.printNoMatchingTasks();","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"Nicklelodeon"},"content":"    default:","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"Nicklelodeon"},"content":"        return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"Nicklelodeon"},"content":"    } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":126,"author":{"gitId":"Nicklelodeon"},"content":"    ui.printWrongInput();","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"Nicklelodeon"},"content":"    return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":128,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":130,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"Nicklelodeon":130}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"import java.io.File;","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":" * Handles the reading, writing and saving of duke.txt file","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"public class Storage {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"    String filePath;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"    String directoryPath;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"     * Constructor for Storage","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"     * @param filePath String containing file path where duke.txt is stored","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"     * @param directoryPath String containing directory path where duke.txt is stored","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"    public Storage(String filePath, String directoryPath) {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"        this.directoryPath \u003d directoryPath;","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"     * Reads the duke.txt file and saves the saved tasks into a task list","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"     * @return Task list containing saved tasks","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"     * @throws NeroException Throws when file is not found","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"    TaskList\u003cTask\u003e readFile() throws NeroException {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"        TaskList\u003cTask\u003e taskList \u003d new TaskList\u003cTask\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"        File directory \u003d new File(directoryPath);","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"            directory.mkdirs();","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"                String line \u003d sc.nextLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"                String[] cleanedInputs \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"                boolean isDone \u003d (cleanedInputs[1].equals(\"0\")) ? false : true;","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"                if (cleanedInputs[0].equals(\"T\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"                    taskList.addTask(new ToDo(cleanedInputs[2], isDone));","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"                } else if (cleanedInputs[0].equals(\"D\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"                    String cleanedDuration \u003d cleanedInputs[3].replace(\"by:\", \"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"                    taskList.addTask(new Deadline(cleanedInputs[2], isDone, cleanedDuration));","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"                } else if (cleanedInputs[0].equals(\"E\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"                    String[] splitDates \u003d cleanedInputs[3].split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"                    String cleanedStartDate \u003d splitDates[0].replace(\"from: \", \"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"                    String cleanedEndDate \u003d splitDates[1].replace(\"to: \", \"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"                    taskList.addTask(new Event(cleanedInputs[2], isDone,","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"                            cleanedStartDate, cleanedEndDate));","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"            sc.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"            return taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"File was not found!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"Nicklelodeon"},"content":"     * Saves the current task list into duke.txt file","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"Nicklelodeon"},"content":"     * @param taskList Task list containing all current tasks","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Nicklelodeon"},"content":"     * @throws IOException Throws when file is not found","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Nicklelodeon"},"content":"    void saveFile(TaskList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Nicklelodeon"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"Nicklelodeon"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"Nicklelodeon"},"content":"                fw.write(taskList.get(i).toSave() + \"\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Nicklelodeon"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"Nicklelodeon"},"content":"            fw.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"Nicklelodeon"},"content":"            System.out.println(\"The file was not found!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"Nicklelodeon":80}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":" * Task is the parent class of ToDo, Event and Deadline. It contains description","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":" * of task and its completion status.","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"    public static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"    String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"    boolean isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"     * Constructor for Task","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"     * @param description Details of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"     * @param isDone Keeps track of whether task is completed","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"     * Same as above constructor, except isDone is initalised to false","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"    String getDescription() {","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"        return this.description;","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"     * Converts true to 1 and false to 0 to be saved in duke.txt","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"     * @return 1 if true else 0","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"    String convertBoolean() {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"        return (this.isDone) ? \"1\" : \"0\";","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"    String getStatusIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"     * Sets task as completed","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"    void setAsDone() {","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"     * Sets task as uncompleted","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"    public void setAsUndone(){","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"Nicklelodeon"},"content":"     * Finds tasks that contain word in their description","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"Nicklelodeon"},"content":"     * @param word String containing common prefix","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"Nicklelodeon"},"content":"     * @return true if the description of the task contains word","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"Nicklelodeon"},"content":"     * else false","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Nicklelodeon"},"content":"    boolean containsWord(String word) {","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Nicklelodeon"},"content":"        return (description.indexOf(word) \u003d\u003d -1) ? false : true;","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"Nicklelodeon"},"content":"    public abstract String toSave();","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Nicklelodeon":74}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":" * TaskList stores all current tasks","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":" * @param \u003cTask\u003e","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"public class TaskList\u003cTask\u003e {","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"    ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"     * Constructor for TaskList, uses an ArrayList containing tasks","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"    void addTask(Task task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"     * @param index location of the task in the TaskList","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"     * @return Task at the index of the TaskList","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"    Task get(int index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"        return taskList.get(index);","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"     * Removes task from taskList","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"     * @param index location of the task to be removed","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"     * @throws NeroException Throws when index does not exist","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"    void removeTask(int index) throws NeroException {","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"            this.taskList.remove(index);","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"            throw new NeroException(\"Please enter a valid index from 0 to \"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"                    + (this.taskList.size() - 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"     * Prints the toString of all tasks in the taskList","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"    void printTasks() {","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"            System.out.println(taskList.get(i));","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"    int getSize() {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"        return taskList.size();","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Nicklelodeon":58}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":" * ToDo is a subclass of Task. It is the most general as it only","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":" * contains the description of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"     * Constructor for ToDo","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"     * @param description Details of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"     * @param isDone Keeps track of whether the task is completed","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"     * Same as above constructor, but with isDone initialised as false","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"    public ToDo(String description) {super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"        return \"T\";","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"     * @return String with task formatted to be saved into duke.txt","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"    public String toSave() {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"        return this.getTaskIcon() + SEPARATOR + convertBoolean()","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"                + SEPARATOR + this.getDescription();","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"    public String toString() {","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"        return String.format(\"[%s]%s %s\", this.getTaskIcon(),this.getStatusIcon(),","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"                this.getDescription());","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"Nicklelodeon":39}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":" * Takes charge of the output and interactions with user","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":" *","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"public class Ui {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"    private Scanner sc;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"    public Ui() {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"    String readLine() {","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"     * Prints welcome message to user when user first starts","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"     * the program","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"    void printWelcomeMessage() {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Hi, I\u0027m Nero and I am an automated chat bot\"","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"                + \"\\n\" + \"What would you like to do?\");","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Nicklelodeon"},"content":"     * Prints goodbye message when user exits","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Nicklelodeon"},"content":"     * the program with \"bye\" command","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Nicklelodeon"},"content":"    void printGoodbyeMessage() {","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Goodbye! Hope to see you again XOXO\");","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Nicklelodeon"},"content":"    void printTasksMessage() {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Here are all your tasks!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"Nicklelodeon"},"content":"     * Prints the completed task","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Nicklelodeon"},"content":"     * @param string the toString() of the task that is marked","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Nicklelodeon"},"content":"     * as done","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Nicklelodeon"},"content":"    void printMarkedTaskMessage(String string) {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Good job on completing this task!\" + \"\\n\" + string);","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Nicklelodeon"},"content":"     * Prints the uncompleted task","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Nicklelodeon"},"content":"     * @param string The toString() of the task that is marked","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Nicklelodeon"},"content":"     * as undone","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Nicklelodeon"},"content":"    void printUnmarkedTaskMessage(String string) {","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Remember to complete this task!!\" + \"\\n\" + string);","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"Nicklelodeon"},"content":"     * Prints the added task and total tasks in the list","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"Nicklelodeon"},"content":"     * @param string The toString() of the task added","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"Nicklelodeon"},"content":"     * @param size The current size of the taskList","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"Nicklelodeon"},"content":"    void printAddedTasks(String string, int size) {","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(String.format(\"Got it! I\u0027ve added this task to the list!\"","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"Nicklelodeon"},"content":"                + \"\\n\" + \"%s\" + \"\\n\" + \"Now you have %d tasks in the list!\"","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Nicklelodeon"},"content":"                + \"\\n\", string, size));","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"Nicklelodeon"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"Nicklelodeon"},"content":"     * Prints the deleted task and total tasks in the list","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"Nicklelodeon"},"content":"     * @param string The toString() of the task deleted","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"Nicklelodeon"},"content":"     * @param size The current size of the taskList","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"Nicklelodeon"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"Nicklelodeon"},"content":"    void printDeletedTasks(String string, int size) {","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(String.format(\"Alright, let me remove this task...\"","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"Nicklelodeon"},"content":"                + \"\\n\" + \"%s\" + \"\\n\" + \"Now you have %d tasks in the list!\"","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"Nicklelodeon"},"content":"                + \"\\n\", string, size));","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"Nicklelodeon"},"content":"    void printWrongInput() {","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Wrong input!!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"Nicklelodeon"},"content":"    void printFileNotFound() {","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"File not found :(((\");","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"Nicklelodeon"},"content":"    void printMatchingTasks() {","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Here are the matching tasks in your list: \");","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"Nicklelodeon"},"content":"    void printNoMatchingTasks() {","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"Nicklelodeon"},"content":"        System.out.println(\"Unfortunately there are no matching tasks :((\");","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Nicklelodeon":97}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"    public void testGetTaskIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"            assertEquals(\"D\", new Deadline(\"run around\", \"2019-01-01\").getTaskIcon());","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (NeroException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"    public void testToString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"            assertEquals(\"[D][ ] eat food by: 1 Jan 2019\",","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"                    new Deadline(\"eat food\", \"2019-01-01\").toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (NeroException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Nicklelodeon":27}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"public class EventTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"    public void testGetTaskIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"            assertEquals(\"E\", new Event(\"run around\",","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"                    \"2019-01-01\", \"2020-02-02\").getTaskIcon());","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (NeroException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Nicklelodeon"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Nicklelodeon"},"content":"    public void testToString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Nicklelodeon"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Nicklelodeon"},"content":"            assertEquals(\"[E][ ] eat food from: 1 Jan 2019 to: 2 Jan 2019\",","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Nicklelodeon"},"content":"                    new Event(\"eat food\", \"2019-01-01\", \"2019-01-02\").toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Nicklelodeon"},"content":"        } catch (NeroException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Nicklelodeon"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Nicklelodeon"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Nicklelodeon":28}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Nicklelodeon"},"content":"    public void testGetTaskIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Nicklelodeon"},"content":"        assertEquals(\"T\", new ToDo(\"run around\").getTaskIcon());","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Nicklelodeon"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Nicklelodeon"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Nicklelodeon"},"content":"    public void testToString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Nicklelodeon"},"content":"        assertEquals(\"[T][ ] eat food\", new ToDo(\"eat food\").toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Nicklelodeon"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Nicklelodeon":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Nicklelodeon"},"content":"todo return book","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"Nicklelodeon"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"Nicklelodeon"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"Nicklelodeon"},"content":"mark 2","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"Nicklelodeon"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"Nicklelodeon"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"Nicklelodeon"},"content":"deadline return book ","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"Nicklelodeon"},"content":"event project meeting /from Mon 2pm","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"Nicklelodeon"},"content":"delete 5","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"Nicklelodeon":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Nicklelodeon"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Nicklelodeon":1,"-":20}}]
