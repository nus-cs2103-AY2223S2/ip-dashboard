[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"    mainClassName \u003d \"babe.Babe\"","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"    archiveBaseName \u003d \"babe\"","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ShanHng":17,"-":39}},{"path":"src/main/java/babe/Babe.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import babe.exception.NonsenseInputException;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":" * \u003ch1\u003e Hi Babe! \u003c/h1\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":" * Babe is a chat bot created as part of the individual project (iP) under the course CS2109T.","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":" * It is a duplicate of Duke with some personal flair.","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":" *","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":" * @author Shan Hern Hng","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":" * @version 2.0","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":" * @since 17 January 2023","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"public class Babe {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"     * A TaskList object for this Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    private TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"    protected String welcomeUser() {","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"        // Displays Welcome message","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"        return Ui.welcomeUser();","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"    protected String initializeStorage() {","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"        boolean isFilePresent \u003d Storage.initializeStorage(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"        if (!isFilePresent) {","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"            result \u003d Ui.notifyCreateSaveFile();","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"        return result;","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"    protected String getResponse(String input) {","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"            ArrayList\u003cString\u003e parseOutputs \u003d Parser.parse(input);","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"            String instruction \u003d parseOutputs.get(0);","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"            if (instruction.equals(\"bye\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.sayBye();","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"                System.exit(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"list\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.printList(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"mark\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"                int index \u003d Integer.parseInt(parseOutputs.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"                String taskString \u003d this.taskList.markTask(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"                Storage.save(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.notifyMark(taskString);","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"unmark\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"                int index \u003d Integer.parseInt(parseOutputs.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"                String taskString \u003d this.taskList.unmarkTask(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"                Storage.save(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.notifyUnmark(taskString);","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"todo\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"                String taskString \u003d this.taskList.addToDo(parseOutputs.get(1), false);","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"                Storage.save(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.notifyAddTask(taskString, this.taskList.length());","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"deadline\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"                String taskString \u003d this.taskList.addDeadline(parseOutputs.get(1), parseOutputs.get(2), false);","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"                Storage.save(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.notifyAddTask(taskString, this.taskList.length());","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"event\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"                String taskString \u003d this.taskList.addEvent(parseOutputs.get(1),","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"                        parseOutputs.get(2),","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"                        parseOutputs.get(3),","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"                        false);","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"                Storage.save(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.notifyAddTask(taskString, this.taskList.length());","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"delete\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"                int index \u003d Integer.parseInt(parseOutputs.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"                String removedTaskString \u003d this.taskList.deleteTask(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"                Storage.save(this.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.notifyDelete(removedTaskString, this.taskList.length());","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"ShanHng"},"content":"            } else if (instruction.equals(\"find\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"ShanHng"},"content":"                String searchKey \u003d parseOutputs.get(1);","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"ShanHng"},"content":"                ArrayList\u003cString\u003e foundTasks \u003d this.taskList.findTasks(searchKey);","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"ShanHng"},"content":"                output \u003d Ui.notifyFindResults(foundTasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"ShanHng"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"ShanHng"},"content":"                throw new NonsenseInputException();","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":109,"author":{"gitId":"ShanHng"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"ShanHng"},"content":"            output \u003d Ui.notifyException(e);","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":115,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":116,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":117,"author":{"gitId":"ShanHng"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-11"},{"lineNumber":118,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":119,"author":{"gitId":"ShanHng"},"content":"        Babe babe \u003d new Babe();","lastModifiedDate":"2023-02-11"},{"lineNumber":120,"author":{"gitId":"ShanHng"},"content":"        Ui.welcomeUser();","lastModifiedDate":"2023-02-11"},{"lineNumber":121,"author":{"gitId":"ShanHng"},"content":"        boolean isFilePresent \u003d Storage.initializeStorage(babe.taskList);","lastModifiedDate":"2023-02-11"},{"lineNumber":122,"author":{"gitId":"ShanHng"},"content":"        if (!isFilePresent) {","lastModifiedDate":"2023-02-11"},{"lineNumber":123,"author":{"gitId":"ShanHng"},"content":"            Ui.notifyCreateSaveFile();","lastModifiedDate":"2023-02-11"},{"lineNumber":124,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"ShanHng"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"ShanHng"},"content":"        while (true) {","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"ShanHng"},"content":"            babe.getResponse(scanner.nextLine());","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":130,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":131,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":132,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ShanHng":132}},{"path":"src/main/java/babe/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"        displayPicture.setClip(new Circle(50, 50,50));","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"    private void flip() {","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"    public static DialogBox getBabeDialog(String text, Image img) {","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"        db.flip();","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"        return db;","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ShanHng":68}},{"path":"src/main/java/babe/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"public class Launcher {","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ShanHng":12}},{"path":"src/main/java/babe/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    private Babe babe \u003d new Babe();","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setBabe(babe);","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().welcomeUser();","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"            stage.setTitle(\"Babe\");","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"            stage.getIcons().add(new Image(\"/images/kiss.png\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"            stage.show();","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ShanHng":35}},{"path":"src/main/java/babe/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    private Babe babe;","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"    private Image USER_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    private Image BABE_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/babe.png\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"    public void setBabe(Babe b) {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"        babe \u003d b;","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"    public void welcomeUser() {","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getBabeDialog(this.babe.welcomeUser(), BABE_IMAGE));","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"        String initStorageResults \u003d this.babe.initializeStorage();","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"        if (!initStorageResults.isEmpty()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"            dialogContainer.getChildren().addAll(DialogBox.getBabeDialog(initStorageResults, BABE_IMAGE));","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"    @FXML","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"                DialogBox.getUserDialog(userInput.getText(), USER_IMAGE),","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"                DialogBox.getBabeDialog(babe.getResponse(userInput.getText()), BABE_IMAGE)","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"        );","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ShanHng":60}},{"path":"src/main/java/babe/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import babe.exception.NoDescriptionException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import babe.exception.NonsenseInputException;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import babe.exception.WrongDateFormatException;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":" * The \u003ccode\u003eParser\u003c/code\u003e class deals with making sense of the user command.","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":" * It contains the method parse(String), which is responsible for processing the user input,","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":" * distinguishing the commands and the parameters.","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"class Parser {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     * A string input from user.","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    private static ArrayList\u003cString\u003e userInput \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     * Length of user input.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    private static int userInputLen \u003d 0;","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     * Rebuilds a string from ArrayList from the starting index to the ending index (not inclusive).","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     * A helper function to recover the original user input from userInput starting from the startingIndex","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     * to the ending index (not inclusive).","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"    private static String rebuildUserInput(int startingIndex, int endingIndex) {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"        for (int i \u003d startingIndex; i \u003c endingIndex; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"            result +\u003d userInput.get(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"            result +\u003d \" \";","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"        return result.stripTrailing();","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"     * Finds and returns index of command arguments in userInput demarcated by given String pattern","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"     * @return An integer that is the index of command argument.","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"     * @args pattern A String pattern that precedes the input of command argument","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"    private static int findArgument(String pattern) {","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"        int argIndex \u003d -1;","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"        for (int i \u003d 0; i \u003c userInput.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"            String currentString \u003d userInput.get(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"            if (currentString.equals(pattern)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"                argIndex \u003d i + 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"        return argIndex;","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"     * Formats date specified by user.","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"     * The date will be formatted using java.LocalDate.","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"     * @param dateAndTime A String that contains date and time specified by the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"     * @return A String containing the formatted date and original specified time.","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"    private static String formatDate(String dateAndTime) {","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"        String[] words \u003d dateAndTime.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"        LocalDate d1 \u003d LocalDate.parse(words[0]);","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"        String formattedDateAndTime \u003d Integer.toString(d1.getDayOfMonth()) + \" \"","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"                + d1.getMonth() + \" \" + d1.getYear() + \" \"","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"                + (words.length \u003d\u003d 2 ? words[1] : \"\");","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"        return formattedDateAndTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"     * Returns true if the description is available for an instruction.","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"     * Throws NoDescriptionException if description is not available.","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"     * @return A boolean value;","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"    private static void checkIfDescriptionAvail(int len)","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"            throws NoDescriptionException {","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"        if (len \u003d\u003d 1) {","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"            throw new NoDescriptionException();","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"    public static ArrayList\u003cString\u003e parse(String input)","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"            throws NoDescriptionException, NonsenseInputException, WrongDateFormatException {","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"        userInput \u003d new ArrayList\u003c\u003e(Arrays.asList(input.split(\" \")));","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"        int inputLength \u003d userInput.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"ShanHng"},"content":"        String instruction \u003d userInput.get(0).toLowerCase();","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"ShanHng"},"content":"        ArrayList\u003cString\u003e outputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"ShanHng"},"content":"        outputs.add(instruction);","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"ShanHng"},"content":"        if (instruction.equals(\"bye\") \u0026\u0026 inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"list\") \u0026\u0026 inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"mark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"ShanHng"},"content":"            outputs.add(userInput.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"unmark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"ShanHng"},"content":"            outputs.add(userInput.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"todo\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"ShanHng"},"content":"            checkIfDescriptionAvail(inputLength);","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"ShanHng"},"content":"            String description \u003d Parser.rebuildUserInput(1, inputLength);","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"ShanHng"},"content":"            outputs.add(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"deadline\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"ShanHng"},"content":"            checkIfDescriptionAvail(inputLength);","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"ShanHng"},"content":"            int deadlineIndex \u003d Parser.findArgument(\"/by\");","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"ShanHng"},"content":"            String description \u003d Parser.rebuildUserInput(1, deadlineIndex - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"ShanHng"},"content":"            String deadline \u003d Parser.formatDate(Parser.rebuildUserInput(deadlineIndex, inputLength));","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"ShanHng"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"ShanHng"},"content":"                outputs.add(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"ShanHng"},"content":"                outputs.add(deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"ShanHng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"ShanHng"},"content":"                throw new WrongDateFormatException();","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":136,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"event\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"ShanHng"},"content":"            checkIfDescriptionAvail(inputLength);","lastModifiedDate":"2023-02-02"},{"lineNumber":138,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"ShanHng"},"content":"            int startDateIndex \u003d Parser.findArgument(\"/from\");","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"ShanHng"},"content":"            int endDateIndex \u003d Parser.findArgument(\"/to\");","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"ShanHng"},"content":"            String description \u003d Parser.rebuildUserInput(1, startDateIndex - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"ShanHng"},"content":"            String startDate \u003d Parser.formatDate(Parser.rebuildUserInput(startDateIndex, endDateIndex - 1));","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"ShanHng"},"content":"            String endDate \u003d Parser.formatDate(Parser.rebuildUserInput(endDateIndex, inputLength));","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"ShanHng"},"content":"            try {","lastModifiedDate":"2023-02-02"},{"lineNumber":147,"author":{"gitId":"ShanHng"},"content":"                outputs.add(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"ShanHng"},"content":"                outputs.add(startDate);","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"ShanHng"},"content":"                outputs.add(endDate);","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"ShanHng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":151,"author":{"gitId":"ShanHng"},"content":"                throw new WrongDateFormatException();","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"delete\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":155,"author":{"gitId":"ShanHng"},"content":"            checkIfDescriptionAvail(inputLength);","lastModifiedDate":"2023-02-02"},{"lineNumber":156,"author":{"gitId":"ShanHng"},"content":"            outputs.add(userInput.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"find\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":159,"author":{"gitId":"ShanHng"},"content":"            checkIfDescriptionAvail(inputLength);","lastModifiedDate":"2023-02-02"},{"lineNumber":160,"author":{"gitId":"ShanHng"},"content":"            outputs.add(rebuildUserInput(1, inputLength));","lastModifiedDate":"2023-02-02"},{"lineNumber":161,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":162,"author":{"gitId":"ShanHng"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"ShanHng"},"content":"            throw new NonsenseInputException();","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":166,"author":{"gitId":"ShanHng"},"content":"        return outputs;","lastModifiedDate":"2023-02-01"},{"lineNumber":167,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":168,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":169,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":170,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":171,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":171}},{"path":"src/main/java/babe/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import babe.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import java.io.File;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":" * The \u003ccode\u003eStorage\u003c/code\u003e class deals with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"class Storage {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"     * Default file address where Babe\u0027s content will be stored.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    private static String FILE_PATH \u003d \"./src/main/java/babe.txt\";","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"     * BufferedWriter Object for this Babe","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    private static BufferedWriter bufferedWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     * Loads available saved data from fileAddress.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     * Creates a save file if it doesn\u0027t exist yet at address specified by fileAddress.","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     * @return A boolean value; True if there is an existing save file, false otherwise.","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"    protected static boolean initializeStorage(TaskList taskList) {","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"        boolean isFilePresent \u003d true;","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"        if (!Files.exists(Paths.get(FILE_PATH))) {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"                File file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"                file.createNewFile();","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"            isFilePresent \u003d false;","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"        Storage.load(taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"        return isFilePresent;","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"    private static void load(TaskList taskList) {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"            Scanner scanner \u003d new Scanner(new File(FILE_PATH));","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"                String s \u003d scanner.nextLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"                String[] arr \u003d s.split(\"\\\\|\");","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"                String taskType \u003d arr[0].strip();","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"                Boolean isDone \u003d arr[1].equals(\"1\");","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"                String desc \u003d arr[2];","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"                switch (taskType) {","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"                case \"T\":","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"                    taskList.addToDo(desc, isDone);","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"                case \"D\":","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"                    String deadline \u003d arr[3];","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"                    taskList.addDeadline(desc, deadline, isDone);","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"                case \"E\":","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"                    String startDate \u003d arr[3];","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"                    String endDate \u003d arr[4];","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"                    taskList.addEvent(desc, startDate, endDate, isDone);","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"                default:","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"                    // Need to add a file corruption error here","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"     * Deletes the save file.","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"    public static void deleteSaveFile() {","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"            Files.deleteIfExists(Paths.get(FILE_PATH));","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"     * Saves Tasks stored in Babe\u0027s memory to a file specified by fileAddress.","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"    protected static void save(TaskList taskList) {","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"            bufferedWriter \u003d new BufferedWriter(new FileWriter(FILE_PATH, false));","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"            String data \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"ShanHng"},"content":"            for (int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"ShanHng"},"content":"                data \u003d taskList.get(i).toSaveFormat();","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"ShanHng"},"content":"                bufferedWriter.write(data);","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"ShanHng"},"content":"                bufferedWriter.newLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"ShanHng"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"ShanHng"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"ShanHng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":115}},{"path":"src/main/java/babe/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import babe.task.Deadline;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import babe.task.Event;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import babe.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import babe.task.ToDo;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":" * The \u003ccode\u003eTaskList\u003c/code\u003e class represents the list of Tasks in Babe.","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":" * It contains methods for displaying and manipulating content of this TaskList.","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"class TaskList {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"     * Number of Tasks currently stored in this Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    private int taskCount \u003d 0;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"     * List of Tasks Babe received from the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"     * Adds a ToDo to memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"     * Calls the ToDo constructor and inserts created ToDo into this Babe\u0027s memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     * @param content The description of the ToDo item.","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     * @return","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"    protected String addToDo(String content, boolean toMark) {","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        ToDo item \u003d new ToDo(content);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"        tasks.add(taskCount++, item);","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"        if (toMark) {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"            item.mark();","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"        return item.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"     * Adds a Deadline to memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"     * Calls the Deadline constructor and inserts created Deadline into this Babe\u0027s memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"     * @param content The content of the Deadline item.","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"     * @param date    The date of the deadline. May include time too.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"    protected String addDeadline(String content, String date, boolean toMark) {","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"        Deadline item \u003d new Deadline(content, date);","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"        tasks.add(taskCount++, item);","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"        if (toMark) {","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"            item.mark();","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"        return item.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"     * Adds an Event to memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"     * Calls the Event constructor and inserts created Event into this Babe\u0027s memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"     * @param content   The content of the Event item.","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"     * @param startDate The start date of the Event. May include time too.","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"     * @param endDate   The end date of the Event. May include time too.","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"    protected String addEvent(String content, String startDate, String endDate, boolean toMark) {","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"        Event item \u003d new Event(content, startDate, endDate);","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"        tasks.add(taskCount++, item);","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"        if (toMark) {","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"            item.mark();","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"        return item.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"     * Deletes Task in memory specified by given index.","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"     * @param index An integer that represents the index of the Task to be removed from memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"    protected String deleteTask(int index) {","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"        Task removedTask \u003d this.tasks.remove(index - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"        taskCount--;","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"        return removedTask.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"     * Marks the item of given index in Babe\u0027s list as Done.","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"     * This function will extract the index to be marked and sets the index to True in doneStatus.","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"     * @param index An integer that represents the index of the item to be marked.","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"    protected String markTask(int index) {","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"        Task itemAtIndex \u003d tasks.get(index - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"        itemAtIndex.mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"        return itemAtIndex.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"     * Unmarks the item of given index in Babe\u0027s list as Undone.","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"     * This function will extract the index to be un-marked and sets the index to False in doneStatus.","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"ShanHng"},"content":"     * @param index An integer that represents the index of the item to be marked.","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":103,"author":{"gitId":"ShanHng"},"content":"    protected String unmarkTask(int index) {","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"ShanHng"},"content":"        Task itemAtIndex \u003d tasks.get(index - 1);","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"ShanHng"},"content":"        itemAtIndex.unmark();","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"ShanHng"},"content":"        return itemAtIndex.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":110,"author":{"gitId":"ShanHng"},"content":"     * Find a task in the TaskList that contains the searchKey entirely.","lastModifiedDate":"2023-02-02"},{"lineNumber":111,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":112,"author":{"gitId":"ShanHng"},"content":"     * @param searchKey A String input by the user.","lastModifiedDate":"2023-02-02"},{"lineNumber":113,"author":{"gitId":"ShanHng"},"content":"     * @return An ArrayList containing Strings of all the Tasks found.","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":115,"author":{"gitId":"ShanHng"},"content":"    protected ArrayList\u003cString\u003e findTasks(String searchKey) {","lastModifiedDate":"2023-02-11"},{"lineNumber":116,"author":{"gitId":"ShanHng"},"content":"        ArrayList\u003cString\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":117,"author":{"gitId":"ShanHng"},"content":"        for (int i \u003d 0; i \u003c taskCount; i++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":118,"author":{"gitId":"ShanHng"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"ShanHng"},"content":"            if (task.contains(searchKey)) {","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"ShanHng"},"content":"                foundTasks.add(task.toString());","lastModifiedDate":"2023-02-11"},{"lineNumber":121,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":122,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":123,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"ShanHng"},"content":"        return foundTasks;","lastModifiedDate":"2023-02-02"},{"lineNumber":125,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":126,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":127,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"ShanHng"},"content":"     * Implements toString() method for the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"ShanHng"},"content":"        String string \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"ShanHng"},"content":"        for (int i \u003d 0; i \u003c this.taskCount; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"ShanHng"},"content":"            string +\u003d Integer.toString(i + 1) + \". \";","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"ShanHng"},"content":"            string +\u003d tasks.get(i).toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":136,"author":{"gitId":"ShanHng"},"content":"            string +\u003d \"\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":137,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"ShanHng"},"content":"        return string;","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"ShanHng"},"content":"     * Returns true if the TaskList has zero items.","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":144,"author":{"gitId":"ShanHng"},"content":"     * @return A boolean value. true if Task List has zero items, false otherwise.","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"ShanHng"},"content":"    protected boolean isEmpty() {","lastModifiedDate":"2023-02-02"},{"lineNumber":147,"author":{"gitId":"ShanHng"},"content":"        return taskCount \u003d\u003d 0;","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":151,"author":{"gitId":"ShanHng"},"content":"     * Returns length of the TaskList (i.e. count)","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"ShanHng"},"content":"    protected int length() {","lastModifiedDate":"2023-02-02"},{"lineNumber":154,"author":{"gitId":"ShanHng"},"content":"        return taskCount;","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":156,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"ShanHng"},"content":"     * Returns the item at the specified index from this TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":159,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":160,"author":{"gitId":"ShanHng"},"content":"    protected Task get(int index) {","lastModifiedDate":"2023-02-02"},{"lineNumber":161,"author":{"gitId":"ShanHng"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":162,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":166,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":166}},{"path":"src/main/java/babe/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import babe.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":" * The \u003ccode\u003eUi\u003c/code\u003e class deals with interactions with the user.","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":" * It contains all functions used to generate the GUI and the messages seen in Babe.","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"class Ui {","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"     * Draws a horizontal line.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"    private static void drawLineHeader() {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"        System.out.print(\"(ɔ˘ ³˘)ɔ: \");","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    protected static String notifyCreateSaveFile() {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"We can\u0027t find a save file for Babe, so we just went ahead and created one for you \u003c3!\";","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"     * Welcome users of Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     * Greets user and prompts for help. This method does not expect a response.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"    protected static String welcomeUser() {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"HELLO! Greetings from Babe \u003c3 How may I help you?\";","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"    protected static String notifyAddTask(String taskString, int count) {","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"        output +\u003d \"Got it, babe. Added this for you:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"        output +\u003d taskString;","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"        output +\u003d String.format(\"\\nNow you have %d task in the list.\\n\", count);","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"     * Prints list of Tasks stored in this Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"     * Prints a numbered list of Items stored in memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"    protected static String printList(TaskList taskList) {","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"            output +\u003d \"Nothing added yet. Add something babygorl.\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"            output +\u003d \"This is your list so far:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"            output +\u003d taskList.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"    private static void printOutputMessage(String output) {","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"        System.out.println(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"     * Bids farewell to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"     * Prints a line of farewell before ending the program.","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"    protected static String sayBye() {","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"Bye, babyboo. Can\u0027t wait to meet you again!\";","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"    protected static String notifyDelete(String taskString, int count) {","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"        output +\u003d \"One task down! I removed this from your list of tasks:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"        output +\u003d taskString;","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"        output +\u003d String.format(\"\\nNow you have %d task(s) left!\\n\", count);","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"    protected static String notifyException(Exception e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"        String output \u003d e.getMessage();","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"    protected static String notifyMark(String taskString) {","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"Okay, babygorl. I\u0027ve marked this as Done:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"        output +\u003d taskString;","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"    protected static String notifyUnmark(String taskString) {","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"We have un-Done this for you:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"ShanHng"},"content":"        output +\u003d taskString;","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":103,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"ShanHng"},"content":"    protected static String notifyFindResults(ArrayList\u003cString\u003e tasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"ShanHng"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"ShanHng"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"ShanHng"},"content":"            output +\u003d \"Oh nuuu we can\u0027t find the task you are looking for. \"","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"ShanHng"},"content":"                    + \"Perhaps you haven\u0027t added the item yet?\\n\"","lastModifiedDate":"2023-02-02"},{"lineNumber":111,"author":{"gitId":"ShanHng"},"content":"                    + \"Try \u0027list\u0027 command to check!\";","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":113,"author":{"gitId":"ShanHng"},"content":"        } else {","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"ShanHng"},"content":"            output +\u003d \"Here\u0027s what we could find:\";","lastModifiedDate":"2023-02-11"},{"lineNumber":115,"author":{"gitId":"ShanHng"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":116,"author":{"gitId":"ShanHng"},"content":"                output +\u003d String.format(\"\\n%d. \", i + 1);","lastModifiedDate":"2023-02-11"},{"lineNumber":117,"author":{"gitId":"ShanHng"},"content":"                output +\u003d tasks.get(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":118,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"ShanHng"},"content":"        printOutputMessage(output);","lastModifiedDate":"2023-02-11"},{"lineNumber":121,"author":{"gitId":"ShanHng"},"content":"        return output;","lastModifiedDate":"2023-02-11"},{"lineNumber":122,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":123,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":125}},{"path":"src/main/java/babe/exception/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe.exception;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * This exception is thrown when an instruction to add a Task is not followed by a description.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public class NoDescriptionException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    public NoDescriptionException() {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"        super(\"I need to know what is the description of your task, bestie!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"ShanHng":11}},{"path":"src/main/java/babe/exception/NonsenseInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe.exception;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * This exception is thrown when the user input cannot be recognized by Babe.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public class NonsenseInputException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    public NonsenseInputException() {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"        super(\"I do not know how to read this. SORRRYY \u003c/3\");","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"ShanHng":11}},{"path":"src/main/java/babe/exception/WrongDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe.exception;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * This exception is thrown when the user inputs date format not as specified for deadline or event commands.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public class WrongDateFormatException extends Exception {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    public WrongDateFormatException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"        super(\"The date format should be yyyy-mm-dd, luv. Please try again.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":12}},{"path":"src/main/java/babe/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * \u003ccode\u003eDeadline\u003c/code\u003e class represents a \u003ccode\u003eTask\u003c/code\u003e that has a deadline.","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" * It extends from \u003ccode\u003eTask\u003c/code\u003e as implied.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"     * A date/time for this \u003ccode\u003eDeadline\u003c/code\u003e","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"    private String deadline \u003d \"\";","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"     * Constructor for \u003ccode\u003eDeadline\u003c/code\u003e item.","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"     * @param content  Description of this \u003ccode\u003eDeadline\u003c/code\u003e.","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"     * @param deadline Date for the deadline of this item.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    public Deadline(String content, String deadline) {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"        super(content);","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eDeadline\u003c/code\u003e item.","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     * @return A String that represents the \u003ccode\u003eDeadline\u003c/code\u003e item, including its description, done status","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     *         and deadline.","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        return (this.isDone ? this.MARKED : this.UNMARKED) + \" \" + this.description","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"                + \" (by: \" + this.deadline + \")\";","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eDeadline\u003c/code\u003e object for data storage.","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"     * The format is as such: D|{done status}|{description}|{deadline}","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this \u003ccode\u003eDeadline\u003c/code\u003e object.","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"        return \"D|\" + (this.isDone ? 1 : 0) + \"|\" + this.description + \"|\" + this.deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"    ;","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ShanHng":50}},{"path":"src/main/java/babe/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * \u003ccode\u003eEvent\u003c/code\u003e class represents a simple \u003ccode\u003eEvent\u003c/code\u003e with just a description, done status,","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" * to and from date and time. It extends from \u003ccode\u003eTask\u003c/code\u003e\u003c/code\u003e as implied.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"     * The start date/time for this \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"    private String fromDate \u003d \"\";","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"     * The end date/time for this \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    private String toDate \u003d \"\";","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"     * Constructor for \u003ccode\u003eEvent\u003c/code\u003e object.","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"     * @param content  Description of this \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"     * @param fromDate The start date/time for this \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     * @param toDate   The end date/time for this \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    public Event(String content, String fromDate, String toDate) {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"        super(content);","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eEvent\u003c/code\u003e item.","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"     * @return A String that represents the \u003ccode\u003eEvent\u003c/code\u003e item, including its description and done status.","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"        return (this.isDone ? this.MARKED : this.UNMARKED) + \" \" + this.description","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"                + \" (from: \" + this.fromDate + \", to: \" + this.toDate + \")\";","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eEvent\u003c/code\u003e object for data storage.","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"     * The format is as such: E|{done status}|{description}|{fromDate}|{toDate}","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this \u003ccode\u003eEvent\u003c/code\u003e object.","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"        return \"E|\" + (this.isDone ? 1 : 0) + \"|\" + this.description + \"|\" + this.fromDate + \"|\"","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"                + this.toDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"    ;","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ShanHng":56}},{"path":"src/main/java/babe/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * \u003ccode\u003eTask\u003c/code\u003e is an abstract class that specifies functions required by its concrete","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" * subclasses (namely, \u003ccode\u003eEvent\u003c/code\u003e, \u003ccode\u003eToDo\u003c/code\u003e and \u003ccode\u003eDeadline\u003c/code\u003e to have.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"     * String icon for marked.","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"    static String MARKED \u003d \"[X]\";","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"     * String icon for unmarked.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"    static String UNMARKED \u003d \"[ ]\";","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     * Done status for this \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    boolean isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     * Contents of this item.","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    String description \u003d \"\";","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     * Constructor for \u003ccode\u003eTask\u003c/code\u003es","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     * @param content A String that is the description of this item.","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"    public Task(String content) {","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"        this.description \u003d content;","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eTask\u003c/code\u003e item.","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"     * @return A String that represents the \u003ccode\u003eTask\u003c/code\u003e item, including its description and done status.","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"    public abstract String toString();","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"     * Mark the \u003ccode\u003eTask\u003c/code\u003e as Done.","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"    public void mark() {","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"     * Mark the \u003ccode\u003eTask\u003c/code\u003e as Undone.","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eTask\u003c/code\u003e item for data storage.","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"     * The String representation includes its done status, subtype and description. The delimiter \"|\"","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"     * is used.","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this \u003ccode\u003eTask\u003c/code\u003e object, specifically for","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"     *         \u003ccode\u003e Storage \u003c/code\u003e\u0027s input.","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"    public abstract String toSaveFormat();","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"     * Checks if a Task\u0027s description contains the given search key.","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"     * @return A boolean value; true if the search key is entirely contained within the description. False otherwise.","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"    public Boolean contains(String key) {","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"        return description.contains(key);","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ShanHng":78}},{"path":"src/main/java/babe/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe.task;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * \u003ccode\u003eToDo\u003c/code\u003e class represents a simple \u003ccode\u003eTask\u003c/code\u003e with just a description and done status.","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" * It extends from \u003ccode\u003eTask\u003c/code\u003e as implied.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"     * Constructor for \u003ccode\u003eToDo\u003c/code\u003es","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"     * @param content A String representing the content of this item.","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"    public ToDo(String content) {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"        super(content);","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eToDo\u003c/code\u003e item.","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"     * @return A String that represents the \u003ccode\u003eToDo\u003c/code\u003e item, including its description and done status.","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"        return (this.isDone ? this.MARKED : this.UNMARKED) + \" \" + this.description;","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the \u003ccode\u003eToDo\u003c/code\u003e object for data storage.","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     * The format is as such: T|{done status}|{description}","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this \u003ccode\u003eToDo\u003c/code\u003e object.","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"        return \"T|\" + (this.isDone ? 1 : 0) + \"|\" + this.description;","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"    ;","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ShanHng":39}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"         \u003copaqueInsets\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"         \u003c/opaqueInsets\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ShanHng":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"babe.MainWindow\"\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"11.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"27.0\" prefWidth\u003d\"306.0\" AnchorPane.bottomAnchor\u003d\"9.0\" /\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"327.0\" layoutY\u003d\"564.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"27.0\" prefWidth\u003d\"63.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ShanHng":19}},{"path":"src/test/java/babe/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import babe.exception.NoDescriptionException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import babe.exception.NonsenseInputException;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import babe.exception.WrongDateFormatException;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"public class ParserTest {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    public void parseTest_byeInstruction()","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"            throws NonsenseInputException, NoDescriptionException, WrongDateFormatException {","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"        ArrayList\u003cString\u003e parserOutput \u003d Parser.parse(\"bye\");","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"        ArrayList\u003cString\u003e expectedOutput \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"        expectedOutput.add(\"bye\");","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"        assertEquals(expectedOutput, parserOutput);","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    public void parseTest_nonsenseInput_NonsenseInputExceptionThrown() {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"        assertThrows(NonsenseInputException.class, () -\u003e { Parser.parse(\"gibberish\"); });","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ShanHng":29}},{"path":"src/test/java/babe/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package babe;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import babe.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"public class TaskListTest {","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"    private final TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     * A unit test for TaskList#addToDo(String, boolean) method","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    public void addToDoTest_toMarkIsFalse_TaskNotMarked() {","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"        String taskString \u003d taskList.addToDo(\"test\", false);","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"        assertEquals(\"[ ] test\", taskString);","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"    @Test","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     * A unit test for TaskList#addToDo(String, boolean) method","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"    public void addToDoTest_toMarkIsTrue_TaskMarked() {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"        String taskString \u003d taskList.addToDo(\"test\", true);","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"        assertEquals(\"[X] test\", taskString);","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ShanHng":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"Eat","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"todo Eat","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"event Sleep /from 1am /to 10pm","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"deadline Drink /by 12am","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"unmark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"ShanHng":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"del ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"java -classpath ..\\bin Babe \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ShanHng":2,"-":19}}]
