[{"path":"src/main/java/Babe.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import exception.NoDescriptionException;","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"import exception.NonsenseInputException;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":" * \u003ch1\u003e Hi Babe! \u003c/h1\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":" * Babe is a chat bot created as part of the individual project (iP) under the course CS2109T.","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":" * It is a duplicate of Duke with some personal flair.","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":" *","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":" * @author Shan Hern Hng","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":" * @version 1.0","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":" * @since 17 January 2023","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"public class Babe {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"     * A TaskList object for this Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    public TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"        Babe chatBot \u003d new Babe();","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"        Ui.welcomeUser();","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"        Storage.initializeStorage(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"        while (true) {","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"            try {","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"                ArrayList\u003cString\u003e parseOutputs \u003d Parser.parse(scanner.nextLine());","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"//                String instruction \u003d chatBot.userInput.get(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"//                int inputLength \u003d chatBot.userInput.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"                if (parseOutputs.get(0).equals(\"bye\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"                    scanner.close();","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"                    Ui.sayBye();","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"                    System.exit(0);","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"                } else if (parseOutputs.get(0).equals(\"list\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"                    Ui.printList(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"                } else if (parseOutputs.get(0).equals(\"mark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"                    int index \u003d Integer.parseInt(parseOutputs.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"                    chatBot.taskList.changeStatus(true, index);","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"                    Storage.save(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"                } else if (parseOutputs.get(0).equals(\"unmark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"                    int index \u003d Integer.parseInt(parseOutputs.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"                    chatBot.taskList.changeStatus(false, index);","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"                    Storage.save(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"                } else if (parseOutputs.get(0).equals(\"todo\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"                    chatBot.taskList.addToDo(parseOutputs.get(1), true);","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"                    Storage.save(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"                } else if (parseOutputs.get(0).equals(\"deadline\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"                    chatBot.taskList.addDeadline(parseOutputs.get(1), parseOutputs.get(2), true);","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"                    Storage.save(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"                } else if (parseOutputs.get(0).equals(\"event\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"                    chatBot.taskList.addEvent(parseOutputs.get(1),","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"                            parseOutputs.get(2),","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"                            parseOutputs.get(3),","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"                            true);","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"                    Storage.save(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"                } else if (parseOutputs.get(0).equals(\"delete\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"                    int index \u003d Integer.parseInt(parseOutputs.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"                    chatBot.taskList.deleteTask(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"                    Storage.save(chatBot.taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"                } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"                    throw new NonsenseInputException();","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"                }","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"                Ui.notifyException(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ShanHng":87}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"import exception.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"import java.time.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import java.util.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":" * This class deals with making sense of the user command.","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"public class Parser {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"     * A string input from user.","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"    private static ArrayList\u003cString\u003e userInput \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"     * Length of user input.","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    private static int userInputLen \u003d 0;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"     * Rebuilds a string from ArrayList from the starting index to the ending index (not inclusive).","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"     * A helper function to recover the original user input from userInput starting from the startingIndex","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"     * to the ending index (not inclusive).","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    public static String rebuildUserInput(int startingIndex, int endingIndex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"        for (int i \u003d startingIndex; i \u003c endingIndex; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"            result +\u003d userInput.get(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"            result +\u003d \" \";","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"        return result.stripTrailing();","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"     * Finds and returns index of command arguments in userInput demarcated by given String pattern","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"     * @return An integer that is the index of command argument.","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"     * @args pattern A String pattern that precedes the input of command argument","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"    public static int findArgument(String pattern) {","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"        int argIndex \u003d -1;","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"        for (int i \u003d 0; i \u003c userInput.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"            String currentString \u003d userInput.get(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"            if (currentString.equals(pattern)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"                argIndex \u003d i + 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"        return argIndex;","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"     * Formats date specified by user.","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"     * The date will be formatted using java.LocalDate.","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"     * @param dateAndTime A String that contains date and time specified by the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"     * @return A String containing the formatted date and original specified time.","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"    public static String formatDate(String dateAndTime) {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"        String[] words \u003d dateAndTime.split(\" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"        LocalDate d1 \u003d LocalDate.parse(words[0]);","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"        String formattedDateAndTime \u003d Integer.toString(d1.getDayOfMonth()) + \" \"","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"                + d1.getMonth() + \" \" + d1.getYear() + \" \"","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"                + (words.length \u003d\u003d 2 ? words[1] : \"\");","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"        return formattedDateAndTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"    public static ArrayList\u003cString\u003e parse(String input)","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"            throws NoDescriptionException, NonsenseInputException, WrongDateFormatException {","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"        userInput \u003d new ArrayList\u003c\u003e(Arrays.asList(input.split(\" \")));","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"        int inputLength \u003d userInput.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"        String instruction \u003d userInput.get(0).toLowerCase();","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"        ArrayList\u003cString\u003e outputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"        outputs.add(instruction);","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"        if (instruction.equals(\"bye\") \u0026\u0026 inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"list\") \u0026\u0026 inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"mark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"            outputs.add(userInput.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"unmark\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"            outputs.add(userInput.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"todo\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"            if (inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"ShanHng"},"content":"                throw new NoDescriptionException();","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"ShanHng"},"content":"            String description \u003d Parser.rebuildUserInput(1, inputLength);","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"ShanHng"},"content":"            outputs.add(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equals(\"deadline\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"ShanHng"},"content":"            if (inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"ShanHng"},"content":"                throw new NoDescriptionException();","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"ShanHng"},"content":"            int deadlineIndex \u003d Parser.findArgument(\"/by\");","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"ShanHng"},"content":"            String description \u003d Parser.rebuildUserInput(1, deadlineIndex - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"ShanHng"},"content":"            String deadline \u003d Parser.formatDate(Parser.rebuildUserInput(deadlineIndex, inputLength));","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"ShanHng"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"ShanHng"},"content":"                outputs.add(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"ShanHng"},"content":"                outputs.add(deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"ShanHng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"ShanHng"},"content":"                System.out.println(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"ShanHng"},"content":"                throw new WrongDateFormatException();","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"ShanHng"},"content":"            if (inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"ShanHng"},"content":"                throw new NoDescriptionException();","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"ShanHng"},"content":"            int startDateIndex \u003d Parser.findArgument(\"/from\");","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"ShanHng"},"content":"            int endDateIndex \u003d Parser.findArgument(\"/to\");","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"ShanHng"},"content":"            String description \u003d Parser.rebuildUserInput(1, startDateIndex - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"ShanHng"},"content":"            String startDate \u003d Parser.formatDate(Parser.rebuildUserInput(startDateIndex, endDateIndex - 1));","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"ShanHng"},"content":"            String endDate \u003d Parser.formatDate(Parser.rebuildUserInput(endDateIndex, inputLength));","lastModifiedDate":"2023-02-01"},{"lineNumber":136,"author":{"gitId":"ShanHng"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":137,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"ShanHng"},"content":"                outputs.add(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"ShanHng"},"content":"                outputs.add(startDate);","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"ShanHng"},"content":"                outputs.add(endDate);","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"ShanHng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"ShanHng"},"content":"                throw new WrongDateFormatException();","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"ShanHng"},"content":"        } else if (instruction.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"ShanHng"},"content":"            if (inputLength \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"ShanHng"},"content":"                throw new NoDescriptionException();","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":151,"author":{"gitId":"ShanHng"},"content":"            outputs.add(userInput.get(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"ShanHng"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"ShanHng"},"content":"            throw new NonsenseInputException();","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":156,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"ShanHng"},"content":"        return outputs;","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":159,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":160,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":161,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":162,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":163,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":166,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":166}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"import task.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import java.io.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import java.nio.file.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"import java.util.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":" * This class deals with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"public class Storage {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"     * Default file address where Babe\u0027s content will be stored.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"    private static String fileAddress \u003d \"./src/main/java/babe.txt\";","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"     * BufferedWriter Object for this Babe","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    private static BufferedWriter bufferedWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"     * Loads available saved data from fileAddress.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"     * Creates a save file if it doesn\u0027t exist yet at address specified by fileAddress.","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    public static void initializeStorage(TaskList taskList) {","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"        if (!Files.exists(Paths.get(fileAddress))) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"                File file \u003d new File(fileAddress);","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"                file.createNewFile();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"            Ui.notifyCreateSaveFile();","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"        Storage.load(taskList);","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"    private static void load(TaskList taskList) {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"            Scanner scanner \u003d new Scanner(new File(fileAddress));","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"                String s \u003d scanner.nextLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"                String[] arr \u003d s.split(\"\\\\|\");","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"                String taskType \u003d arr[0].strip();","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"                Boolean isDone \u003d arr[1].equals(\"1\");","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"                String desc \u003d arr[2];","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"                Task item \u003d null;","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"                switch (taskType) {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"                case \"T\":","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"                    item \u003d taskList.addToDo(desc, false);","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"                case \"D\":","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"                    String deadline \u003d arr[3];","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"                    item \u003d taskList.addDeadline(desc, deadline, false);","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"                case \"E\":","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"                    String startDate \u003d arr[3];","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"                    String endDate \u003d arr[4];","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"                    item \u003d taskList.addEvent(desc, startDate, endDate, false);","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"                default:","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"                    // Need to add a file corruption error here","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"                if (isDone) {","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"                    item.mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"                } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"                    item.unmark();","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"     * Saves Tasks stored in Babe\u0027s memory to a file specified by fileAddress.","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"    public static void save(TaskList taskList) {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"            bufferedWriter \u003d new BufferedWriter(new FileWriter(fileAddress, false));","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"            String data \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"            for (int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"                data \u003d taskList.get(i).toSaveFormat();","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"                bufferedWriter.write(data);","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"                bufferedWriter.newLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":99}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"import task.Event;","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"import task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"import task.ToDo;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":" * This class contains the task list.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":" * It has operations to add/delete tasks in the list","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"public class TaskList {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"     * Number of Tasks currently stored in this Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"    private int taskCount \u003d 0;","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     * List of Tasks Babe received from the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     * Adds a ToDo to memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"     * Calls the ToDo constructor and inserts created ToDo into this Babe\u0027s memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"     * @param content The description of the ToDo item.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    public Task addToDo(String content, boolean toNotify) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"        ToDo item \u003d new ToDo(content);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"        tasks.add(taskCount++, item);","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"        if (toNotify) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"            Ui.notifyAddTask(item, taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"        return item;","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"     * Adds a Deadline to memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"     * Calls the Deadline constructor and inserts created Deadline into this Babe\u0027s memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"     * @param content The content of the Deadline item.","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"     * @param date The date of the deadline. May include time too.","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"    public Task addDeadline(String content, String date, boolean toNotify) {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"        Deadline item \u003d new Deadline(content, date);","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"        tasks.add(taskCount++, item);","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"        if (toNotify) {","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"            Ui.notifyAddTask(item, taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"        return item;","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"     * Adds an Event to memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"     * Calls the Event constructor and inserts created Event into this Babe\u0027s memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"     * @param content The content of the Event item.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"     * @param startDate The start date of the Event. May include time too.","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"     * @param endDate The end date of the Event. May include time too.","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"    public Task addEvent(String content, String startDate, String endDate, boolean toNotify) {","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"        Event item \u003d new Event(content, startDate, endDate);","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"        tasks.add(taskCount++, item);","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"        if (toNotify) {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"            Ui.notifyAddTask(item, taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"        return item;","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"     * Deletes Task in memory specified by given index.","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"     * @param index An integer that represents the index of the Task to be removed from memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"        Task removedTask \u003d this.tasks.remove(index - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"        Ui.notifyDelete(removedTask, --taskCount);","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"     * Marks/Unmarks the item of given index in Babe\u0027s list as Done/Undone.","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"     * If user keys in \"mark\", this function will extract the index to be marked and sets the index to True in","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"     * doneStatus. Sets the index to False if \"unmark\"is keyed in.","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"ShanHng"},"content":"    public void changeStatus(boolean toMark, int index) {","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"ShanHng"},"content":"        Task itemAtIndex \u003d tasks.get(index - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"ShanHng"},"content":"        if (toMark) {","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"ShanHng"},"content":"            itemAtIndex.mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"ShanHng"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"ShanHng"},"content":"            itemAtIndex.unmark();","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"ShanHng"},"content":"        Ui.notifyStatusChanged(itemAtIndex, toMark);","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"ShanHng"},"content":"     * Implements toString() method for the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"ShanHng"},"content":"        String string \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"ShanHng"},"content":"        for (int i \u003d 0; i \u003c this.taskCount; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"ShanHng"},"content":"            string +\u003d Integer.toString(i + 1) + \". \";","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"ShanHng"},"content":"            string +\u003d tasks.get(i).toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"ShanHng"},"content":"            string +\u003d \"\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"ShanHng"},"content":"        return string;","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"ShanHng"},"content":"     * Returns true if the TaskList has zero items.","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"ShanHng"},"content":"     * @return A boolean value. true if Task List has zero items, false otherwise.","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"ShanHng"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"ShanHng"},"content":"        return taskCount \u003d\u003d 0;","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"ShanHng"},"content":"     * Returns length of the TaskList (i.e. count)","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"ShanHng"},"content":"    public int length() {","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"ShanHng"},"content":"        return taskCount;","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"ShanHng"},"content":"     * Returns the item at the specified index from this TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"ShanHng"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"ShanHng"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":130}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"import task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * This class deals with interactions with the user","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public class Ui {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"     * Draws a horizontal line.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"    private static void drawLineHeader() {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"        System.out.print(\"(ɔ˘ ³˘)ɔ: \");","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"    public static void notifyCreateSaveFile() {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"        System.out.println(\"We can\u0027t find a save file for Babe, so we just went ahead and created one for you \u003c3!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"     * Welcome users of Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"     * Greets user and prompts for help. This method does not expect a response.","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    public static void welcomeUser() {","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"        System.out.println(\"HELLO! Greetings from Babe \u003c3 How may I help you?\");","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"    public static void notifyAddTask(Task item, int count) {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"        System.out.println(\"Got it, babe. Added this for you:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        System.out.println(item.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"        System.out.printf(\"Now you have %d task in the list.\\n\", count);","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"     * Prints list of Tasks stored in this Babe.","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"     * Prints a numbered list of Items stored in memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"    public static void printList(TaskList taskList) {","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"            System.out.println(\"Nothing added yet. Add something babygorl.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"            Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"            System.out.println(\"This is your list so far:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"            System.out.println(taskList.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"     * Bids farewell to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"     * Prints a line of farewell before ending the program.","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"    public static void sayBye() {","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"        System.out.println(\"Bye, babyboo. Can\u0027t wait to meet you again!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"    public static void notifyDelete(Task item, int count) {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"        System.out.println(\"One task down! I removed this from your list of tasks:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"        System.out.println(item.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"        System.out.printf(\"Now you have %d task(s) left!\\n\", count);","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"ShanHng"},"content":"    public static void notifyException(Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"ShanHng"},"content":"        System.out.println(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"ShanHng"},"content":"    public static void notifyStatusChanged(Task task, boolean toMark) {","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"ShanHng"},"content":"        Ui.drawLineHeader();","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"ShanHng"},"content":"        System.out.println(toMark ? \"Okay, babygorl. I\u0027ve marked this as Done:\" : \"We have un-Done this for you:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"ShanHng"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":81}},{"path":"src/main/java/exception/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package exception;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * This exception is thrown when an instruction to add a Task is not followed by a description.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public class NoDescriptionException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    public NoDescriptionException() {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"        super(\"I need to know what is the description of your task, bestie!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"ShanHng":11}},{"path":"src/main/java/exception/NonsenseInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package exception;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * This exception is thrown when the user input cannot be recognized by Babe.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public class NonsenseInputException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    public NonsenseInputException() {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"        super(\"I do not know how to read this. SORRRYY \u003c/3\");","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"ShanHng":11}},{"path":"src/main/java/exception/WrongDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * This exception is thrown when the user inputs date format not as specified for deadline or event commands.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public class WrongDateFormatException extends Exception{","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    public WrongDateFormatException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"        super(\"The date format should be yyyy-mm-dd, luv. Please try again.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"ShanHng":12}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package task;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"    /** A date/time for this Deadline */","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"    private String deadline \u003d \"\";","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"     * Constructor for Deadline item.","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"     * @param content Description of this Deadline.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"     * @param deadline Date for the deadline of this item.","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"    public Deadline(String content, String deadline) {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"        super(content);","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"        return (this.isDone ? this.MARKED : this.UNMARKED) + \" \" + this.description","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"                + \" (by: \" + this.deadline + \")\";","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the Deadline object for data storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"     * Saves the content of the Deadline, including its isDone status, description,and the deadline date","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     * into a String with the delimiter \"|\" to be written into a data file.","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this Deadline object.","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        return \"D|\" + (this.isDone ? 1 : 0) + \"|\" + this.description + \"|\" + this.deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    };","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ShanHng":37}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package task;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"    /** The start date/time for this Event. */","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"    private String fromDate \u003d \"\";","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"    /** The end date/time for this Event. */","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"    private String toDate \u003d \"\";","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"     * Constructor for Event object.","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"     * @param content Description of this Event.","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"     * @param fromDate The start date/time for this Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"     * @param toDate The end date/time for this Event.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    public Event(String content, String fromDate, String toDate) {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"        super(content);","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"        return (this.isDone ? this.MARKED : this.UNMARKED) + \" \" + this.description","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"                + \" (from: \" + this.fromDate + \", to: \" + this.toDate + \")\";","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the Event object for data storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"     * Saves the content of the Event, including its isDone status, description,and the to/from date","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"     * into a String with the delimiter \"|\" to be written into a data file.","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this Event object.","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"        return \"E|\" + (this.isDone ? 1 : 0) + \"|\" + this.description + \"|\" + this.fromDate + \"|\"","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"                + this.toDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"    };","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ShanHng":42}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package task;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * Interface for list items in Babe,","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"     * String icon for marked.","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"    static String MARKED \u003d \"[X]\";","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"     * String icon for unmarked.","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"    static String UNMARKED \u003d \"[ ]\";","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"     * Done status for this Task.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"    boolean isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"     * Contents of this item.","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    String description \u003d \"\";","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     * Constructor for Tasks","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     * @param content A String that is the description of this item.","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"    public Task(String content) {","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        this.description \u003d content;","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the Task item.","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"ShanHng"},"content":"     * Each subclass of Task has a designated String format.","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"ShanHng"},"content":"    public abstract String toString();","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"ShanHng"},"content":"     * Mark the item as Done.","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"ShanHng"},"content":"     * Assign truth value to isDone.","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"ShanHng"},"content":"    public void mark() {","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"ShanHng"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"ShanHng"},"content":"     * Mark the item as Undone.","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"ShanHng"},"content":"     * Assign false value to isDone.","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"ShanHng"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"ShanHng"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the Task item for data storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"ShanHng"},"content":"     * Saves the content of the Task, including its isDone, subtype and description into a String with the delimiter","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"ShanHng"},"content":"     * \"|\" to be written into a data file.","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this Task object.","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"ShanHng"},"content":"    public abstract String toSaveFormat();","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ShanHng":68}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"package task;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":" * ToDo class for Babe\u0027s list.","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":" * Extends abstract class Item.","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"     * Constructor for ToDos","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"     * @param content A String representing the content of this item.","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"    public ToDo(String content) {","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"        super(content);","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"ShanHng"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ShanHng"},"content":"     * Prints a ToDo item in its specified format.","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ShanHng"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"ShanHng"},"content":"        return (this.isDone ? this.MARKED : this.UNMARKED) + \" \" + this.description;","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"ShanHng"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ShanHng"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ShanHng"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"ShanHng"},"content":"     * Returns String representation of the ToDo object for data storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"ShanHng"},"content":"     * Saves the content of the ToDo, including its isDone and description into a String with the delimiter","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"ShanHng"},"content":"     * \"|\" to be written into a data file.","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"ShanHng"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ShanHng"},"content":"     * @return A String representing this ToDo object.","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"ShanHng"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"ShanHng"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"ShanHng"},"content":"        return \"T|\" + (this.isDone ? 1 : 0) + \"|\" + this.description;","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ShanHng"},"content":"    };","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ShanHng"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ShanHng":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ShanHng"},"content":"Eat","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"ShanHng"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"ShanHng"},"content":"todo Eat","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"ShanHng"},"content":"event Sleep /from 1am /to 10pm","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"ShanHng"},"content":"deadline Drink /by 12am","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"ShanHng"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"ShanHng"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"ShanHng"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"ShanHng"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ShanHng"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"ShanHng"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"ShanHng"},"content":"unmark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"ShanHng"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"ShanHng"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"ShanHng":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"ShanHng"},"content":"del ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ShanHng"},"content":"java -classpath ..\\bin Babe \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ShanHng":2,"-":19}}]
