[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tempura-Person"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Tempura-Person"},"content":"    protected String by;","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Tempura-Person"},"content":"    public Deadline(String TaskName, String by) {","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Tempura-Person"},"content":"        super(TaskName);","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Tempura-Person"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Tempura-Person"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Tempura-Person"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Tempura-Person"},"content":"        return \"[D]\" + \"[\" + super.getStatus() + \"] \" + super.toString()","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Tempura-Person"},"content":"                + \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Tempura-Person"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Tempura-Person":14}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tempura-Person"},"content":"import java.util.*;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Tempura-Person"},"content":"        // Default welcome message and message border","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Tempura-Person"},"content":"        String border \u003d \"_________________________________________\\n\";","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Tempura-Person"},"content":"        System.out.println(border + \"Sup, Duke here.\\nWhat do you want from me?\\n\" + border);","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Tempura-Person"},"content":"        // Initialise list of tasks","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Tempura-Person"},"content":"        ArrayList\u003cTask\u003e TaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Tempura-Person"},"content":"        // while LoopEnd \u003d true loop to accept user input","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Tempura-Person"},"content":"        boolean LoopEnd \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Tempura-Person"},"content":"        while (!LoopEnd) {","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Tempura-Person"},"content":"            Scanner UserScan \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Tempura-Person"},"content":"            // try block to catch DukeException and prevent program from terminating itself.","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Tempura-Person"},"content":"            try{","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Tempura-Person"},"content":"                // switch case for future commands","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Tempura-Person"},"content":"                switch (UserScan.next()) {","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Tempura-Person"},"content":"                    // loop breaks, ending program if input is \"bye\"","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"bye\"):","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: bye format is anything other than [ bye ]","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Tempura-Person"},"content":"                        if (UserScan.nextLine().length()\u003e0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, bye command format is used wrongly.\\nCorrect format is as follows:\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Tempura-Person"},"content":"                                    \"[ bye ]\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Tempura-Person"},"content":"                        System.out.println(border + \"Goodbye, then!\\n\" + border);","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"Tempura-Person"},"content":"                        LoopEnd \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"Tempura-Person"},"content":"                        break;","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Tempura-Person"},"content":"                    // Duke lists out all Task names in TaskList when input is \"list\"","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"list\"):","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: list format is anything other than [ list ]","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Tempura-Person"},"content":"                        if (UserScan.nextLine().length()\u003e0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, list command format is used wrongly.\\nCorrect format is as follows:\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Tempura-Person"},"content":"                                    \"[ list ]\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Tempura-Person"},"content":"                        if (TaskList.size()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println(border + \"You don\u0027t have anything to do right now!\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Tempura-Person"},"content":"                            break;","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Tempura-Person"},"content":"                        StringBuilder ToPrint \u003d new StringBuilder();","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Tempura-Person"},"content":"                        for (int i \u003d 0; i \u003c TaskList.size(); i++) {","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Tempura-Person"},"content":"                            ToPrint.append(i).append(1).append(\". \").append(TaskList.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Tempura-Person"},"content":"                        System.out.println(border + \"Here are your tasks:\\n\" + ToPrint + border);","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Tempura-Person"},"content":"                        break;","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Tempura-Person"},"content":"                    // Duke allows user to mark tasks as done when input is \"mark\"","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"mark\"):","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Tempura-Person"},"content":"                        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Tempura-Person"},"content":"                            String MarkString \u003d UserScan.nextLine().strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: mark format is anything other than [ mark \u003cinsert integer\u003e ]","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Tempura-Person"},"content":"                            if (MarkString.length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, mark command format is used wrongly.\\nCorrect format is as follows:\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"Tempura-Person"},"content":"                                        \"[ mark \u003cinsert INTEGER\u003e ]\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Tempura-Person"},"content":"                            int MarkInput \u003d Integer.parseInt(MarkString) - 1;","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Tempura-Person"},"content":"                            TaskList.get(MarkInput).MarkDone();","lastModifiedDate":"2023-01-16"},{"lineNumber":68,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println(border + \"Okay, the following task is marked as done!\\n\");","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println((MarkInput+1 + \". \") + TaskList.get(MarkInput).toString() + \"\\n\" + border);","lastModifiedDate":"2023-01-16"},{"lineNumber":70,"author":{"gitId":"Tempura-Person"},"content":"                            break;","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: mark is NOT paired with an integer (e.g. unmark two, unmark 2.3)","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"Tempura-Person"},"content":"                        catch (NumberFormatException | InputMismatchException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":74,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, mark can only be used with an INTEGER. (e.g. 1, 2...)\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":76,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: mark target does not exist (e.g. task number is out of bounds)","lastModifiedDate":"2023-01-17"},{"lineNumber":77,"author":{"gitId":"Tempura-Person"},"content":"                        catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":78,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, you can only mark task numbers that exist.\\nYou have \"","lastModifiedDate":"2023-01-17"},{"lineNumber":79,"author":{"gitId":"Tempura-Person"},"content":"                                    + TaskList.size() + \" task(s) in your list.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":80,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":81,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"Tempura-Person"},"content":"                        // Duke allows user to mark tasks as NOT done when input is \"unmark\"","lastModifiedDate":"2023-01-16"},{"lineNumber":83,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"unmark\"):","lastModifiedDate":"2023-01-16"},{"lineNumber":84,"author":{"gitId":"Tempura-Person"},"content":"                        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":85,"author":{"gitId":"Tempura-Person"},"content":"                            String UnmarkString \u003d UserScan.nextLine().strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":86,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: unmark format is anything other than [ unmark \u003cinsert integer\u003e ]","lastModifiedDate":"2023-01-17"},{"lineNumber":87,"author":{"gitId":"Tempura-Person"},"content":"                            if (UnmarkString.length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":88,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, unmark command format is used wrongly.\\nCorrect format is as follows:\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":89,"author":{"gitId":"Tempura-Person"},"content":"                                        \"[ unmark \u003cinsert INTEGER\u003e ]\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":90,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":91,"author":{"gitId":"Tempura-Person"},"content":"                            int UnmarkInput \u003d Integer.parseInt(UnmarkString) - 1;","lastModifiedDate":"2023-01-17"},{"lineNumber":92,"author":{"gitId":"Tempura-Person"},"content":"                            TaskList.get(UnmarkInput).MarkNotDone();","lastModifiedDate":"2023-01-16"},{"lineNumber":93,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println(border + \"Okay, the following task is marked as NOT done!\\n\");","lastModifiedDate":"2023-01-16"},{"lineNumber":94,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println((UnmarkInput+1 + \". \") + TaskList.get(UnmarkInput).toString() + \"\\n\" + border);","lastModifiedDate":"2023-01-16"},{"lineNumber":95,"author":{"gitId":"Tempura-Person"},"content":"                            break;","lastModifiedDate":"2023-01-16"},{"lineNumber":96,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: unmark is NOT paired with an integer (e.g. unmark two, unmark 2.3)","lastModifiedDate":"2023-01-17"},{"lineNumber":98,"author":{"gitId":"Tempura-Person"},"content":"                        catch (NumberFormatException | InputMismatchException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, unmark can only be used with an INTEGER. (e.g. 1, 2...)\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":101,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: unmark target does not exist (e.g. task number is out of bounds)","lastModifiedDate":"2023-01-17"},{"lineNumber":102,"author":{"gitId":"Tempura-Person"},"content":"                        catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":103,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, you can only unmark task numbers that exist.\\nYou have \"","lastModifiedDate":"2023-01-17"},{"lineNumber":104,"author":{"gitId":"Tempura-Person"},"content":"                                    + TaskList.size() + \" task(s) in your list.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":105,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":106,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":107,"author":{"gitId":"Tempura-Person"},"content":"                        // Duke deletes task when input is \"delete\"","lastModifiedDate":"2023-01-17"},{"lineNumber":108,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"delete\"):","lastModifiedDate":"2023-01-17"},{"lineNumber":109,"author":{"gitId":"Tempura-Person"},"content":"                        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":110,"author":{"gitId":"Tempura-Person"},"content":"                            String DeleteString \u003d UserScan.nextLine().strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":111,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: delete format is anything other than [ delete \u003cinsert integer\u003e ]","lastModifiedDate":"2023-01-17"},{"lineNumber":112,"author":{"gitId":"Tempura-Person"},"content":"                            if (DeleteString.length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":113,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, delete command format is used wrongly.\\nCorrect format is as follows:\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":114,"author":{"gitId":"Tempura-Person"},"content":"                                        \"[ delete \u003cinsert INTEGER\u003e ]\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":115,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":116,"author":{"gitId":"Tempura-Person"},"content":"                            int DeleteInput \u003d Integer.parseInt(DeleteString) - 1;","lastModifiedDate":"2023-01-17"},{"lineNumber":117,"author":{"gitId":"Tempura-Person"},"content":"                            Task DeletedTask \u003d TaskList.get(DeleteInput);","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"Tempura-Person"},"content":"                            TaskList.remove(DeleteInput);","lastModifiedDate":"2023-01-17"},{"lineNumber":119,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println(border + \"Okay, i\u0027ve deleted the following task!\\n\");","lastModifiedDate":"2023-01-17"},{"lineNumber":120,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println((DeleteInput+1 + \". \") + DeletedTask.toString() + \"\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":121,"author":{"gitId":"Tempura-Person"},"content":"                            break;","lastModifiedDate":"2023-01-17"},{"lineNumber":122,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":123,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: delete is NOT paired with an integer (e.g. delete two, delete 2.3)","lastModifiedDate":"2023-01-17"},{"lineNumber":124,"author":{"gitId":"Tempura-Person"},"content":"                        catch (NumberFormatException | InputMismatchException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":125,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, delete can only be used with an INTEGER. (e.g. 1, 2...)\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":126,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":127,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: delete target does not exist (e.g. task number is out of bounds)","lastModifiedDate":"2023-01-17"},{"lineNumber":128,"author":{"gitId":"Tempura-Person"},"content":"                        catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":129,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, you can only delete task numbers that exist.\\nYou have \"","lastModifiedDate":"2023-01-17"},{"lineNumber":130,"author":{"gitId":"Tempura-Person"},"content":"                                    + TaskList.size() + \" task(s) in your list.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":131,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":132,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":133,"author":{"gitId":"Tempura-Person"},"content":"                        // Duke adds Deadline","lastModifiedDate":"2023-01-16"},{"lineNumber":134,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"deadline\"):","lastModifiedDate":"2023-01-16"},{"lineNumber":135,"author":{"gitId":"Tempura-Person"},"content":"                        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":136,"author":{"gitId":"Tempura-Person"},"content":"                            String DeadlineSentence \u003d UserScan.nextLine();","lastModifiedDate":"2023-01-16"},{"lineNumber":137,"author":{"gitId":"Tempura-Person"},"content":"                            String DeadlineName \u003d DeadlineSentence.substring(0, DeadlineSentence.indexOf(\" /by\"));","lastModifiedDate":"2023-01-16"},{"lineNumber":138,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: deadline description is blank.","lastModifiedDate":"2023-01-17"},{"lineNumber":139,"author":{"gitId":"Tempura-Person"},"content":"                            if (DeadlineName.strip().length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":140,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, deadline description cannot be blank.\\nTry again.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":141,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":142,"author":{"gitId":"Tempura-Person"},"content":"                            String DeadlineDate \u003d DeadlineSentence.substring(DeadlineSentence.indexOf(\" /by\")+5);","lastModifiedDate":"2023-01-16"},{"lineNumber":143,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: deadline date is blank.","lastModifiedDate":"2023-01-17"},{"lineNumber":144,"author":{"gitId":"Tempura-Person"},"content":"                            if (DeadlineDate.strip().length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":145,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, deadline date cannot be blank.\\nTry again.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":146,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":147,"author":{"gitId":"Tempura-Person"},"content":"                            Task DeadlineToAdd \u003d new Deadline(DeadlineName, DeadlineDate);","lastModifiedDate":"2023-01-16"},{"lineNumber":148,"author":{"gitId":"Tempura-Person"},"content":"                            TaskList.add(DeadlineToAdd);","lastModifiedDate":"2023-01-16"},{"lineNumber":149,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println(border + \"Task added:\\n \" + DeadlineToAdd + \"\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":150,"author":{"gitId":"Tempura-Person"},"content":"                                    + \"There are now \" + TaskList.size() + \" task(s) in your list.\\n\" + border);","lastModifiedDate":"2023-01-16"},{"lineNumber":151,"author":{"gitId":"Tempura-Person"},"content":"                            break;","lastModifiedDate":"2023-01-16"},{"lineNumber":152,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":153,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: deadline format is anything other than [ deadline /by \u003cinsert deadline\u003e ]","lastModifiedDate":"2023-01-17"},{"lineNumber":154,"author":{"gitId":"Tempura-Person"},"content":"                        catch (StringIndexOutOfBoundsException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":155,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, deadline command format is used wrongly.\\nCorrect format is as follows:\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":156,"author":{"gitId":"Tempura-Person"},"content":"                                    \"[ deadline /by \u003cinsert deadline\u003e ]\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":157,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":158,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":159,"author":{"gitId":"Tempura-Person"},"content":"                        // Duke adds Event","lastModifiedDate":"2023-01-16"},{"lineNumber":160,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"event\"):","lastModifiedDate":"2023-01-16"},{"lineNumber":161,"author":{"gitId":"Tempura-Person"},"content":"                        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":162,"author":{"gitId":"Tempura-Person"},"content":"                            String EventSentence \u003d UserScan.nextLine();","lastModifiedDate":"2023-01-16"},{"lineNumber":163,"author":{"gitId":"Tempura-Person"},"content":"                            String EventName \u003d EventSentence.substring(0, EventSentence.indexOf(\" /from\"));","lastModifiedDate":"2023-01-16"},{"lineNumber":164,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: event description is blank.","lastModifiedDate":"2023-01-17"},{"lineNumber":165,"author":{"gitId":"Tempura-Person"},"content":"                            if (EventName.strip().length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":166,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, event description cannot be blank.\\nTry again.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":167,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":168,"author":{"gitId":"Tempura-Person"},"content":"                            String FromDate \u003d EventSentence.substring(EventSentence.indexOf(\" /from\")+7, EventSentence.indexOf(\" /to\"));","lastModifiedDate":"2023-01-16"},{"lineNumber":169,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: event\u0027s from field is blank.","lastModifiedDate":"2023-01-17"},{"lineNumber":170,"author":{"gitId":"Tempura-Person"},"content":"                            if (FromDate.strip().length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":171,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, event\u0027s from field cannot be blank.\\nTry again.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":172,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":173,"author":{"gitId":"Tempura-Person"},"content":"                            String ToDate \u003d EventSentence.substring(EventSentence.indexOf(\" /to\")+5);","lastModifiedDate":"2023-01-16"},{"lineNumber":174,"author":{"gitId":"Tempura-Person"},"content":"                            // ERROR: event\u0027s to field is blank.","lastModifiedDate":"2023-01-17"},{"lineNumber":175,"author":{"gitId":"Tempura-Person"},"content":"                            if (ToDate.strip().length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":176,"author":{"gitId":"Tempura-Person"},"content":"                                throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, event\u0027s to field cannot be blank.\\nTry again.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":177,"author":{"gitId":"Tempura-Person"},"content":"                            }","lastModifiedDate":"2023-01-17"},{"lineNumber":178,"author":{"gitId":"Tempura-Person"},"content":"                            Task EventToAdd \u003d new Event(EventName, FromDate, ToDate);","lastModifiedDate":"2023-01-16"},{"lineNumber":179,"author":{"gitId":"Tempura-Person"},"content":"                            TaskList.add(EventToAdd);","lastModifiedDate":"2023-01-16"},{"lineNumber":180,"author":{"gitId":"Tempura-Person"},"content":"                            System.out.println(border + \"Task added:\\n \" + EventToAdd + \"\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":181,"author":{"gitId":"Tempura-Person"},"content":"                                    + \"There are now \" + TaskList.size() + \" task(s) in your list.\\n\"+ border);","lastModifiedDate":"2023-01-16"},{"lineNumber":182,"author":{"gitId":"Tempura-Person"},"content":"                            break;","lastModifiedDate":"2023-01-16"},{"lineNumber":183,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":184,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: event format is anything other than [ event /from \u003cinsert from field\u003e /to \u003cinsert to field\u003e ]","lastModifiedDate":"2023-01-17"},{"lineNumber":185,"author":{"gitId":"Tempura-Person"},"content":"                        catch (StringIndexOutOfBoundsException err) {","lastModifiedDate":"2023-01-17"},{"lineNumber":186,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, event command format is used wrongly.\\nCorrect format is as follows:\\n\" +","lastModifiedDate":"2023-01-17"},{"lineNumber":187,"author":{"gitId":"Tempura-Person"},"content":"                                    \"[ event /from \u003cinsert from field\u003e /to \u003cinsert to field\u003e ]\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":188,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":189,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":190,"author":{"gitId":"Tempura-Person"},"content":"                        // Duke adds To-Do","lastModifiedDate":"2023-01-16"},{"lineNumber":191,"author":{"gitId":"Tempura-Person"},"content":"                    case (\"todo\"):","lastModifiedDate":"2023-01-16"},{"lineNumber":192,"author":{"gitId":"Tempura-Person"},"content":"                        String ToDoName \u003d UserScan.nextLine();","lastModifiedDate":"2023-01-16"},{"lineNumber":193,"author":{"gitId":"Tempura-Person"},"content":"                        // ERROR: To-Do description is blank.","lastModifiedDate":"2023-01-17"},{"lineNumber":194,"author":{"gitId":"Tempura-Person"},"content":"                        if (ToDoName.strip().length()\u003d\u003d0) {","lastModifiedDate":"2023-01-17"},{"lineNumber":195,"author":{"gitId":"Tempura-Person"},"content":"                            throw new DukeException(\"\\n\" + border + \"[ERROR]\\nUh, To-Do description cannot be blank.\\nTry again.\\n\" + border);","lastModifiedDate":"2023-01-17"},{"lineNumber":196,"author":{"gitId":"Tempura-Person"},"content":"                        }","lastModifiedDate":"2023-01-17"},{"lineNumber":197,"author":{"gitId":"Tempura-Person"},"content":"                        Task TaskToAdd \u003d new ToDo(ToDoName);","lastModifiedDate":"2023-01-16"},{"lineNumber":198,"author":{"gitId":"Tempura-Person"},"content":"                        TaskList.add(new ToDo(ToDoName));","lastModifiedDate":"2023-01-16"},{"lineNumber":199,"author":{"gitId":"Tempura-Person"},"content":"                        System.out.println(border + \"Task added:\\n \" + TaskToAdd + \"\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":200,"author":{"gitId":"Tempura-Person"},"content":"                                + \"There are now \" + TaskList.size() + \" task(s) in your list.\\n\"+ border);","lastModifiedDate":"2023-01-16"},{"lineNumber":201,"author":{"gitId":"Tempura-Person"},"content":"                        break;","lastModifiedDate":"2023-01-16"},{"lineNumber":202,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":203,"author":{"gitId":"Tempura-Person"},"content":"                    // Duke does not understand any other commands (yet).","lastModifiedDate":"2023-01-16"},{"lineNumber":204,"author":{"gitId":"Tempura-Person"},"content":"                    default:","lastModifiedDate":"2023-01-16"},{"lineNumber":205,"author":{"gitId":"Tempura-Person"},"content":"                        System.out.println(border + \"Yeah, i\u0027m sorry. I don\u0027t understand that.\\n\" + border);","lastModifiedDate":"2023-01-16"},{"lineNumber":206,"author":{"gitId":"Tempura-Person"},"content":"                }","lastModifiedDate":"2023-01-16"},{"lineNumber":207,"author":{"gitId":"Tempura-Person"},"content":"            }","lastModifiedDate":"2023-01-16"},{"lineNumber":208,"author":{"gitId":"Tempura-Person"},"content":"            // Catches DukeException if thrown and prevents program from terminating.","lastModifiedDate":"2023-01-17"},{"lineNumber":209,"author":{"gitId":"Tempura-Person"},"content":"            catch (DukeException ex){","lastModifiedDate":"2023-01-17"},{"lineNumber":210,"author":{"gitId":"Tempura-Person"},"content":"                System.out.println(ex.PrintErrorMessage());","lastModifiedDate":"2023-01-17"},{"lineNumber":211,"author":{"gitId":"Tempura-Person"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":212,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":213,"author":{"gitId":"Tempura-Person"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Tempura-Person":205,"-":10}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tempura-Person"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Tempura-Person"},"content":"    protected String ErrorMessage;","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Tempura-Person"},"content":"    public DukeException(String ErrorMessage) {","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Tempura-Person"},"content":"        super(ErrorMessage);","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Tempura-Person"},"content":"        this.ErrorMessage \u003d ErrorMessage;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Tempura-Person"},"content":"    public String PrintErrorMessage () {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Tempura-Person"},"content":"        return this.ErrorMessage;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Tempura-Person"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Tempura-Person":12}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tempura-Person"},"content":"public class Event extends Task{","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Tempura-Person"},"content":"    protected String by,from,to;","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Tempura-Person"},"content":"    public Event(String TaskName, String from, String to) {","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Tempura-Person"},"content":"        super(TaskName);","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Tempura-Person"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Tempura-Person"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Tempura-Person"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Tempura-Person"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Tempura-Person"},"content":"        return \"[E]\" + \"[\" + super.getStatus() + \"] \" + super.toString()","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Tempura-Person"},"content":"                + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Tempura-Person"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Tempura-Person":15}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tempura-Person"},"content":"public class Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Tempura-Person"},"content":"    protected String name;","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Tempura-Person"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Tempura-Person"},"content":"    public Task(String TaskName) {","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Tempura-Person"},"content":"        this.name \u003d TaskName;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Tempura-Person"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Tempura-Person"},"content":"    // gets name of task","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Tempura-Person"},"content":"    public String getName() {","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Tempura-Person"},"content":"        return this.name;","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Tempura-Person"},"content":"    // gets status of task, mark done with \u0027X\u0027","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Tempura-Person"},"content":"    public String getStatus() {","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Tempura-Person"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Tempura-Person"},"content":"    // marks task as done","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Tempura-Person"},"content":"    public void MarkDone()  {","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Tempura-Person"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Tempura-Person"},"content":"    // marks task as NOT done","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Tempura-Person"},"content":"    public void MarkNotDone() {","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Tempura-Person"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Tempura-Person"},"content":"    // properly formats Task as String","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Tempura-Person"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Tempura-Person"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Tempura-Person"},"content":"        return getName();","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Tempura-Person"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Tempura-Person":30}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tempura-Person"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Tempura-Person"},"content":"    public ToDo(String TaskName) {","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Tempura-Person"},"content":"        super(TaskName);","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Tempura-Person"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Tempura-Person"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Tempura-Person"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Tempura-Person"},"content":"        return \"[T]\" + \"[\" + super.getStatus() + \"] \" + super.toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Tempura-Person"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Tempura-Person"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Tempura-Person":10}}]
