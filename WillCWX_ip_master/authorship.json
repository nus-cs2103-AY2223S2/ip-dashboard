[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"/*","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":" * This file was generated by the Gradle \u0027init\u0027 task.","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":" *","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * This is a general purpose Gradle build.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"plugins {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"run {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"application {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    mainClassName \u003d \u0027Launcher\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"test {","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"dependencies {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    ","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    // Dependencies for Testing (JUnit)","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    // this is needed for vscode","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    testImplementation(\u0027org.junit.platform:junit-platform-launcher:1.5.2\u0027)","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"    // Dependencies for GUI (JavaFX)","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"repositories {","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"    mavenCentral()","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":53}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"/*","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":" * This file was generated by the Gradle \u0027init\u0027 task.","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":" *","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The settings file is used to specify which projects to include in your build.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" *","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" * Detailed information about configuring a multi-project build in Gradle can be found","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" * in the user manual at https://docs.gradle.org/7.6/userguide/multi_project_builds.html","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"rootProject.name \u003d \u0027ip\u0027","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":10}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public class Launcher {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"            stage.show();","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":31}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.util.Timer;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.util.TimerTask;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"import duke.task.History;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Gui;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":" * The Duke class represents a CLI chatbot that performs operations based on CLI","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":" * user input.","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":" * Currently, Duke accepts the commands:","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":" * {@code echo, list, mark, unmark, todo, deadline, event, bye}","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"public class Duke {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    private Storage store;","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    private Gui gui;","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    private History history;","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"     * Constructs Duke.","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    public Duke() {","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        history \u003d History.getInstance();","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"            store \u003d new Storage(\"src/main/resources/duke.txt\");","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"            tasks \u003d store.loadFromFile();","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"            tasks \u003d tasks \u003d\u003d null ? new TaskList() : tasks;","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"     * Gets Duke to respond once to an input.","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"     * @param input The user input to respond to.","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     * @return Duke\u0027s response to the user input.","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"            gui \u003d new Gui(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"            String command \u003d gui.getCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"            Command c \u003d Parser.parseCommand(command);","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            String response \u003d c.execute(tasks, gui, store);","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"            if (response !\u003d \"Undid last command\") {","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"                history.addState(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"            // from https://stackoverflow.com/questions/21974415","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"            if (c.canExit()) {","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"                new Timer().schedule(new TimerTask() {","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"                    public void run() {","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"                        System.exit(0);","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"                    }","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"                }, 1300); // 1.3s","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"            return response;","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"            return gui.produceExceptionOutput(e.getMessage());","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"WillCWX":71,"-":1}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s deadline function","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the add deadline command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    public AddDeadlineCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * Adds a Deadline task to the tasklist and stores the new tasklist.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        String[] data \u003d ui.getDeadline();","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        Deadline temp \u003d new Deadline(data[0], data[1]);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        tasks.add(temp);","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        return ui.produceDukeOutput(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + temp.toString()","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"                + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":32}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s Event function.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the add event command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    public AddEventCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * Adds an Event task to the tasklist and stores the new tasklist.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        String[] data \u003d ui.getEvent();","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        Event temp \u003d new Event(data[0], data[1], data[2]);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        tasks.add(temp);","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        return ui.produceDukeOutput(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + temp.toString()","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"                + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":30}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s todo command","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public AddToDoCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Adds a ToDo task to the tasklist and stores the new tasklist.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        ToDo temp \u003d new ToDo(ui.getName());","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        tasks.add(temp);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        return ui.produceDukeOutput(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + temp.toString()","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"                + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":29}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * The command class represents Duke\u0027s function based on user input.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * Executes the command function.","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * @param tasks The tasklist to conduct the function with.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * @param ui    The ui to get user input and print out function notifications.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @param store The storage to save the tasklist with.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * @return An output string for duke, if any.","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the function cannot execute properly.","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    public abstract String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     * Tells Duke to not exit.","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"     * @return False.","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    public boolean canExit() {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":32}},{"path":"src/main/java/duke/command/CommandWords.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The Commands enum represents Duke\u0027s available commands.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public enum CommandWords {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"    ECHO, LIST, FIND, UNKNOWN, UNDO, PRIORITY, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, BYE;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":8}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s delete function.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the delete command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public DeleteCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Deletes a task and stores the resulting tasklist.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        Integer taskNum \u003d ui.getTaskNum();","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        String s \u003d tasks.delete(taskNum);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        return ui.produceDukeOutput(\"\\tNoted. I\u0027ve removed this task:\\n\\t  \" + s + \"\\n\" + \"\\tNow you have \"","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"                + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":28}},{"path":"src/main/java/duke/command/EchoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s Echo function.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the echo command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public EchoCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     * Echoes the user input.","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        return ui.produceInputAsOutput();","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":23}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s exit function.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the exit command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public ExitCommand() {}","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Begins Duke\u0027s shutdown.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) {","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        return ui.produceGoodbyeOutput();","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     * Tells Duke to exit, shutting down.","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"     * @return True","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    public boolean canExit() {","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":33}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s find command.","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the find command, */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public FindCommand() {}","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Prints out the tasks that contains a specific string given by the user.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the string given is empty.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        String[] subStrings \u003d ui.getName().split(\",\");","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        TaskList containStringTasks \u003d tasks.containsStringInName(subStrings);","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        return ui.produceTaskListOutput(containStringTasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"WillCWX":27}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * This class represent\u0027s Duke\u0027s list function.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the list command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public ListCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Informs the user of the tasks in tasklist.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) {","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        ui.throwAwayInput();","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        return ui.produceTaskListOutput(tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":24}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s mark function.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    /** Constucts the mark command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public MarkCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Marks the specific task and stores the resulting takslist.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        Integer taskNum \u003d ui.getTaskNum();","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        String s \u003d tasks.mark(taskNum);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        return ui.produceDukeOutput(\"\\tNice! I\u0027ve marked this task as done:\\n\\t  \" + s + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":28}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" * This class interprets command.","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"public class Parser {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     * Parses the input string to a specific command.","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"     * @param s The string representation of a CommandWord.","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * @return The specific command to be executed.","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the string cannot be parsed to a CommandWord.","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    public static Command parseCommand(String s) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        CommandWords command \u003d readCommandWord(s);","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        switch (command) {","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        case LIST:","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        case PRIORITY:","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"            return new PriorityCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        case FIND:","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"            return new FindCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        case ECHO:","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"            return new EchoCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        case MARK:","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"            return new MarkCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        case UNMARK:","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"            return new UnmarkCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        case TODO:","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"            return new AddToDoCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"        case DEADLINE:","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"            return new AddDeadlineCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        case EVENT:","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"            return new AddEventCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        case DELETE:","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"            return new DeleteCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        case UNDO:","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"            return new UndoCommand();","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"        case BYE:","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"        default:","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"            // default should be CommandWords.UNKNOWN","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"            return new UnknownCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"    private static CommandWords readCommandWord(String s) {","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            return CommandWords.valueOf(s.toUpperCase());","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"            return CommandWords.UNKNOWN;","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":57}},{"path":"src/main/java/duke/command/PriorityCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Represents the Priority function of Duke.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class PriorityCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the priority command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public PriorityCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     * Informs the user of their tasks in order from earliest date not done.","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        return ui.produceTaskListOutput(tasks.sorted());","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":22}},{"path":"src/main/java/duke/command/UndoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.History;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * Represents the undo function of Duke.","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static History history \u003d History.getInstance();","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /** Constructs the priority command. */","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    public UndoCommand() {}","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        ui.throwAwayInput();","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        tasks.setState(history.undoState());","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        return ui.produceDukeOutput(\"Undid last command\");","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"WillCWX":26}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents an unknown command that Duke cannot execute","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    /** Constructs an unknown command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    public UnknownCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * Throws a DukeException indicating that the command is not understood.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException Always as command is not understood.","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        ui.throwAwayInput();","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        throw new DukeException(\"I don\u0027t understand that command\");","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":26}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.IoHandler;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s unmark function.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    /** Contructs an unmark command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public UnmarkCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Unmarks a task and stores the resulting tasklist.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    public String execute(TaskList tasks, IoHandler ui, Storage store) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        Integer taskNum \u003d ui.getTaskNum();","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        String s \u003d tasks.unmark(taskNum);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        return ui.produceDukeOutput(\"\\tOK, I\u0027ve marked this task as not done yet:\" + \"\\n\\t  \" + s + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":28}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.exception;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The DukeException class extends the Exception class and represents that an error has occured in Duke","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"     * Constructs a DukeException.","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     * @param e The error message.","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public DukeException(String e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"        super(\"Duke: OOPS!!! \" + e);","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WillCWX":16}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.io.EOFException;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.io.File;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":" * This storage class represents Duke\u0027s storage.","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"public class Storage {","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    private File store;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     * Constructs the Storage using the file at path s.","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     * @param s The path String to the file that will be used as the storage.","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the file has issues.","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    public Storage(String s) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        File f \u003d new File(s);","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        store \u003d f;","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            if (!f.exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"                if (!f.getParentFile().exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"                    f.getParentFile().mkdirs();","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"                    f.createNewFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"                } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"                    f.createNewFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"            } else if (!(f.canRead() \u0026\u0026 f.canWrite())) {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"File at src/main/resources/duke.txt cannot be read/written!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Failed to create saving directory at\" + \"src/main/resources/duke.txt\");","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"File at src/main/resources/duke.txt cannot be read/written!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        } finally {","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"            assert store !\u003d null : \"store should never be null\";","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     * Saves the tasks to the storage file.","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"     * @param tasks The tasks to save.","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"    public void saveToFile(TaskList tasks) {","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"            //Solution below adapted from https://www.geeksforgeeks.org/serialization-in-java/","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"            FileOutputStream temp \u003d new FileOutputStream(store);","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"            ObjectOutputStream out \u003d new ObjectOutputStream(temp);","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"            out.writeObject(tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"            out.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"            temp.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"     * Loads from the storage file.","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"     * @return The arraylist containing the tasks.","lastModifiedDate":"2023-01-21"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the file cannot be read.","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"    public TaskList loadFromFile() throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"            //Solution below adapted from https://www.geeksforgeeks.org/serialization-in-java/","lastModifiedDate":"2023-01-21"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"            FileInputStream temp \u003d new FileInputStream(store);","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"            ObjectInputStream in \u003d new ObjectInputStream(temp);","lastModifiedDate":"2023-01-21"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"            // Any corruption will be handled below.","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"            TaskList output \u003d (TaskList) in.readObject();","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"            in.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"            temp.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"            return output;","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"        } catch (EOFException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"            // do nothing, expected from empty save file","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Unable to read file: \" + e.getMessage());","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"        return null;","lastModifiedDate":"2023-01-21"},{"lineNumber":97,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":98,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":98}},{"path":"src/main/java/duke/task/DatedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * The DatedTask represents a Task that contains a date.","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class DatedTask extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    // Unique identifier for Serializer implementation: do not change var name","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 110;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    private LocalDate imptDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Dated Task.","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     * @param name    The name of the task.","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     * @param impDate The date to be used for comparisons.","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If imptDate is not a valid date.","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    protected DatedTask(String name, String impDate) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        super(name);","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"            this.imptDate \u003d LocalDate.parse(impDate);","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Write the date in this format: YYYY-MM-DD\");","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"     * @return True, the class is dated.","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    public int compareTo(Task other) {","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        // done tasks are equally unimportant","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"        if (other.isMarkedDone() \u0026\u0026 this.isMarkedDone()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"            return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"        if (!other.isMarkedDone() \u0026\u0026 !this.isMarkedDone()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"            if (other instanceof DatedTask) {","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"                DatedTask otherDated \u003d (DatedTask) other;","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"                return imptDate.compareTo(otherDated.imptDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"            // we are more important","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"            return -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"        return this.isMarkedDone() ? 1 : -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":60}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * The Deadline class extends the DatedTask class and represents a datedtask with a due date.","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class Deadline extends DatedTask {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    // Unique identifier for Serializer implementation: do not change var name","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 102;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    private LocalDate date;","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Deadline Task with a due date.","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * @param date The date of when the task is due.","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the date given is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    public Deadline(String name, String date) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        super(name, date);","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"            this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"                    \"The deadline command should be used like this:\\n\" + \"\\tdeadline {name} /by {date}\");","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydmy \u003d DateTimeFormatter.ofPattern(\"E, d MMM uu\");","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.date.format(daydmy) + \")\";","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":47}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * The Event class extends the DatedTask class and represents an event with a start and end date.","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class Event extends DatedTask {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    // Unique identifier for Serializer implementation: do not change var name","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 103;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    private LocalDate start;","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    private LocalDate end;","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     * Constructs an Event task with a start and end date.","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * @param name  The name of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     * @param start The date the event begins on.","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * @param end   The date the event ends on.","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the dates are not formatted properly or the name is invalid.","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    public Event(String name, String start, String end) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        super(name, end);","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            this.start \u003d LocalDate.parse(start);","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"            this.end \u003d LocalDate.parse(end);","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"            assert this.start.isBefore(this.end) : \"Start Date should be before end date!\";","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The event command should be used like this:\\n\"","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tevent {name} /from {YYYY-MM-DD} /to {YYYY-MM-DD}\");","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydm \u003d DateTimeFormatter.ofPattern(\"E, dd MMM\");","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydmyy \u003d DateTimeFormatter.ofPattern(\"E, dd MMM uu\");","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start.format(daydm) + \" to: \" + end.format(daydmyy)","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"                + \")\";","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":56}},{"path":"src/main/java/duke/task/History.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * The History class represents the past states of the tasklist.","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class History {","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    private static final int MAX_HISTORY \u003d 30;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    private static History history \u003d new History();","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private ArrayList\u003cTaskList\u003e previousTaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    private int current;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    private History() {","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        previousTaskList \u003d new ArrayList\u003c\u003e(30);","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        current \u003d 0;","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * Retrives the single instance of history.","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * @return The instance of history.","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    public static History getInstance() {","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        return history;","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"     * Adds the current state of the tasklist to history.","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"     * @param state The state of the tasklist to add.","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"    public void addState(TaskList state) {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        if (current \u003d\u003d MAX_HISTORY) {","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"            previousTaskList.remove(0);","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"            current -\u003d 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        previousTaskList.add(new TaskList(state));","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        current +\u003d 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     * Retrieves the direct previous state of the Tasklist.","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"     * @return The previous state of the tasklist.","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException if there is nothing to undo.","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"    public TaskList undoState() throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        if (current \u003c\u003d 0) {","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"There is nothing to undo!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"        current -\u003d 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"        return previousTaskList.get(current);","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"WillCWX":57}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" * This Task class represents a task.","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"public class Task implements Serializable, Comparable\u003cTask\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    // Unique identifier for Serializer implementation: do not change var name","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 100;","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    private String name;","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Task with a name.","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of a task.","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"     * @return True when marked done.","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    public boolean setAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        return this.isDone \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"     * Unmarks the task, making the task not done.","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"     * @return True when successfully unmarked.","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    public boolean setAsNotDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        return !(this.isDone \u003d false);","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     * Gets the done status of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     * @return True if done and false if not done.","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"    public boolean isMarkedDone() {","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     * Informs the user if the task name contains the string s.","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"     * @param s The string to check if the name contains.","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"     * @return True if string s is found in the name, false otherwise.","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"    public boolean hasStringInName(String s) {","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"        return name.contains(s);","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"     * Informs the user if the task has a set time.","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"     * @return True if it has a set time, false otherwise.","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"        return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"     * Compares this tasks with the specified task for order of importance.","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"     * Returns a negative integer, zero, or a positive integer if this object is more important than, equal","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"     * to, or less important than the specified object.","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"     * \u003cpre\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"     * Order of importance determination:","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"     * 1. Unfinished Tasks are More Important than Completed Tasks.","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"     * 2. Dated Unfinished Tasks are More Important than Undated Unfinished Tasks.","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"     * 3. Unfinished Earlier End Dates are More Important than Unfinished Later End Dates.","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"     * \u003c/pre\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"     * @param other The task to compare to.","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"    public int compareTo(Task other) {","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"        // done tasks are equally unimportant","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"        if (other.isMarkedDone() \u0026\u0026 this.isMarkedDone()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"            return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"        if (!other.isMarkedDone() \u0026\u0026 !this.isMarkedDone()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"            if (other.hasDate()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"                return 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"WillCWX"},"content":"            // we are equally unimportant","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"WillCWX"},"content":"            return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":100,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":101,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"WillCWX"},"content":"        return this.isMarkedDone() ? 1 : -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":104,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":105,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":106,"author":{"gitId":"WillCWX"},"content":"     * Returns the String representation of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":107,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":108,"author":{"gitId":"WillCWX"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":109,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":110,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":111,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":112,"author":{"gitId":"WillCWX"},"content":"        return isDone ? \"[X] \" + this.name : \"[ ] \" + this.name;","lastModifiedDate":"2023-01-18"},{"lineNumber":113,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":114,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":115,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"WillCWX":115}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * The tasklist represents the list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    // Unique identifier for Serializer implementation: do not change var name","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 200;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Constructs the task list.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        super();","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     * Constructs the task list given another tasklist.","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     * @param other The other task list.","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    public TaskList(TaskList other) {","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        super(other);","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"     * Returns a sorted copy of this tasklist.","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"     * @return A sorted copy of this tasklist.","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    public TaskList sorted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        TaskList sorted \u003d new TaskList();","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"            sorted.add(new Task(Integer.toString(i)));","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"        Collections.copy(sorted, this);","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        Collections.sort(sorted);","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"        return sorted;","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"     * Creates a tasklist containing the tasks that have the string in their names.","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"     * @param s The string that the task names will contain.","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"     * @return The tasklist containing the tasks that have the string in their names.","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"    public TaskList containsStringInName(String... s) {","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"        TaskList containsStringTasks \u003d new TaskList();","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"            Task temp \u003d get(i);","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"            for (int j \u003d 0; j \u003c s.length; j++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"                if (temp.hasStringInName(s[j])) {","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"                    containsStringTasks.add(temp);","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"                }","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"        return containsStringTasks;","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"     * Marks the task as done using the task number.","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"     * @param num The task number of the task to be marked.","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the task marked as done.","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the num is invalid or there are no tasks.","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"    public String mark(int num) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"There are no tasks to be marked.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"            get(num).setAsDone();","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"            return get(num).toString();","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + size());","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"     * Unmarks the task as done using the task number.","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"     * @param num The task number of the task to be unmarked.","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the task unmarked.","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the num is invalid or there are no tasks.","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"    public String unmark(int num) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"There are no tasks to be unmarked.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"WillCWX"},"content":"            get(num).setAsNotDone();","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"WillCWX"},"content":"            return get(num).toString();","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"WillCWX"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + size());","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"WillCWX"},"content":"     * Deletes the task using the task number.","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"WillCWX"},"content":"     * @param num The task number of the task to be deleted.","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the task unmarked.","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the num is invalid or there are no tasks.","lastModifiedDate":"2023-01-23"},{"lineNumber":114,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":115,"author":{"gitId":"WillCWX"},"content":"    public String delete(int num) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":116,"author":{"gitId":"WillCWX"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":117,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"There are no tasks to be deleted.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":118,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":119,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":120,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":121,"author":{"gitId":"WillCWX"},"content":"            String s \u003d get(num).toString();","lastModifiedDate":"2023-01-22"},{"lineNumber":122,"author":{"gitId":"WillCWX"},"content":"            remove(num);","lastModifiedDate":"2023-01-22"},{"lineNumber":123,"author":{"gitId":"WillCWX"},"content":"            return s;","lastModifiedDate":"2023-01-22"},{"lineNumber":124,"author":{"gitId":"WillCWX"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":125,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + size());","lastModifiedDate":"2023-01-22"},{"lineNumber":126,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":127,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":128,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"WillCWX"},"content":"    public void setState(TaskList tasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":130,"author":{"gitId":"WillCWX"},"content":"        clear();","lastModifiedDate":"2023-02-11"},{"lineNumber":131,"author":{"gitId":"WillCWX"},"content":"        addAll(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":132,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":133}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The ToDo class extends the Task class and represents a task that needs to be done.","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"    // Unique identifier for Serializer implementation: do not change var name","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 101;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     * Constructor for the ToDo class","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of the ToDo task","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        super(name);","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":24}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":" * An example of a custom control using FXML. This control represents a dialog box consisting of an ImageView","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":" * to represent the speaker\u0027s face and a label containing text from the speaker.","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    private void flip() {","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"        setAlignment(Pos.TOP_CENTER);","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     * Constructs a User Dialog Box.","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"     * @param text The dialog of the user.","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"     * @param img  The image of the user.","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"     * @return The user dialog box with the text and image of the user.","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Duke Dialog Box.","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"     * @param text The dialog of Duke.","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"     * @param img  The image of Duke.","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"     * @return The Duke dialog box with the text and image of Duke.","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"        db.flip();","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"        return db;","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":74}},{"path":"src/main/java/duke/ui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Gui represents a Ui that helps to handle input and ouput for graphics.","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class Gui implements IoHandler {","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    private String input;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    private String command;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private String others;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * Constuctor for Gui.","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @param input The graphical input for gui to handle.","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    public Gui(String input) {","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        breakInputIntoSubstrings();","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    public void setInput(String input) {","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        breakInputIntoSubstrings();","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    private void breakInputIntoSubstrings() {","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        String[] commands \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"            command \u003d commands[0];","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"            others \u003d commands[1];","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"            others \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"            System.out.println(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"            System.out.println(commands);","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    public String produceInputAsOutput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        return produceDukeOutput(\"\\tDuke: \" + others.strip() + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"    public void throwAwayInput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"        input \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        command \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"        others \u003d \"\";","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"    public String getCommand() {","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"        return command;","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"    public String getName() throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"        String name \u003d others.strip();","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"        if (name \u003d\u003d \"\") {","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"        return name;","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"    public String[] getDeadline() throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"            String[] sorted \u003d others.split(\" /by \");","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"            String[] data \u003d new String[] {sorted[0].strip(), sorted[1].strip()};","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"            return data;","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"                    \"The deadline command should be used like this:\\n\" + \"\\tdeadline {name} /by {date}\");","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"    public String[] getEvent() throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"            String[] line \u003d others.split(\" /from \", 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"            String[] dates \u003d line[1].split(\" /to \", 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"            String[] data \u003d new String[] {line[0].strip(), dates[0].strip(), dates[1].strip()};","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"            return data;","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The event command should be used like this:\\n\"","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tevent {name} /from {YYYY-MM-DD} /to {YYYY-MM-DD}\");","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"    public int getTaskNum() throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"WillCWX"},"content":"            String s \u003d others.strip();","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"WillCWX"},"content":"            int num \u003d Integer.parseInt(s) - 1;","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"WillCWX"},"content":"            return num;","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"WillCWX"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please input a valid task number\");","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":105,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"WillCWX"},"content":"    public String produceDukeOutput(String s) {","lastModifiedDate":"2023-02-02"},{"lineNumber":107,"author":{"gitId":"WillCWX"},"content":"        return s;","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":110,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":111,"author":{"gitId":"WillCWX"},"content":"    public String greet() {","lastModifiedDate":"2023-02-02"},{"lineNumber":112,"author":{"gitId":"WillCWX"},"content":"        // @formatter:off","lastModifiedDate":"2023-02-02"},{"lineNumber":113,"author":{"gitId":"WillCWX"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"WillCWX"},"content":"                    + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-02"},{"lineNumber":115,"author":{"gitId":"WillCWX"},"content":"                    + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-02"},{"lineNumber":116,"author":{"gitId":"WillCWX"},"content":"                    + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-02"},{"lineNumber":117,"author":{"gitId":"WillCWX"},"content":"                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-02-02"},{"lineNumber":118,"author":{"gitId":"WillCWX"},"content":"        // @formatter:on","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"WillCWX"},"content":"        String greetString \u003d \"Hello from\\n\" + logo + \"\\nWhat can I do for you?\\n\";","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"WillCWX"},"content":"        return greetString;","lastModifiedDate":"2023-02-02"},{"lineNumber":122,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":123,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":125,"author":{"gitId":"WillCWX"},"content":"    public String produceTaskListOutput(TaskList tasks) {","lastModifiedDate":"2023-02-02"},{"lineNumber":126,"author":{"gitId":"WillCWX"},"content":"        String ls \u003d \"\\tHere are the tasks in your list:\\n\";","lastModifiedDate":"2023-02-02"},{"lineNumber":127,"author":{"gitId":"WillCWX"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-02"},{"lineNumber":128,"author":{"gitId":"WillCWX"},"content":"            Task temp \u003d tasks.get(i);","lastModifiedDate":"2023-02-02"},{"lineNumber":129,"author":{"gitId":"WillCWX"},"content":"            ls \u003d ls + \"\\t\" + Integer.toString(i + 1) + \".\" + temp.toString() + \"\\n\";","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":131,"author":{"gitId":"WillCWX"},"content":"        return produceDukeOutput(ls);","lastModifiedDate":"2023-02-02"},{"lineNumber":132,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":133,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"WillCWX"},"content":"    public String produceGoodbyeOutput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"WillCWX"},"content":"        return produceDukeOutput(\"\\tGoodbye!\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":138,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":139,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":140,"author":{"gitId":"WillCWX"},"content":"    public String produceExceptionOutput(String message) {","lastModifiedDate":"2023-02-02"},{"lineNumber":141,"author":{"gitId":"WillCWX"},"content":"        return produceDukeOutput(\"\\t\" + message + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":142,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":143,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":144,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":144}},{"path":"src/main/java/duke/ui/IoHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" * Input Output Handler for Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"public interface IoHandler {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    // region Ui for input","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * Throws away the input.","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * Warning: May prompt user for a line of input if not used properly.","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public void throwAwayInput();","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * Retrieves the task number input.","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * @return The task number.","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the input is not a valid number.","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    public int getTaskNum() throws DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"     * Retrives the command input.","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"     * @return The string containing the user\u0027s command.","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"    public String getCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"     * Retrives the name of a task from input.","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"     * @return The string containing the name of a task from the user.","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the name is empty.","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    public String getName() throws DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     * Retrives the input for a deadline task.","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"     * @return The string array containing the name and date for a deadline task.","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the name and date are not found.","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"    public String[] getDeadline() throws DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"     * Retrives the input for an event task from the user.","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"     * @return The string array containing the name, start and end date for an event task.","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the name, start and end date are not found.","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"    public String[] getEvent() throws DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"    // endregion","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"    // region Ui for output","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"     * Gives Duke\u0027s greetings.","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"     * @return Duke\u0027s greetings as a formatted String.","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"    public String greet();","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"     * Outputs a formatted message of Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"     * @param s The message to be given to the user.","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"     * @return Duke\u0027s formatted version of the message.","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"    public String produceDukeOutput(String s);","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"     * Outputs a formatted TaskList of Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"     * @param tasks The task list to be formatted.","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"     * @return Duke\u0027s formatted version of the task list.","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"    public String produceTaskListOutput(TaskList tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"     * Outputs the input as Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"     * @return Duke\u0027s formatted version of the input.","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"    public String produceInputAsOutput();","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"     * Outputs the exception as Duke.","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"     * @param message The exception message.","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"WillCWX"},"content":"     * @return Duke\u0027s formatted version of the exception message.","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"WillCWX"},"content":"    public String produceExceptionOutput(String message);","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":102,"author":{"gitId":"WillCWX"},"content":"     * Outputs Duke\u0027s goodbye.","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":104,"author":{"gitId":"WillCWX"},"content":"     * @return Duke\u0027s goodbye.","lastModifiedDate":"2023-02-02"},{"lineNumber":105,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"WillCWX"},"content":"    public String produceGoodbyeOutput();","lastModifiedDate":"2023-02-02"},{"lineNumber":107,"author":{"gitId":"WillCWX"},"content":"    // endregion","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":109}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"     * them to the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"        if (response \u003d\u003d \"Undid last command\") {","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"            int length \u003d dialogContainer.getChildren().size();","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"            dialogContainer.getChildren().remove(length - 2, length);","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"                DialogBox.getDukeDialog(response, dukeImage));","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":55}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" contentDisplay\u003d\"TEXT_ONLY\" style\u003d\"-fx-label-padding: 10,0,0,0;\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"  prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"  xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"      prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"      onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"      prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"      \u003c/content\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"WillCWX":24}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public void deadline_badDate_dukeExceptionThrown() {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"            Deadline a \u003d new Deadline(\"hello\", \"bad date\");","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"            a.isMarkedDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"            fail();","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"            assertEquals(\"Duke: OOPS!!! Write the date in this format: YYYY-MM-DD\", e.getMessage());","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"WillCWX":22}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"public class TaskTest {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    public void setAsDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"isdone\";","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"        Task a \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"        Task b \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"        b.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        // test here","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        a.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        b.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        assertTrue(a.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        assertTrue(b.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    public void setAsNotDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"isdone\";","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        Task a \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        Task b \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        b.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        // test here","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        a.setAsNotDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"        b.setAsNotDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"        assertFalse(a.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        assertFalse(b.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"Very long name with many spaces\";","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        Task a \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        assertEquals(\"[ ] \" + name, a.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"WillCWX":46}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"tests\";","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        ToDo a \u003d new ToDo(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        assertEquals(\"[T][ ] \" + name, a.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"echo Hi","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"echo Hi but very long and very wow","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"todo read book","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"deadline return book /by 2023-06-06","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"event project meeting /from 2023-08-06 /to 2023-08-08","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"todo join sports club","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"todo borrow book","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"mark abacasda ad wadadaw aw a D","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"mark ","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"delete ","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"unmark ","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"unmark awdawda w aa wa a adawda ","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"mark 1","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"mark 4","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"list with some weird continue text","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"deadline return book /by 2023-09-02","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"event project meeting /from 2023-06-17 /to 2023-06-18","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"todo a","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"find book","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"find project ","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"priority","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"delete 3","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"delete 10","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"delete 5","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"wrong command prints message","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"deadline missingdate /by ","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"deadline missingBy tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"deadline      /by missingname","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"deadline /by   ","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"deadline","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"event","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"event /from /to ","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"event missingFromTo /from /to","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"event missingTo /from /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"event    /from now /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"event    /from   /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"event missingFromTo","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"event missingFrom /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"event missingTo /from now","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"bye","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":52}},{"path":"src/main/resources/duke.txt","fileType":"txt","isBinary":true,"lines":[],"authorContributionMap":{"WillCWX":0}},{"path":"text-ui-test/src/main/resources/duke.txt","fileType":"txt","isBinary":true,"lines":[],"authorContributionMap":{"WillCWX":0}}]
