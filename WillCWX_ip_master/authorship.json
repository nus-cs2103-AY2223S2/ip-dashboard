[{"path":"src/main/java/DatedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" * The DatedTask represents a Task that contains a date.","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"public class DatedTask extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    private LocalDate imptDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     * Constructor for DatedTask","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"     * @param name","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * @param impDate","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    protected DatedTask(String name, LocalDate impDate) {","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        super(name);","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        this.imptDate \u003d impDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    public int compareTo(Task t) {","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        if (t.isMarkedDone() \u0026\u0026 this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"            return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        } else if (!t.isMarkedDone() \u0026\u0026 !this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"            if (!t.hasDate()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"                return -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"            } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"                if (t instanceof DatedTask) {","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"                    DatedTask other \u003d (DatedTask) t;","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"                    return imptDate.compareTo(other.imptDate);","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"                // we are more important","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"                return -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"        } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"            return this.isMarkedDone() ? 1 : -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":46}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" * The Deadline class extends the DatedTask class and represents a datedtask with a due date.","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"public class Deadline extends DatedTask {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 102;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    private LocalDate date;","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Deadline Task with a due date.","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * @param date The date of when the task is due.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    public Deadline(String name, String date) {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        super(name, LocalDate.parse(date));","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydmy \u003d DateTimeFormatter.ofPattern(\"E, d MMM uu\");","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.date.format(daydmy) + \")\";","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":34}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" * The Duke class represents a CLI chatbot that performs operations based on CLI user input.","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Currently, Duke accepts the commands: {@code echo, list, mark, unmark, todo, deadline, event, bye}","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static Storage store;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    private static Ui ui \u003d Ui.getInstance();","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * The Commands enum represents Duke\u0027s available commands.","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public enum Commands {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        ECHO, LIST, PRIORITY, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, BYE;","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     * Initialises and runs the Duke chatbot.","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"     * @param args The modifiers to run Duke with (currently no modifiers are avaliable).","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        ui.greet();","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        loopDukeFunctions();","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"     * Repeats the core functions of Duke.","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    private static void loopDukeFunctions() {","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-13"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"            store \u003d new Storage(\"src/main/resources/duke.txt\");","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"            loadFromFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"            ui.printWithPartition(\"\\t\" + e.getMessage() + \"\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        while (true) {","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"            try {","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"                Commands command \u003d readCommand(sc);","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"                switch (command) {","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"                case LIST:","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"                    sc.nextLine(); // throws away the remaining line","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"                    printDukeList();","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"                case PRIORITY:","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"                    printPrioritisedDukeList();","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"                case ECHO:","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"                    echo(sc.nextLine().strip());","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"                case MARK:","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"                    markTask(sc.nextLine().strip());","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"                    saveToFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"                case UNMARK:","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"                    unmarkTask(sc.nextLine().strip());","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"                    saveToFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-16"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"                case TODO:","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"                    addTodo(sc.nextLine().strip());","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"                    saveToFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"                case DEADLINE:","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"                    addDeadline(sc.nextLine().strip());","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"                    saveToFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"                case EVENT:","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"                    addEvent(sc.nextLine().strip());","lastModifiedDate":"2023-01-17"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"                    saveToFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-17"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"                case DELETE:","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"                    deleteTask(sc.nextLine().strip());","lastModifiedDate":"2023-01-18"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"                    saveToFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-18"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"                case BYE:","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"                    sc.close();","lastModifiedDate":"2023-01-13"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"                    exit();","lastModifiedDate":"2023-01-13"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"                    return;","lastModifiedDate":"2023-01-13"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"                default:","lastModifiedDate":"2023-01-13"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"                    // this should not run","lastModifiedDate":"2023-01-19"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"                    break;","lastModifiedDate":"2023-01-19"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"                }","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"                ui.printWithPartition(\"\\t\" + e.getMessage() + \"\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-13"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":97,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":98,"author":{"gitId":"WillCWX"},"content":"    private static void saveToFile() {","lastModifiedDate":"2023-01-21"},{"lineNumber":99,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":100,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":101,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":102,"author":{"gitId":"WillCWX"},"content":"    private static void loadFromFile() {","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"WillCWX"},"content":"        ArrayList\u003cTask\u003e temp \u003d store.loadFromFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":104,"author":{"gitId":"WillCWX"},"content":"        tasks \u003d temp \u003d\u003d null ? tasks : temp;","lastModifiedDate":"2023-01-21"},{"lineNumber":105,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":106,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":107,"author":{"gitId":"WillCWX"},"content":"    private static Commands readCommand(Scanner sc) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":109,"author":{"gitId":"WillCWX"},"content":"            return Commands.valueOf(sc.next().toUpperCase());","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"WillCWX"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":111,"author":{"gitId":"WillCWX"},"content":"            sc.nextLine(); // throw away remaining lines","lastModifiedDate":"2023-01-19"},{"lineNumber":112,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-19"},{"lineNumber":113,"author":{"gitId":"WillCWX"},"content":"                    \"I only understand {echo, list, mark, unmark, todo, deadline, event} commands.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":117,"author":{"gitId":"WillCWX"},"content":"    // region DUKE FUNCTIONS","lastModifiedDate":"2023-01-16"},{"lineNumber":118,"author":{"gitId":"WillCWX"},"content":"    // ------------------------------------------------------------------------","lastModifiedDate":"2023-01-18"},{"lineNumber":119,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":120,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":121,"author":{"gitId":"WillCWX"},"content":"     * Prints the Tasks in Duke\u0027s list, including their done status.","lastModifiedDate":"2023-01-18"},{"lineNumber":122,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":123,"author":{"gitId":"WillCWX"},"content":"    private static void printDukeList() {","lastModifiedDate":"2023-01-16"},{"lineNumber":124,"author":{"gitId":"WillCWX"},"content":"        String ls \u003d \"\\tHere are the tasks in your list:\\n\";","lastModifiedDate":"2023-01-16"},{"lineNumber":125,"author":{"gitId":"WillCWX"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-18"},{"lineNumber":126,"author":{"gitId":"WillCWX"},"content":"            Task temp \u003d tasks.get(i);","lastModifiedDate":"2023-01-18"},{"lineNumber":127,"author":{"gitId":"WillCWX"},"content":"            ls \u003d ls + \"\\t\" + Integer.toString(i + 1) + \".\" + temp.toString() + \"\\n\";","lastModifiedDate":"2023-01-18"},{"lineNumber":128,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":129,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(ls);","lastModifiedDate":"2023-01-21"},{"lineNumber":130,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":131,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":132,"author":{"gitId":"WillCWX"},"content":"    private static void printPrioritisedDukeList() {","lastModifiedDate":"2023-01-21"},{"lineNumber":133,"author":{"gitId":"WillCWX"},"content":"        String ls \u003d \"\\tHere are the important tasks in your list:\\n\";","lastModifiedDate":"2023-01-21"},{"lineNumber":134,"author":{"gitId":"WillCWX"},"content":"        ArrayList\u003cTask\u003e sortedTasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":135,"author":{"gitId":"WillCWX"},"content":"        sortedTasks.sort(null);","lastModifiedDate":"2023-01-21"},{"lineNumber":136,"author":{"gitId":"WillCWX"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-21"},{"lineNumber":137,"author":{"gitId":"WillCWX"},"content":"            Task temp \u003d sortedTasks.get(i);","lastModifiedDate":"2023-01-21"},{"lineNumber":138,"author":{"gitId":"WillCWX"},"content":"            ls \u003d ls + \"\\t\" + Integer.toString(i + 1) + \".\" + temp.toString() + \"\\n\";","lastModifiedDate":"2023-01-21"},{"lineNumber":139,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":140,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(ls);","lastModifiedDate":"2023-01-21"},{"lineNumber":141,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":142,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":143,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":144,"author":{"gitId":"WillCWX"},"content":"     * Echoes the user\u0027s input.","lastModifiedDate":"2023-01-18"},{"lineNumber":145,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":146,"author":{"gitId":"WillCWX"},"content":"     * @param w The string to echo.","lastModifiedDate":"2023-01-18"},{"lineNumber":147,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":148,"author":{"gitId":"WillCWX"},"content":"    private static void echo(String w) {","lastModifiedDate":"2023-01-13"},{"lineNumber":149,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tDuke: \" + w + \"\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":150,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":151,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":152,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":153,"author":{"gitId":"WillCWX"},"content":"     * Marks the task as done and notifies the user.","lastModifiedDate":"2023-01-18"},{"lineNumber":154,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":155,"author":{"gitId":"WillCWX"},"content":"     * @param num The string representation of the index of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":156,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException When the task number input does not exist.","lastModifiedDate":"2023-01-18"},{"lineNumber":157,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":158,"author":{"gitId":"WillCWX"},"content":"    private static void markTask(String num) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":159,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":160,"author":{"gitId":"WillCWX"},"content":"            int index \u003d Integer.parseInt(num) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":161,"author":{"gitId":"WillCWX"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":162,"author":{"gitId":"WillCWX"},"content":"            task.setAsDone();","lastModifiedDate":"2023-01-18"},{"lineNumber":163,"author":{"gitId":"WillCWX"},"content":"            ui.printWithPartition(\"\\tNice! I\u0027ve marked this task as done:\\n\\t  \" + task.toString() + \"\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":164,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":165,"author":{"gitId":"WillCWX"},"content":"            if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-18"},{"lineNumber":166,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"There are no tasks to be marked as done.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":167,"author":{"gitId":"WillCWX"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":168,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"Please enter a number from 1 to \" + Integer.toString(tasks.size()));","lastModifiedDate":"2023-01-18"},{"lineNumber":169,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":170,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":171,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":172,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":173,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":174,"author":{"gitId":"WillCWX"},"content":"     * Unmarks the task, making it not done and notifies the user.","lastModifiedDate":"2023-01-18"},{"lineNumber":175,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":176,"author":{"gitId":"WillCWX"},"content":"     * @param num The string representation of the index of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":177,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException When the task number input does not exist.","lastModifiedDate":"2023-01-18"},{"lineNumber":178,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":179,"author":{"gitId":"WillCWX"},"content":"    private static void unmarkTask(String num) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":180,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":181,"author":{"gitId":"WillCWX"},"content":"            int index \u003d Integer.parseInt(num) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":182,"author":{"gitId":"WillCWX"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":183,"author":{"gitId":"WillCWX"},"content":"            task.setAsNotDone();","lastModifiedDate":"2023-01-18"},{"lineNumber":184,"author":{"gitId":"WillCWX"},"content":"            ui.printWithPartition(","lastModifiedDate":"2023-01-21"},{"lineNumber":185,"author":{"gitId":"WillCWX"},"content":"                    \"\\tOK, I\u0027ve marked this task as not done yet:\" + \"\\n\\t  \" + task.toString() + \"\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":186,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":187,"author":{"gitId":"WillCWX"},"content":"            if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-18"},{"lineNumber":188,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"There are no tasks to be unmarked.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":189,"author":{"gitId":"WillCWX"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":190,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"Please enter a number from 1 to \" + Integer.toString(tasks.size()));","lastModifiedDate":"2023-01-18"},{"lineNumber":191,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":192,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":193,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":194,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":195,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":196,"author":{"gitId":"WillCWX"},"content":"     * Adds a new ToDo task for Duke to track.","lastModifiedDate":"2023-01-18"},{"lineNumber":197,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":198,"author":{"gitId":"WillCWX"},"content":"     * @param w The name of the ToDo task.","lastModifiedDate":"2023-01-18"},{"lineNumber":199,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the input string is empty or if the task list is full.","lastModifiedDate":"2023-01-18"},{"lineNumber":200,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":201,"author":{"gitId":"WillCWX"},"content":"    private static void addTodo(String w) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":202,"author":{"gitId":"WillCWX"},"content":"        if (w \u003d\u003d \"\") {","lastModifiedDate":"2023-01-18"},{"lineNumber":203,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":204,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":205,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":206,"author":{"gitId":"WillCWX"},"content":"        ToDo task \u003d new ToDo(w);","lastModifiedDate":"2023-01-18"},{"lineNumber":207,"author":{"gitId":"WillCWX"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":208,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + task.toString()","lastModifiedDate":"2023-01-21"},{"lineNumber":209,"author":{"gitId":"WillCWX"},"content":"                + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":210,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":211,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":212,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":213,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":214,"author":{"gitId":"WillCWX"},"content":"     * Adds a Deadline task for Duke to track.","lastModifiedDate":"2023-01-18"},{"lineNumber":215,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":216,"author":{"gitId":"WillCWX"},"content":"     * @param input The string containing the name and a \"/by\".","lastModifiedDate":"2023-01-18"},{"lineNumber":217,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the input string is invalid or if the task list is full.","lastModifiedDate":"2023-01-18"},{"lineNumber":218,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":219,"author":{"gitId":"WillCWX"},"content":"    private static void addDeadline(String input) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":220,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":221,"author":{"gitId":"WillCWX"},"content":"            String[] sorted \u003d input.split(\" /by \");","lastModifiedDate":"2023-01-17"},{"lineNumber":222,"author":{"gitId":"WillCWX"},"content":"            String name \u003d sorted[0].strip();","lastModifiedDate":"2023-01-18"},{"lineNumber":223,"author":{"gitId":"WillCWX"},"content":"            String date \u003d sorted[1].strip();","lastModifiedDate":"2023-01-18"},{"lineNumber":224,"author":{"gitId":"WillCWX"},"content":"            Deadline task \u003d new Deadline(name, date);","lastModifiedDate":"2023-01-18"},{"lineNumber":225,"author":{"gitId":"WillCWX"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":226,"author":{"gitId":"WillCWX"},"content":"            ui.printWithPartition(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + task.toString()","lastModifiedDate":"2023-01-21"},{"lineNumber":227,"author":{"gitId":"WillCWX"},"content":"                    + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":228,"author":{"gitId":"WillCWX"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":229,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-18"},{"lineNumber":230,"author":{"gitId":"WillCWX"},"content":"                    \"The deadline command should be used like this:\\n\" + \"\\tdeadline {name} /by {date}\");","lastModifiedDate":"2023-01-18"},{"lineNumber":231,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":232,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-21"},{"lineNumber":233,"author":{"gitId":"WillCWX"},"content":"                    \"The deadline command should be used like this:\\n\" + \"\\tdeadline {name} /by {date}\");","lastModifiedDate":"2023-01-21"},{"lineNumber":234,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":235,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":236,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":237,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":238,"author":{"gitId":"WillCWX"},"content":"     * Adds an Event tast for Duke to track and prints a notification to the user.","lastModifiedDate":"2023-01-18"},{"lineNumber":239,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":240,"author":{"gitId":"WillCWX"},"content":"     * @param input The string containing the name, \"/from\" and a \"/to\".","lastModifiedDate":"2023-01-18"},{"lineNumber":241,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the input string is invalid or if the task list is full.","lastModifiedDate":"2023-01-18"},{"lineNumber":242,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":243,"author":{"gitId":"WillCWX"},"content":"    private static void addEvent(String input) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":244,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":245,"author":{"gitId":"WillCWX"},"content":"            String[] sorted \u003d input.split(\" /from \");","lastModifiedDate":"2023-01-17"},{"lineNumber":246,"author":{"gitId":"WillCWX"},"content":"            String name \u003d sorted[0].strip();","lastModifiedDate":"2023-01-18"},{"lineNumber":247,"author":{"gitId":"WillCWX"},"content":"            String[] dates \u003d sorted[1].strip().split(\" /to \");","lastModifiedDate":"2023-01-18"},{"lineNumber":248,"author":{"gitId":"WillCWX"},"content":"            Event task \u003d new Event(name, dates[0], dates[1]);","lastModifiedDate":"2023-01-18"},{"lineNumber":249,"author":{"gitId":"WillCWX"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":250,"author":{"gitId":"WillCWX"},"content":"            ui.printWithPartition(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + task.toString()","lastModifiedDate":"2023-01-21"},{"lineNumber":251,"author":{"gitId":"WillCWX"},"content":"                    + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":252,"author":{"gitId":"WillCWX"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":253,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The event command should be used like this:\\n\"","lastModifiedDate":"2023-01-18"},{"lineNumber":254,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tevent {name} /from {YYYY-MM-DD} /to {YYYY-MM-DD}\");","lastModifiedDate":"2023-01-21"},{"lineNumber":255,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":256,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The event command should be used like this:\\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":257,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tevent {name} /from {YYYY-MM-DD} /to {YYYY-MM-DD}\");","lastModifiedDate":"2023-01-21"},{"lineNumber":258,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":259,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":260,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":261,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":262,"author":{"gitId":"WillCWX"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2023-01-18"},{"lineNumber":263,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":264,"author":{"gitId":"WillCWX"},"content":"     * @param num The string representation of the task number.","lastModifiedDate":"2023-01-18"},{"lineNumber":265,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the task number does not exist.","lastModifiedDate":"2023-01-18"},{"lineNumber":266,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":267,"author":{"gitId":"WillCWX"},"content":"    private static void deleteTask(String num) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":268,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":269,"author":{"gitId":"WillCWX"},"content":"            int index \u003d Integer.parseInt(num) - 1;","lastModifiedDate":"2023-01-18"},{"lineNumber":270,"author":{"gitId":"WillCWX"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":271,"author":{"gitId":"WillCWX"},"content":"            tasks.remove(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":272,"author":{"gitId":"WillCWX"},"content":"            ui.printWithPartition(\"\\tNoted. I\u0027ve removed this task:\\n\\t  \" + task.toString() + \"\\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":273,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-18"},{"lineNumber":274,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":275,"author":{"gitId":"WillCWX"},"content":"            if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-18"},{"lineNumber":276,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"There are no tasks to be deleted.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":277,"author":{"gitId":"WillCWX"},"content":"            } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":278,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"Please enter a number from 1 to \" + Integer.toString(tasks.size()));","lastModifiedDate":"2023-01-18"},{"lineNumber":279,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":280,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":281,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":282,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":283,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":284,"author":{"gitId":"WillCWX"},"content":"     * Prints goodbye and Duke shuts down.","lastModifiedDate":"2023-01-18"},{"lineNumber":285,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":286,"author":{"gitId":"WillCWX"},"content":"    private static void exit() {","lastModifiedDate":"2023-01-13"},{"lineNumber":287,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tGoodbye!\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":289,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":290,"author":{"gitId":"WillCWX"},"content":"    // ------------------------------------------------------------------------","lastModifiedDate":"2023-01-18"},{"lineNumber":291,"author":{"gitId":"WillCWX"},"content":"    // endregion","lastModifiedDate":"2023-01-16"},{"lineNumber":292,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":293,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"WillCWX":289,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":" * The DukeException class extends the Exception class and represents that an error has occured in Duke","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"     * Constructs a DukeException.","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"     * @param e The error message.","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    public DukeException(String e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"        super(\"Duke: OOPS!!! \" + e);","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WillCWX":14}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" * The Event class extends the DatedTask class and represents an event with a start and end date.","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"public class Event extends DatedTask {","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 103;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    private LocalDate start;","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    private LocalDate end;","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * Constructs an Event task with a start and end date.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * @param name  The name of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * @param start The date the event begins on.","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @param end   The date the event ends on.","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the dates are not formatted properly.","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    public Event(String name, String start, String end) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        super(name, LocalDate.parse(end));","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        this.start \u003d LocalDate.parse(start);","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        this.end \u003d LocalDate.parse(end);","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydm \u003d DateTimeFormatter.ofPattern(\"E, dd MMM\");","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydmyy \u003d DateTimeFormatter.ofPattern(\"E, dd MMM uu\");","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start.format(daydm) + \" to: \" + end.format(daydmyy)","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"                + \")\";","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":44}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"import java.io.EOFException;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"import java.io.File;","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" * This storage class represents Duke\u0027s storage.","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"public class Storage {","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    private File store;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * Constructs the Storage using the file at path s.","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * @param s The path String to the file that will be used as the storage.","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the file has issues.","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    public Storage(String s) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        File f \u003d new File(s);","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        store \u003d f;","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"            if (!f.exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"                if (!f.getParentFile().exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"                    f.getParentFile().mkdirs();","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"                    f.createNewFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"                } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"                    f.createNewFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"            } else if (!(f.canRead() \u0026\u0026 f.canWrite())) {","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"File at src/main/resources/duke.txt cannot be read/written!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Failed to create saving directory at\" + \"src/main/resources/duke.txt\");","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"File at src/main/resources/duke.txt cannot be read/written!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     * Saves the tasks to the storage file.","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"     * @param tasks The tasks to save.","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"    public void saveToFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            //Solution below adapted from https://www.geeksforgeeks.org/serialization-in-java/","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"            FileOutputStream temp \u003d new FileOutputStream(store);","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"            ObjectOutputStream out \u003d new ObjectOutputStream(temp);","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"            out.writeObject(tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"            out.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"            temp.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"     * Loads from the storage file.","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"     * @return The arraylist containing the tasks.","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"    public ArrayList\u003cTask\u003e loadFromFile() {","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"            //Solution below adapted from https://www.geeksforgeeks.org/serialization-in-java/","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"            FileInputStream temp \u003d new FileInputStream(store);","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"            ObjectInputStream in \u003d new ObjectInputStream(temp);","lastModifiedDate":"2023-01-21"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"            // Any corruption will be handled below.","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"            @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2023-01-21"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"            ArrayList\u003cTask\u003e output \u003d (ArrayList\u003cTask\u003e) in.readObject();","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"            in.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"            temp.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"            return output;","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"        } catch (EOFException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"            // do nothing, empty save file","lastModifiedDate":"2023-01-21"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"        return null;","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":92}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * This Task class represents a task.","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public class Task implements Serializable, Comparable\u003cTask\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 100;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    private String name;","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Task with a name.","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of a task.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * @return True when marked done.","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    public boolean setAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        return this.isDone \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"     * Unmarks the task, making the task not done.","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"     * @return True when successfully unmarked.","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"    public boolean setAsNotDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        return !(this.isDone \u003d false);","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"     * Gets the done status of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"     * @return True if done and false if not done.","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    public boolean isMarkedDone() {","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"     * Informs the user if the task has a set time.","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"     * @return True if it has a set time, false otherwise.","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"        return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"    public int compareTo(Task t) {","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"        if (t.isMarkedDone() \u0026\u0026 this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"            return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"        } else if (!t.isMarkedDone() \u0026\u0026 !this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"            if (t.hasDate()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"                return 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"            } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"                return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"        } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"            return this.isMarkedDone() ? 1 : -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"     * Returns the String representation of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"        return isDone ? \"[X] \" + this.name : \"[ ] \" + this.name;","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"WillCWX":82}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":" * The ToDo class extends the Task class and represents a task that needs to be done.","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 101;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"     * Constructor for the ToDo class","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of the ToDo task","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"        super(name);","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":21}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":" * The Ui class represents Duke\u0027s user interface that interacts with the user.","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"public class Ui {","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"     * The Commands enum represents Duke\u0027s available commands.","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    public enum Commands {","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"        ECHO, LIST, PRIORITY, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, BYE;","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static Ui instanceUi \u003d new Ui();","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    private Ui() {}","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    public static Ui getInstance() {","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        return instanceUi;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * Prints Duke\u0027s greetings.","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    public void greet() {","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        // @formatter:off","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"                    + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"                    + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"                    + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        // @formatter:on","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"---------------------\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"     * Prints the partitions, ----, then prints the string in-between. \\n is required for the end of the","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"     * string. \u003cblockquote\u003e ---------------------","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"     * your string here","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"     * --------------------- \u003c/blockquote\u003e","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     * @param s The string in between the ---- partitions.","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"    public void printWithPartition(String s) {","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"---------------------\");","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"        System.out.print(s);","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"---------------------\");","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":54}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"echo Hi","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"echo Hi but very long and very wow","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"todo read book","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"deadline return book /by 2023-06-06","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"event project meeting /from 2023-08-06 /to 2023-08-08","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"todo join sports club","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"todo borrow book","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"mark abacasda ad wadadaw aw a D","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"mark ","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"delete ","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"unmark ","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"unmark awdawda w aa wa a adawda ","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"mark 1","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"mark 4","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"list with some weird continue text","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"deadline return book /by 2023-09-02","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"event project meeting /from 2023-06-17 /to 2023-06-18","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"todo a","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"priority","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"delete 3","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"delete 10","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"delete 5","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"wrong command prints message","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"deadline missingdate /by ","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"deadline missingBy tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"deadline      /by missingname","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"deadline /by   ","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"deadline","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"event","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"event /from /to ","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"event missingFromTo /from /to","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"event missingTo /from /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"event    /from now /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"event    /from   /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"event missingFromTo","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"event missingFrom /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"event missingTo /from now","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"bye","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":50}},{"path":"src/main/resources/duke.txt","fileType":"txt","isBinary":true,"lines":[],"authorContributionMap":{"WillCWX":0}},{"path":"text-ui-test/src/main/resources/duke.txt","fileType":"txt","isBinary":true,"lines":[],"authorContributionMap":{"WillCWX":0}}]
