[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"/*","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":" * This file was generated by the Gradle \u0027init\u0027 task.","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":" *","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * This is a general purpose Gradle build.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"plugins {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"run {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"application {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    mainClassName \u003d \u0027Duke\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"test {","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"dependencies {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    // this is needed for vscode","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    testImplementation(\u0027org.junit.platform:junit-platform-launcher:1.5.2\u0027)","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"repositories {","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"    mavenCentral()","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":35}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"@rem","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"@rem","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"@rem","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"@rem","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"@rem limitations under the License.","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"@rem","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"@if \"%DEBUG%\"\u003d\u003d\"\" @echo off","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"@rem","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"@rem","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"if \"%DIRNAME%\"\u003d\u003d\"\" set DIRNAME\u003d.","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"@rem This is normally unused","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"@rem Find java.exe","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"if %ERRORLEVEL% equ 0 goto execute","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"echo.","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"echo.","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"goto fail","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":":findJavaFromJavaHome","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"echo.","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"echo.","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"goto fail","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":":execute","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"@rem Setup the command line","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"@rem Execute Gradle","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":":end","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"if %ERRORLEVEL% equ 0 goto mainEnd","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":":fail","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"set EXIT_CODE\u003d%ERRORLEVEL%","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"if %EXIT_CODE% equ 0 set EXIT_CODE\u003d1","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"if not \"\"\u003d\u003d\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"exit /b %EXIT_CODE%","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":":mainEnd","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":":omega","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":92}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"/*","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":" * This file was generated by the Gradle \u0027init\u0027 task.","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":" *","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The settings file is used to specify which projects to include in your build.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" *","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" * Detailed information about configuring a multi-project build in Gradle can be found","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" * in the user manual at https://docs.gradle.org/7.6/userguide/multi_project_builds.html","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"rootProject.name \u003d \u0027ip\u0027","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":10}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * The Duke class represents a CLI chatbot that performs operations based on CLI user input.","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":" * Currently, Duke accepts the commands: {@code echo, list, mark, unmark, todo, deadline, event, bye}","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    private Storage store;","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     * Constructor for Duke.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    public Duke() {","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        ui \u003d Ui.getInstance();","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"            store \u003d new Storage(\"src/main/resources/duke.txt\");","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"            tasks \u003d store.loadFromFile();","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"            tasks \u003d tasks \u003d\u003d null ? new TaskList() : tasks;","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"            ui.printException(e.getMessage());","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        new Duke().run();","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"     * Runs Duke as a CLI chatbot.","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    public void run() {","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"        ui.greet();","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"        while (!isExit) {","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"            try {","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"                String command \u003d ui.getCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"                Command c \u003d Parser.parseCommand(command);","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"                c.execute(tasks, ui, store);","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"                ui.printException(e.getMessage());","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"WillCWX":52,"-":4}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s deadline function","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public AddDeadlineCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        String[] data \u003d ui.getDeadline();","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"            Deadline temp \u003d new Deadline(data[0], data[1]);","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"            tasks.add(temp);","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"            store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"            ui.printWithPartition(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + temp.toString()","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"                    + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The event command should be used like this:\\n\"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tevent {name} /from {YYYY-MM-DD} /to {YYYY-MM-DD}\");","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":33}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s Event function.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public AddEventCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        String[] data \u003d ui.getEvent();","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        Event temp \u003d new Event(data[0], data[1], data[2]);","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        tasks.add(temp);","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + temp.toString()","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"                + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":24}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s todo command","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public AddToDoCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        ToDo temp \u003d new ToDo(ui.getName());","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        tasks.add(temp);","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t  \" + temp.toString()","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"                + \"\\n\\tNow you have \" + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":25}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * The command class represents Duke\u0027s function based on user input.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage store) throws DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"        return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":17}},{"path":"src/main/java/duke/command/CommandWords.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The Commands enum represents Duke\u0027s available commands.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public enum CommandWords {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"    ECHO, LIST, UNKNOWN, PRIORITY, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, BYE;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":8}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s delete function.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public DeleteCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        Integer taskNum \u003d ui.getTaskNum();","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        String s \u003d tasks.delete(taskNum);","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        store.saveToFile(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tNoted. I\u0027ve removed this task:\\n\\t  \" + s + \"\\n\" + \"\\tNow you have \"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"                + Integer.toString(tasks.size()) + \" tasks in the list.\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":22}},{"path":"src/main/java/duke/command/EchoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s Echo function.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    public EchoCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"        ui.printNextInput();","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":18}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s exit function.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"        ui.printGoodbye();","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":20}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * This class represent\u0027s Duke\u0027s list function.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public ListCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) {","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        ui.printList(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        ui.throwAwayInput();","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":19}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s mark function.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public MarkCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        Integer taskNum \u003d ui.getTaskNum();","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        String s \u003d tasks.mark(taskNum);","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tNice! I\u0027ve marked this task as done:\\n\\t  \" + s + \"\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":22}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" * This class interprets command.","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"public class Parser {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     * Parses the input string as a command.","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"     * @param s","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    public static Command parseCommand(String s) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        CommandWords command \u003d readCommandWord(s);","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        switch (command) {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        case LIST:","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        case PRIORITY:","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"            return new PriorityCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"        case ECHO:","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"            return new EchoCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        case MARK:","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"            return new MarkCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        case UNMARK:","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"            return new UnmarkCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        case TODO:","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            return new AddToDoCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        case DEADLINE:","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"            return new AddDeadlineCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"        case EVENT:","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"            return new AddEventCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        case DELETE:","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"            return new DeleteCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"        case BYE:","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        default:","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"            return new UnknownCommand();","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    private static CommandWords readCommandWord(String s) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"            return CommandWords.valueOf(s.toUpperCase());","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"            return CommandWords.UNKNOWN;","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":51}},{"path":"src/main/java/duke/command/PriorityCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":" * Represents the Priority function of Duke.","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class PriorityCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    public PriorityCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"        ui.printList(tasks.sorted());","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":17}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents an unknown command that Duke cannot execute","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public UnknownCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     * An Unknown command.","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        ui.throwAwayInput();","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        throw new DukeException(\"I don\u0027t understand that command\");","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":22}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.command;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * Represents Duke\u0027s unmark function.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    public UnmarkCommand() {}","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        Integer taskNum \u003d ui.getTaskNum();","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        String s \u003d tasks.unmark(taskNum);","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        ui.printWithPartition(\"\\tOK, I\u0027ve marked this task as not done yet:\" + \"\\n\\t  \" + s + \"\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    };","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":21}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.exception;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The DukeException class extends the Exception class and represents that an error has occured in Duke","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"     * Constructs a DukeException.","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     * @param e The error message.","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public DukeException(String e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"        super(\"Duke: OOPS!!! \" + e);","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WillCWX":16}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.storage;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.io.EOFException;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.io.File;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":" * This storage class represents Duke\u0027s storage.","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"public class Storage {","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    private File store;","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     * Constructs the Storage using the file at path s.","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     * @param s The path String to the file that will be used as the storage.","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the file has issues.","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    public Storage(String s) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        File f \u003d new File(s);","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        store \u003d f;","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            if (!f.exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"                if (!f.getParentFile().exists()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"                    f.getParentFile().mkdirs();","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"                    f.createNewFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"                } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"                    f.createNewFile();","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"            } else if (!(f.canRead() \u0026\u0026 f.canWrite())) {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"                throw new DukeException(\"File at src/main/resources/duke.txt cannot be read/written!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Failed to create saving directory at\" + \"src/main/resources/duke.txt\");","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"File at src/main/resources/duke.txt cannot be read/written!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"     * Saves the tasks to the storage file.","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     * @param tasks The tasks to save.","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"    public void saveToFile(TaskList tasks) {","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"            //Solution below adapted from https://www.geeksforgeeks.org/serialization-in-java/","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"            FileOutputStream temp \u003d new FileOutputStream(store);","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"            ObjectOutputStream out \u003d new ObjectOutputStream(temp);","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"            out.writeObject(tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"            out.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"            temp.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"     * Loads from the storage file.","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"     * @return The arraylist containing the tasks.","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"    public TaskList loadFromFile() throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"            //Solution below adapted from https://www.geeksforgeeks.org/serialization-in-java/","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"            FileInputStream temp \u003d new FileInputStream(store);","lastModifiedDate":"2023-01-21"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"            ObjectInputStream in \u003d new ObjectInputStream(temp);","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"            // Any corruption will be handled below.","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"            TaskList output \u003d (TaskList) in.readObject();","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"            in.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"            temp.close();","lastModifiedDate":"2023-01-21"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"            return output;","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"        } catch (EOFException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"            // do nothing, empty save file","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Unable to read file: \" + e.getMessage());","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"        return null;","lastModifiedDate":"2023-01-21"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":95}},{"path":"src/main/java/duke/task/DatedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * The DatedTask represents a Task that contains a date.","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class DatedTask extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    private LocalDate imptDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     * Constructor for DatedTask","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     * @param name","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * @param impDate","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    protected DatedTask(String name, String impDate) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        super(name);","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"            this.imptDate \u003d LocalDate.parse(impDate);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Write the date in this format: YYYY-MM-DD\");","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    public int compareTo(Task t) {","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"        if (t.isMarkedDone() \u0026\u0026 this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"            return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        } else if (!t.isMarkedDone() \u0026\u0026 !this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"            if (!t.hasDate()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"                return -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"            } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"                if (t instanceof DatedTask) {","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"                    DatedTask other \u003d (DatedTask) t;","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"                    return imptDate.compareTo(other.imptDate);","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"                }","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"                // we are more important","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"                return -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            return this.isMarkedDone() ? 1 : -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":55}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * The Deadline class extends the DatedTask class and represents a datedtask with a due date.","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class Deadline extends DatedTask {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 102;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    private LocalDate date;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Deadline Task with a due date.","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     * @param date The date of when the task is due.","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    public Deadline(String name, String date) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"        super(name, date);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"            this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"                    \"The deadline command should be used like this:\\n\" + \"\\tdeadline {name} /by {date}\");","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydmy \u003d DateTimeFormatter.ofPattern(\"E, d MMM uu\");","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.date.format(daydmy) + \")\";","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":45}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * The Event class extends the DatedTask class and represents an event with a start and end date.","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class Event extends DatedTask {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 103;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    private LocalDate start;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    private LocalDate end;","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"     * Constructs an Event task with a start and end date.","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     * @param name  The name of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * @param start The date the event begins on.","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     * @param end   The date the event ends on.","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * @throws DukeException If the dates are not formatted properly.","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    public Event(String name, String start, String end) throws DukeException {","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        super(name, end);","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"            this.start \u003d LocalDate.parse(start);","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"            this.end \u003d LocalDate.parse(end);","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The event command should be used like this:\\n\"","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tevent {name} /from {YYYY-MM-DD} /to {YYYY-MM-DD}\");","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the event.","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydm \u003d DateTimeFormatter.ofPattern(\"E, dd MMM\");","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"        DateTimeFormatter daydmyy \u003d DateTimeFormatter.ofPattern(\"E, dd MMM uu\");","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start.format(daydm) + \" to: \" + end.format(daydmyy)","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"                + \")\";","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":54}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":" * This Task class represents a task.","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"public class Task implements Serializable, Comparable\u003cTask\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 100;","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    private String name;","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"     * Constructs a Task with a name.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of a task.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"     * @return True when marked done.","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"    public boolean setAsDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        return this.isDone \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"     * Unmarks the task, making the task not done.","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"     * @return True when successfully unmarked.","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    public boolean setAsNotDone() {","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        return !(this.isDone \u003d false);","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"     * Gets the done status of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"     * @return True if done and false if not done.","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"    public boolean isMarkedDone() {","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"     * Informs the user if the task has a set time.","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"     * @return True if it has a set time, false otherwise.","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"    public boolean hasDate() {","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"        return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"    public int compareTo(Task t) {","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"        if (t.isMarkedDone() \u0026\u0026 this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"            return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"        } else if (!t.isMarkedDone() \u0026\u0026 !this.isMarkedDone()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"            if (t.hasDate()) {","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"                return 1;","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"            } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"                return 0;","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"            }","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"        } else {","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"            return this.isMarkedDone() ? 1 : -1;","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"     * Returns the String representation of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-01-18"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"        return isDone ? \"[X] \" + this.name : \"[ ] \" + this.name;","lastModifiedDate":"2023-01-18"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"WillCWX":84}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":" * The tasklist represents the list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 200;","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private TaskList sorted;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        super();","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"     * Returns a sorted copy of this tasklist.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"     * @return A sorted copy of this tasklist.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    public TaskList sorted() {","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"        if (sorted !\u003d null \u0026\u0026 sorted.size() \u003d\u003d size()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"            return sorted;","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        TaskList temp \u003d new TaskList();","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"            temp.add(new Task(Integer.toString(i)));","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"        Collections.copy(temp, this);","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"        Collections.sort(temp);","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        sorted \u003d temp;","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        return temp;","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"     * Marks the task as done using the task number.","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"     * @param num","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the task marked as done.","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"    public String mark(int num) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"There are no tasks to be marked.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"            get(num).setAsDone();","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"            return get(num).toString();","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + size());","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"     * Unmarks the task as done using the task number.","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"     * @param num","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the task unmarked.","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"    public String unmark(int num) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"There are no tasks to be unmarked.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"            get(num).setAsNotDone();","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"            return get(num).toString();","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + size());","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"     * Deletes the task using the task number.","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"     * @param num","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"     * @return The string representation of the task unmarked.","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"    public String delete(int num) throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"There are no tasks to be deleted.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"            String s \u003d get(num).toString();","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"            remove(num);","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"            return s;","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + size());","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":96}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":" * The ToDo class extends the Task class and represents a task that needs to be done.","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"    private static final long serialVersionUID \u003d 101;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"     * Constructor for the ToDo class","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"     * @param name The name of the ToDo task","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"        super(name);","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":23}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"/**","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":" * The Ui class represents Duke\u0027s user interface that interacts with the user.","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":" */","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"public class Ui {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    private static Ui instanceUi \u003d new Ui();","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    private Scanner sc;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"    private Ui() {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"    public static Ui getInstance() {","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        return instanceUi;","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    // region Ui for output","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"     * Prints Duke\u0027s greetings.","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"    public void greet() {","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"        // @formatter:off","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"                    + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"                    + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"                    + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"        // @formatter:on","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"---------------------\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"     * Prints the partitions, ----, then prints the string in-between. \\n is required for the end of the","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"     * string. \u003cblockquote\u003e ---------------------","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"     * your string here","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"     * --------------------- \u003c/blockquote\u003e","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"     *","lastModifiedDate":"2023-01-21"},{"lineNumber":51,"author":{"gitId":"WillCWX"},"content":"     * @param s The string in between the ---- partitions.","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"WillCWX"},"content":"    public void printWithPartition(String s) {","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"---------------------\");","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"WillCWX"},"content":"        System.out.print(s);","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"WillCWX"},"content":"        System.out.println(\"---------------------\");","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"WillCWX"},"content":"     * Prints the Tasks in Duke\u0027s list, including their done status.","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"WillCWX"},"content":"    public void printList(TaskList tasks) {","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"WillCWX"},"content":"        String ls \u003d \"\\tHere are the tasks in your list:\\n\";","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"WillCWX"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"WillCWX"},"content":"            Task temp \u003d tasks.get(i);","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"WillCWX"},"content":"            ls \u003d ls + \"\\t\" + Integer.toString(i + 1) + \".\" + temp.toString() + \"\\n\";","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"WillCWX"},"content":"        printWithPartition(ls);","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"WillCWX"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"WillCWX"},"content":"     * Prints the next line of input.","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"WillCWX"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"WillCWX"},"content":"    public void printNextInput() {","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"WillCWX"},"content":"        printWithPartition(\"\\tDuke: \" + sc.nextLine().strip() + \"\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"WillCWX"},"content":"    public void printException(String message) {","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"WillCWX"},"content":"        printWithPartition(\"\\t\" + message + \"\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"WillCWX"},"content":"    public void printGoodbye() {","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"WillCWX"},"content":"        printWithPartition(\"\\tGoodbye!\\n\");","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"WillCWX"},"content":"    // endregion","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"WillCWX"},"content":"    // region Ui for input","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"WillCWX"},"content":"    public void throwAwayInput() {","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"WillCWX"},"content":"        sc.nextLine();","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"WillCWX"},"content":"    public int getTaskNum() throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"WillCWX"},"content":"            String s \u003d sc.nextLine().strip();","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"WillCWX"},"content":"            int num \u003d Integer.parseInt(s) - 1;","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"WillCWX"},"content":"            return num;","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"WillCWX"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"Please input a valid task number\");","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"WillCWX"},"content":"    public String getCommand() {","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"WillCWX"},"content":"        return sc.next();","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"WillCWX"},"content":"    public String getName() throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"WillCWX"},"content":"        String name \u003d sc.nextLine().strip();","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"WillCWX"},"content":"        if (name \u003d\u003d \"\") {","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":112,"author":{"gitId":"WillCWX"},"content":"        return name;","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":114,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":115,"author":{"gitId":"WillCWX"},"content":"    public String[] getDeadline() throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":116,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":117,"author":{"gitId":"WillCWX"},"content":"            String[] sorted \u003d sc.nextLine().split(\" /by \");","lastModifiedDate":"2023-01-22"},{"lineNumber":118,"author":{"gitId":"WillCWX"},"content":"            String[] data \u003d new String[] {sorted[0].strip(), sorted[1].strip()};","lastModifiedDate":"2023-01-22"},{"lineNumber":119,"author":{"gitId":"WillCWX"},"content":"            return data;","lastModifiedDate":"2023-01-22"},{"lineNumber":120,"author":{"gitId":"WillCWX"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":121,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-22"},{"lineNumber":122,"author":{"gitId":"WillCWX"},"content":"                    \"The deadline command should be used like this:\\n\" + \"\\tdeadline {name} /by {date}\");","lastModifiedDate":"2023-01-22"},{"lineNumber":123,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":124,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":125,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":126,"author":{"gitId":"WillCWX"},"content":"    public String[] getEvent() throws DukeException {","lastModifiedDate":"2023-01-22"},{"lineNumber":127,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":128,"author":{"gitId":"WillCWX"},"content":"            String[] line \u003d sc.nextLine().split(\" /from \", 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":129,"author":{"gitId":"WillCWX"},"content":"            String[] dates \u003d line[1].split(\" /to \", 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":130,"author":{"gitId":"WillCWX"},"content":"            String[] data \u003d new String[] {line[0].strip(), dates[0].strip(), dates[1].strip()};","lastModifiedDate":"2023-01-22"},{"lineNumber":131,"author":{"gitId":"WillCWX"},"content":"            return data;","lastModifiedDate":"2023-01-22"},{"lineNumber":132,"author":{"gitId":"WillCWX"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":133,"author":{"gitId":"WillCWX"},"content":"            throw new DukeException(\"The event command should be used like this:\\n\"","lastModifiedDate":"2023-01-22"},{"lineNumber":134,"author":{"gitId":"WillCWX"},"content":"                    + \"\\tevent {name} /from {YYYY-MM-DD} /to {YYYY-MM-DD}\");","lastModifiedDate":"2023-01-22"},{"lineNumber":135,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":136,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":137,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":138,"author":{"gitId":"WillCWX"},"content":"    // endregion","lastModifiedDate":"2023-01-22"},{"lineNumber":139,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"WillCWX":139}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"    public void deadline_badDate_dukeExceptionThrown() {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"            Deadline a \u003d new Deadline(\"hello\", \"bad date\");","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"            a.isMarkedDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"            fail();","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"            assertEquals(\"Duke: OOPS!!! Write the date in this format: YYYY-MM-DD\", e.getMessage());","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"WillCWX":22}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"public class TaskTest {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"    public void setAsDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"isdone\";","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"        Task a \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"        Task b \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"        b.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        // test here","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        a.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"        b.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"        assertTrue(a.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"        assertTrue(b.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"    public void setAsNotDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"isdone\";","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"        Task a \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"        Task b \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"        b.setAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"        // test here","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"        a.setAsNotDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"        b.setAsNotDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"        assertFalse(a.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"        assertFalse(b.isMarkedDone());","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"Very long name with many spaces\";","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"        Task a \u003d new Task(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"        assertEquals(\"[ ] \" + name, a.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"WillCWX":46}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"package duke.task;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"        String name \u003d \"tests\";","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"        ToDo a \u003d new ToDo(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"        assertEquals(\"[T][ ] \" + name, a.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"WillCWX":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"WillCWX"},"content":"echo Hi","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"WillCWX"},"content":"echo Hi but very long and very wow","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"WillCWX"},"content":"todo read book","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"WillCWX"},"content":"deadline return book /by 2023-06-06","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"WillCWX"},"content":"event project meeting /from 2023-08-06 /to 2023-08-08","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"WillCWX"},"content":"todo join sports club","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"WillCWX"},"content":"todo borrow book","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"WillCWX"},"content":"mark abacasda ad wadadaw aw a D","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WillCWX"},"content":"mark ","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WillCWX"},"content":"delete ","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WillCWX"},"content":"unmark ","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WillCWX"},"content":"unmark awdawda w aa wa a adawda ","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WillCWX"},"content":"mark 1","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"WillCWX"},"content":"mark 4","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"WillCWX"},"content":"list with some weird continue text","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WillCWX"},"content":"deadline return book /by 2023-09-02","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"WillCWX"},"content":"event project meeting /from 2023-06-17 /to 2023-06-18","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"WillCWX"},"content":"todo a","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"WillCWX"},"content":"priority","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WillCWX"},"content":"delete 3","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WillCWX"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WillCWX"},"content":"delete 10","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"WillCWX"},"content":"delete 1","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"WillCWX"},"content":"delete 5","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"WillCWX"},"content":"wrong command prints message","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WillCWX"},"content":"deadline missingdate /by ","lastModifiedDate":"2023-01-18"},{"lineNumber":37,"author":{"gitId":"WillCWX"},"content":"deadline missingBy tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WillCWX"},"content":"deadline      /by missingname","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WillCWX"},"content":"deadline /by   ","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"WillCWX"},"content":"deadline","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WillCWX"},"content":"event","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"WillCWX"},"content":"event /from /to ","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"WillCWX"},"content":"event missingFromTo /from /to","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"WillCWX"},"content":"event missingTo /from /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"WillCWX"},"content":"event    /from now /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WillCWX"},"content":"event    /from   /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WillCWX"},"content":"event missingFromTo","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"WillCWX"},"content":"event missingFrom /to tmr","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"WillCWX"},"content":"event missingTo /from now","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"WillCWX"},"content":"bye","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"WillCWX":50}},{"path":"src/main/resources/duke.txt","fileType":"txt","isBinary":true,"lines":[],"authorContributionMap":{"WillCWX":0}}]
