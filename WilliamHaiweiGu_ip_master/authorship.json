[{"path":"CONTRIBUTORS.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Contributors","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Homepage","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---|:---:|:---:|:---:","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) | Jeffry Lum | [Github](https://github.com/j-lum/) | [Homepage](https://se.kasugano.moe)","lastModifiedDate":"2019-08-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100) | Damith C. Rajapakse | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/)","lastModifiedDate":"2019-08-06"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"# I would like to join this list. How can I help the project","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/).","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":9,"WilliamHaiweiGu":1}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"# Meggy.Meggy project template","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"instructions on how to use it.","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"   first)","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"3. After that, locate the `src/main/java/Meggy.Meggy.java` file, right-click it, and choose `Run Meggy.Meggy.main()` (if","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"   the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"   like the below as the output:","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"WilliamHaiweiGu":10}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    implementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.9.2\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    implementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.9.2\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"    mainClassName \u003d \"Meggy.Meggy\"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"    archiveBaseName \u003d \"Meggy\"","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"WilliamHaiweiGu":4}},{"path":"src/main/java/Meggy/Exception/Function.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Exception;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":" * Functional interface that supports {@link MeggyException} signature.","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":" *","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":" * @param \u003cI\u003e Input type.","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":" * @param \u003cO\u003e Output type.","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"public interface Function\u003cI, O\u003e {","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Function with {@link MeggyException} signature.","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @throws MeggyException","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    O apply(I in) throws MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"WilliamHaiweiGu":16}},{"path":"src/main/java/Meggy/Exception/MeggyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Exception;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** {@link Exception} that will eventually print out with {@code Resource.ERR_BASE} prefix. */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class MeggyException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Adds prefix to message.","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param msg Non-null. The detailed message.","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public MeggyException(String msg) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super(Resource.ERR_BASE + msg);","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"WilliamHaiweiGu":15}},{"path":"src/main/java/Meggy/Exception/MeggyIOBException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Exception;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Converts upcoming {@link IndexOutOfBoundsException} into {@link MeggyException}. */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class MeggyIOBException extends MeggyException {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param idx      Index (starts with 0) in question.","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param listSize Size of list that would cause {@link IndexOutOfBoundsException} when queried with idx.","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public MeggyIOBException(int idx, int listSize) {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super(Resource.errOutOfBounds(idx, listSize));","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"WilliamHaiweiGu":14}},{"path":"src/main/java/Meggy/Exception/MeggyNFException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Exception;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Converts {@link NumberFormatException} into {@link MeggyException}. */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class MeggyNFException extends MeggyException {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @param arg Non-null. The string that can\u0027t be parsed. */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public MeggyNFException(String arg) {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super(Resource.errNFE(arg));","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"WilliamHaiweiGu":11}},{"path":"src/main/java/Meggy/Exception/MeggyNoArgException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Exception;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Deals with the absence of argument after commands that needs argument(s). */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class MeggyNoArgException extends MeggyException {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Constructor needs no argument because error message is always {@code Resource.ERR_NO_ARGS} */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public MeggyNoArgException() {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super(Resource.ERR_NO_ARGS);","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"WilliamHaiweiGu":11}},{"path":"src/main/java/Meggy/Meggy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.Function;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyNoArgException;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.UserTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.File;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.OutputStream;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** The chatbot. Supports customized {@link InputStream} and {@link OutputStream}. */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class Meggy implements Runnable {","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * What to do when reaching different commands. Keys: non-null strings. Values: Non-null function that accepts","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * unparsed string arguments and return chatbot response strings.","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final Map\u003cString, Function\u003cString, String\u003e\u003e usrCmdToJob;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** What to do when the user-typed the command is unknown. Currently: notify user command is unknown. */","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final Function\u003cString, String\u003e unknownCmdBehavior \u003d s -\u003e {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"        throw new MeggyException(Resource.errUnknownCmd(Parser.get1stArg(s)));","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"    };","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Customizable input. */","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private final Scanner in;","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** The text-based UI used by the chatbot. */","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private final UI ui;","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** List of tasks. Allows dupes. */","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Location to save cross-session data. */","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Creates a chatbot instance with specified IO.","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param in  Non-null. Customizable input.","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param out Non-null. Customizable output.","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public Meggy(InputStream in, OutputStream out) {","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (in \u003d\u003d null) {","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new NullPointerException(\"InputStream is null\");","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (out \u003d\u003d null) {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new NullPointerException(\"OutputStream is null\");","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.ui \u003d new UI(out);","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"        storage \u003d new Storage(new File(Util.DATA_FILE_PATH));","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"        usrCmdToJob \u003d Map.of(","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_EXIT, s -\u003e Resource.FAREWELL,","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_LIST, s -\u003e Resource.NOTIF_LIST + tasks,","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_MARK, s -\u003e markTaskStatus(s, true),","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_UNMK, s -\u003e markTaskStatus(s, false),","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_TODO, s -\u003e addTask(s, Util.TODO_NEW),","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_DDL, s -\u003e addTask(s, Util.DDL_NEW),","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_EVENT, s -\u003e addTask(s, Util.EVENT_NEW),","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_DEL, this::deleteTask,","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"                Resource.CMD_FIND, this::find","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"        );","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Updates the status of the user task specified by index.","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param args      Non-null. Index (start with 1) string of task to be updated.","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param newStatus The task\u0027s updated status.","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Response to \u0027mark/unmark\u0027 command.","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private String markTaskStatus(String args, boolean newStatus) {","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int idx;","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"WilliamHaiweiGu"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"WilliamHaiweiGu"},"content":"            idx \u003d Parser.parseIdx(args);","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"WilliamHaiweiGu"},"content":"            tasks.boundsCheck(idx);","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (MeggyException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"WilliamHaiweiGu"},"content":"            return e.getMessage() + Util.usageIdxCmd(newStatus ? Resource.CMD_MARK : Resource.CMD_UNMK);","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final UserTask task \u003d tasks.get(idx);","lastModifiedDate":"2023-01-18"},{"lineNumber":81,"author":{"gitId":"WilliamHaiweiGu"},"content":"        task.status \u003d newStatus;","lastModifiedDate":"2023-01-18"},{"lineNumber":82,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return (newStatus ? Resource.NOTIF_MARK : Resource.NOTIF_UNMK) + Resource.TASK_STRING_INDENT + task + \u0027\\n\u0027;","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":84,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":85,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Adds task to the bottom of {@code tasks} list.","lastModifiedDate":"2023-01-19"},{"lineNumber":87,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":88,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param args    Non-null. Unparsed task description string.","lastModifiedDate":"2023-01-19"},{"lineNumber":89,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param newTask Non-null. Constructor of task to accept {@code args}.","lastModifiedDate":"2023-01-19"},{"lineNumber":90,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Response to \"todo/ddl/event\" command.","lastModifiedDate":"2023-01-19"},{"lineNumber":91,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private String addTask(String args, Function\u003cString, UserTask\u003e newTask) throws MeggyException {","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final UserTask task \u003d newTask.apply(args);","lastModifiedDate":"2023-01-18"},{"lineNumber":94,"author":{"gitId":"WilliamHaiweiGu"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"WilliamHaiweiGu"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-01-25"},{"lineNumber":96,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.NOTIF_ADD + reportChangedTaskAndList(task);","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":98,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":99,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Deletes task from {@code tasks} list. Currently O(n) runtime.","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param arg Non-null. Index (start with 1) string of task to be updated.","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Response to \u0027delete\u0027 command.","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":105,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private String deleteTask(String arg) {","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int idx;","lastModifiedDate":"2023-01-19"},{"lineNumber":107,"author":{"gitId":"WilliamHaiweiGu"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"WilliamHaiweiGu"},"content":"            idx \u003d Parser.parseIdx(arg);","lastModifiedDate":"2023-01-25"},{"lineNumber":109,"author":{"gitId":"WilliamHaiweiGu"},"content":"            tasks.boundsCheck(idx);","lastModifiedDate":"2023-01-25"},{"lineNumber":110,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (MeggyException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":111,"author":{"gitId":"WilliamHaiweiGu"},"content":"            return e.getMessage() + Util.usageIdxCmd(Resource.CMD_DEL);","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":113,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final UserTask task \u003d tasks.remove(idx);","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"WilliamHaiweiGu"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":115,"author":{"gitId":"WilliamHaiweiGu"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-01-25"},{"lineNumber":116,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (MeggyException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":117,"author":{"gitId":"WilliamHaiweiGu"},"content":"            ui.dispLn(e.getMessage());","lastModifiedDate":"2023-01-25"},{"lineNumber":118,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":119,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.NOTIF_DEL + reportChangedTaskAndList(task);","lastModifiedDate":"2023-01-26"},{"lineNumber":120,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":121,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":122,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":123,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Formats the string of the recently modified task and {@code tasks} list.","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":125,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param task Non-null. The recently modified task.","lastModifiedDate":"2023-01-19"},{"lineNumber":126,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":127,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private String reportChangedTaskAndList(UserTask task) {","lastModifiedDate":"2023-01-19"},{"lineNumber":128,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.TASK_STRING_INDENT + task + \u0027\\n\u0027 + Resource.nTaskFmt(tasks.size());","lastModifiedDate":"2023-01-26"},{"lineNumber":129,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":130,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":131,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":132,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Lists all the tasks with description containing the keyword.","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param substring Non-null. The keyword to look for.","lastModifiedDate":"2023-01-27"},{"lineNumber":135,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return The printable string of the listed tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":136,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @throws MeggyNoArgException If user search keyword is blank.","lastModifiedDate":"2023-01-27"},{"lineNumber":137,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private String find(String substring) throws MeggyNoArgException {","lastModifiedDate":"2023-01-27"},{"lineNumber":139,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (\"\".equals(substring)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":140,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyNoArgException();","lastModifiedDate":"2023-01-27"},{"lineNumber":141,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":142,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final TaskList ans \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":143,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (UserTask task : tasks) {","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"WilliamHaiweiGu"},"content":"            if (task.desc.contains(substring)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":145,"author":{"gitId":"WilliamHaiweiGu"},"content":"                ans.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":146,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":147,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":148,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.NOTIF_FIND + ans;","lastModifiedDate":"2023-01-27"},{"lineNumber":149,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":150,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":151,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Interacts with user through designated IO. */","lastModifiedDate":"2023-01-26"},{"lineNumber":152,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":153,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void run() {","lastModifiedDate":"2023-01-18"},{"lineNumber":154,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // Front page","lastModifiedDate":"2023-01-18"},{"lineNumber":155,"author":{"gitId":"WilliamHaiweiGu"},"content":"        ui.disp(Resource.MSG_HD);","lastModifiedDate":"2023-01-26"},{"lineNumber":156,"author":{"gitId":"WilliamHaiweiGu"},"content":"        ui.dispLn(Resource.MEGGY_LOGO);","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"WilliamHaiweiGu"},"content":"        ui.disp(Resource.GREETINGS);","lastModifiedDate":"2023-01-26"},{"lineNumber":158,"author":{"gitId":"WilliamHaiweiGu"},"content":"        ui.disp(Resource.MSG_TL);","lastModifiedDate":"2023-01-26"},{"lineNumber":159,"author":{"gitId":"WilliamHaiweiGu"},"content":"        storage.load(tasks);","lastModifiedDate":"2023-01-25"},{"lineNumber":160,"author":{"gitId":"WilliamHaiweiGu"},"content":"        while (in.hasNextLine()) { // reads input and responds in each iteration","lastModifiedDate":"2023-01-19"},{"lineNumber":161,"author":{"gitId":"WilliamHaiweiGu"},"content":"            //Parse command and args","lastModifiedDate":"2023-01-19"},{"lineNumber":162,"author":{"gitId":"WilliamHaiweiGu"},"content":"            final Parser.JobAndArg\u003cString\u003e jobAndArg \u003d Parser.parseJobAndArg(usrCmdToJob, in.nextLine());","lastModifiedDate":"2023-01-25"},{"lineNumber":163,"author":{"gitId":"WilliamHaiweiGu"},"content":"            final Function\u003cString, String\u003e job \u003d jobAndArg.job \u003d\u003d null ? unknownCmdBehavior : jobAndArg.job;","lastModifiedDate":"2023-01-26"},{"lineNumber":164,"author":{"gitId":"WilliamHaiweiGu"},"content":"            //Execute commands and display results","lastModifiedDate":"2023-01-19"},{"lineNumber":165,"author":{"gitId":"WilliamHaiweiGu"},"content":"            ui.disp(Resource.MSG_HD);","lastModifiedDate":"2023-01-26"},{"lineNumber":166,"author":{"gitId":"WilliamHaiweiGu"},"content":"            String response;","lastModifiedDate":"2023-01-19"},{"lineNumber":167,"author":{"gitId":"WilliamHaiweiGu"},"content":"            try {","lastModifiedDate":"2023-01-19"},{"lineNumber":168,"author":{"gitId":"WilliamHaiweiGu"},"content":"                response \u003d job.apply(jobAndArg.args);","lastModifiedDate":"2023-01-25"},{"lineNumber":169,"author":{"gitId":"WilliamHaiweiGu"},"content":"            } catch (MeggyException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":170,"author":{"gitId":"WilliamHaiweiGu"},"content":"                response \u003d e.getMessage();","lastModifiedDate":"2023-01-19"},{"lineNumber":171,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":172,"author":{"gitId":"WilliamHaiweiGu"},"content":"            ui.disp(response);","lastModifiedDate":"2023-01-25"},{"lineNumber":173,"author":{"gitId":"WilliamHaiweiGu"},"content":"            ui.disp(Resource.MSG_TL);","lastModifiedDate":"2023-01-26"},{"lineNumber":174,"author":{"gitId":"WilliamHaiweiGu"},"content":"            if (Resource.CMD_EXIT.equals(jobAndArg.cmd)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":175,"author":{"gitId":"WilliamHaiweiGu"},"content":"                in.close();","lastModifiedDate":"2023-01-25"},{"lineNumber":176,"author":{"gitId":"WilliamHaiweiGu"},"content":"                ui.close();","lastModifiedDate":"2023-01-25"},{"lineNumber":177,"author":{"gitId":"WilliamHaiweiGu"},"content":"                return;","lastModifiedDate":"2023-01-18"},{"lineNumber":178,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":179,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":180,"author":{"gitId":"WilliamHaiweiGu"},"content":"        ui.dispLn(\"WARNING: REACHED END OF INPUT WITHOUT \u0027BYE\u0027 COMMAND\");","lastModifiedDate":"2023-01-25"},{"lineNumber":181,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":182,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":183,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-26"},{"lineNumber":184,"author":{"gitId":"WilliamHaiweiGu"},"content":"        new Meggy(System.in, System.out).run();","lastModifiedDate":"2023-01-26"},{"lineNumber":185,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":186,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":186}},{"path":"src/main/java/Meggy/MeggyTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Date-time value that either complies to {@link LocalDateTime} format or user-customized. */","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class MeggyTime {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Cached dummy NA value. */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final MeggyTime NA \u003d new MeggyTime();","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** The date-time format to be pass to output. */","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final DateTimeFormatter OUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** The date-time format to be encoded to data file. */","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final DateTimeFormatter ENCODE_FORMAT \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy HHmm\");","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** All acceptable date-time formats. Singapore\u0027s convention (date-month) is prioritized. */","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private static final DateTimeFormatter[] FORMATTERS;","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"    static { //initialize date-time formats","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String[] timeSeps \u003d {\":\", \"\"};","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String[] dateSeps \u003d {\"/\", \"-\", null};","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"        //day-month takes precedence before month-day","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String[] dateFmts \u003d {\"dMy\", \"ydM\", \"Mdy\", \"yMd\"};","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String[] datePartLong \u003d new String[dateFmts.length];","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"        Arrays.setAll(datePartLong, i -\u003e dateFmts[i].replace(\"d\", \"dd\")","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"                .replace(\"M\", \"MM\").replace(\"y\", \"yyyy\"));","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"        FORMATTERS \u003d new DateTimeFormatter[timeSeps.length * dateSeps.length * dateFmts.length * 2];","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"        int i \u003d 0;","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (int j \u003d 0; j \u003c dateFmts.length; j++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"            final String dateFmt \u003d dateFmts[j];","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"            for (String dateSep : dateSeps) {","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"                final String datePart \u003d dateSep \u003d\u003d null ? datePartLong[j] :","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"                        dateFmt.charAt(0) + dateSep + dateFmt.charAt(1) + dateSep + dateFmt.charAt(2);","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"                for (String timeSep : timeSeps) {","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"                    final String timePart \u003d \"HH\" + timeSep + \"mm\";","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"                    FORMATTERS[i++] \u003d DateTimeFormatter.ofPattern(datePart + \u0027 \u0027 + timePart);","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"                    FORMATTERS[i++] \u003d DateTimeFormatter.ofPattern(timePart + \u0027 \u0027 + dateFmt);","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"                }","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Time that comply to {@link LocalDateTime} format or null if time is user-customized. */","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"    final LocalDateTime formatted;","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Unparsable user-customized time or null if can be parsed. */","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"    final String customized;","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Constructr of the dummy {@code NA} value */","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private MeggyTime() {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"        formatted \u003d null;","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"        customized \u003d Util.NO_FOUND;","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @param time Non-null. The trimmed time value to be interpreted. */","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private MeggyTime(String time) {","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.formatted \u003d parseTime(time);","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.customized \u003d this.formatted \u003d\u003d null ? time : null;","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Factory method. Trims none-null strings. It also accepts {@code null} value, in which case it returns the","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * cached {@code NA} value.","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param time Untrimmed time value to be interpreted or {@code null} if {@code NA} value is intended.","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static MeggyTime of(String time) {","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return time \u003d\u003d null ? NA : new MeggyTime(time.trim());","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @return parsed date-time or {@code null} if no formatter can parse correctly. */","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static LocalDateTime parseTime(String time) {","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (DateTimeFormatter format : FORMATTERS) {","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"WilliamHaiweiGu"},"content":"            try {","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"WilliamHaiweiGu"},"content":"                return LocalDateTime.parse(time, format);","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"WilliamHaiweiGu"},"content":"            } catch (DateTimeException ignored) {","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"WilliamHaiweiGu"},"content":"            } // try next formatter if unsuccessful","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return null;","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @return User-customized time string in square brackets or formatted date-time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return formatted \u003d\u003d null ? \u0027[\u0027 + customized + \u0027]\u0027 : formatted.format(OUT_FORMAT);","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @return String representation used in data file. User-customized time is unchanged. */","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String encode() {","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return formatted \u003d\u003d null ? customized : formatted.format(ENCODE_FORMAT);","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Two {@link MeggyTime} objects are equal iff they have same (equal or both null) formatted time and customized","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * time.","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (!(o instanceof MeggyTime)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"WilliamHaiweiGu"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final MeggyTime other \u003d (MeggyTime) o;","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Objects.equals(formatted, other.formatted) \u0026\u0026 Objects.equals(customized, other.customized);","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"WilliamHaiweiGu":104}},{"path":"src/main/java/Meggy/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.Function;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyNFException;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyNoArgException;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Contains various static parsing methods. */","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class Parser {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @deprecated Class with all methods static should not be initialized. */","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private Parser() {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Parses the index integer from the first arg in args string.","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param args Non-null. Trimmed arguments string.","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Parsed idx (starts with 0)","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @throws MeggyNoArgException If args string is empty.","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @throws MeggyNFException    If args string\u0027s first word is not a signed 32-bit {@link Integer}.","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static int parseIdx(String args) throws MeggyException {","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String arg \u003d get1stArg(args);","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (\"\".equals(arg)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyNoArgException();","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int idx;","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"            idx \u003d Integer.parseInt(arg) - 1;","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyNFException(arg);","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return idx;","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Parses text line into command, arguments, and finds job according to job table. All continuous whitespaces","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * are replaced with a single whitespace.","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Parsed command, job, and argument encapsulated in an {@code JobAndArg} object.","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static \u003cE\u003e JobAndArg\u003cE\u003e parseJobAndArg(Map\u003cString, Function\u003cString, E\u003e\u003e jobTable, String line) {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"        //Multiple whitespace characters are treated as 1 whitespace.","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"        line \u003d line.replaceAll(\"[ \\t\\r\\n\\f]+\", \" \").trim();","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"        //Parse command and args","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int spaceIdx \u003d line.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final boolean noSpace \u003d spaceIdx \u003c 0;","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String cmd \u003d (noSpace ? line : line.substring(0, spaceIdx)).toLowerCase();","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final Function\u003cString, E\u003e job \u003d jobTable.get(cmd);","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"        //No corresponding job? args is line. Otherwise, args is everything after first space. No space? Empty args.","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String args \u003d job \u003d\u003d null ? line : noSpace ? \"\" : line.substring(spaceIdx + 1).trim();","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return new JobAndArg\u003c\u003e(cmd, job, args);","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Gets first argument in string that separates args with whitespace.","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param args Non-null. Trimmed arguments string.","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return The substring before the 1st whitespace character, or original string if no whitespace exists.","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String get1stArg(String args) {","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int whiteSpaceIdx \u003d args.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return whiteSpaceIdx \u003c 0 ? args : args.substring(0, whiteSpaceIdx);","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Entry class that stores parsed value of command string, the corresponding job function, and args string.","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param \u003cE\u003e The return type of the job function.","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static class JobAndArg\u003cE\u003e {","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"WilliamHaiweiGu"},"content":"        public final String cmd;","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"WilliamHaiweiGu"},"content":"        /**","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"WilliamHaiweiGu"},"content":"         * The command-specific function corresponding that will take {@code args} as arguments. Null if the command is","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"WilliamHaiweiGu"},"content":"         * unknown.","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"WilliamHaiweiGu"},"content":"         */","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"WilliamHaiweiGu"},"content":"        public final Function\u003cString, E\u003e job;","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"WilliamHaiweiGu"},"content":"        public final String args;","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"WilliamHaiweiGu"},"content":"        private JobAndArg(String cmd, Function\u003cString, E\u003e job, String args) {","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"WilliamHaiweiGu"},"content":"            this.cmd \u003d cmd;","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"WilliamHaiweiGu"},"content":"            this.job \u003d job;","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"WilliamHaiweiGu"},"content":"            this.args \u003d args;","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"WilliamHaiweiGu":87}},{"path":"src/main/java/Meggy/Resource.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Class that stores all customizable data statically. Works like a \u0027resource pack\u0027 */","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"public final class Resource {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Prefix of all error messages. */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String ERR_BASE \u003d \" OOPS!!! \";","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Error message if no argument is provided to a command that needs argument(s). */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String ERR_NO_ARGS \u003d \"Description of this command cannot be empty.\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Error message if an error prevents writing to a file. */","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String ERR_FILE_WRITE \u003d \"Can\u0027t save data to file. \";","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Error message if an {@link java.io.IOException} prevents file interaction. */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String ERR_IO \u003d \"An IO error occurred.\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Error message if an {@link SecurityException} prevents file interaction. */","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String ERR_NO_FILE_ACCESS \u003d \"File access denied by system.\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Indentation before task string when displaying in list. */","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String TASK_STRING_INDENT \u003d \"    \";","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Exit\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_EXIT \u003d \"bye\";","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027List\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_LIST \u003d \"list\";","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Mark\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_MARK \u003d \"mark\";","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Unmark\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_UNMK \u003d \"unmark\";","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Todo\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_TODO \u003d \"todo\";","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Deadline\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_DDL \u003d \"deadline\";","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Event\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_EVENT \u003d \"event\";","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Delete\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_DEL \u003d \"delete\";","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Find\u0027 command. */","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String CMD_FIND \u003d \"find\";","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Due time\u0027 keyword of \u0027deadline\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String KW_DUE \u003d \"by\";","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Start time\u0027 keyword of \u0027event\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String KW_STT \u003d \"from\";","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027End time\u0027 keyword of \u0027event\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String KW_END \u003d \"to\";","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after \u0027todo/deadline/event\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String NOTIF_ADD \u003d \" Got it. Added this task:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after \u0027list\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String NOTIF_LIST \u003d \" Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after \u0027mark\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String NOTIF_MARK \u003d \" Booyah! Marked this task as done:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after \u0027unmark\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String NOTIF_UNMK \u003d \" OK. Marked this task as not done:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after syntax error. */","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String NOTIF_USAGE \u003d \" Usage: \";","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after \u0027delete\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String NOTIF_DEL \u003d \" OK. Removed this task:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after \u0027find\u0027 command. */","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String NOTIF_FIND \u003d \" Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Front page wallpaper. */","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String MEGGY_LOGO \u003d \" __  __\\n|  \\\\/  |\\n| \\\\  / | ___  __ _  __ _ _   _\\n| |\\\\/| |/ _ \\\\/ _`\" +","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"            \" |/ _` | | | |\\n| |  | |  __/ (_| | (_| | |_| |\\n|_|  |_|\\\\___|\\\\__, |\\\\__, |\\\\__, |\\n              __/ \" +","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"            \"| __/ | __/ |\\n             |___/ |___/ |___/\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Message header. */","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String MSG_HD \u003d \"------------------------------------------------------------\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Message tail. */","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String MSG_TL \u003d MSG_HD + \"\\n\u003e\";","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Front page greetings. */","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String GREETINGS \u003d \" Wommy! Get REKT by the upcoming star of Inkopolis, Meggy.Meggy!\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Notification message after \u0027bye\u0027 command. */","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String FAREWELL \u003d \" OK gotta go play more Turf Wars. Have a nice day!\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Icon for tasks marked \u0027done\u0027. */","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static char DONE_MK \u003d \u0027X\u0027;","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @deprecated Class stores all resource values statically should not be initialized. */","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private Resource() {","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":75,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Formats an array/list index number.","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Formatted index (starts with 1).","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String idxFmt(int i) {","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return \" \" + (i + 1) + \u0027.\u0027;","lastModifiedDate":"2023-01-18"},{"lineNumber":81,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":82,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":83,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Notification message after each change to task list.","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Message about task list size.","lastModifiedDate":"2023-01-19"},{"lineNumber":87,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":88,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String nTaskFmt(int nTask) {","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return \" Now you have \" + nTask + \" task(s) in the list.\\n\";","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":91,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":93,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Message of error caused by {@link NumberFormatException}","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":95,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param arg Non-null. String in question.","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Error message.","lastModifiedDate":"2023-01-19"},{"lineNumber":97,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":98,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String errNFE(String arg) {","lastModifiedDate":"2023-01-19"},{"lineNumber":99,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return \"Can not interpret \\\"\" + arg + \"\\\" as an index number.\\n\";","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Notification message after empty input or unknown command or empty input.","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":105,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param cmd Non-null. String in question.","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Message about empty input or unknown command or empty input.","lastModifiedDate":"2023-01-19"},{"lineNumber":107,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String errUnknownCmd(String cmd) {","lastModifiedDate":"2023-01-19"},{"lineNumber":109,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return \"\".equals(cmd) ? \"Umm that\u0027s all white space? Say something! Speak to me!\\n\" : \"Don\u0027t know what \\\"\" +","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"WilliamHaiweiGu"},"content":"                cmd + \"\\\" means.\\n\";","lastModifiedDate":"2023-01-19"},{"lineNumber":111,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":112,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":113,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Message of error would have caused by {@link IndexOutOfBoundsException}","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":116,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param idx      Index (starts with 0) in question.","lastModifiedDate":"2023-01-19"},{"lineNumber":117,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param listSize Size of list that would cause {@link IndexOutOfBoundsException} when queried with idx.","lastModifiedDate":"2023-01-19"},{"lineNumber":118,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Error message.","lastModifiedDate":"2023-01-19"},{"lineNumber":119,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":120,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String errOutOfBounds(int idx, int listSize) {","lastModifiedDate":"2023-01-19"},{"lineNumber":121,"author":{"gitId":"WilliamHaiweiGu"},"content":"        idx +\u003d 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":122,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return \"Can not retrieve item with \" +","lastModifiedDate":"2023-01-19"},{"lineNumber":123,"author":{"gitId":"WilliamHaiweiGu"},"content":"                (idx \u003e 0 ? \"index \" + idx + \" from a list of size \" + listSize : \"non-positive index (\" + idx + \u0027)\u0027)","lastModifiedDate":"2023-01-19"},{"lineNumber":124,"author":{"gitId":"WilliamHaiweiGu"},"content":"                + \".\\n\";","lastModifiedDate":"2023-01-19"},{"lineNumber":125,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":126,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":126}},{"path":"src/main/java/Meggy/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.Function;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.UserTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.File;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Save cross-session data in file. */","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class Storage {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** From \"command\" in a data line to the type of {@link UserTask} to be created. */","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static Map\u003cString, Function\u003cString, UserTask\u003e\u003e DATA_ENTRY_TO_TASK \u003d Map.of(","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"            Resource.CMD_TODO, Util.TODO_NEW,","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"            Resource.CMD_DDL, Util.DDL_NEW,","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"            Resource.CMD_EVENT, Util.EVENT_NEW","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    );","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final File dataFile;","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param dataFile Non-null. The data file to read from and write to. If not exist, it will be created upon first","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *                 write operation.","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public Storage(File dataFile) {","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.dataFile \u003d dataFile;","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Write the content of the entire {@code tasks} list into data file. Creates data file if it did not previously","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * exist.","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param tasks Non-null. The task list to take snapshot.","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @throws MeggyException If file IO throws {@link IOException}.","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void save(ArrayList\u003cUserTask\u003e tasks) throws MeggyException {","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final FileWriter fw;","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"            fw \u003d new FileWriter(dataFile, false);","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyException(Resource.ERR_FILE_WRITE + Resource.ERR_IO);","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyException(Resource.ERR_FILE_WRITE + Resource.ERR_NO_FILE_ACCESS);","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"            for (UserTask t : tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"                fw.write(t.encode() + \u0027\\n\u0027);","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"            fw.flush();","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyException(Resource.ERR_FILE_WRITE + Resource.ERR_IO);","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } finally {","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"            try {","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"                fw.close();","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"            } catch (IOException ignored) {","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Reads content of file into the {@code tasks} list. If the file does not exist, process is skipped. Otherwise, all","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * lines with syntax error are skipped.","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * All file {@link IOException}s are ignored as if the file did not exist.","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param tasks Non-null. The task list to load in data.","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void load(ArrayList\u003cUserTask\u003e tasks) {","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final Scanner fileIn;","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"WilliamHaiweiGu"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"WilliamHaiweiGu"},"content":"            fileIn \u003d new Scanner(dataFile);","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"WilliamHaiweiGu"},"content":"            return;","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"WilliamHaiweiGu"},"content":"        while (fileIn.hasNextLine()) {","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"WilliamHaiweiGu"},"content":"            final Parser.JobAndArg\u003cUserTask\u003e jobAndArg \u003d Parser.parseJobAndArg(DATA_ENTRY_TO_TASK, fileIn.nextLine());","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"WilliamHaiweiGu"},"content":"            final Function\u003cString, UserTask\u003e taskNew \u003d jobAndArg.job;","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"WilliamHaiweiGu"},"content":"            if (taskNew !\u003d null) { // Command recognized","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"WilliamHaiweiGu"},"content":"                try {","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"WilliamHaiweiGu"},"content":"                    tasks.add(taskNew.apply(jobAndArg.args));","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"WilliamHaiweiGu"},"content":"                } catch (MeggyException ignored) {","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"WilliamHaiweiGu"},"content":"                }","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"WilliamHaiweiGu"},"content":"        fileIn.close();","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"WilliamHaiweiGu":92}},{"path":"src/main/java/Meggy/Task/DdlTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.MeggyTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** {@link UserTask} with a due time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class DdlTask extends UserTask {","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Bracketed icon of task type. */","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String LABEL \u003d getTaskTypeLabel(Resource.CMD_DDL);","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Due\u0027 keyword formatted to be looked up in user input during parsing. */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String DUE_KEYWORD_FORMATTED \u003d formatKeyword(Resource.KW_DUE);","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Formatted \u0027Due\u0027 keyword length. Cached for later use. */","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static int DUE_LEN \u003d DUE_KEYWORD_FORMATTED.length();","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Due time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final MeggyTime due;","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param desc Non-null. Description string of task.","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param due  Non-null. Due time.","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private DdlTask(String desc, MeggyTime due) throws MeggyException {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super(desc);","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.due \u003d due;","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Factory method. Parses description and due time from arguments.","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param args Non-null. User input line with command removed.","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static DdlTask of(String args) throws MeggyException {","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int kwIdx \u003d args.indexOf(DUE_KEYWORD_FORMATTED);","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // If no key word in args, time is set to \"N/A\".","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String desc;","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final MeggyTime due;","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (kwIdx \u003c 0) {","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"            desc \u003d args;","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"            due \u003d MeggyTime.NA;","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"        } else {","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"            desc \u003d args.substring(0, kwIdx).trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"            due \u003d MeggyTime.of(args.substring(kwIdx + DUE_LEN));","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return new DdlTask(desc, due);","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @inheritDoc */","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String encode() {","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.CMD_DDL + \u0027 \u0027 + desc + \u0027 \u0027 + DUE_KEYWORD_FORMATTED + due.encode();","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Two {@link DdlTask} objects are equal iff they have same (non-null) description and due time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (!(o instanceof DdlTask)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final DdlTask other \u003d (DdlTask) o;","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return due.equals(other.due) \u0026\u0026 desc.equals(other.desc);","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @inheritDoc */","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return LABEL + super.toString() + \" (by: \" + due + \u0027)\u0027;","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":68}},{"path":"src/main/java/Meggy/Task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.MeggyTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** {@link UserTask} with a start time and an end time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class EventTask extends UserTask {","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Bracketed icon of task type. */","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String LABEL \u003d getTaskTypeLabel(Resource.CMD_EVENT);","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027Start\u0027 keyword formatted to be looked up in user input during parsing. */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String START_KEYWORD_FORMATTED \u003d formatKeyword(Resource.KW_STT);","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** \u0027End\u0027 keyword formatted to be looked up in user input during parsing. */","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String END_KEYWORD_FORMATTED \u003d formatKeyword(Resource.KW_END);","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Start time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final MeggyTime start;","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** End time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final MeggyTime end;","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param desc  Non-null. Parsed description string.","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param start Non-null. Parsed start time.","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param end   Non-null. Parsed end time.","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private EventTask(String desc, MeggyTime start, MeggyTime end) throws MeggyException {","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super(desc);","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Factory method. Parses description, start time, and end time from arguments.","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param args Non-null. User input line with command removed.","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static EventTask of(String args) throws MeggyException {","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int argLen \u003d args.length();","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // All positions of keywords.","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final ArrayList\u003cKwIdxPair\u003e kwIdxs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // For simplicity, end of argument string is also a keyword position.","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"        kwIdxs.add(new KwIdxPair(null, argLen));","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // Record all keyword positions","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (String keyword : new String[]{START_KEYWORD_FORMATTED, END_KEYWORD_FORMATTED}) {","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"            final int idx \u003d args.indexOf(keyword);","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"            if (idx \u003e\u003d 0) {","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"                kwIdxs.add(new KwIdxPair(keyword, idx));","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"        kwIdxs.sort(KwIdxPair::compareTo);","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // Assign the substring between 2 adjacent keywords to the left one.","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final HashMap\u003cString, String\u003e kwValue \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int nIndeces \u003d kwIdxs.size() - 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (int i \u003d 0; i \u003c nIndeces; i++) {","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"            KwIdxPair pair \u003d kwIdxs.get(i);","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"            kwValue.put(pair.keyword, args.substring(pair.idx + pair.keyword.length(), kwIdxs.get(i + 1).idx));","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // The substring before the 1st keyword is description.","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int descLim \u003d kwIdxs.get(0).idx;","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String desc \u003d descLim \u003e\u003d argLen ? args : args.substring(0, descLim);","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // If \"start\" keyword is in args, write to start time variable. Otherwise use default.","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String start \u003d kwValue.get(START_KEYWORD_FORMATTED);","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"        // If \"end\" keyword is in args, write to end time variable. Otherwise use default.","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final String end \u003d kwValue.get(END_KEYWORD_FORMATTED);","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return new EventTask(desc.trim(), MeggyTime.of(start), MeggyTime.of(end));","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @inheritDoc */","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String encode() {","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.CMD_EVENT + \u0027 \u0027 + desc + \u0027 \u0027 + START_KEYWORD_FORMATTED + start.encode() + \u0027 \u0027 +","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"WilliamHaiweiGu"},"content":"                END_KEYWORD_FORMATTED + end.encode();","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @inheritDoc */","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":79,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return LABEL + super.toString() + \" (from: \" + start + \" to: \" + end + \u0027)\u0027;","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":82,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Two {@link EventTask} objects are equal iff they have same (non-null) description, due time, and start time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (!(o instanceof EventTask)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"WilliamHaiweiGu"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final EventTask other \u003d (EventTask) o;","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return start.equals(other.start) \u0026\u0026 end.equals(other.end) \u0026\u0026 desc.equals(other.desc);","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":92}},{"path":"src/main/java/Meggy/Task/KwIdxPair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Keyword-position pair. Enables index sorting of keywords by index positions. */","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class KwIdxPair implements Comparable\u003cKwIdxPair\u003e {","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final String keyword;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final int idx;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"    KwIdxPair(String keyword, int idx) {","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Two {@link KwIdxPair} are compared by index only. */","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public int compareTo(KwIdxPair o) {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Integer.compare(idx, o.idx);","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"WilliamHaiweiGu":18}},{"path":"src/main/java/Meggy/Task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** {@link UserTask} that has no time whatsoever */","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class TodoTask extends UserTask {","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Bracketed icon of task type. */","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final static String LABEL \u003d getTaskTypeLabel(Resource.CMD_TODO);","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @param desc Non-null. Description string of task with command removed. */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public TodoTask(String desc) throws MeggyException {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super(desc);","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @inheritDoc */","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String encode() {","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.CMD_TODO + \u0027 \u0027 + desc;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @inheritDoc */","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return LABEL + super.toString();","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Two {@link TodoTask} objects are equal iff they have same (non-null) description. */","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return (o instanceof TodoTask) \u0026\u0026 desc.equals(((TodoTask) o).desc);","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":33}},{"path":"src/main/java/Meggy/Task/UserTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyNoArgException;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Resource;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Util;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Entries to be recorded by the chatbot. */","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"public abstract class UserTask {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Task description. */","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public final String desc;","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Task completion status. */","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public boolean status;","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @param desc Non-null. Description string of task with command removed. */","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public UserTask(String desc) throws MeggyException {","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (\"\".equals(desc)) { // No arguments","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyNoArgException();","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"        status \u003d false;","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Get ask type label from their names.","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param taskType Non-null, non-empty. Name of task type.","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Task-type-specific label.","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String getTaskTypeLabel(String taskType) {","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Util.parenthesize(Character.toUpperCase(taskType.charAt(0)));","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Formats the time keywords used to indicate date-time in user input.","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param keyword Non-null. Raw time keyword.","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Command-syntax-marking time keyword.","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String formatKeyword(String keyword) {","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return \u0027/\u0027 + keyword + \u0027 \u0027;","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return The string representation of this task in data file format. Currently: re-create the command that would","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * add the task.","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public abstract String encode();","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @return The string representation of this task in text UI. */","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Util.parenthesize(status ? Resource.DONE_MK : \u0027 \u0027) + \u0027 \u0027 + desc;","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":55}},{"path":"src/main/java/Meggy/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyIOBException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.UserTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** {@link ArrayList} implementation of chat bot task list. Note that task deletion takes O(n) time. */","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class TaskList extends ArrayList\u003cUserTask\u003e {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"        super();","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @throws MeggyIOBException If the parsed index is out of bounds with respect to this tasks list. */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void boundsCheck(int idx) throws MeggyIOBException {","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final int size \u003d size();","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"        if (idx \u003c 0 || (idx \u003e\u003d size)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"            throw new MeggyIOBException(idx, size);","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @return Printable string representation of this list. */","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"        final StringBuilder ans \u003d new StringBuilder();","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"        int i \u003d 0;","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (UserTask task : this) {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"            ans.append(Resource.idxFmt(i++)).append(task).append(\u0027\\n\u0027);","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return ans.toString();","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"WilliamHaiweiGu":32}},{"path":"src/main/java/Meggy/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.Closeable;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.OutputStream;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** The text-based UI used by the chatbot. */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class UI implements Closeable {","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private final PrintStream out;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @param out Non-null. The customizable output stream. */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public UI(OutputStream out) {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"        this.out \u003d out instanceof PrintStream ? (PrintStream) out : new PrintStream(out);","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Displays {@code String.valueOf(obj)} on UI. */","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void disp(Object obj) {","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"        out.print(obj);","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Displays {@code String.valueOf(obj)} on UI and creates a new line. */","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void dispLn(Object obj) {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"        out.println(obj);","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Prevents possible resource leakage. Call after all display work is done. */","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void close() {","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"        out.close();","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"WilliamHaiweiGu":31}},{"path":"src/main/java/Meggy/Util.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"package Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.Function;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.DdlTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.EventTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.TodoTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.UserTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"/** Class that stores all helper functions and uncustomizable constants statically. */","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"public final class Util {","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Cached {@link TodoTask} constructor functional object. */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final Function\u003cString, UserTask\u003e TODO_NEW \u003d TodoTask::new;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Cached {@link DdlTask} \"constructor\" functional object. */","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final Function\u003cString, UserTask\u003e DDL_NEW \u003d DdlTask::of;","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Cached {@link EventTask} \"constructor\" functional object. */","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final Function\u003cString, UserTask\u003e EVENT_NEW \u003d EventTask::of;","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Default time information if corresponding time keyword is absent in user input. */","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final String NO_FOUND \u003d \"N/A\";","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Task list data file. */","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static final String DATA_FILE_PATH \u003d \"MeggyData.txt\";","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** @deprecated Class stores all values statically should not be initialized. */","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private Util() {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /** Puts {@link Character}s in square brackets. */","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String parenthesize(char c) {","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return \"[\" + c + \u0027]\u0027;","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * Notification message to indicate the correct syntax of index commands (todo/deadline/event/delete)","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @param cmd Non-null. Index command. Currently \u0027mark\u0027, \u0027unmark\u0027, or \u0027delete\u0027 only.","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return Notification message.","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public static String usageIdxCmd(String cmd) {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return Resource.NOTIF_USAGE + cmd + \" \u003cidx: integer between 1 and list size (inclusive)\u003e\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":40}},{"path":"src/main/java/MeggyTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Exception.MeggyException;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Meggy;","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.MeggyTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.DdlTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.EventTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"import Meggy.Task.TodoTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.time.ZoneOffset;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"import java.util.Random;","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":" * For testing purpose only.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"public class MeggyTest {","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private static final Random RAND \u003d new Random();","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private static final int N_TEST \u003d 1024;","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"     * @return String that will never be entirely whitespace.","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"WilliamHaiweiGu"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private static String randString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"WilliamHaiweiGu"},"content":"        while (true) {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"WilliamHaiweiGu"},"content":"            final int n \u003d 1 + RAND.nextInt(50);","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"WilliamHaiweiGu"},"content":"            char[] s \u003d new char[n];","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"WilliamHaiweiGu"},"content":"            boolean allSpace \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"WilliamHaiweiGu"},"content":"            for (int i \u003d 0; i \u003c n; i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"WilliamHaiweiGu"},"content":"                final char c \u003d (char) (\u0027 \u0027 + RAND.nextInt(95));","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"WilliamHaiweiGu"},"content":"                s[i] \u003d c;","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"WilliamHaiweiGu"},"content":"                allSpace \u0026\u003d c \u003d\u003d \u0027 \u0027;","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"WilliamHaiweiGu"},"content":"            if (!allSpace) {","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"WilliamHaiweiGu"},"content":"                return new String(s);","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"WilliamHaiweiGu"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"WilliamHaiweiGu"},"content":"    private static MeggyTime randMeggyTime() {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"WilliamHaiweiGu"},"content":"        return MeggyTime.of(RAND.nextDouble() \u003c 0.5 ? randString()","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"WilliamHaiweiGu"},"content":"                : LocalDateTime.ofEpochSecond(RAND.nextInt(), 0, ZoneOffset.UTC).format(MeggyTime.ENCODE_FORMAT));","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void textUItest() throws IOException {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"WilliamHaiweiGu"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"WilliamHaiweiGu"},"content":"        new Meggy(new FileInputStream(\"text-ui-test/input.txt\"), out).run();","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"WilliamHaiweiGu"},"content":"        String actual \u003d out.toString().replaceAll(\"\\r\", \"\");","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"WilliamHaiweiGu"},"content":"        String expected \u003d new String(new FileInputStream(\"text-ui-test/EXPECTED.txt\").readAllBytes()).","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"WilliamHaiweiGu"},"content":"                replaceAll(\"\\r\", \"\");","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"WilliamHaiweiGu"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"WilliamHaiweiGu"},"content":"        System.out.println(actual);","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void todoTaskIntegrityTest() throws MeggyException {","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (int k \u003d 0; k \u003c N_TEST; k++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"WilliamHaiweiGu"},"content":"            TodoTask a \u003d new TodoTask(randString());","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"WilliamHaiweiGu"},"content":"            String data \u003d a.encode();","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"WilliamHaiweiGu"},"content":"            TodoTask b \u003d new TodoTask(data.substring(data.indexOf(\u0027 \u0027) + 1));","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"WilliamHaiweiGu"},"content":"            assertEquals(a, b);","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void ddlTaskIntegrityTest() throws MeggyException {","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (int k \u003d 0; k \u003c N_TEST; k++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"WilliamHaiweiGu"},"content":"            DdlTask a \u003d DdlTask.of(randString() + DdlTask.DUE_KEYWORD_FORMATTED + randMeggyTime());","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"WilliamHaiweiGu"},"content":"            String data \u003d a.encode();","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"WilliamHaiweiGu"},"content":"            DdlTask b \u003d DdlTask.of(data.substring(data.indexOf(\u0027 \u0027) + 1));","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"WilliamHaiweiGu"},"content":"            assertEquals(a, b);","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"WilliamHaiweiGu"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"WilliamHaiweiGu"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"WilliamHaiweiGu"},"content":"    public void eventTaskIntegrityTest() throws MeggyException {","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"WilliamHaiweiGu"},"content":"        for (int k \u003d 0; k \u003c N_TEST; k++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"WilliamHaiweiGu"},"content":"            EventTask a \u003d EventTask.of(randString() + EventTask.START_KEYWORD_FORMATTED + randMeggyTime() + EventTask.END_KEYWORD_FORMATTED + randMeggyTime());","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"WilliamHaiweiGu"},"content":"            String data \u003d a.encode();","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"WilliamHaiweiGu"},"content":"            EventTask b \u003d EventTask.of(data.substring(data.indexOf(\u0027 \u0027) + 1));","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"WilliamHaiweiGu"},"content":"            assertEquals(a, b);","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"WilliamHaiweiGu"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"WilliamHaiweiGu"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"WilliamHaiweiGu"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"WilliamHaiweiGu":89}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"WilliamHaiweiGu"},"content":"todo read book","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"WilliamHaiweiGu"},"content":"deadline return book","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"WilliamHaiweiGu"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"WilliamHaiweiGu"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"WilliamHaiweiGu"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"WilliamHaiweiGu"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"WilliamHaiweiGu"},"content":"event project meeting /from 2023/06/08 1400 /to 4pm","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"WilliamHaiweiGu"},"content":"todo join sports club","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"WilliamHaiweiGu"},"content":"todo borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"WilliamHaiweiGu"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"WilliamHaiweiGu"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"WilliamHaiweiGu"},"content":"event project meeting /from Mon 2pm /to 06082023 16:00","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"WilliamHaiweiGu"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"WilliamHaiweiGu"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"WilliamHaiweiGu"},"content":"mark 0","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"WilliamHaiweiGu"},"content":"unmark 100","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"WilliamHaiweiGu"},"content":"unmark a","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"delete -1","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"WilliamHaiweiGu"},"content":"delete 3","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"WilliamHaiweiGu"},"content":"delete 100","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"WilliamHaiweiGu"},"content":"delete x","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"WilliamHaiweiGu"},"content":"deadline return book /by 2/12/2019 1800","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"WilliamHaiweiGu"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"WilliamHaiweiGu"},"content":"find","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"WilliamHaiweiGu"},"content":"find book","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"WilliamHaiweiGu"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"WilliamHaiweiGu":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"WilliamHaiweiGu"},"content":"java -classpath ..\\bin Meggy.Meggy \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"WilliamHaiweiGu":1}}]
