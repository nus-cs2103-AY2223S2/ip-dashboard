[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yaladah":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"Yaladah"},"content":"checkstyle{","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"Yaladah"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Yaladah":21,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"    private final static String SAVED_PATH \u003d \"data/tasks.txt\";","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"    private final Parser parser;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"     * Constructs a Duke object for program to run.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"     * Initialises the ui, storage, parser and tasklist to be used for the program.","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"     * @param filePath Path in which the file is located relative to project root.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"        TaskList taskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"        ui.showWelcomeMessage();","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"            taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"            Ui.showLoadingErrorMessage();","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"        parser \u003d new Parser(storage, taskList);","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"     * Accepts user input and checks whether program terminated or continues running.","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"    public void run() {","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"        boolean isContinueRunning \u003d true;","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"Yaladah"},"content":"        while (isContinueRunning) {","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"Yaladah"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yaladah"},"content":"                String input \u003d ui.requestUserInput();","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Yaladah"},"content":"                isContinueRunning \u003d parser.readInput(input);","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"Yaladah"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"Yaladah"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Yaladah"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"Yaladah"},"content":"        new Duke(SAVED_PATH).run();","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Yaladah":51,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":" * DukeException class for Duke throw when unexpected behaviour occurs during runtime.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"     * Generates a DukeException that informs user about problems.","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"     * @param msg The error message to be printed to user.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"        super(msg);","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"  }","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yaladah":15}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import task.DeadlineTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"import task.EventTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"import task.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"import task.TodoTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":" * Parser class that handles inputs made by user.","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"public class Parser {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"     * Constructor for a parser.","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"     * @param storage Storage instance of Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"     * @param taskList TaskList containing the tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"    public Parser(Storage storage, TaskList taskList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"     * Returns a boolean, continues running the program if true, terminates it if false.","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"     * Takes in user input and carries out functionality of the command.","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"     * @param input Command input by user.","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"     * @return True for Duke to continue running.","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"     * @throws DukeException Thrown when unexpected behaviour occurs.","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"     * @throws IOException Thrown when file system encounters an error.","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"Yaladah"},"content":"    public boolean readInput(String input) throws DukeException, IOException {","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"Yaladah"},"content":"        String firstInput \u003d input.split(\" \")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"Yaladah"},"content":"        LocalDate currentTime \u003d LocalDate.now();","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"Yaladah"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"Yaladah"},"content":"            switch (firstInput) {","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"            case \"list\":","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"Yaladah"},"content":"                System.out.println(\"Here are the tasks you asked for!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"Yaladah"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"Yaladah"},"content":"                    int currItem \u003d i + 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(currItem + \": \" + taskList.get(i));","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"Yaladah"},"content":"                System.out.println(\"You now have \" + taskList.size() + \" items in your list.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"Yaladah"},"content":"                return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"Yaladah"},"content":"            case \"bye\":","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"Yaladah"},"content":"                System.out.println(\"It was a pleasure to help, goodbye!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"Yaladah"},"content":"                return false;","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"Yaladah"},"content":"            case \"mark\":","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"Yaladah"},"content":"                if (input.split(\" \").length \u003c 2) {","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Mark? Mark what?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"Yaladah"},"content":"                try {","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"Yaladah"},"content":"                    int taskIndex \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"Yaladah"},"content":"                    Task selectedTask \u003d taskList.get(taskIndex);","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(\"Done! I\u0027ve marked this task as done :D\");","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"Yaladah"},"content":"                    selectedTask.check();","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(selectedTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"Yaladah"},"content":"                    return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"Yaladah"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Oops, that task number does not exist\");","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"Yaladah"},"content":"            case \"unmark\":","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"Yaladah"},"content":"                if (input.split(\" \").length \u003c 2) {","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Unmark? Unmark what?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"Yaladah"},"content":"                try {","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"Yaladah"},"content":"                    int untaskIndex \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"Yaladah"},"content":"                    Task unselectedTask \u003d taskList.get(untaskIndex);","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(\"This task is apparently not done huh D:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"Yaladah"},"content":"                    unselectedTask.unCheck();","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(unselectedTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"Yaladah"},"content":"                    return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"Yaladah"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Oops, that task number does not exist\");","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"Yaladah"},"content":"            case \"todo\":","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"Yaladah"},"content":"                try {","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"Yaladah"},"content":"                    String todoTaskName \u003d input.substring(5);","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"Yaladah"},"content":"                    TodoTask todoTask \u003d new TodoTask(todoTaskName);","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"Yaladah"},"content":"                    addTask(todoTask, todoTaskName);","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"Yaladah"},"content":"                    return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"Yaladah"},"content":"                } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Oops, you can\u0027t enter an empty task!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"Yaladah"},"content":"            case \"deadline\":","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"Yaladah"},"content":"                String deadlineDetails \u003d input.substring(9);","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"Yaladah"},"content":"                if (deadlineDetails.split(\" /by \").length \u003c 2) {","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Wait a minute, \"","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"Yaladah"},"content":"                            + \"you\u0027re missing something! Could be the name or date...\");","lastModifiedDate":"2023-01-31"},{"lineNumber":110,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":111,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"Yaladah"},"content":"                String deadlineName \u003d deadlineDetails.split(\" /by \")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"Yaladah"},"content":"                String deadlineDateStr \u003d deadlineDetails.split(\" /by \")[1];","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"Yaladah"},"content":"                LocalDate deadlineDate \u003d LocalDate.parse(deadlineDateStr);","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"Yaladah"},"content":"                if (deadlineDate.isBefore(currentTime)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Wait! Time travelling is not in my kit!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":118,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"Yaladah"},"content":"                DeadlineTask deadlineTask \u003d new DeadlineTask(deadlineName, deadlineDate);","lastModifiedDate":"2023-01-31"},{"lineNumber":121,"author":{"gitId":"Yaladah"},"content":"                addTask(deadlineTask, deadlineName);","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"Yaladah"},"content":"                return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":123,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"Yaladah"},"content":"            case \"event\":","lastModifiedDate":"2023-01-31"},{"lineNumber":125,"author":{"gitId":"Yaladah"},"content":"                String eventDetails \u003d input.substring(6);","lastModifiedDate":"2023-01-31"},{"lineNumber":126,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"Yaladah"},"content":"                if (eventDetails.split(\" /from \").length \u003c 2","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"Yaladah"},"content":"                        || eventDetails.split(\" /to \").length \u003c 2) {","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Hold up, you might be missing something here buddy!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":131,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":132,"author":{"gitId":"Yaladah"},"content":"                String eventName \u003d eventDetails.split(\" /from \")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":133,"author":{"gitId":"Yaladah"},"content":"                String eventDate \u003d eventDetails.split(\" /from \")[1];","lastModifiedDate":"2023-01-31"},{"lineNumber":134,"author":{"gitId":"Yaladah"},"content":"                String eventStartStr \u003d eventDate.split(\" /to \")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":135,"author":{"gitId":"Yaladah"},"content":"                String eventEndStr \u003d eventDate.split(\" /to \")[1];","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"Yaladah"},"content":"                LocalDate eventStart \u003d LocalDate.parse(eventStartStr);","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"Yaladah"},"content":"                LocalDate eventEnd \u003d LocalDate.parse(eventEndStr);","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"Yaladah"},"content":"                if (eventStart.isBefore(currentTime) || eventEnd.isBefore(currentTime)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":140,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Wait! Time travelling is not in my kit!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":141,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":142,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":143,"author":{"gitId":"Yaladah"},"content":"                if (eventStart.isAfter(eventEnd)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":144,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Ohhh I wasn\u0027t aware time travels backwards for you :O\");","lastModifiedDate":"2023-01-31"},{"lineNumber":145,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":146,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":147,"author":{"gitId":"Yaladah"},"content":"                EventTask eventTask \u003d new EventTask(eventName, eventStart, eventEnd);","lastModifiedDate":"2023-01-31"},{"lineNumber":148,"author":{"gitId":"Yaladah"},"content":"                addTask(eventTask, eventName);","lastModifiedDate":"2023-01-31"},{"lineNumber":149,"author":{"gitId":"Yaladah"},"content":"                return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":150,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":151,"author":{"gitId":"Yaladah"},"content":"            case \"delete\":","lastModifiedDate":"2023-01-31"},{"lineNumber":152,"author":{"gitId":"Yaladah"},"content":"                if (input.split(\" \").length \u003c 2) {","lastModifiedDate":"2023-01-31"},{"lineNumber":153,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Delete? Delete what?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":154,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":155,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":156,"author":{"gitId":"Yaladah"},"content":"                try {","lastModifiedDate":"2023-01-31"},{"lineNumber":157,"author":{"gitId":"Yaladah"},"content":"                    int deleteIndex \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":158,"author":{"gitId":"Yaladah"},"content":"                    Task deleteTask \u003d taskList.get(deleteIndex);","lastModifiedDate":"2023-01-31"},{"lineNumber":159,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(\"Done! \" + deleteTask + \" has been deleted for good.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":160,"author":{"gitId":"Yaladah"},"content":"                    taskList.remove(deleteIndex);","lastModifiedDate":"2023-01-31"},{"lineNumber":161,"author":{"gitId":"Yaladah"},"content":"                    return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":162,"author":{"gitId":"Yaladah"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":163,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Oops, that task number does not exist\");","lastModifiedDate":"2023-01-31"},{"lineNumber":164,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":165,"author":{"gitId":"Yaladah"},"content":"            case \"save\":","lastModifiedDate":"2023-01-31"},{"lineNumber":166,"author":{"gitId":"Yaladah"},"content":"                storage.save(taskList);","lastModifiedDate":"2023-01-31"},{"lineNumber":167,"author":{"gitId":"Yaladah"},"content":"                return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":168,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":169,"author":{"gitId":"Yaladah"},"content":"            case \"find\":","lastModifiedDate":"2023-01-31"},{"lineNumber":170,"author":{"gitId":"Yaladah"},"content":"                String keyword \u003d input.substring(5);","lastModifiedDate":"2023-01-31"},{"lineNumber":171,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":172,"author":{"gitId":"Yaladah"},"content":"                if (keyword.length() \u003c\u003d 0) {","lastModifiedDate":"2023-01-31"},{"lineNumber":173,"author":{"gitId":"Yaladah"},"content":"                    throw new DukeException(\"Err... There\u0027s nothing to find here\");","lastModifiedDate":"2023-01-31"},{"lineNumber":174,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":175,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":176,"author":{"gitId":"Yaladah"},"content":"                ArrayList\u003cTask\u003e filteredList \u003d taskList.filterByKeyword(keyword);","lastModifiedDate":"2023-01-31"},{"lineNumber":177,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":178,"author":{"gitId":"Yaladah"},"content":"                for (int i \u003d 0; i \u003c filteredList.size(); i +\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":179,"author":{"gitId":"Yaladah"},"content":"                    int currItem \u003d i + 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":180,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(currItem + \": \" + filteredList.get(i));","lastModifiedDate":"2023-01-31"},{"lineNumber":181,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":182,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":183,"author":{"gitId":"Yaladah"},"content":"                return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":184,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":185,"author":{"gitId":"Yaladah"},"content":"            default:","lastModifiedDate":"2023-01-31"},{"lineNumber":186,"author":{"gitId":"Yaladah"},"content":"                throw new DukeException(\"Oops I do not recognise this command...\");","lastModifiedDate":"2023-01-31"},{"lineNumber":187,"author":{"gitId":"Yaladah"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":188,"author":{"gitId":"Yaladah"},"content":"        } catch (IOException io) {","lastModifiedDate":"2023-01-31"},{"lineNumber":189,"author":{"gitId":"Yaladah"},"content":"            throw new DukeException(\"Something is up with your files it seems\");","lastModifiedDate":"2023-01-31"},{"lineNumber":190,"author":{"gitId":"Yaladah"},"content":"        } catch (DateTimeParseException dl) {","lastModifiedDate":"2023-01-31"},{"lineNumber":191,"author":{"gitId":"Yaladah"},"content":"            throw new DukeException(\"Beep boop \"","lastModifiedDate":"2023-01-31"},{"lineNumber":192,"author":{"gitId":"Yaladah"},"content":"                    + \"this robot can only understand dates in the form yyyy-mm-dd\");","lastModifiedDate":"2023-01-31"},{"lineNumber":193,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":194,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":195,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":196,"author":{"gitId":"Yaladah"},"content":"    private void addTask(Task task, String name) {","lastModifiedDate":"2023-01-31"},{"lineNumber":197,"author":{"gitId":"Yaladah"},"content":"        taskList.add(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":198,"author":{"gitId":"Yaladah"},"content":"        System.out.println(\"Item added: \" + name);","lastModifiedDate":"2023-01-31"},{"lineNumber":199,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":200,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Yaladah":200}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import task.DeadlineTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"import task.EventTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"import task.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"import task.TodoTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"import java.io.File;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":" * Storage class handles the interaction between local hard drive and Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"public class Storage {","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"    File file;","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"    private final static String SAVED_PATH \u003d \"data/tasks.txt\";","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"     * Constructor for Storage instance.","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"     * @param filePath Path to locate file relative to project root.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"        file \u003d new File(filePath);","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"     * Method to write current TaskList onto file on hard drive.","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"     * @param taskList TaskList with tasks in Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"     * @throws IOException Thrown when file system encounters an error.","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"     * @throws DukeException Thrown when unexpected behaviour occurs with Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"    public void save(TaskList taskList) throws IOException, DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"Yaladah"},"content":"        if (!file.getParentFile().exists()) { //check if directory exists, else make one","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"Yaladah"},"content":"            if (!file.getParentFile().mkdirs()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"Yaladah"},"content":"                throw new DukeException(\"Directories can\u0027t be made? Or did something go wrong...\");","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Yaladah"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"Yaladah"},"content":"            if (!file.createNewFile()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"Yaladah"},"content":"                throw new DukeException(\"This file both doesn\u0027t exist and cannot be made D:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"Yaladah"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"Yaladah"},"content":"        FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"Yaladah"},"content":"        for (Task task : taskList.asList()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"Yaladah"},"content":"            fileWriter.write(task.toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"Yaladah"},"content":"            fileWriter.write(System.lineSeparator());","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"Yaladah"},"content":"        fileWriter.close();","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"Yaladah"},"content":"        Ui.showSavedDataMessage();","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"Yaladah"},"content":"     * Retrieves data from a previous session of Duke, if it exists.","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"Yaladah"},"content":"     * @return An array of Tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"Yaladah"},"content":"     * @throws DukeException Thrown when unexpected behaviour occurs with Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"Yaladah"},"content":"    public Task[] load() throws DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"Yaladah"},"content":"        File f \u003d new File(SAVED_PATH);","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"Yaladah"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"Yaladah"},"content":"            if (!f.exists()) { //file didn\u0027t exist yet","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"Yaladah"},"content":"                Ui.showNewUserMessage();","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"Yaladah"},"content":"                return new Task[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"Yaladah"},"content":"            } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"Yaladah"},"content":"                System.out.println(\"Welcome back!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"Yaladah"},"content":"                System.out.println(\"Here\u0027s the tasks you have:\");","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"Yaladah"},"content":"                Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"Yaladah"},"content":"                ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"Yaladah"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"Yaladah"},"content":"                    Task task;","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"Yaladah"},"content":"                    String currTask \u003d scanner.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"Yaladah"},"content":"                    String taskType \u003d currTask.split(\" \")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"Yaladah"},"content":"                    String taskCompletion \u003d currTask.substring(4,7);","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"Yaladah"},"content":"                    Boolean complete \u003d Objects.equals(taskCompletion, \"[X]\");","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"Yaladah"},"content":"                    String taskDetails;","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"Yaladah"},"content":"                    if (complete) {","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"Yaladah"},"content":"                        taskDetails \u003d currTask.split(\" \\\\[X] \")[1];","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"Yaladah"},"content":"                    } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"Yaladah"},"content":"                        taskDetails \u003d currTask.split(\" \\\\[ ] \")[1];","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"Yaladah"},"content":"                    }","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"Yaladah"},"content":"                    switch (taskType) {","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"Yaladah"},"content":"                    case \"[T]\":","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"Yaladah"},"content":"                        task \u003d new TodoTask(taskDetails, complete);","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"Yaladah"},"content":"                        break;","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"Yaladah"},"content":"                    case \"[D]\":","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"Yaladah"},"content":"                        String deadlineName \u003d taskDetails.split(\" \\\\(by: \")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"Yaladah"},"content":"                        String date \u003d taskDetails.split(\" \\\\(by: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"Yaladah"},"content":"                        LocalDate deadLine \u003d LocalDate.parse(date);","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"Yaladah"},"content":"                        task \u003d new DeadlineTask(deadlineName, deadLine, complete);","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"Yaladah"},"content":"                        break;","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"Yaladah"},"content":"                    case \"[E]\":","lastModifiedDate":"2023-01-31"},{"lineNumber":110,"author":{"gitId":"Yaladah"},"content":"                        String eventName \u003d taskDetails.split(\" \\\\(from:\")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":111,"author":{"gitId":"Yaladah"},"content":"                        String eventPeriod \u003d taskDetails.split(\"\\\\(from: \")[1];","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"Yaladah"},"content":"                        String startStr \u003d eventPeriod.split(\" to: \")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"Yaladah"},"content":"                        String endStr \u003d eventPeriod.split(\" to: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"Yaladah"},"content":"                        LocalDate start \u003d LocalDate.parse(startStr);","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"Yaladah"},"content":"                        LocalDate end \u003d LocalDate.parse(endStr);","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"Yaladah"},"content":"                        task \u003d new EventTask(eventName, start, end, complete);","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"Yaladah"},"content":"                        break;","lastModifiedDate":"2023-01-31"},{"lineNumber":118,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"Yaladah"},"content":"                    default:","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"Yaladah"},"content":"                        task \u003d new Task(taskDetails);","lastModifiedDate":"2023-01-31"},{"lineNumber":121,"author":{"gitId":"Yaladah"},"content":"                    }","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":123,"author":{"gitId":"Yaladah"},"content":"                    taskList.add(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":125,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":126,"author":{"gitId":"Yaladah"},"content":"                for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"Yaladah"},"content":"                    int currItem \u003d i + 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"Yaladah"},"content":"                    System.out.println(currItem + \": \" + taskList.get(i));","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"Yaladah"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":131,"author":{"gitId":"Yaladah"},"content":"                Ui.showWelcomePrompt();","lastModifiedDate":"2023-01-31"},{"lineNumber":132,"author":{"gitId":"Yaladah"},"content":"                return taskList.toArray(new Task[0]);","lastModifiedDate":"2023-01-31"},{"lineNumber":133,"author":{"gitId":"Yaladah"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":134,"author":{"gitId":"Yaladah"},"content":"        } catch (IOException io) {","lastModifiedDate":"2023-01-31"},{"lineNumber":135,"author":{"gitId":"Yaladah"},"content":"            throw new DukeException(\"Something went wrong while trying to load...\");","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Yaladah":138}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":" * Ui class to handle user interaction for Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"public class Ui {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"     * Constructor for Ui instance of Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"    public Ui() {","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"     * Returns user input as a String.","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"     * @return String input by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"    public String requestUserInput() {","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"     * Prints a loading error message to user.","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"    public static void showLoadingErrorMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"        System.out.println(\"Couldn\u0027t load the file for some reason\");","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"     * Prints a message to welcome a new user, if no save file is found.","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"    public static void showNewUserMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"        System.out.println(\"Oh boy a new user! What\u0027s up?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"Yaladah"},"content":"     * Prints a prompt for the user to input command.","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Yaladah"},"content":"    public static void showWelcomePrompt() {","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"Yaladah"},"content":"        System.out.println(\"How might I help you today?\");","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"Yaladah"},"content":"     * Prints the Duke logo and introduces Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"Yaladah"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"Yaladah"},"content":"        String projName \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"Yaladah"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"Yaladah"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"Yaladah"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"Yaladah"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"Yaladah"},"content":"        System.out.println(\"Yo! The name is\\n\" + projName);","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"Yaladah"},"content":"    public static void showSavedDataMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"Yaladah"},"content":"        System.out.println(\"Data was saved successfully!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Yaladah":63}},{"path":"src/main/java/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":" * Class for a Task with a deadline.","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"    private final LocalDate date;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"     * Constructor for a deadline Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"     * @param date Date which task should be done by.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"    public DeadlineTask(String name, LocalDate date) {","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"        super(name);","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"     * Constructor for a deadline Task when loaded in from hard drive.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"     * @param date Date which task should be done by.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"     * @param isDone True if task has been marked as done, false otherwise.","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"    public DeadlineTask(String name, LocalDate date, Boolean isDone) {","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"        return \"[D] \" + super.toString() + \" (by: \"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"                + this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Yaladah":40}},{"path":"src/main/java/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":" * Class for an event type Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"    private final LocalDate startTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"    private final LocalDate endTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"     * Contructor for an event type Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"     * @param startTime Date where task should start.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"     * @param endTime Sate where task should end.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"    public EventTask(String name, LocalDate startTime, LocalDate endTime) {","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"        super(name);","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"     * Contructor for an event type Task when loaded in from hard drive.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"     * @param startTime Date where task should start.","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"     * @param endTime Sate where task should end.","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"     * @param isDone True if task has been marked as done, false otherwise.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"    public EventTask(String name, LocalDate startTime, LocalDate endTime,Boolean isDone) {","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"Yaladah"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"Yaladah"},"content":"        return \"[E] \"","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"Yaladah"},"content":"                + super.toString() + \" (from: \"","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Yaladah"},"content":"                + this.startTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"))","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"Yaladah"},"content":"                + \" to: \" + this.endTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Yaladah":47}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":" * Class to represent a task created by Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"public class Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"    private String name;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"    private Boolean completed;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"     * Constructor for a Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"     * Constructor for a Task when loaded in from hard drive.","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"     * @param isDone True if Task has been marked as done, false otherwise.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"    public Task(String name, Boolean isDone) {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"        this.completed \u003d isDone;","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"     * To mark a Task as done.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"    public void check() {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"        this.completed \u003d true;","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"     * To unmark a done Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"Yaladah"},"content":"    public void unCheck() {","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"Yaladah"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"Yaladah"},"content":"    public String getName() {","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"Yaladah"},"content":"        return name;","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"Yaladah"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"Yaladah"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"Yaladah"},"content":"        if (this.completed) {","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"Yaladah"},"content":"            return \"[X] \" + this.name;","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"Yaladah"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"Yaladah"},"content":"            return \"[ ] \" + this.name;","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Yaladah":57}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":" * Class representing a list of Tasks for Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"public class TaskList {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"    ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"     * Constructor for TaskList when no Tasks are present.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"     * Constructor for TaskList when Tasks are present.","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"     * @param inputTasks Array of Tasks to be added.","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"    public TaskList(Task[] inputTasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"        this();","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"        tasks.addAll(Arrays.asList(inputTasks));","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"     * Adds a Task to existing TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Yaladah"},"content":"     * @param task Task to be added to current list.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Yaladah"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"Yaladah"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"Yaladah"},"content":"     * Removes task from list at given index.","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"Yaladah"},"content":"     * @param index Index where task is to be removed.","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"Yaladah"},"content":"    public void remove(int index) {","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"Yaladah"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"Yaladah"},"content":"     * Returns a task at a given index.","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"Yaladah"},"content":"     * @param index Index where task is to be returned.","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"Yaladah"},"content":"     * @return The task requested by Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"Yaladah"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"Yaladah"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"Yaladah"},"content":"     * Returns the number of items in the existing TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"Yaladah"},"content":"     * @return Number of tasks in the TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"Yaladah"},"content":"    public int size() {","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"Yaladah"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"Yaladah"},"content":"     * Returns an array of tasks stored in current TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"Yaladah"},"content":"     * @return An array of Tasks from current TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"Yaladah"},"content":"    public Task[] asList() {","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"Yaladah"},"content":"        return tasks.toArray(new Task[0]);","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"Yaladah"},"content":"    public ArrayList\u003cTask\u003e filterByKeyword(String keyword) {","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"Yaladah"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"Yaladah"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i +\u003d 1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"Yaladah"},"content":"            Task currentTask \u003d tasks.get(i);","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"Yaladah"},"content":"            String taskName \u003d currentTask.getName();","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"Yaladah"},"content":"            if (taskName.contains(keyword)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"Yaladah"},"content":"                filteredTasks.add(currentTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"Yaladah"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"Yaladah"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"Yaladah"},"content":"        return filteredTasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Yaladah":88}},{"path":"src/main/java/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":" * Class for a Todo Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"     * Constructor for todo Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"    public TodoTask(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"        super(name);","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"  }","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"     * Constructor for todo Task when loaded in from hard drive.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"     * @param name Title/name of task.","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"     * @param isDone True if task has been marked as done, false otherwise.","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"    public TodoTask(String name, Boolean isDone) {","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"  }","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Yaladah":30}},{"path":"src/test/java/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"public class DeadlineTaskTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"    public void firstTest() {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"        DeadlineTask tempTask \u003d new DeadlineTask(\"Do work\", LocalDate.parse(\"2024-01-01\"), true);","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"        assertEquals(\"[D] [X] Do work (by: 01 Jan 2024)\", tempTask.toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"    public void secondTest() {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"        DeadlineTask tempTask \u003d new DeadlineTask(\"Go home\", LocalDate.parse(\"2024-03-03\"), false);","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"        assertEquals(\"[D] [ ] Go home (by: 03 Mar 2024)\", tempTask.toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Yaladah":21}},{"path":"src/test/java/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"package task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"    public void getTest() {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"        Task task1 \u003d new TodoTask(\"Do work\");","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"        Task[] taskArray \u003d {task1};","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"        TaskList inputTaskList \u003d new TaskList(taskArray);","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"        assertEquals(task1, inputTaskList.get(0));","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"    public void sizeTest() {","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"        Task task1 \u003d new TodoTask(\"Do work\");","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"        Task task2 \u003d new DeadlineTask(\"Return book\", LocalDate.parse(\"2024-01-01\"), true);","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"        Task[] taskArray \u003d {task1, task2};","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"        TaskList inputTaskList \u003d new TaskList(taskArray);","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"        assertEquals(2, inputTaskList.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Yaladah":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yaladah"},"content":"todo read book","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"Yaladah"},"content":"todo drink water","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"Yaladah"},"content":"deadline finish project /by 2023-06-01","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yaladah"},"content":"event Jerome Birthday /from 2024-01-17 /to 2024-01-17","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yaladah"},"content":"list","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yaladah"},"content":"mark 3","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"Yaladah"},"content":"mark 4","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"Yaladah"},"content":"list","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"Yaladah"},"content":"unmark 3","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"Yaladah"},"content":"list","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"Yaladah"},"content":"wronginput","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yaladah"},"content":"mark","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yaladah"},"content":"mark 6","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yaladah"},"content":"unmark","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yaladah"},"content":"unmark 6","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"todo","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yaladah"},"content":"deadline swim /by","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"deadline /by Monday","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yaladah"},"content":"event bake /from 1pm /to","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yaladah"},"content":"event /from 2pm /to 3pm","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yaladah"},"content":"delete","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yaladah"},"content":"delete 2","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yaladah"},"content":"list","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yaladah"},"content":"delete 6","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yaladah"},"content":"deadline write book /by monday","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yaladah"},"content":"deadline write book /by 1999-01-01","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Yaladah"},"content":"event travel to Japan /from 1999-01-01 /to 2030-01-01","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yaladah"},"content":"event travel to Japan /from 2031-01-01 /to 2030-01-01","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yaladah"},"content":"bye","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yaladah":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Yaladah"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yaladah":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Yaladah"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/task/*.java","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yaladah":1,"-":37}}]
