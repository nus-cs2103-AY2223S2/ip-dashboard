[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"# Mr. Bear","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"\u003e ‚ÄúYour mind is for having ideas, not holding them.‚Äù  ‚Äì David Allen ([source](https://dansilvestre.com/productivity-quotes))","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"Mr. Bear is a **convenient and flexible** software that helps you to manage and track all your tasks. It\u0027s,","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"+ text-based","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"+ easy to learn","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"+ ~~FAST~~ *SUPER FAST* to use","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"**And it is ***FREE!!!***","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"All you need to do is,","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"1. download it from [here](https://github.com/Yufannnn/ip/releases). ","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"2. double-click it. ","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"3. add your tasks. ","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"4. let it manage your tasks for you üòâ","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"Features:","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"- [x] Manage task","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"- [X] Reminders","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"- [X] User Interface","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"- [ ] Undo Feature (Partially functional and comming soon...)","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Yufannnn":18,"-":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"plugins {","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"group \u0027org.example\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"version \u00272.2\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"application{","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    mainClassName \u003d \"duke.ui.Launcher\"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    mainClass.set(\"duke.ui.Launcher\")","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"repositories {","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    mavenCentral()","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"test {","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"dependencies {","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.9.2\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.9.2\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"shadowJar {","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    archiveBaseName \u003d \"Mr.Bear\"","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"run{","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    standardOutput \u003d System.out","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"checkstyle {","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":57}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"[D] | [ ] |  party | 1919-08-10","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"[D] | [X] |  have fun | 1919-08-10","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"[D] | [ ] |  examination | 1900-10-20","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"[T] | [X] | read book","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"[T] | [ ] | group meeting","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"[T] | [ ] | baseball","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":6}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"@rem limitations under the License.","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2023-01-14"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2023-01-14"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2023-01-14"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2023-01-14"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2023-01-14"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2023-01-14"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2023-01-14"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2023-01-14"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"@rem Find java.exe","lastModifiedDate":"2023-01-14"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2023-01-14"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2023-01-14"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2023-01-14"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2023-01-14"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-14"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-14"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"goto fail","lastModifiedDate":"2023-01-14"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":":findJavaFromJavaHome","lastModifiedDate":"2023-01-14"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2023-01-14"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2023-01-14"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2023-01-14"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2023-01-14"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-14"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-14"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"goto fail","lastModifiedDate":"2023-01-14"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":":execute","lastModifiedDate":"2023-01-14"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"@rem Setup the command line","lastModifiedDate":"2023-01-14"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2023-01-14"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"@rem Execute Gradle","lastModifiedDate":"2023-01-14"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2023-01-14"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":":end","lastModifiedDate":"2023-01-14"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-14"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2023-01-14"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":":fail","lastModifiedDate":"2023-01-14"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2023-01-14"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2023-01-14"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2023-01-14"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"exit /b 1","lastModifiedDate":"2023-01-14"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":":mainEnd","lastModifiedDate":"2023-01-14"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2023-01-14"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":":omega","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":89}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" * The main Duke class to run","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2023-01-11"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private TaskList list;","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    private final Ui ui;","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    private final CommandHistory commandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * The constructor that takes in a String filePath that specifies the path for the storage file.","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param filePath Specifies the path for the storage file","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        this.list \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        this.commandHistory \u003d new CommandHistory();","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"            this.list \u003d this.storage.load();","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"            this.ui.displayWithBar(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"            this.list \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        } catch (StorageFileException e) {","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            this.ui.displayWithBar(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * Gets the response from Duke","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * @param input User input","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * @return Response from Duke","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-01-11"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"            this.ui.reset();","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"            command.execute(this.list, this.ui, this.storage, this.commandHistory);","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"            return this.ui.getResponse();","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-13"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"            this.ui.appendResponse(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            return this.ui.getResponse();","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":49,"-":12}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" * A more specific instruction class that encapsulates the action of adding a task","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * into the given TaskList.","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final DukeTask task;","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * The constructor of AddTaskCommand that takes in the task to be added.","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param task The task to be added","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    public AddTaskCommand(DukeTask task) {","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Adds the given task to the TaskList and display relevant information with the customized format.","lastModifiedDate":"2023-01-13"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws StorageFileException {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        commandHistory.saveState(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        tasks.addTask(this.task);","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        final String ADDED_TASK_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        String message \u003d String.format(ADDED_TASK_MESSAGE, this.task, tasks.getNoOfTasks());","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * Compares this object to the specified object.","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * @param obj the object to compare with","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the objects are the same; false otherwise.","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        if (!(obj instanceof AddTaskCommand)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        AddTaskCommand ddlObj \u003d (AddTaskCommand) obj;","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        return this.task.equals(ddlObj.task);","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the AddTaskCommand in the format \"Add Task: task\".","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the AddTaskCommand","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        return \"Add Task: \" + this.task;","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":64,"-":9}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-01-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * An abstract instruction class encapsulating a user input instruction in Duke, which can be extended","lastModifiedDate":"2023-01-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * by more specific input instructions like addToDoInstruction, ExitInstructions, etc.","lastModifiedDate":"2023-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * Indicates whether the Command is the Exit Command.","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @return whether the command is the exit command.","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        return false;","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * Execute the respective instructions.","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws Exception when the user inputs invalid instruction or","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * when encountering issues reading or writing to the storage file.","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":25,"-":9}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A \"delete\" instruction that remove a particular task with the given index in the TaskList. `","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private final static String TASK_LIST_IS_EMPTY_ERROR \u003d \"OOPS!!! Your task list is currently empty\\nPlease add in more tasks\";","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private final static String INVALID_INDEX_ERROR \u003d \"OOPS!!! The input index is not within the range of [1, %d]\\n\" +","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"            \"Please input a valid index\";","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    private final static String TASK_REMOVED_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n %s \\nNow you have %d tasks in the list.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DeleteCommand that takes in the index of the task to be deleted.","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex the index of the task to be deleted","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-13"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given list is empty.","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given list is empty","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    public boolean isEmpty(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        return list.getNoOfTasks() \u003d\u003d 0;","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list","lastModifiedDate":"2023-01-13"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given index is valid.","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        return this.taskIndex \u003e\u003d 0 \u0026\u0026 this.taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * Remove a particular task with the given index in the TaskList and display","lastModifiedDate":"2023-01-13"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * the relevant information of the task and the remaining TaskList.","lastModifiedDate":"2023-01-13"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws Exception when the user inputs invalid instruction","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        commandHistory.saveState(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        if (isEmpty(tasks)) {","lastModifiedDate":"2023-01-14"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(TASK_LIST_IS_EMPTY_ERROR);","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-14"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(String.format(INVALID_INDEX_ERROR, tasks.getNoOfTasks()));","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-13"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            DukeTask deletedTask \u003d tasks.deleteTask(this.taskIndex);","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d String.format(TASK_REMOVED_MESSAGE, deletedTask.toString(), tasks.getNoOfTasks());","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":75}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":" * An ExitCommand class that encapsulates the event of terminating the Duke program.","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final static String GOODBYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * Displays the goodbye message and terminate the program.","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(GOODBYE_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * Indicates that this Command is the exit Command.","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * @return always return true","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-14"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        return true;","lastModifiedDate":"2023-01-14"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":35}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * A FindCommand class that take in a description and find all tasks that match the given","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" * description.","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final String[] descriptions;","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final static String MATCHING_TASKS_MESSAGE \u003d \"Here are the tasks matching \\\"%s\\\" :\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final static String NO_MATCHING_TASKS_MESSAGE \u003d \"No tasks matching \\\"%s\\\" were found.\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * The constructor of FinaCommand that takes in the description of the tasks to be found.","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param descriptions The description of the Task to be found.","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    public FindCommand(String... descriptions) {","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.descriptions \u003d descriptions;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Displays all the matching tasks with their respective types and status.","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        for (String description : this.descriptions) {","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"            TaskList matchedTaskList \u003d getMatchedTasks(tasks, description);","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"            message.append(getMatchedTasksMessage(matchedTaskList, description));","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(message.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * Method that takes in a list of tasks and a description and returns a list of tasks that match the given description.","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The list of tasks to be searched","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     * @param description The description of the task to be searched","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * @return A list of tasks that match the given description","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    private TaskList getMatchedTasks(TaskList tasks, String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        TaskList matchedTaskList \u003d new TaskList();","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        for (DukeTask task : tasks.getTasks()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"            if (task.matches(description)) {","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"                matchedTaskList.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        return matchedTaskList;","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     * Gets the message for matched tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     * @param matchedTaskList The list of matched tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * @param description The description used to find the tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     * @return The message for matched tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    private String getMatchedTasksMessage(TaskList matchedTaskList, String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        if (!matchedTaskList.getTasks().isEmpty()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            return String.format(MATCHING_TASKS_MESSAGE, description) + matchedTaskList + \"\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"            return String.format(NO_MATCHING_TASKS_MESSAGE, description);","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":74}},{"path":"src/main/java/duke/command/FindFreeTimeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" * The FindFreeTimeCommand class that finds the nearest date with no tasks","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class FindFreeTimeCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private final static String noFreeTimeMessage \u003d \"No free time found in the next month.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private final static String nearestFreeTimeMessage \u003d \"The nearest free time is on %s.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * Execute the find free time command on the tasklist","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks tasklist","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     * @param ui user interface","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param storage storage","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     * @param commandHistory command history","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory)","lastModifiedDate":"2023-01-25"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"            throws InvalidInputException {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        LocalDate currentDate \u003d LocalDate.now();","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        LocalDate endDate \u003d LocalDate.now().plusMonths(1);","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        LocalDate nearestFreeDate \u003d endDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        while (currentDate.isBefore(endDate) || currentDate.isEqual(endDate)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"            if (isDayFree(currentDate, tasks)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"                nearestFreeDate \u003d currentDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"            currentDate \u003d currentDate.plusDays(1);","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        if (nearestFreeDate.isAfter(endDate) || nearestFreeDate.isEqual(endDate)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(noFreeTimeMessage);","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(String.format(nearestFreeTimeMessage, nearestFreeDate));","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given date is free of tasks","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * @param date the date to check","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks the tasklist to check against","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the date is free of tasks, false otherwise","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    private boolean isDayFree(LocalDate date, TaskList tasks) {","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c tasks.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"            DukeTask task \u003d tasks.getTask(i);","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"            if (task instanceof DeadlineTask) {","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"                if (isDeadlineTaskScheduledOnDate(date, (DeadlineTask) task)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"                    return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            } else if (task instanceof EventTask) {","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"                if (isEventTaskScheduledOnDate(date, (EventTask) task)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"                    return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        return true;","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given deadline task is scheduled on the given date.","lastModifiedDate":"2023-01-25"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"     * @param date the date to check","lastModifiedDate":"2023-01-25"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"     * @param task the deadline task to check against","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the task is scheduled on the date, false otherwise","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    private boolean isDeadlineTaskScheduledOnDate(LocalDate date, DeadlineTask task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        return task.getEndDate().equals(date);","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given event task is scheduled on the given date.","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     * @param date the date to check","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"     * @param task the event task to check against","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the task is scheduled on the date, false otherwise","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"    private boolean isEventTaskScheduledOnDate(LocalDate date, EventTask task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"        return (date.isAfter(task.getStartDate()) || date.isEqual(task.getStartDate()))","lastModifiedDate":"2023-01-25"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 (date.isBefore(task.getEndDate()) || date.isEqual(task.getEndDate()));","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Yufannnn":95}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private final static String HEADER \u003d \"Here are the available commands and their respective function:\";","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    private final static String PROMPT \u003d \"All the command keywords are case insensitive!\";","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private enum CommandType {","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        BYE(\"bye\", \"Exit the program\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        DEADLINE(\"deadline [description] /by [yyyy-mm-dd]\", \"Add a deadline event with its \" +","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"                \"deadline specified\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"        DELETE(\"delete [taskIndex]\", \"Delete the task specified by the given index\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"        EVENT(\"event [description] /by [yyyy-mm-dd] /from [yyyy-mm-dd]\", \"Add a deadline event \" +","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"                \"with its starting and ending date specified\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        FIND(\"find [keyword]\", \"List all the events that matches the input keyword. \" +","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"                \"(case insensitive)\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        Free(\"free\",\"Find the next free date in the next month\"),","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        HELP(\"help\", \"Show help menu\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        LIST(\"list\", \"Display all tasks in the current Task List\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        MARK(\"mark [taskIndex]\", \"Mark the task specified by the given index as done\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        MASS_DELETE(\"massDelete\", \"Delete all the tasks that have been marked as done\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        VIEW(\"view [yyyy-mm-dd]\", \"List all the Deadline tasks and Event tasks that takes \" +","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"                \"place on the given day\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        UNMARK(\"unmark [taskIndex]\", \"Mark the task specified by the given index as undone\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        UPDATE(\"update [taskIndex] [description]\", \"Update the description of the task specified \" +","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"                \"by the given index to be the new description\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        TODO(\"todo [description]\", \"Add a todo event\");","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        private final String command;","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        private final String description;","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        CommandType(String command, String description) {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"            this.command \u003d command;","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            this.description \u003d description;","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        /**","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"         * Gets the command string.","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"         *","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"         * @return the command string","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"         */","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        public String getCommand() {","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"            return command;","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        /**","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"         * Gets the command description.","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"         *","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"         * @return the command description","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"         */","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        public String getDescription() {","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"            return description;","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     * Displays the available commands and their respective function.","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        message.append(HEADER).append(\"\\n\\n\");","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        for (CommandType commandType : CommandType.values()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            message.append(\"- \").append(commandType.getCommand()).append(\" : \")","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"                    .append(commandType.getDescription()).append(\"\\n\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        message.append(PROMPT);","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(message.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Yufannnn":82}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * A ListCommand class that encapsulates the action of displaying all the tasks on the TaskList.","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final static String NO_TASKS_MESSAGE \u003d \"There are no tasks in your list.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final static String TASK_LIST_MESSAGE \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * Displays all the tasks with their respective types and status.","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks   The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param ui      The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) {","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder listContent \u003d new StringBuilder(TASK_LIST_MESSAGE);","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        if (tasks.getNoOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(NO_TASKS_MESSAGE);","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"            return;","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-14"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        for (DukeTask task : tasks.getTasks()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            listContent.append(index++).append(\".\").append(task).append(\"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(listContent.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":36}},{"path":"src/main/java/duke/command/MarkAsDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A MarkAsDoneCommand class that encapsulates the actions of changing the status","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" * of a Task to be done.","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class MarkAsDoneCommand extends Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    private final static String TASK_LIST_EMPTY_MESSAGE \u003d \"OOPS!!! Your task list is currently empty\";","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    private final static String MARKED_AS_DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n \";","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    private final static String ADD_MORE_TASKS_MESSAGE \u003d \"\\nPlease add in more tasks\";","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    private final static String INPUT_VALID_INDEX_MESSAGE \u003d \"\\nPlease input a valid index\";","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of MarkAsDoneCommand that takes in the index of the task to marked.","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be marked","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    public MarkAsDoneCommand(int taskIndex) {","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given list is empty.","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given list is empty","lastModifiedDate":"2023-01-13"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean isEmpty(TaskList list) {","lastModifiedDate":"2023-01-11"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        return list.getNoOfTasks() \u003d\u003d 0;","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list.","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given index is valid","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     * Marks the list with the given index as done.","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception if the list is empty","lastModifiedDate":"2023-01-13"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     *     or the given index is our of range","lastModifiedDate":"2023-01-13"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        final String invalidIndexMessage \u003d \"OOPS!!! The input index is not within the range of [1, \"","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"                + tasks.getNoOfTasks() + \"]\";","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        commandHistory.saveState(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        if (isEmpty(tasks)) {","lastModifiedDate":"2023-01-14"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(TASK_LIST_EMPTY_MESSAGE + ADD_MORE_TASKS_MESSAGE);","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(invalidIndexMessage+ INPUT_VALID_INDEX_MESSAGE);","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2023-01-11"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            DukeTask currentTask \u003d tasks.getTask(this.taskIndex);","lastModifiedDate":"2023-01-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            currentTask.markAsDone();","lastModifiedDate":"2023-01-11"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d MARKED_AS_DONE_MESSAGE + currentTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-11"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":65,"-":17}},{"path":"src/main/java/duke/command/MassDeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"public class MassDeleteCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private final static String DELETE_MESSAGE \u003d \"I have deleted all the tasks that have been marked as done.\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    private final static String REMAINING_TASKS_MESSAGE \u003d \"Here are the remaining tasks in your list:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"     * Executes the command to delete all tasks that have been marked as done.","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception if there is an error in the execution of the command","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        commandHistory.saveState(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        deleteDoneTasks(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        String responseMessage \u003d createResponseMessage(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(responseMessage);","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * Deletes all tasks that have been marked as done.","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    private void deleteDoneTasks(TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c tasks.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"            if (tasks.getTask(i).getStatus()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"                tasks.deleteTask(i);","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * Creates a response message for the MassDeleteCommand execution.","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @return The response message for the MassDeleteCommand execution","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    private String createResponseMessage(TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder responseMessage \u003d new StringBuilder(DELETE_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        responseMessage.append(REMAINING_TASKS_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c tasks.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"            responseMessage.append(i + 1).append(\".\").append(tasks.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        return responseMessage.toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Yufannnn":55}},{"path":"src/main/java/duke/command/ReminderCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"public class ReminderCommand extends Command{","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private static final String REMINDER_MESSAGE \u003d \"Here are the upcoming deadlines:\\n\";","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     * Displays all the upcoming deadlines.","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) {","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        TaskList deadlineList \u003d tasks.extractDeadlines();","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        String responseMessage \u003d createResponseMessage(deadlineList);","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(responseMessage);","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * Create the response message for the ReminderCommand.","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * @param deadlineList The TaskList that contains all the upcoming deadlines","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @return The response message","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    private String createResponseMessage(TaskList deadlineList) {","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder responseMessage \u003d new StringBuilder(REMINDER_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c deadlineList.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            responseMessage.append(i + 1).append(\".\").append(deadlineList.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        return responseMessage.toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Yufannnn":39}},{"path":"src/main/java/duke/command/UndoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" * The UndoCommand class that undo the previous command on the tasklist","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private static final String NO_COMMAND_ERROR_MESSAGE \u003d \"No previous commands to undo\";","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private static final String UNDO_SUCCESS_MESSAGE \u003d \"Undo Successful!\";","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * Execute the undo command on the tasklist","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks tasklist","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param ui user interface","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param storage storage","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param commandHistory command history","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory)","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            throws InvalidInputException, StorageFileException {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        if (commandHistory.isEmpty()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(NO_COMMAND_ERROR_MESSAGE);","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        TaskList previousState \u003d commandHistory.pop();","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        tasks.setTasks(previousState.getTasks());","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(UNDO_SUCCESS_MESSAGE);","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":35}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A UnmarkCommand class that encapsulates the actions of changing the status","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" * of a Task to be not done.","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private static final String TASK_LIST_EMPTY_MESSAGE \u003d \"OOPS!!! Your task list is currently empty\";","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    private static final String INVALID_INDEX_MESSAGE \u003d \"OOPS!!! The input index is not within the range of [1, \";","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    private static final String UNMARKED_TASK_MESSAGE \u003d \"OK, I\u0027ve marked this task as not done yet:\\n \";","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of UnmarkCommand that takes in the index of the task to unmarked.","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be marked","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    public UnmarkCommand(int taskIndex) {","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given list is empty.","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given list is empty","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean isEmpty(TaskList list) {","lastModifiedDate":"2023-01-11"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        return list.getNoOfTasks() \u003d\u003d 0;","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list.","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * Marks the list with the given index as not done.","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception if the list is empty or the given index is our of range","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        commandHistory.saveState(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        if (isEmpty(tasks)) {","lastModifiedDate":"2023-01-14"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d TASK_LIST_EMPTY_MESSAGE + \"\\nPlease add in more tasks\";","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d INVALID_INDEX_MESSAGE + tasks.getNoOfTasks() + \"]\";","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            errorMessage +\u003d \"\\nPlease input a valid index\";","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2023-01-11"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"            DukeTask currentTask \u003d tasks.getTask(this.taskIndex);","lastModifiedDate":"2023-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            currentTask.unmark();","lastModifiedDate":"2023-01-11"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d UNMARKED_TASK_MESSAGE + currentTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-11"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":61,"-":17}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"public class UpdateCommand extends Command{","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final String information;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private static final String EMPTY_TASK_LIST_ERROR \u003d \"OOPS!!! Your task list is currently empty\";","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private static final String INVALID_INDEX_ERROR \u003d \"OOPS!!! The input index is not within the range of [1, %d]\";","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private static final String TASK_UPDATED_MESSAGE \u003d \"Nice! I\u0027ve updated the description of this task:\\n \";","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of UpdateCommand that takes in the index of the task to marked.","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be marked","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param information The new information of the task","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public UpdateCommand(int taskIndex, String information) {","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        this.information \u003d information;","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given list is empty.","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given list is empty","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    public boolean isEmpty(TaskList list) {","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        return list.getNoOfTasks() \u003d\u003d 0;","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list.","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given index is valid","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * Execute the update command on the tasklist","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * @param ui user interface","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * @param storage storage","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) {","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        commandHistory.saveState(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            if (isEmpty(tasks)) {","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(EMPTY_TASK_LIST_ERROR + \"\\nPlease add in more tasks\");","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"            if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(String.format(INVALID_INDEX_ERROR + \"\\nPlease input a valid index\",","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"                        tasks.getNoOfTasks()));","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"            updateTaskInformation(tasks, ui);","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"            saveTaskList(tasks, storage);","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        } catch (InvalidInputException | StorageFileException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"     * Update the task information","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks tasklist","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"     * @param ui user interface","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"    private void updateTaskInformation(TaskList tasks, Ui ui) {","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        DukeTask currentTask \u003d tasks.getTask(this.taskIndex);","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        currentTask.updateInformation(this.information);","lastModifiedDate":"2023-01-23"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"        String message \u003d TASK_UPDATED_MESSAGE + currentTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(message);","lastModifiedDate":"2023-01-23"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    * Save the task list to storage","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"    * @param tasks tasklist","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"    * @param storage storage","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"    */","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"    private void saveTaskList(TaskList tasks, Storage storage) throws StorageFileException {","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Yufannnn":92}},{"path":"src/main/java/duke/command/ViewScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.CommandHistory;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A ViewScheduleCommand class that takes in a date and finds all tasks that take place on that date.","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"public class ViewScheduleCommand extends Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private static final String ERROR_MESSAGE \u003d \"OOPS!!! No tasks found on the specified date\";","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final LocalDate date;","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * The constructor of ViewScheduleCommand that takes in the date of the tasks to be found.","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date of the tasks to be found.","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    public ViewScheduleCommand(LocalDate date) {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Displays all the tasks that take place on the specified date.","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the tasks to be searched","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The Ui object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException when no tasks are found on the specified date","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage, CommandHistory commandHistory) throws InvalidInputException {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        TaskList matchedTaskList \u003d new TaskList();","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c tasks.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            if (tasks.getTask(i).matchesDate(this.date)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"                matchedTaskList.addTask(tasks.getTask(i));","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        if (matchedTaskList.getNoOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ERROR_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d \"Here are the tasks on the specified date:\\n\" + matchedTaskList;","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":50}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.exception;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-01-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * An abstract Exception class encapsulating an exception in Duke, which can be extended","lastModifiedDate":"2023-01-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * by more specific exceptions like invalidInputException","lastModifiedDate":"2023-01-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeException with the error message to be printed.","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     * @param errorMessage  The error message to be printed","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":7,"-":10}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.exception;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * A custom exception that encapsulates the message when user input invalid instruction.","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"public class InvalidInputException extends DukeException {","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeException with the error message to be printed.","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     * @param errorMessage  The error message to be printed","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public InvalidInputException(String errorMessage) {","lastModifiedDate":"2023-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":10,"-":6}},{"path":"src/main/java/duke/exception/StorageFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.exception;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * An exception class that encapsulates the exceptions arisen from File operation.","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"public class StorageFileException extends DukeException {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeException with the error message to be printed.","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"     * @param errorMessage The error message to be printed","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    public StorageFileException(String errorMessage) {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":15}},{"path":"src/main/java/duke/parser/Decipherer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.command.*;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" * The Decipherer class is responsible for decoding the input string and creating the corresponding command objects.","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":" * It contains methods for decoding different types of commands, including add, update, mark as done, unmark,","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":" * delete, find and search. Each method takes in a string as input and returns a command object or throws an","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":" * InvalidInputException if the input is invalid.","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":" * /","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"public class Decipherer {","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    private static final Pattern emptyStringChecker \u003d Pattern.compile(\"\\\\S.*+\");","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    private static final String INVALID_DESCRIPTION_ERROR \u003d \"OOPS!!! The description cannot be empty.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    private static final String INVALID_TASK_INDEX_ERROR \u003d \"OOPS!!! The input task index is not a number,\\n\"","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"            + \"Please input a valid task index\";","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    private static final String INVALID_DATE_ERROR \u003d \"OOPS!!! The input date format is invalid\\nPlease input \" +","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"            \"the date in the format of yyyy-mm-dd\";","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    private static final String INVALID_DEADLINE_FORMAT_ERROR \u003d \"OOPS!!! Please input the deadline in the \" +","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"            \"correct format.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    private static final String EMPTY_DEADLINE_ERROR \u003d \"OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    private static final String INVALID_DATE_FORMAT_ERROR \u003d \"OOPS!!! The input date format is invalid\\n\"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            + \"Please input the date in the format of yyyy-mm-dd\";","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    private static String[] splitString(String information) {","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        return information.split(\" \", 2);","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    private static int getIndex(String index) {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"            return Integer.parseInt(index) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"            return -1;","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for an update command.","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index description\".","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * @return an UpdateCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number or the description is empty","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    public static UpdateCommand updateDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        String[] parts \u003d splitString(information);","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        int index \u003d getIndex(parts[0]);","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        if (parts[1].isEmpty()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        return new UpdateCommand(index, parts[1]);","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a mark as done command.","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index\".","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"     * @return an MarkAsDoneCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    public static MarkAsDoneCommand markDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"        // Use regular expression to check if the input is a number","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        Matcher numberChecker \u003d Pattern.compile(\"\\\\d+?\").matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"        if (numberChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"            // convert the input to an integer and decrement by 1","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"            return new MarkAsDoneCommand(Integer.parseInt(information) - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"            // if the input is not a number, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for an unmark command.","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index\".","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"     * @return an UnmarkCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"    public static UnmarkCommand unmarkDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"        // Use regular expression to check if the input is a number","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"        Matcher numberChecker \u003d Pattern.compile(\"\\\\d+?\").matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"        if (numberChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"            // convert the input to an integer and decrement by 1","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"            return new UnmarkCommand(Integer.parseInt(information) - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"            // if the input is not a number, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a delete command.","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index\".","lastModifiedDate":"2023-01-24"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"     * @return a DeleteCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"    public static DeleteCommand deleteDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"        // Use regular expression to check if the input is a number","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"        Matcher numberChecker \u003d Pattern.compile(\"\\\\d+?\").matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"        if (numberChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"            // convert the input to an integer and decrement by 1","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"            return new DeleteCommand(Integer.parseInt(information) - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"            // if the input is not a number, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a todo task.","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"description\".","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"     * @return an AddTaskCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"    public static AddTaskCommand todoDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"            // create a new TodoTask and return an AddTaskCommand with it","lastModifiedDate":"2023-01-24"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"            return new AddTaskCommand(new TodoTask(information));","lastModifiedDate":"2023-01-17"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a deadline task.","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"description /by date\"","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"     * @return an AddTaskCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty,","lastModifiedDate":"2023-01-24"},{"lineNumber":151,"author":{"gitId":"Yufannnn"},"content":"     * the input date format is invalid, or the input format is incorrect","lastModifiedDate":"2023-01-24"},{"lineNumber":152,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":153,"author":{"gitId":"Yufannnn"},"content":"    public static AddTaskCommand deadlineDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":154,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(EMPTY_DEADLINE_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"            // Use regular expression to extract the name and date","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"            Matcher dateChecker \u003d Pattern.compile(\"(?\u003cname\u003e.)/by(?\u003cdate\u003e.)\").matcher(information);","lastModifiedDate":"2023-01-26"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"            if (dateChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"                String name \u003d dateChecker.group(\"name\").strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"                String date \u003d dateChecker.group(\"date\").strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":163,"author":{"gitId":"Yufannnn"},"content":"                try {","lastModifiedDate":"2023-01-17"},{"lineNumber":164,"author":{"gitId":"Yufannnn"},"content":"                    // create a new DeadlineTask and return an AddTaskCommand with it","lastModifiedDate":"2023-01-24"},{"lineNumber":165,"author":{"gitId":"Yufannnn"},"content":"                    return new AddTaskCommand(new DeadlineTask(name, LocalDate.parse(date)));","lastModifiedDate":"2023-01-17"},{"lineNumber":166,"author":{"gitId":"Yufannnn"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":167,"author":{"gitId":"Yufannnn"},"content":"                    // if the input date format is invalid, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":168,"author":{"gitId":"Yufannnn"},"content":"                    throw new InvalidInputException(INVALID_DATE_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":169,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-17"},{"lineNumber":170,"author":{"gitId":"Yufannnn"},"content":"            } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":171,"author":{"gitId":"Yufannnn"},"content":"                // if the input format is incorrect, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":172,"author":{"gitId":"Yufannnn"},"content":"               throw new InvalidInputException(INVALID_DEADLINE_FORMAT_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":173,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":174,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":175,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":176,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":177,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":178,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for an event task.","lastModifiedDate":"2023-01-24"},{"lineNumber":179,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"description /from start_date /to end_date\"","lastModifiedDate":"2023-01-24"},{"lineNumber":180,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":181,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":182,"author":{"gitId":"Yufannnn"},"content":"     * @return an AddTaskCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":183,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty,","lastModifiedDate":"2023-01-24"},{"lineNumber":184,"author":{"gitId":"Yufannnn"},"content":"     * the input date format is invalid, or the input format is incorrect","lastModifiedDate":"2023-01-24"},{"lineNumber":185,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":186,"author":{"gitId":"Yufannnn"},"content":"    public static AddTaskCommand eventDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":187,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":188,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":189,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(\"OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-01-24"},{"lineNumber":190,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":191,"author":{"gitId":"Yufannnn"},"content":"            // Use regular expression to extract the name, start date, and end date","lastModifiedDate":"2023-01-24"},{"lineNumber":192,"author":{"gitId":"Yufannnn"},"content":"            Matcher intervalChecker \u003d Pattern.compile(\"(?\u003cname\u003e.*)/from(?\u003cfrom\u003e.*)/to(?\u003cto\u003e.*)\")","lastModifiedDate":"2023-01-17"},{"lineNumber":193,"author":{"gitId":"Yufannnn"},"content":"                    .matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":194,"author":{"gitId":"Yufannnn"},"content":"            if (intervalChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":195,"author":{"gitId":"Yufannnn"},"content":"                String name \u003d intervalChecker.group(\"name\").strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":196,"author":{"gitId":"Yufannnn"},"content":"                String from \u003d intervalChecker.group(\"from\").strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":197,"author":{"gitId":"Yufannnn"},"content":"                String to \u003d intervalChecker.group(\"to\").strip();","lastModifiedDate":"2023-01-17"},{"lineNumber":198,"author":{"gitId":"Yufannnn"},"content":"                try {","lastModifiedDate":"2023-01-17"},{"lineNumber":199,"author":{"gitId":"Yufannnn"},"content":"                    // create a new EventTask and return an AddTaskCommand with it","lastModifiedDate":"2023-01-24"},{"lineNumber":200,"author":{"gitId":"Yufannnn"},"content":"                    return new AddTaskCommand(","lastModifiedDate":"2023-01-17"},{"lineNumber":201,"author":{"gitId":"Yufannnn"},"content":"                            new EventTask(name, LocalDate.parse(from), LocalDate.parse(to)));","lastModifiedDate":"2023-01-17"},{"lineNumber":202,"author":{"gitId":"Yufannnn"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":203,"author":{"gitId":"Yufannnn"},"content":"                    // if the input date format is invalid, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":204,"author":{"gitId":"Yufannnn"},"content":"                    throw new InvalidInputException(\"OOPS!!! The input date format is invalid\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":205,"author":{"gitId":"Yufannnn"},"content":"                            + \"Please input the date in the format of yyyy-mm-dd\");","lastModifiedDate":"2023-01-17"},{"lineNumber":206,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-17"},{"lineNumber":207,"author":{"gitId":"Yufannnn"},"content":"            } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":208,"author":{"gitId":"Yufannnn"},"content":"                // if the input format is incorrect, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":209,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(\"OOPS!!! Please input the event in the correct format.\");","lastModifiedDate":"2023-01-17"},{"lineNumber":210,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":211,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":212,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":213,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":214,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":215,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for finding tasks with certain descriptions.","lastModifiedDate":"2023-01-24"},{"lineNumber":216,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":217,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":218,"author":{"gitId":"Yufannnn"},"content":"     * @return a FindCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":219,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty","lastModifiedDate":"2023-01-24"},{"lineNumber":220,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":221,"author":{"gitId":"Yufannnn"},"content":"    public static FindCommand findDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":222,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":223,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":224,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-17"},{"lineNumber":225,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":226,"author":{"gitId":"Yufannnn"},"content":"            String[] descriptions \u003d information.split(\" \");","lastModifiedDate":"2023-01-17"},{"lineNumber":227,"author":{"gitId":"Yufannnn"},"content":"            // create a new FindCommand with the array of descriptions","lastModifiedDate":"2023-01-24"},{"lineNumber":228,"author":{"gitId":"Yufannnn"},"content":"            return new FindCommand(descriptions);","lastModifiedDate":"2023-01-17"},{"lineNumber":229,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":230,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":231,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":232,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":233,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for finding tasks on certain date.","lastModifiedDate":"2023-01-24"},{"lineNumber":234,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":235,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":236,"author":{"gitId":"Yufannnn"},"content":"     * @return a ViewScheduleCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":237,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty,","lastModifiedDate":"2023-01-24"},{"lineNumber":238,"author":{"gitId":"Yufannnn"},"content":"     * or the input date format is invalid","lastModifiedDate":"2023-01-24"},{"lineNumber":239,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":240,"author":{"gitId":"Yufannnn"},"content":"    public static ViewScheduleCommand viewDecoder(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-24"},{"lineNumber":241,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":242,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":243,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":244,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":245,"author":{"gitId":"Yufannnn"},"content":"            try {","lastModifiedDate":"2023-01-17"},{"lineNumber":246,"author":{"gitId":"Yufannnn"},"content":"                // create a new ViewScheduleCommand with the date","lastModifiedDate":"2023-01-24"},{"lineNumber":247,"author":{"gitId":"Yufannnn"},"content":"                return new ViewScheduleCommand(LocalDate.parse(information));","lastModifiedDate":"2023-01-24"},{"lineNumber":248,"author":{"gitId":"Yufannnn"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":249,"author":{"gitId":"Yufannnn"},"content":"                // if the input date format is invalid, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":250,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(INVALID_DATE_FORMAT_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":251,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":252,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":253,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":254,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":254}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.command.*;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"* A parser that parse the input String into a Duke Instruction with respective information encapsulated.","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"*/","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"public class Parser {","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private static final String UNRECOGNIZED_ERROR \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"            \"Please type in \\\"help\\\" to check all available commands.\";","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private static final String EMPTY_ERROR \u003d \"OOPS!!! The instruction cannot be empty\";","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    public enum Instruction {","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        BYE,","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        LIST,","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        REMINDER,","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        HELP,","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        MASSDELETE,","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        MARK,","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        UNMARK,","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        DELETE,","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        TODO,","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        DEADLINE,","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        EVENT,","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        FIND,","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        VIEW,","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        UPDATE,","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        UNDO,","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        FREE;","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     * A parse method that takes in a String representation of a Command, using","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * regular expression to parse it can construct to a Command object.","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @param input The given String of Command to be parsed by the parser","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @return The actual Command objected represented by the given input String","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception when invalid input is given","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        //@@author Yufannnn-reused","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        //Reused from https://github.com/wweqg/ip/blob/master/src/main/java/duke/parser/Parser.java","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        //with minor modification, it is a pretty clean and concise regular expression for general instructions","lastModifiedDate":"2023-01-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Matcher instructionExtractor \u003d Pattern","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .compile(\"(?\u003cinstructionTag\u003e\\\\S++)(?\u003cinformation\u003e.*)\").matcher(input.strip());","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        //@@author","lastModifiedDate":"2023-01-13"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        if (!instructionExtractor.matches()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(EMPTY_ERROR);","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        String instructionTag \u003d instructionExtractor.group(\"instructionTag\").strip();","lastModifiedDate":"2023-01-13"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        String information \u003d instructionExtractor.group(\"information\").strip();","lastModifiedDate":"2023-01-13"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"            Instruction instruction \u003d Instruction.valueOf(instructionTag.toUpperCase());","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"            switch (instruction) {","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"                case BYE:","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"                    return new ExitCommand();","lastModifiedDate":"2023-01-13"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"                case LIST:","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"                    return new ListCommand();","lastModifiedDate":"2023-01-13"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"                case REMINDER:","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"                    return new ReminderCommand();","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"                case HELP:","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"                    return new HelpCommand();","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"                case MASSDELETE:","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"                    return new MassDeleteCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"                case FREE:","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"                    return new FindFreeTimeCommand();","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"                case MARK:","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.markDecoder(information);","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"                case UNMARK:","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.unmarkDecoder(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"                case DELETE:","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.deleteDecoder(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"                case TODO:","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.todoDecoder(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"                case DEADLINE:","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.deadlineDecoder(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"                case EVENT:","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.eventDecoder(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"                case FIND:","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.findDecoder(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"                case VIEW:","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.viewDecoder(information);","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"                case UPDATE:","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"                    return Decipherer.updateDecoder(information);","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"                case UNDO:","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"                    return new UndoCommand();","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(UNRECOGNIZED_ERROR);","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"        return null;","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":94,"-":6}},{"path":"src/main/java/duke/storage/CommandHistory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.storage;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.util.Stack;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * The CommandHistory class that keeps track of the previous states of the TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"public class CommandHistory {","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private Stack\u003cTaskList\u003e undoStack;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a CommandHistory object.","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    public CommandHistory() {","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        this.undoStack \u003d new Stack\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * Push the current state of TaskList to undo stack","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The current TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    public void saveState(TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskListCopy \u003d new TaskList(tasks.getTasks());","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        undoStack.push(taskListCopy);","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * Check if the undo stack is empty.","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the undo stack is empty, false otherwise","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        return undoStack.isEmpty();","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * Pop the last state of TaskList from the undo stack.","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @return the last state of TaskList from the undo stack","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    public TaskList pop() {","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        return undoStack.pop();","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":49}},{"path":"src/main/java/duke/storage/Decoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.storage;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * The Decoder class is responsible for decoding the information provided in the storage file and creating the","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" * corresponding task objects. It contains methods to decode TodoTask, DeadlineTask, and EventTask objects and","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" * add them to the task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class Decoder {","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * Decodes a TodoTask and adds it to a TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param list the TaskList to add the TodoTask to","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param description the description of the TodoTask","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone whether the TodoTask is done or not","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    public static void todoDecoder(TaskList list, String description, boolean isDone) {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        // Create a new TodoTask with the given description","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        TodoTask todo \u003d new TodoTask(description);","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        // If the TodoTask is done, mark it as done","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"            todo.markAsDone();","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        // Add the TodoTask to the given TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        list.addTask(todo);","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * Decodes a DeadlineTask and adds it to a TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @param list the TaskList to add the DeadlineTask to","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @param description the description of the DeadlineTask","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone whether the DeadlineTask is done or not","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param date the deadline date of the task as a string in the format \"yyyy-MM-dd\"","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    public static void deadlineDecoder(TaskList list, String description, boolean isDone, String date) {","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        // Create a new DeadlineTask with the given description and deadline date","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask deadline \u003d new DeadlineTask(description, LocalDate.parse(date));","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        // If the DeadlineTask is done, mark it as done","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"            deadline.markAsDone();","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        // Add the DeadlineTask to the given TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        list.addTask(deadline);","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     * Decodes an EventTask and adds it to a TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * @param list the TaskList to add the EventTask to","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     * @param description the description of the EventTask","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone whether the EventTask is done or not","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     * @param from the start date of the event as a string in the format \"yyyy-MM-dd\"","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * @param to the end date of the event as a string in the format \"yyyy-MM-dd\"","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input is invalid","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"    public static void eventDecoder(TaskList list, String description, boolean isDone, String from, String to)","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"            throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        // Create a new EventTask with the given description and event dates","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        EventTask event \u003d new EventTask(description, LocalDate.parse(from), LocalDate.parse(to));","lastModifiedDate":"2023-01-17"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"        // If the EventTask is done, mark it as done","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-17"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            event.markAsDone();","lastModifiedDate":"2023-01-17"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"        // Add the EventTask to the given TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        list.addTask(event);","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":83}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.storage;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.io.File;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import java.util.List;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":" * A Storage object that handles the saving and loading of the TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":" * Writes the TaskList in an external file whenever it is updated. Load the existing","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":" * file when the user opens the Duke program.","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"public class Storage {","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    private final String filePath;","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    private final Path folder;","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    private final File storageFile;","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    private final String TODO_TAG \u003d \"[T]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    private final String DEADLINE_TAG \u003d \"[D]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    private final String EVENT_TAG \u003d \"[E]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    private final String IS_DONE_TAG \u003d \"[X]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    private final String NOT_DONE_TAG \u003d \"[ ]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    private final String STORAGE_ERROR \u003d \"OOPS!!! There\u0027s something wrong \"","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            + \"when reading the Storage list\";","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of that takes a path of the file and specify the file for","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * storage of the given path.","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @param filePath The path of the storage file","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-14"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        String rootPath \u003d Paths.get(\"\").toAbsolutePath().toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        this.filePath \u003d Paths.get(rootPath, filePath).toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        int len \u003d path.getNameCount();","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        this.folder \u003d Paths.get(rootPath, path.subpath(0, len - 1).toString());","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        this.storageFile \u003d new File(this.filePath);","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * Load the TaskList from the given data file. If the file does not exist return","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * a new empty TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @return Return the TaskList parsed from the given file","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException Thrown when the Storage file has unrecognized record","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     * @throws StorageFileException Thrown when encountering IOException when reading the file","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"    public TaskList load() throws InvalidInputException, StorageFileException {","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2023-01-13"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        if (!storageFile.exists()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"            return list;","lastModifiedDate":"2023-01-13"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            // read file","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"            List\u003cString\u003e lines \u003d readFile(storageFile);","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"            // process each line","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"            for (String line : lines) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"                processLine(list, line);","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"            return list;","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            throw new StorageFileException(STORAGE_ERROR);","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"     * Reads the content of a file and returns the lines in a list.","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     * @param file the file to read","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     * @return list of lines in the file","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     * @throws FileNotFoundException if the file doesn\u0027t exist","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"    private List\u003cString\u003e readFile(File file) throws FileNotFoundException {","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        // Create a scanner to read the file","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"            lines.add(sc.nextLine().strip());","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"        return lines;","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"     * Processes a line from the storage file and decodes the task information into a task object.","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"     * The task object is then added to the task list.","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"     * @param list the task list to add the task object to","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"     * @param line the line of information to be processed","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input is invalid","lastModifiedDate":"2023-01-26"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"    private void processLine(TaskList list, String line) throws InvalidInputException {","lastModifiedDate":"2023-01-26"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"        String[] information \u003d line.split(\"\\\\s\\\\|\\\\s\");","lastModifiedDate":"2023-01-26"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"        String taskTag \u003d information[0];","lastModifiedDate":"2023-01-13"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"        boolean isDone \u003d information[1].equals(IS_DONE_TAG);","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        storageFormatChecker(information[0], information[1]);","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"        // Decode the task information based on the task tag","lastModifiedDate":"2023-01-24"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"        switch (taskTag) {","lastModifiedDate":"2023-01-24"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"            case TODO_TAG:","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"                Decoder.todoDecoder(list, information[2], isDone);","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"            case DEADLINE_TAG:","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"                Decoder.deadlineDecoder(list, information[2], isDone, information[3]);","lastModifiedDate":"2023-01-26"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"            case EVENT_TAG:","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"                Decoder.eventDecoder(list, information[2], isDone, information[3], information[4]);","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"            default:","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(\"Unrecognized task tag: \" + taskTag);","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"     * Check if the input for the task tag and isDone match the expected format.","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"     * @param tag The task tag of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone The status of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"    private void storageFormatChecker(String tag, String isDone) {","lastModifiedDate":"2023-01-19"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"        String errorMessage \u003d \"Type tag of event should be [T], [D], or [E]\";","lastModifiedDate":"2023-01-26"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"        assert Objects.equals(tag, TODO_TAG) || Objects.equals(tag, DEADLINE_TAG) || Objects.equals(tag, EVENT_TAG)","lastModifiedDate":"2023-01-23"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"                : errorMessage;","lastModifiedDate":"2023-01-26"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"        errorMessage \u003d \"IsDone tag of event should be [ ], or [X]\";","lastModifiedDate":"2023-01-26"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"        assert Objects.equals(isDone, IS_DONE_TAG) || Objects.equals(isDone, NOT_DONE_TAG)","lastModifiedDate":"2023-01-23"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"                : errorMessage;","lastModifiedDate":"2023-01-26"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    //@@author Yufannnn-reused","lastModifiedDate":"2023-01-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    //https://nus-cs2103-ay2223s2.github.io/website/schedule/week3/topics.html#W3-4c","lastModifiedDate":"2023-01-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    //with minor modification, nice and concise function to overwrite text to a given file.","lastModifiedDate":"2023-01-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-01-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-01-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2023-01-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        fw.close();","lastModifiedDate":"2023-01-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-01-13"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"     * Saves the given task list to the file associated with this StorageFile object.","lastModifiedDate":"2023-01-24"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"     * If the parent folder of the file does not exist, it will be created.","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"     * @param taskList The task list to be saved.","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"     * @throws StorageFileException Throws StorageFileException when encountering an IOException when writing to the file","lastModifiedDate":"2023-01-24"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":163,"author":{"gitId":"Yufannnn"},"content":"    public void saveTaskList(TaskList taskList) throws StorageFileException {","lastModifiedDate":"2023-01-24"},{"lineNumber":164,"author":{"gitId":"Yufannnn"},"content":"        createParentFolderIfNotExists();","lastModifiedDate":"2023-01-24"},{"lineNumber":165,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":166,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder record \u003d new StringBuilder();","lastModifiedDate":"2023-01-13"},{"lineNumber":167,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c taskList.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":168,"author":{"gitId":"Yufannnn"},"content":"            DukeTask task \u003d taskList.getTask(i);","lastModifiedDate":"2023-01-24"},{"lineNumber":169,"author":{"gitId":"Yufannnn"},"content":"            record.append(task.storageString()).append(System.lineSeparator());","lastModifiedDate":"2023-01-13"},{"lineNumber":170,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":171,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":172,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":173,"author":{"gitId":"Yufannnn"},"content":"            writeToFile(this.filePath, record.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":174,"author":{"gitId":"Yufannnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-16"},{"lineNumber":175,"author":{"gitId":"Yufannnn"},"content":"            throw new StorageFileException(this.STORAGE_ERROR);","lastModifiedDate":"2023-01-24"},{"lineNumber":176,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":177,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":178,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":179,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":180,"author":{"gitId":"Yufannnn"},"content":"     * Creates the parent folder of the file associated with this StorageFile object if it does not exist.","lastModifiedDate":"2023-01-24"},{"lineNumber":181,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":182,"author":{"gitId":"Yufannnn"},"content":"    private void createParentFolderIfNotExists() {","lastModifiedDate":"2023-01-24"},{"lineNumber":183,"author":{"gitId":"Yufannnn"},"content":"        if (!this.folder.toFile().exists()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":184,"author":{"gitId":"Yufannnn"},"content":"            this.folder.toFile().mkdirs();","lastModifiedDate":"2023-01-24"},{"lineNumber":185,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":186,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":187,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":188,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"},{"lineNumber":189,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":190,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":181,"-":9}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":" * A DeadlineTask that encapsulates the information and deadline date of a Deadline Task.","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"public class DeadlineTask extends DukeTask {","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    private static final String FORMAT \u003d \"[D] | %s %s | %s\";","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    /** The deadline date of the task */","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    public final LocalDate deadline;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DeadlineTask that takes in the information of the task and its Deadline.","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param info The information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param deadline The deadline of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public DeadlineTask(String info, LocalDate deadline) {","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        super(info, TaskType.DEADLINE);","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Returns true if the given date is equal to the deadline of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date to check","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the date is equal to the deadline, false otherwise","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    public boolean matchesDate(LocalDate date) {","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        return date.isEqual(this.deadline);","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * Returns the deadline date of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @return The deadline date of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    public LocalDate getEndDate() {","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        return this.deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating whether the task is done or not,","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * the information of the task and the deadline.","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    public String storageString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d this.getStatus() ? \"[X] | \" : \"[ ] | \";","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        return String.format(FORMAT, status, this.getInformation(), this.deadline);","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating the task type, whether the task is","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     * done or not, the information of the task and the deadline.","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-01-16"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"                + this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"     * Compares this task object to the passed object and returns true if they are equal.","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"     * Two DeadlineTask objects are considered equal if their information and deadline are equal.","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"     * @param obj The object to compare","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the objects are equal, false otherwise","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-16"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-01-16"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-16"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"        if (!(obj instanceof DeadlineTask)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-16"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask ddlObj \u003d (DeadlineTask) obj;","lastModifiedDate":"2023-01-16"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"        // Compare task information and deadline","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        return Objects.equals(this.getInformation(), ddlObj.getInformation())","lastModifiedDate":"2023-01-16"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.getStatus() \u003d\u003d ddlObj.getStatus()","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.deadline.isEqual(ddlObj.deadline);","lastModifiedDate":"2023-01-16"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":94}},{"path":"src/main/java/duke/task/DukeTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-01-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * An abstract Task class encapsulating a task in Duke, which can be extended","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * by more specific tasks like Events, toDos, etc.","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"public abstract class DukeTask {","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private String information;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    private final TaskType type;","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final String DONE_FLAG \u003d \"[X] \";","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final String UNDONE_FLAG \u003d \"[ ] \";","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeTask that takes in the information of the task and its type.","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param info The information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param type The type of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public DukeTask(String info, TaskType type) {","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.information \u003d info;","lastModifiedDate":"2023-01-11"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * Mark the current task as done.","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     * mark the current task as not done.","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * Gets the information of the current task.","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @return the information of the current task","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    public String getInformation() {","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        return this.information;","lastModifiedDate":"2023-01-13"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * Gets the type of the current task.","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     * @return the type of the current task","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    public TaskType getType() {","lastModifiedDate":"2023-01-13"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        return this.type;","lastModifiedDate":"2023-01-13"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the task is done.","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the task is done","lastModifiedDate":"2023-01-16"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    public boolean getStatus() {","lastModifiedDate":"2023-01-13"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-13"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     * Forms the String representation for the storage file.","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"     * @return the String representation for the storage file.","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    public abstract String storageString();","lastModifiedDate":"2023-01-13"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"     * Takes in a date and check whether the current task happens on that date.","lastModifiedDate":"2023-01-16"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"     * @param date The given date to be checked","lastModifiedDate":"2023-01-16"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the current task happens on that date","lastModifiedDate":"2023-01-16"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    public abstract boolean matchesDate(LocalDate date);","lastModifiedDate":"2023-01-16"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     * Takes in a description and check whether the current task information that matches the given description.","lastModifiedDate":"2023-01-16"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     * @param description The given description to be checked","lastModifiedDate":"2023-01-16"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the description and the information matches","lastModifiedDate":"2023-01-16"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"     public boolean matches(String description) {","lastModifiedDate":"2023-01-16"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"         return this.information.toUpperCase().contains(description.toUpperCase());","lastModifiedDate":"2023-01-16"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"     }","lastModifiedDate":"2023-01-16"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"     * Update the information of the task with the given string.","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"     * @param information the new information of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"    public void updateInformation(String information) {","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"        this.information \u003d information;","lastModifiedDate":"2023-01-23"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in the format \"DONE_FLAG/UNDONE_FLAG information\".","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"     * DONE_FLAG is used if the task is done, UNDONE_FLAG otherwise.","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2023-01-11"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        return (getStatus() ? this.DONE_FLAG : this.UNDONE_FLAG) + this.information;","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":90,"-":23}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * A DeadlineTask that encapsulates the information and starting and ending","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" * dates of a Deadline Task.","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"public class EventTask extends DukeTask {","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final LocalDate from;","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final LocalDate to;","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private static final String FORMAT \u003d \"[E] | %s %s | %s | %s\";","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for EventTask that takes in the information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * and its starting date and ending date.","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param info The information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param from The starting date of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     * @param to The ending date of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException Throws exception when the staring date is after the end date","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    public EventTask(String info, LocalDate from, LocalDate to) throws InvalidInputException {","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        super(info, TaskType.EVENT);","lastModifiedDate":"2023-01-13"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-13"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        if (from.isAfter(to)) {","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(\"‚òπ OOPS!!! Start date can not be after than the End date\");","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"     * Returns the starting date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * @return the starting date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    public LocalDate getStartDate() {","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        return this.from;","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     * Returns the ending date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * @return the ending date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    public LocalDate getEndDate() {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        return this.to;","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating whether the task is done or not,","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * the information of the task, start date and end date of event.","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    public String storageString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d this.getStatus() ? \"[X] | \" : \"[ ] | \";","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        return String.format(FORMAT, status, this.getInformation(), this.from, this.to);","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * Returns true if the given date is equal to the start date or end date of the task or between start and end date.","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date to check","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the date is equal to the start date or end date of the task or between start and end date.","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"    public boolean matchesDate(LocalDate date) {","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"        return date.isEqual(this.from) || date.isEqual(this.to)","lastModifiedDate":"2023-01-16"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"                || (date.isAfter(this.from) \u0026\u0026 date.isBefore(this.to));","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating the task type, whether the task is","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"     * done or not, the information of the task, start date and end date of event.","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"        // Use a constant for the date format pattern","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"        // Store the formatted dates in a local variable","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        String formattedFrom \u003d this.from.format(formatter);","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"        String formattedTo \u003d this.to.format(formatter);","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + formattedFrom + \" to: \" + formattedTo + \")\";","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"     * Check whether this event task is equal to the given object","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"     * @param obj the object to check against","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the objects are equal, false otherwise","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"        if (!(obj instanceof EventTask)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"        EventTask eventObj \u003d (EventTask) obj;","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"        // Compare the information and the from and to dates","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        return Objects.equals(this.getInformation(), eventObj.getInformation())","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.getStatus() \u003d\u003d eventObj.getStatus()","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.from.isEqual(eventObj.from)","lastModifiedDate":"2023-01-26"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.to.isEqual(eventObj.to);","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":116}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-11"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2023-01-11"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":" * A TaskList class that encapsulates the information and actions of a task list.","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"public class TaskList implements Cloneable {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private ArrayList\u003cDukeTask\u003e tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of the TaskList class that create new Arraylist.","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     /**","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a TaskList object with the given ArrayList of DukeTask.","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param list ArrayList of DukeTask","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    public TaskList(ArrayList\u003cDukeTask\u003e list) {","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d list;","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a TaskList object by copying the values from an existing TaskList object","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param other the existing TaskList object","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    public TaskList(TaskList other) {","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(other.tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * Adds the given task to the TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @param task The TaskList to be added","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    public void addTask(DukeTask task) {","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * Removes the task at the specified index in the task list and returns the task that was removed.","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be removed","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * @return The task that was removed","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    public DukeTask deleteTask(int taskIndex) {","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        DukeTask taskToDelete \u003d tasks.get(taskIndex);","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        this.tasks.remove(taskIndex);","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        return taskToDelete;","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * Indicates the number of the task on the list.","lastModifiedDate":"2023-01-16"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     * @return The number of the task on the list","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    public int getNoOfTasks() {","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"     * Gets the Task of the given index from the TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"     * @param index The index of the task to be obtained","lastModifiedDate":"2023-01-16"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"     * @return The task of the given index","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"    public DukeTask getTask(int index) {","lastModifiedDate":"2023-01-16"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"     * Returns the ArrayList of DukeTask.","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     * @return The ArrayList of DukeTask","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"    public ArrayList\u003cDukeTask\u003e getTasks() {","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"        return this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"     * Sets the ArrayList of DukeTask.","lastModifiedDate":"2023-01-24"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The ArrayList of DukeTask","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"    public void setTasks(ArrayList\u003cDukeTask\u003e tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"     * Extracts all incomplete deadline tasks from the task list and returns them as a new TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"     * The tasks are sorted by their deadlines in ascending order.","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"     * @return A new TaskList containing all incomplete deadline tasks from the original list","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"    public TaskList extractDeadlines() {","lastModifiedDate":"2023-01-21"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"        // Create a stream of tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"        List\u003cDukeTask\u003e result \u003d this.tasks.stream()","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"                // filter the stream to only include DEADLINE tasks that are not done","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"                .filter(task -\u003e task.getType() \u003d\u003d TaskType.DEADLINE \u0026\u0026 !task.getStatus())","lastModifiedDate":"2023-01-21"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"                // sort the filtered tasks based on their end date","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"                .sorted(Comparator.comparing(x -\u003e {","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"                    DeadlineTask ddlTask \u003d (DeadlineTask) x;","lastModifiedDate":"2023-01-23"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"                    return ddlTask.getEndDate();","lastModifiedDate":"2023-01-25"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"                }))","lastModifiedDate":"2023-01-21"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"                // collect the sorted tasks into a list","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-01-21"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"        // return a new tasklist containing the filtered and sorted tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"        return new TaskList(new ArrayList\u003c\u003e(result));","lastModifiedDate":"2023-01-21"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task list in the format \"index. task\\n\".","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task list","lastModifiedDate":"2023-01-24"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"        // Creating a string builder to append task index and details","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder listContent \u003d new StringBuilder();","lastModifiedDate":"2023-01-16"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"        // Iterating through the task list","lastModifiedDate":"2023-01-26"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c this.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-17"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"            // Appending task index and task details","lastModifiedDate":"2023-01-26"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"            listContent.append(i + 1).append(\".\").append(this.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-01-16"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"        // Return the final string representation of the task list","lastModifiedDate":"2023-01-26"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"        return String.valueOf(listContent);","lastModifiedDate":"2023-01-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"    public TaskList clone() {","lastModifiedDate":"2023-01-24"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"            TaskList clone \u003d (TaskList) super.clone();","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"            // TODO: copy mutable state here, so the clone can\u0027t change the internals of the original","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"            return clone;","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"        } catch (CloneNotSupportedException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"            throw new AssertionError();","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":133,"-":18}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * An enum class that specify the type of the task.","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"public enum TaskType {","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"    TODO, EVENT, DEADLINE","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":8}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":" * A TodoTask class that encapsulates the information a Todo Task.","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"public class TodoTask extends DukeTask {","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a TodoTask object with the given task information.","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     * @param info The task information.","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TodoTask(String info) {","lastModifiedDate":"2023-01-11"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        super(info, TaskType.TODO);","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * Returns the task information in the format suitable for storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @return The task information in the storage format.","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    public String storageString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d \"[ ] | \";","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        if (this.getStatus()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            status \u003d \"[X] | \";","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        return \"[T] | \" + status + this.getInformation();","lastModifiedDate":"2023-01-13"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * Determines whether the task matches the given date.","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date to check against.","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * @return false, as TodoTasks do not have a date.","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    public boolean matchesDate(LocalDate date) {","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        return false;","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2023-01-11"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        if (!(obj instanceof TodoTask)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        TodoTask todoObj \u003d (TodoTask) obj;","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        return Objects.equals(this.getInformation(), todoObj.getInformation())","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.getStatus() \u003d\u003d todoObj.getStatus();","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":52,"-":12}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    private Label dialog;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    private void flip() {","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        db.flip();","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        return db;","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":61}},{"path":"src/main/java/duke/ui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class Launcher {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":12}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.Duke;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class Main extends Application {","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private final Duke duke \u003d new Duke(\"data/tasks.txt\");","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"            stage.getIcons().add(new Image(\"/images/icon.png\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"            stage.setTitle(\"Mr. Bear\");","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"            stage.isResizable();","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            stage.show();","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":36}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.Duke;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    private TextField userInput;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    private Button sendButton;","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    private Duke duke;","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            .getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    private final Image dukeImage \u003d new Image(Objects","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"            .requireNonNull(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     * Initializes the DialogBox and display the welcome message.","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    public void initialize() {","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"                DialogBox.getDukeDialog(\"Hello from Mr. Bear, your personal task manager.\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"                        + \"What can I do for you?\", dukeImage)","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        );","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        this.duke \u003d d;","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * Duke\u0027s reply and then appends them to the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        );","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        userInput.clear();","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        if (Objects.equals(response, \"Bye. Hope to see you again soon!\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"            Platform.exit();","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":69}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * Customize the conversation interface by changing the length of the horizontal bar","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" * and the space of indentation.","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class Ui {","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    private final int DEFUALT_LENGTH \u003d 70;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private final int DEFUALT_SPACE \u003d 4;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    private final String UNDERSCORE \u003d \"_\";","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private final String SPACE \u003d \" \";","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final String LINE_SEPERATOR \u003d \"\\n\";","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final int horizontalLineLength;","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final int indentSpace;","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * Constructor that sets HorizontalLineLength to be 70 and IndentSpace to be 4 by default.","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public Ui() {","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        this.horizontalLineLength \u003d DEFUALT_LENGTH;","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        this.indentSpace \u003d DEFUALT_SPACE;","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * Constructor that sets HorizontalLineLength to be the given length","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * and IndentSpace to be the given indent space.","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param horizontalLineLength The length of the horizontal line to be set","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @param indentSpace The length of the indent space to be set","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public Ui(int horizontalLineLength, int indentSpace) {","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        this.horizontalLineLength \u003d horizontalLineLength;","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.indentSpace \u003d indentSpace;","lastModifiedDate":"2023-01-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * The indent method that places an indentation as specified by the space indent","lastModifiedDate":"2023-01-13"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * at the start of every line.","lastModifiedDate":"2023-01-13"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @param input the text to be indented","lastModifiedDate":"2023-01-13"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @return the indented text","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String indent(String input) {","lastModifiedDate":"2023-01-11"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        String delimiter \u003d this.LINE_SEPERATOR + this.SPACE.repeat(this.indentSpace);","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        String[] splitString \u003d input.split(this.LINE_SEPERATOR);","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        return this.SPACE.repeat(this.indentSpace) + String.join(delimiter, splitString);","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * Display the given message between two horizontal line and add the specified indentation.","lastModifiedDate":"2023-01-13"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * @param message the message to be display","lastModifiedDate":"2023-01-13"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void displayWithBar(String message) {","lastModifiedDate":"2023-01-11"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        String bar \u003d this.SPACE.repeat(indentSpace) + this.UNDERSCORE.repeat(this.horizontalLineLength);","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        System.out.println(bar + this.LINE_SEPERATOR + indent(message) ","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"                + this.LINE_SEPERATOR + bar + this.LINE_SEPERATOR);","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    public void reset() {","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        this.response \u003d new StringBuilder();","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    public String getResponse() {","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        return String.valueOf(this.response);","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    public void appendResponse(String message) {","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        this.response.append(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":59,"-":15}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"\u003cfx:root id\u003d\"anchor\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" cache\u003d\"true\" lineSpacing\u003d\"2.0\" style\u003d\"-fx-background-color: #a9cdfc; -fx-background-radius: 12; -fx-label-padding: 12; -fx-border-color: #000000; -fx-border-radius: 12; -fx-border-width: 2;\" text\u003d\"Text\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        \u003cfont\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"            \u003cFont name\u003d\"Comic Sans MS Bold\" size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"        \u003c/font\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"        \u003cHBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        \u003c/HBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        \u003copaqueInsets\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        \u003c/opaqueInsets\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    \u003c/Label\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"66.0\" fitWidth\u003d\"66.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        \u003cHBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        \u003c/HBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    \u003c/ImageView\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":29}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"520.0\" style\u003d\"-fx-background-color: linear-gradient(to BOTTOM, lightblue, skyblue);\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" stylesheets\u003d\"@Background.css\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.39999999999998\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"620.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    \u003cHBox layoutY\u003d\"558.0\" prefHeight\u003d\"46.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"-4.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"358.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"500.0\" promptText\u003d\"How Can I Help You?\" style\u003d\"-fx-background-color: #fcfce3;\" AnchorPane.bottomAnchor\u003d\"1.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"            \u003cfont\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"                \u003cFont name\u003d\"Comic Sans MS Italic\" size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"            \u003c/font\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        \u003c/TextField\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        \u003cButton fx:id\u003d\"sendButton\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-border-color: #000000; -fx-border-radius: 3; -fx-border-width: 2;\" text\u003d\"SEND\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"            \u003cfont\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"                \u003cFont name\u003d\"Comic Sans MS Bold\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"            \u003c/font\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        \u003c/Button\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":27}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    public void anotherDummyTest() {","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":17}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import duke.command.AddTaskCommand;","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"class ParserTest {","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    void parseTest1() {","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        String fullCommand \u003d \"deadline homework /by 1145-12-19\";","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"            Command actual \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"            Command expected \u003d new AddTaskCommand(","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"                    new DeadlineTask(\"homework\", LocalDate.of(1145, 12, 19))","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"            );","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"            assertEquals(actual, expected);","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"            fail();","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    void parseTest2() {","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"                    String fullCommand \u003d \"hello!\";","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"                    Command actual \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"                });","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(\"‚òπ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", thrown.getMessage());","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":39}},{"path":"src/test/java/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"class UiTest {","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    void indent() {","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"        String actual \u003d ui.indent(\"1\\n2\\n3\");","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        String expect \u003d (\"    1\\n    2\\n    3\");","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(actual, expect);","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"list","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"hi","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"todo breakfast","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"deadline do homework /by 10","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"event meeting /from 14 /to 20","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"todo gym","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"list","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"mark 1","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"deadline assingment 2 /by Jan 20","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"mark 3","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"mark 2","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"unmark 2","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"delete 4","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"list","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"bye","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"@REM @@author Yufannnn-reused","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"@REM Reused from https://github.com/JeremyLoh/duke/blob/master/text-ui-test/runtest.bat","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"@REM with minor modifications to address the path issue in the given runtest.bat file","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"dir /s /B ..\\src\\main\\java\\*.java \u003e source.txt","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"javac -cp ..\\src\\duke -Xlint:none -d ..\\bin @source.txt","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"@REM @@author","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yufannnn":9,"-":19}},{"path":"text-ui-test/source.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\Duke.java","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\customization\\DisplayFormat.java","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\exception\\GeneralDukeException.java","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\exception\\InvalidInputException.java","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddDeadlineTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddEventTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddToDoTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\DeleteInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\EchoInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\ExitInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\GeneralDukeInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\ListInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\MarkAsDoneInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\UnmarkInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\parser\\Parser.java","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\DeadlineTask.java","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\EventTask.java","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\GeneralDukeTask.java","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\TaskList.java","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\TaskType.java","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\TodoTask.java","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":22}}]
