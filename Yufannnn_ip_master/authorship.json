[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"# Mr. Bear","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"\u003e ‚ÄúYour mind is for having ideas, not holding them.‚Äù  ‚Äì David Allen ([source](https://dansilvestre.com/productivity-quotes))","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"Mr. Bear is a **convenient and flexible** software that helps you to manage and track all your tasks. It\u0027s,","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"+ text-based","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"+ easy to learn","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"+ ~~FAST~~ *SUPER FAST* to use","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"And it is ***FREE!!!***","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"## Quick Start","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"All you need to do is,","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"1. download it from [here](https://github.com/Yufannnn/ip/releases). ","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"2. double-click it. ","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"3. add your tasks. ","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"4. let it manage your tasks for you üòâ","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"If you are not sure how to use it, check out the [User Guide](https://yufannnn.github.io/ip/)! ","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"## Features:","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"- [X] Graphic User Interface","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"- [X] Add four type of tasks (todo, deadline, event, fixed duration)","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"- [X] Search, Sort, Find tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"- [X] Mark, Unmark, Delete, massDelete tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"- [X] find the next free day","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"Yufannnn":22,"-":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"plugins {","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"group \u0027org.example\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"version \u00272.2\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"application{","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    mainClassName \u003d \"duke.ui.Launcher\"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    mainClass.set(\"duke.ui.Launcher\")","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"repositories {","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    mavenCentral()","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"test {","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"dependencies {","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.9.2\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.9.2\u0027","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"shadowJar {","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    archiveBaseName \u003d \"Mr.Bear\"","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"run{","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    standardOutput \u003d System.out","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"checkstyle {","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":57}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"[D] | [ ] | submit report | Jan 30 2023 11:59","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"[F] | [ ] | do Computer Network homework | PT2H","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"[T] | [ ] | buy milk","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Yufannnn":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"# User Guide to Mr. Bear!","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"![Ui](./Ui.png)","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"- [Introduction](#introduction)","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"  * [Run the project in intelliJ](#run-the-project-in-intellij)","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"  * [Run the project in terminal](#run-the-project-in-terminal)","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"- [Features](#features)","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"  * [Adds Todo Tasks](#adds-todo-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"  * [Adds Deadline Tasks](#adds-deadline-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"  * [Adds Event Tasks](#adds-event-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"  * [Adds Fixed Duration Tasks](#adds-fixed-duration-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"  * [Updates Tasks](#updates-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"  * [Lists All Tasks](#lists-all-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"  * [Mark Tasks as Done](#mark-tasks-as-done)","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"  * [Unmark Tasks](#unmark-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"  * [Delete Tasks](#delete-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"  * [Find Tasks](#find-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"  * [Find Next Free Day](#find-next-free-day)","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"  * [Mass Delete Done Tasks](#mass-delete-done-tasks)","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"  * [Sort Tasks by Category](#sort-tasks-by-category)","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"  * [View Tasks on a Given Date](#view-tasks-on-a-given-date)","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"  * [Bye](#bye)","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"- [Miscellaneous](#miscellaneous)","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"  * [Acceptable Formats for `\u003cDateTime\u003e`](#acceptable-formats-for---datetime--)","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"  * [Acceptable Formats for `\u003cDate\u003e`](#acceptable-formats-for---date--)","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"  * [Acceptable Formats for `\u003cDuration\u003e`](#acceptable-formats-for---duration--)","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"- [Useful Resources](#useful-resources)","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"## Introduction","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"The Mr. Bear Application is a chatbot designed to assist users with various tasks, made by [Zhu Yufan](https://www.linkedin.com/in/yufan-zhu-36024a225/) under the module CS2103T 2022/23 Sem 2. ","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"This project, Mr. Bear, is based on [Project Duke](https://github.com/nus-cs2103-AY2223S2/ip) and is an educational tool that helps new software developers improve their skills through the gradual construction of the project and the discovery of various software engineering principles.","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"This is a simple user guide for the usage of Mr. Bear Application.","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"## Quick Start","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"### Run the project in intelliJ","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"\u003e **Prerequisites**","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"\u003e + JDK 11","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"\u003e + update Intellij to the most recent version.","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"1. Open Intellij.","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"2. If you are not on the welcome screen, navigate to \"File\" \u003e \"Close Project\" to close any existing projects.","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"3. At this point, you should be seeing the welcome screen and be able to either import a project or open one.","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"4. Set up the correct JDK version, as follows:","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"\t1. Launch Intellij and select \"Configure\" from the welcome screen or navigate to \"File\" \u003e \"Project Structure\".","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"\t2. Once in the Project Structure window, click on \"Project\" and choose \"Project SDK\" from the drop-down menu.","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"\t3. In the SDKs section, confirm that JDK 11 is selected. If it\u0027s not present, click on \"New...\" and locate the JDK 11 installation on your system.","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"\t4. Pick the correct version and press \"OK\" to set it as the default SDK for your project.","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"\t5. Click \"Apply\" and \"OK\" to save the changes and exit the Project Structure window.","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"3. Here are the steps to import the project into Intellij:","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"\t1. Start Intellij and go to \"File\" \u003e \"Open\" or \"File\" \u003e \"Import Project\".","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"\t2. Find the project folder, select the root directory of the project, and click \"OK\".","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"\t3. The project will be imported and the necessary build and indexing will occur automatically. If any configuration or dependencies are prompted, accept the default options.","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"\t4. Upon completion of the import, the project should be fully functional for running and debugging within Intellij.","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"4. After the import is completed, you can access the src/main/java/Launcher.java file. To run it, simply right-click on it and choose the option \"Run Launcher\".","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"5. If the setup was successful, the graphical user interface should appear shortly.","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"6. You can now type in your command and press Enter to run it.","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"### Run the project in terminal","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"1. Download the latest  **Mr.Bear.jar** file from [here](https://github.com/Yufannnn/ip/releases)","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"2. Navigate to any empty folder and place the downloaded file into that folder.","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"3. Navigate your terminal directory to the folder that contains your **Bill.jar** file","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"4. To launch the Mr. Bear Application, you have two options:","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"    * Double-click the \"Mr.Bear.jar\" file on your device.","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"    * Open the command prompt and enter the command:","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        ```","lastModifiedDate":"2021-07-17"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        java -jar Mr.Bear.jar","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        ```","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"        If you prefer a Command Line Interface, type:","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        ```","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"        java -jar Mr.Bear.jar -cli ","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"\t\t```","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"5. You should expect the Graphical User Interface (GUI) to appear in a matter of seconds.","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"6. You should expect to see a window as shown below: ","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"![welcome](welcome.png)","lastModifiedDate":"2023-02-05"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"7. When the application is running, enter the \"help\" command to view a list of available commands and learn the tasks that the chatbot can help with.","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"help","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"````","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"## Command Summary","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"| Index | Command to Use | Format | examples |","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"| :---: | :----------: | :-----------: | :----------: |","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"| 1 | Adds a Deadline task | `deadline \u003cDescription\u003e /by \u003cDateTime\u003e` | `deadline homework /by 16/01/2023 1500` |","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"| 2 | Adds an Event task | `event \u003cDescription\u003e /from \u003cDateTime\u003e /to \u003cDateTime\u003e` | `event homework /from 16/01/2023 1500 /to 16/01/2023 1900` |","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"| 3 | Adds a Fixed Duration task | `fixed \u003cDescription\u003e /within \u003cDuration\u003e` | `fixed homework PT2H` |","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"| 4 | Adds a Todo task | `todo \u003cDescription\u003e` |`todo homework`|","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"| 5 | Deletes a Task | `delete \u003cTaskIndex\u003e` | `delete 1` |","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"| 6 | Finds Tasks according to description | `find \u003cDescription...\u003e` | `find homework`, `find homework meeting exercise` |","lastModifiedDate":"2023-01-30"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"| 7 | Finds the next free day in the next month | `free` | `free` |","lastModifiedDate":"2023-01-30"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"| 8 | Lists out all Tasks | `list` |`list` |","lastModifiedDate":"2023-01-30"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"| 9 | Marks a Task as done | `mark \u003cTaskIndex\u003e` | `mark 1` |","lastModifiedDate":"2023-01-30"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"| 10 | Mass deletes all the done Tasks | `massDelete` | `massDelete` |","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"| 11 | Shows help menu | `help` | `help` |","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"| 12 | Sorts all the events by Categories | `sort` | `sort` |","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"| 13 | Unmarks a Task | `unmark \u003cTaskIndex\u003e` | `unmark 1` |","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"| 14 | Updates the description of a Task| `update \u003cTaskIndex\u003e \u003cDescription\u003e` | `update 1 Do Assignment 1` |","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"| 15 | Views the Tasks on a given date | `view \u003cDate\u003e` | `view 16/01/2023` |","lastModifiedDate":"2023-01-30"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"| 16 | Ending a session | `bye` | `bye` |","lastModifiedDate":"2023-01-30"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"## Features","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"### Adds Todo Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"The `todo \u003cDescription\u003e` command allows you to easily add a Todo task to your task list. It takes in a single argument, which is the description of the task.","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"For example, running the command, `todo homework`,  would add a Todo task with the description \"homework\" to your task list and return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"\u003eGot it. I\u0027ve added this task:","lastModifiedDate":"2023-01-30"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"\u003e\\[T][ ] homework","lastModifiedDate":"2023-01-30"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"\u003eNow you have 5 tasks in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"### Adds Deadline Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"The `deadline \u003cDescription\u003e /by \u003cDateTime\u003e` command allows you to add a Deadline task to your task list. It takes in two arguments, the first is the description of the task and the second is the deadline of the task in the format of `/by \u003cDateTime\u003e`.","lastModifiedDate":"2023-01-30"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"For example, running the command, `deadline homework /by 16/01/2023 1500`, would add the task \"homework\" to your task list with a deadline of January 16th, 2023 at 3:00pm and return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"\u003eGot it. I\u0027ve added this task:","lastModifiedDate":"2023-01-30"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"\u003e\\[D][ ] homework ( by: Jan 16 2023 15:00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"\u003eNow you have 5 tasks in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"### Adds Event Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"The `event \u003cDescription\u003e /from \u003cDateTime\u003e /to \u003cDateTime\u003e` command allows you to add an Event task to your task list. It takes in three arguments, the first is the description of the task, the second is the start time of the event in the format of `/from \u003cDateTime\u003e`, and the third is the end time of the event in the format of `/to \u003cDateTime\u003e`.","lastModifiedDate":"2023-01-30"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"For example, running`event homework /from 16/01/2023 1500 /to 16/01/2023 1900`, would add the task \"homework\" as an event to your task list with a start time of January 16th, 2023 at 3:00pm and end time of January 16th, 2023 at 7:00pm and return the following output","lastModifiedDate":"2023-01-30"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"\u003e Got it. I\u0027ve added this task:","lastModifiedDate":"2023-01-30"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"\u003e \\[E][ ] homework ( from: Jan 16 2023 15:00 to: Jan 16 2023 19:00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":150,"author":{"gitId":"Yufannnn"},"content":"\u003e Now you have 7 tasks in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":151,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":152,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":153,"author":{"gitId":"Yufannnn"},"content":"### Adds Fixed Duration Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":154,"author":{"gitId":"Yufannnn"},"content":"The `fixed \u003cDescription\u003e /within \u003cDuration\u003e` command allows you to add a task with fixed duration to your task list. It takes in two arguments, the first is the description of the task and the second is the duration of the task in the format of `/within \u003cDuration\u003e`.","lastModifiedDate":"2023-01-30"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"For example, running the command, `fixed homework /within 2`, would add the task \"homework\" to your task list with a duration of 2 hours and return the following output: ","lastModifiedDate":"2023-01-30"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"\u003e Got it. I\u0027ve added this task:","lastModifiedDate":"2023-01-30"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"\u003e \\[F][ ] homework ( duration: 2h )","lastModifiedDate":"2023-01-30"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"\u003e Now you have 5 tasks in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":164,"author":{"gitId":"Yufannnn"},"content":"### Updates Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":165,"author":{"gitId":"Yufannnn"},"content":"The `update \u003cTaskIndex\u003e \u003cDescription\u003e` command allows you to update the description of a task in your task list. It takes in two arguments, the first is the index of the task you want to update, and the second is the new description.","lastModifiedDate":"2023-01-30"},{"lineNumber":166,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":167,"author":{"gitId":"Yufannnn"},"content":"For example, running the command, `update 1 Do Assignment 1`, would update the task with index 1 to be \"Do Assignment 1\" and return the following output: ","lastModifiedDate":"2023-01-30"},{"lineNumber":168,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":169,"author":{"gitId":"Yufannnn"},"content":"\u003e Nice! I\u0027ve updated the description of this task:","lastModifiedDate":"2023-01-30"},{"lineNumber":170,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":171,"author":{"gitId":"Yufannnn"},"content":"\u003e \\[D][ ] Do Assignment 1 ( by: Jan 15 2021 03: 00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":172,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":173,"author":{"gitId":"Yufannnn"},"content":"### Lists All Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":174,"author":{"gitId":"Yufannnn"},"content":"The `list` command allows you to view all tasks in your task list. It takes in no arguments and will show the description, deadline (if any), and start and end time (if any) for each task in the list. ","lastModifiedDate":"2023-01-30"},{"lineNumber":175,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":176,"author":{"gitId":"Yufannnn"},"content":"For example, running the command `list` will show the content of the list return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":177,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":178,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[D][ ] homework ( by: 16/01/2023 1500 )","lastModifiedDate":"2023-01-30"},{"lineNumber":179,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[E][ ] meeting ( from: 16/01/2023 1500 to: 16/01/2023 1700 )","lastModifiedDate":"2023-01-30"},{"lineNumber":180,"author":{"gitId":"Yufannnn"},"content":"\u003e 3. \\[T][X] grocery shopping","lastModifiedDate":"2023-01-30"},{"lineNumber":181,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":182,"author":{"gitId":"Yufannnn"},"content":"### Mark Tasks as Done","lastModifiedDate":"2023-01-30"},{"lineNumber":183,"author":{"gitId":"Yufannnn"},"content":"The `mark \u003cTaskIndex\u003e` command allows you to mark a task as done in your task list. It takes in one argument, the index of the task you want to mark as done.","lastModifiedDate":"2023-01-30"},{"lineNumber":184,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":185,"author":{"gitId":"Yufannnn"},"content":"For example, running the command, `mark 1`,  would mark the task \"homework\" as done and return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":186,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":187,"author":{"gitId":"Yufannnn"},"content":"\u003e Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-01-30"},{"lineNumber":188,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":189,"author":{"gitId":"Yufannnn"},"content":"\u003e \\[D][X] Do Assignment 1 ( by: Jan 15 2021 03: 00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":190,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":191,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":192,"author":{"gitId":"Yufannnn"},"content":"### Unmark Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":193,"author":{"gitId":"Yufannnn"},"content":"The `unmark \u003cTaskIndex\u003e` command allows you to unmark a task that you previously marked as done. It takes in a single argument which is the index of the task you want to unmark.","lastModifiedDate":"2023-01-30"},{"lineNumber":194,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":195,"author":{"gitId":"Yufannnn"},"content":"For example: running the command, `unmark 1`,  would unmark the task previously marked as done at index 1 and return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":196,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":197,"author":{"gitId":"Yufannnn"},"content":"\u003e Ok, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-01-30"},{"lineNumber":198,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":199,"author":{"gitId":"Yufannnn"},"content":"\u003e \\[D][ ] Do Assignment 1 ( by: Jan 15 2021 03: 00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":200,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":201,"author":{"gitId":"Yufannnn"},"content":"### Delete Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":202,"author":{"gitId":"Yufannnn"},"content":"The `delete \u003cTaskIndex\u003e` command allows you to delete a task from your task list. It takes in a single argument which is the index of the task you want to delete.","lastModifiedDate":"2023-01-30"},{"lineNumber":203,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":204,"author":{"gitId":"Yufannnn"},"content":"For example: running the command, `delete 1`, would unmark the task previously marked as done at index 1 and return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":205,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":206,"author":{"gitId":"Yufannnn"},"content":"\u003e Ok, I\u0027ve removed this task:","lastModifiedDate":"2023-01-30"},{"lineNumber":207,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":208,"author":{"gitId":"Yufannnn"},"content":"\u003e \\[D][X] Do Assignment 1 ( by: Jan 15 2021 03: 00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":209,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":210,"author":{"gitId":"Yufannnn"},"content":"\u003e Now you have 8 tasks in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":211,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":212,"author":{"gitId":"Yufannnn"},"content":"### Find Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":213,"author":{"gitId":"Yufannnn"},"content":"The `find \u003cDescription...\u003e` command allows you to find tasks in your task list based on their descriptions. It takes in one or more arguments which are the keywords you want to search for,","lastModifiedDate":"2023-01-30"},{"lineNumber":214,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":215,"author":{"gitId":"Yufannnn"},"content":"For example, running the command `find homework`, will find all the task with description that matches or partially matches the word homework and return the following output: ","lastModifiedDate":"2023-01-30"},{"lineNumber":216,"author":{"gitId":"Yufannnn"},"content":"\u003e Here are the tasks matching \"homework\":","lastModifiedDate":"2023-01-30"},{"lineNumber":217,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":218,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[D][ ] homework ( by: 16/01/2023 1500 )","lastModifiedDate":"2023-01-30"},{"lineNumber":219,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[T][ ] Do homework for math class","lastModifiedDate":"2023-01-30"},{"lineNumber":220,"author":{"gitId":"Yufannnn"},"content":"\u003e 3. \\[T][ ] Read chapter 2 and do the homework exercises","lastModifiedDate":"2023-01-30"},{"lineNumber":221,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":222,"author":{"gitId":"Yufannnn"},"content":"running the command `find homework eat meeting`, will find all the tasks with description that matches or partially matches each input description and return the following output: ","lastModifiedDate":"2023-01-30"},{"lineNumber":223,"author":{"gitId":"Yufannnn"},"content":"\u003e Here are the tasks matching \"homework\":","lastModifiedDate":"2023-01-30"},{"lineNumber":224,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":225,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[D][ ] homework ( by: 16/01/2023 1500 )","lastModifiedDate":"2023-01-30"},{"lineNumber":226,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[T][ ] Do homework for math class","lastModifiedDate":"2023-01-30"},{"lineNumber":227,"author":{"gitId":"Yufannnn"},"content":"\u003e 3. \\[T][ ] Read chapter 2 and do the homework exercises","lastModifiedDate":"2023-01-30"},{"lineNumber":228,"author":{"gitId":"Yufannnn"},"content":"\u003e ","lastModifiedDate":"2023-01-30"},{"lineNumber":229,"author":{"gitId":"Yufannnn"},"content":"\u003e   Here are the tasks matching \"eat\":","lastModifiedDate":"2023-01-30"},{"lineNumber":230,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":231,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[D][ ] eat breakfast ( by: 16/01/2023 0900 )","lastModifiedDate":"2023-01-30"},{"lineNumber":232,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[T][ ] eat chicken breast","lastModifiedDate":"2023-01-30"},{"lineNumber":233,"author":{"gitId":"Yufannnn"},"content":"\u003e ","lastModifiedDate":"2023-01-30"},{"lineNumber":234,"author":{"gitId":"Yufannnn"},"content":"\u003e   Here are the tasks matching \"meeting\":","lastModifiedDate":"2023-01-30"},{"lineNumber":235,"author":{"gitId":"Yufannnn"},"content":"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":236,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[E][ ] project team meeting ( from: 17/01/2023 1500 to 17/01/2023 1700 )","lastModifiedDate":"2023-01-30"},{"lineNumber":237,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":238,"author":{"gitId":"Yufannnn"},"content":"### Find Next Free Day","lastModifiedDate":"2023-01-30"},{"lineNumber":239,"author":{"gitId":"Yufannnn"},"content":"It takes in no arguments, and will return the next available day in the next month with no tasks or events scheduled on it. ","lastModifiedDate":"2023-01-30"},{"lineNumber":240,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":241,"author":{"gitId":"Yufannnn"},"content":"For example, running the command `free` will return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":242,"author":{"gitId":"Yufannnn"},"content":"\u003e Next free day: 02/15/2023","lastModifiedDate":"2023-01-30"},{"lineNumber":243,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":244,"author":{"gitId":"Yufannnn"},"content":"### Mass Delete Done Tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":245,"author":{"gitId":"Yufannnn"},"content":"The `massDelete` command allows you to delete all the done tasks in your task list.","lastModifiedDate":"2023-01-30"},{"lineNumber":246,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":247,"author":{"gitId":"Yufannnn"},"content":"For example, running the command `free` will return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":248,"author":{"gitId":"Yufannnn"},"content":"\u003e I have deleted all the tasks that have been marked as done.","lastModifiedDate":"2023-01-30"},{"lineNumber":249,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":250,"author":{"gitId":"Yufannnn"},"content":"### Sort Tasks by Category","lastModifiedDate":"2023-01-30"},{"lineNumber":251,"author":{"gitId":"Yufannnn"},"content":"The `sort` command allows you to sort all the events in your task list by categories.","lastModifiedDate":"2023-01-30"},{"lineNumber":252,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":253,"author":{"gitId":"Yufannnn"},"content":"For example, running the command, `sort`, will return the following output:","lastModifiedDate":"2023-01-30"},{"lineNumber":254,"author":{"gitId":"Yufannnn"},"content":"\u003e Here are all your Deadline Task:","lastModifiedDate":"2023-01-30"},{"lineNumber":255,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[D][ ] grade all students\u0027 homework ( by: Jan 16 2023 15:00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":256,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[D][ ] do Assignment 1 ( by: Jan 19 2023 23:59 )","lastModifiedDate":"2023-01-30"},{"lineNumber":257,"author":{"gitId":"Yufannnn"},"content":"\u003e ","lastModifiedDate":"2023-01-30"},{"lineNumber":258,"author":{"gitId":"Yufannnn"},"content":"\u003e Here are all your Event Task:","lastModifiedDate":"2023-01-30"},{"lineNumber":259,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[E][ ] project team meeting ( from: Jan 17 2023 15:00 to Jan 17 2023 17:00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":260,"author":{"gitId":"Yufannnn"},"content":"\u003e ","lastModifiedDate":"2023-01-30"},{"lineNumber":261,"author":{"gitId":"Yufannnn"},"content":"\u003e Here are all your Fixed Duration Task:","lastModifiedDate":"2023-01-30"},{"lineNumber":262,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[F][X] exercise ( duration: 1h )","lastModifiedDate":"2023-01-30"},{"lineNumber":263,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[F][ ] Coding Time Practice ( duration: 2h )","lastModifiedDate":"2023-01-30"},{"lineNumber":264,"author":{"gitId":"Yufannnn"},"content":"\u003e ","lastModifiedDate":"2023-01-30"},{"lineNumber":265,"author":{"gitId":"Yufannnn"},"content":"\u003e Here are all your Todo Task:","lastModifiedDate":"2023-01-30"},{"lineNumber":266,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[T][ ] manage hoemework files","lastModifiedDate":"2023-01-30"},{"lineNumber":267,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[T][ ] buy milk","lastModifiedDate":"2023-01-30"},{"lineNumber":268,"author":{"gitId":"Yufannnn"},"content":"\u003e 3. \\[T][ ] mop the floor","lastModifiedDate":"2023-01-30"},{"lineNumber":269,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":270,"author":{"gitId":"Yufannnn"},"content":"### View Tasks on a Given Date","lastModifiedDate":"2023-01-30"},{"lineNumber":271,"author":{"gitId":"Yufannnn"},"content":"The `view \u003cDate\u003e` command allows you to view all the tasks on a given date. It takes in a single argument which is the date in the format of DD/MM/YYYY.","lastModifiedDate":"2023-01-30"},{"lineNumber":272,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":273,"author":{"gitId":"Yufannnn"},"content":"For example, runing the command, `view 16/01/2023` would display all tasks on January 16th, 2023 and return the following output: ","lastModifiedDate":"2023-01-30"},{"lineNumber":274,"author":{"gitId":"Yufannnn"},"content":"\u003e Here are the tasks on the specified date:","lastModifiedDate":"2023-01-30"},{"lineNumber":275,"author":{"gitId":"Yufannnn"},"content":"\u003e 1. \\[D][ ] grade homework of students ( by: Jan 16 2023 15:00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":276,"author":{"gitId":"Yufannnn"},"content":"\u003e 2. \\[E][ ] do Statistic Assignment ( from: Jan 16 2023 16:00 to: Jan 16 2023 19:00 )","lastModifiedDate":"2023-01-30"},{"lineNumber":277,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":278,"author":{"gitId":"Yufannnn"},"content":"### Bye","lastModifiedDate":"2023-01-30"},{"lineNumber":279,"author":{"gitId":"Yufannnn"},"content":"The `bye` command allows you to exit the task list application.","lastModifiedDate":"2023-01-30"},{"lineNumber":280,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":281,"author":{"gitId":"Yufannnn"},"content":"## Miscellaneous ","lastModifiedDate":"2023-01-30"},{"lineNumber":282,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":283,"author":{"gitId":"Yufannnn"},"content":"### Acceptable Formats for `\u003cDateTime\u003e`","lastModifiedDate":"2023-01-30"},{"lineNumber":284,"author":{"gitId":"Yufannnn"},"content":"- ‚ÄúMMM dd yyyy HH:mm‚Äù, e.g. `Aug 10 2022 13:30`","lastModifiedDate":"2023-01-30"},{"lineNumber":285,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúdd/MM/yyyy HH:mm‚Äù, e.g. `10/08/2022 13:30`","lastModifiedDate":"2023-01-30"},{"lineNumber":286,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúyyyy/MM/dd HH:mm‚Äù, e.g. `2022/08/10 13:30`","lastModifiedDate":"2023-01-30"},{"lineNumber":287,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúyyyy/MM/dd‚ÄôT‚ÄôHH:mm‚Äù, e.g. `2022/08/10T13:30`","lastModifiedDate":"2023-01-30"},{"lineNumber":288,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúyyyy-MM-dd HH:mm‚Äù, e.g. `2022-08-10 13:30`","lastModifiedDate":"2023-01-30"},{"lineNumber":289,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúdd MMM yyyy HH:mm‚Äù, e.g. `10 Aug 2022 13:30`","lastModifiedDate":"2023-01-30"},{"lineNumber":290,"author":{"gitId":"Yufannnn"},"content":"- ‚ÄúMMM dd, yyyy HH:mm‚Äù, e.g. `Aug 10, 2022 13:30`","lastModifiedDate":"2023-01-30"},{"lineNumber":291,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":292,"author":{"gitId":"Yufannnn"},"content":"### Acceptable Formats for `\u003cDate\u003e`","lastModifiedDate":"2023-01-30"},{"lineNumber":293,"author":{"gitId":"Yufannnn"},"content":"- ‚ÄúMMM dd yyyy‚Äù, e.g. `Aug 10 2022`","lastModifiedDate":"2023-01-30"},{"lineNumber":294,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúdd/MM/yyyy‚Äù, e.g. `10/08/2022`","lastModifiedDate":"2023-01-30"},{"lineNumber":295,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúyyyy/MM/dd‚Äù, e.g. `2022/08/10`","lastModifiedDate":"2023-01-30"},{"lineNumber":296,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúyyyy-MM-dd‚Äù, e.g. `2022-08-10`","lastModifiedDate":"2023-01-30"},{"lineNumber":297,"author":{"gitId":"Yufannnn"},"content":"- ‚Äúdd MMM yyyy‚Äù, e.g. `10 Aug 2022`","lastModifiedDate":"2023-01-30"},{"lineNumber":298,"author":{"gitId":"Yufannnn"},"content":"- ‚ÄúMMM dd, yyyy‚Äù, e.g. `Aug 10, 2022`","lastModifiedDate":"2023-01-30"},{"lineNumber":299,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":300,"author":{"gitId":"Yufannnn"},"content":"### Acceptable Formats for `\u003cDuration\u003e`","lastModifiedDate":"2023-01-30"},{"lineNumber":301,"author":{"gitId":"Yufannnn"},"content":"- `PT20.345S` -\u003e \"20.345 seconds\"","lastModifiedDate":"2023-01-30"},{"lineNumber":302,"author":{"gitId":"Yufannnn"},"content":"- `PT15M`     -\u003e \"15 minutes\" (where a minute is 60 seconds)","lastModifiedDate":"2023-01-30"},{"lineNumber":303,"author":{"gitId":"Yufannnn"},"content":"- `PT10H`     -\u003e \"10 hours\" (where an hour is 3600 seconds)","lastModifiedDate":"2023-01-30"},{"lineNumber":304,"author":{"gitId":"Yufannnn"},"content":"- `P2D`       -\u003e \"2 days\" (where a day is 24 hours or 86400 seconds)","lastModifiedDate":"2023-01-30"},{"lineNumber":305,"author":{"gitId":"Yufannnn"},"content":"- `P2DT3H4M`  -\u003e \"2 days, 3 hours and 4 minutes\"","lastModifiedDate":"2023-01-30"},{"lineNumber":306,"author":{"gitId":"Yufannnn"},"content":"- `P-6H3M`  -\u003e \"-6 hours and +3 minutes\"","lastModifiedDate":"2023-01-30"},{"lineNumber":307,"author":{"gitId":"Yufannnn"},"content":"- `-P6H3M`    -\u003e \"-6 hours and -3 minutes\"","lastModifiedDate":"2023-01-30"},{"lineNumber":308,"author":{"gitId":"Yufannnn"},"content":"- `-P-6H+3M`  -\u003e \"+6 hours and -3 minutes\"","lastModifiedDate":"2023-01-30"},{"lineNumber":309,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":310,"author":{"gitId":"Yufannnn"},"content":"**Caution:** Avoid from modifying the program data in the data file.","lastModifiedDate":"2023-01-30"},{"lineNumber":311,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":312,"author":{"gitId":"Yufannnn"},"content":"## Useful Resources","lastModifiedDate":"2023-01-30"},{"lineNumber":313,"author":{"gitId":"Yufannnn"},"content":"1. [CheckStyle Tutorial](https://se-education.org/guides/tutorials/checkstyle.html)","lastModifiedDate":"2023-01-30"},{"lineNumber":314,"author":{"gitId":"Yufannnn"},"content":"2. [Text UI Testing Tutorial](https://se-education.org/guides/tutorials/textUiTesting.html)","lastModifiedDate":"2023-01-30"},{"lineNumber":315,"author":{"gitId":"Yufannnn"},"content":"3. [Working with Jar files Tutorial](https://se-education.org/guides/tutorials/jar.html)","lastModifiedDate":"2023-01-30"},{"lineNumber":316,"author":{"gitId":"Yufannnn"},"content":"4. [Gradle Tutorial](https://se-education.org/guides/tutorials/gradle.html)","lastModifiedDate":"2023-01-30"},{"lineNumber":317,"author":{"gitId":"Yufannnn"},"content":"5. [JavaFX Tutorial](https://se-education.org/guides/tutorials/javaFx.html)","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Yufannnn":301,"-":16}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"@rem limitations under the License.","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-14"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"@rem","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"@rem ##########################################################################","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2023-01-14"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2023-01-14"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2023-01-14"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2023-01-14"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2023-01-14"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2023-01-14"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2023-01-14"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2023-01-14"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"@rem Find java.exe","lastModifiedDate":"2023-01-14"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2023-01-14"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2023-01-14"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2023-01-14"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2023-01-14"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-14"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-14"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"goto fail","lastModifiedDate":"2023-01-14"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":":findJavaFromJavaHome","lastModifiedDate":"2023-01-14"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2023-01-14"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2023-01-14"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2023-01-14"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2023-01-14"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"echo.","lastModifiedDate":"2023-01-14"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2023-01-14"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"echo location of your Java installation.","lastModifiedDate":"2023-01-14"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"goto fail","lastModifiedDate":"2023-01-14"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":":execute","lastModifiedDate":"2023-01-14"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"@rem Setup the command line","lastModifiedDate":"2023-01-14"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2023-01-14"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"@rem Execute Gradle","lastModifiedDate":"2023-01-14"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2023-01-14"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":":end","lastModifiedDate":"2023-01-14"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2023-01-14"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2023-01-14"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":":fail","lastModifiedDate":"2023-01-14"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2023-01-14"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2023-01-14"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2023-01-14"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"exit /b 1","lastModifiedDate":"2023-01-14"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":":mainEnd","lastModifiedDate":"2023-01-14"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2023-01-14"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":":omega","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":89}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" * The main Duke class to run","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private TaskList list;","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private final Ui ui;","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * The constructor that takes in a String filePath that specifies the path for the storage file.","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param filePath Specifies the path for the storage file","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        // Initialize the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        this.list \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        // Initialize the user interface","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        // Initialize the storage object","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            // Attempt to load tasks from storage","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"            this.list \u003d this.storage.load();","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2023-01-13"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"            // Handle invalid input exception","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            this.ui.displayWithBar(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"            this.list \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        } catch (StorageFileException e) {","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"            // Handle storage file exception","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"            this.ui.displayWithBar(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"            // Throw a runtime exception","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * Gets the response from Duke","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * @param input User input","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * @return Response from Duke","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-01-11"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"            // reset the ui","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            this.ui.reset();","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"            // parse the input and create a command","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"            // execute the command","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"            command.execute(this.list, this.ui, this.storage);","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"            // return the response from the ui","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            return this.ui.getResponse();","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-13"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"            // append the error message to the ui\u0027s response","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"            this.ui.appendResponse(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            return this.ui.getResponse();","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":59,"-":12}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * A more specific instruction class that encapsulates the action of adding a task","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" * into the given TaskList.","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final DukeTask task;","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final static String ADDED_TASK_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * The constructor of AddTaskCommand that takes in the task to be added.","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param task The task to be added","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    public AddTaskCommand(DukeTask task) {","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Execute the command to add a task to the task list, save the task list to storage, and display a message to the user.","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks the task list to add the task to","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @param ui the user interface to display a message to the user","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @param storage the storage to save the task list to","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @throws StorageFileException if there is an error saving the task list to storage","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws StorageFileException {","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        // Add the task to the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        tasks.addTask(this.task);","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        // Save the task list to storage","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        // Display a message to the user that the task was added to the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        String message \u003d String.format(ADDED_TASK_MESSAGE, this.task, tasks.getNoOfTasks());","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * Compares this object to the specified object.","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * @param obj the object to compare with","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the objects are the same; false otherwise.","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        if (!(obj instanceof AddTaskCommand)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-16"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        AddTaskCommand ddlObj \u003d (AddTaskCommand) obj;","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        return this.task.equals(ddlObj.task);","lastModifiedDate":"2023-01-16"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the AddTaskCommand in the format \"Add Task: task\".","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the AddTaskCommand","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        return \"Add Task: \" + this.task;","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":68,"-":8}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * An abstract instruction class encapsulating a user input instruction in Duke, which can be extended","lastModifiedDate":"2023-01-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * by more specific input instructions like addToDoInstruction, ExitInstructions, etc.","lastModifiedDate":"2023-01-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * Indicates whether the Command is the Exit Command.","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @return whether the command is the exit command.","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        return false;","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     * The execute method is responsible for executing the command.","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks the task list where the command will be executed on","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * @param ui the user interface where the result of the command will be displayed","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * @param storage the storage where the task list will be saved","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException if there is any error during the execution of the command","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":24,"-":9}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.ErrorMessage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A \"delete\" instruction that remove a particular task with the given index in the TaskList. `","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private final static String TASK_REMOVED_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n %s \\nNow you have %d tasks in the list.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DeleteCommand that takes in the index of the task to be deleted.","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex the index of the task to be deleted","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given list is empty.","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given list is empty","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    public boolean isEmpty(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        return list.getNoOfTasks() \u003d\u003d 0;","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list","lastModifiedDate":"2023-01-13"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given index is valid.","lastModifiedDate":"2023-01-13"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        return this.taskIndex \u003e\u003d 0 \u0026\u0026 this.taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * Remove a particular task with the given index in the TaskList and display","lastModifiedDate":"2023-01-13"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * the relevant information of the task and the remaining TaskList.","lastModifiedDate":"2023-01-13"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws Exception when the user inputs invalid instruction","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        if (isEmpty(tasks)) {","lastModifiedDate":"2023-01-14"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"            //if the task list is empty, throw an exception","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d ErrorMessage.TASK_LIST_EMPTY_ERROR + ErrorMessage.ADD_MORE_TASKS;","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-14"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"            //if the index passed is not valid, throw an exception","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d String.format(ErrorMessage.INVALID_INDEX_ERROR, tasks.getNoOfTasks());","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-13"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"            //delete the task from the list, store the task that was deleted","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"            DukeTask deletedTask \u003d tasks.deleteTask(this.taskIndex);","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"            //create a message that the task has been removed and the number of tasks remaining","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d String.format(TASK_REMOVED_MESSAGE, deletedTask.toString(), tasks.getNoOfTasks());","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            //append the message to the UI","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        //save the updated task list to storage","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":81}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":" * An ExitCommand class that encapsulates the event of terminating the Duke program.","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private final static String GOODBYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"     * Displays the goodbye message and terminate the program.","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        // Send goodbye message to the user interface","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(GOODBYE_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Indicates that this Command is the exit Command.","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @return always return true","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-14"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        return true;","lastModifiedDate":"2023-01-14"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":36}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":" * A FindCommand class that take in a description and find all tasks that match the given","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * description.","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final String[] descriptions;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final static String MATCHING_TASKS_MESSAGE \u003d \"Here are the tasks matching \\\"%s\\\" :\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final static String NO_MATCHING_TASKS_MESSAGE \u003d \"No tasks matching \\\"%s\\\" were found.\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * The constructor of FinaCommand that takes in the description of the tasks to be found.","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param descriptions The description of the Task to be found.","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public FindCommand(String... descriptions) {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        this.descriptions \u003d descriptions;","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * Executes the command and displays the matched tasks based on the provided descriptions.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks TaskList containing all the tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * @param ui Ui object for displaying the matched tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param storage Storage object for accessing the storage","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        for (String description : this.descriptions) {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            // Get the matched tasks based on the provided description","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"            TaskList matchedTaskList \u003d getMatchedTasks(tasks, description);","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"            // Append the matched tasks message for the current description","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"            message.append(getMatchedTasksMessage(matchedTaskList, description));","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        // Display the final message containing matched tasks for all the descriptions","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(message.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * This method takes in a task list and a description as input and returns a task list containing tasks that match","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     * the given description.","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks - the task list to be searched","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * @param description - the description to be searched for","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * @return - a task list containing tasks that match the given description","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    private TaskList getMatchedTasks(TaskList tasks, String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        TaskList matchedTaskList \u003d new TaskList();","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        for (DukeTask task : tasks.getTasks()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"            // check if each task matches the given description","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"            if (task.matches(description)) {","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"                matchedTaskList.addTask(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        return matchedTaskList;","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     * Gets the message for matched tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * @param matchedTaskList The list of matched tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     * @param description The description used to find the tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"     * @return The message for matched tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    private String getMatchedTasksMessage(TaskList matchedTaskList, String description) {","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        // Initialize a message string","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        String message \u003d \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"        // Check if the matched task list is not empty","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"        if (!matchedTaskList.getTasks().isEmpty()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"            // If there are matched tasks, add them to the message string with a formatted message","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            message \u003d String.format(MATCHING_TASKS_MESSAGE, description) + matchedTaskList + \"\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"            // If there are no matched tasks, add a no matching tasks message to the message string","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"            message \u003d String.format(NO_MATCHING_TASKS_MESSAGE, description);","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"        // return the message string","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"        return message;","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":87}},{"path":"src/main/java/duke/command/FindFreeTimeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" * The FindFreeTimeCommand class that finds the nearest date with no tasks","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"public class FindFreeTimeCommand extends Command {","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private final static String NO_FREE_TIME_MESSAGE \u003d \"No free time found in the next month.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    private final static String NEAREST_FREE_TIME_MESSAGE \u003d \"The nearest free time is on %s.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * Execute the find free time command on the tasklist","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks tasklist","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param ui user interface","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     * @param storage storage","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        // Get the current date","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        LocalDate currentDate \u003d LocalDate.now();","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        // Get the end date as one month from the current date","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        LocalDate endDate \u003d LocalDate.now().plusMonths(1);","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        // Assume the nearest free date is the end date","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        LocalDate nearestFreeDate \u003d endDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        // Iterate through each day in the range of current date to end date","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        while (currentDate.isBefore(endDate) || currentDate.isEqual(endDate)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            // Check if the current day is free","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"            if (isDayFree(currentDate, tasks)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"                // If it is, update the nearest free date","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"                nearestFreeDate \u003d currentDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"            // Move to the next day","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"            currentDate \u003d currentDate.plusDays(1);","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        // If the nearest free date is still the end date, it means there is no free time in the next month","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        if (nearestFreeDate.isAfter(endDate) || nearestFreeDate.isEqual(endDate)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(NO_FREE_TIME_MESSAGE);","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"            // Otherwise, display the nearest free date","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(String.format(NEAREST_FREE_TIME_MESSAGE, nearestFreeDate));","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given date is free of tasks","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     * @param date the date to check","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks the tasklist to check against","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the date is free of tasks, false otherwise","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    private boolean isDayFree(LocalDate date, TaskList tasks) {","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        // Iterate through all tasks in the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c tasks.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            DukeTask task \u003d tasks.getTask(i);","lastModifiedDate":"2023-01-25"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            // Check if the task is a DeadlineTask","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"            if (task instanceof DeadlineTask) {","lastModifiedDate":"2023-01-25"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"                if (isDeadlineTaskScheduledOnDate(date, (DeadlineTask) task)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"                    return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"            // Check if the task is a EventTask","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"            else if (task instanceof EventTask) {","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"                if (isEventTaskScheduledOnDate(date, (EventTask) task)) {","lastModifiedDate":"2023-01-25"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"                    return false;","lastModifiedDate":"2023-01-25"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-25"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"        // If none of the tasks are scheduled on the given date, return true","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"        return true;","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given deadline task is scheduled on the given date.","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"     * @param date the date to check","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"     * @param task the deadline task to check against","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the task is scheduled on the date, false otherwise","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"    private boolean isDeadlineTaskScheduledOnDate(LocalDate date, DeadlineTask task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"        return task.getEndDate().equals(date);","lastModifiedDate":"2023-01-25"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given event task is scheduled on the given date.","lastModifiedDate":"2023-01-25"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"     * @param date the date to check","lastModifiedDate":"2023-01-25"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"     * @param task the event task to check against","lastModifiedDate":"2023-01-25"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the task is scheduled on the date, false otherwise","lastModifiedDate":"2023-01-25"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"    private boolean isEventTaskScheduledOnDate(LocalDate date, EventTask task) {","lastModifiedDate":"2023-01-25"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start \u003d LocalDateTime.of(date, task.getStartDate().toLocalTime());","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end \u003d LocalDateTime.of(date, task.getEndDate().toLocalTime());","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"        // Check if the input date is between the start and end date of the event task","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"        return (start.isAfter(task.getStartDate()) || start.isEqual(task.getStartDate()))","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 (end.isBefore(task.getEndDate()) || end.isEqual(task.getEndDate()));","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"Yufannnn":111}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.ErrorMessage;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     * Enum class to represent different types of help commands.","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private enum helpType {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        NORMAL, DATE, TIME, DURATION","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private final helpType type;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * Initializes the HelpCommand with the corresponding helpType.","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param information The type of help command.","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException If the input is invalid.","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public HelpCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        super();","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"            //convert the string to upper case and try to match with the enum","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"            this.type \u003d helpType.valueOf(information.toUpperCase());","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            //If the input is invalid, throws InvalidInputException","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_HELP_COMMAND_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    private final static String HEADER \u003d \"Here are the available commands and their respective function:\";","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    private final static String PROMPT \u003d \"All the command keywords are case insensitive!\";","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    private final String VALID_DATE_TIME_FORMAT \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"            \"Here are all the valid date time format:\\n\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"            \"MMM d yyyy H:mm, MMM d yyyy HHmm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"                    \"MMM d yyyy HH:mm, yyyy-MM-d H:mm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"                    \"yyyy-MM-d HHmm, yyyy-MM-d HH:mm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"                    \"d/MM/yyyy H:mm, d/MM/yyyy HHmm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"                    \"d/MM/yyyy HH:mm, yyyy/MM/d H:mm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"                    \"yyyy/MM/d HHmm, yyyy/MM/d HH:mm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"                    \"yyyy/MM/d\u0027T\u0027Hm, yyyy/MM/d\u0027T\u0027H:mm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"                    \"yyyy-MM-d H:mm, yyyy-MM-d HHmm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"                    \"yyyy-MM-d HH:mm, d MMM yyyy H:mm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"                    \"d MMM yyyy HHmm, d MMM yyyy HH:mm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"                    \"MMM d, yyyy H:mm, MMM d, yyyy HHmm\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"                    \"MMM d, yyyy HH:mm, d-MM-yyyy H:mm\";","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    private final String VALID_DATE_FORMAT \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"            \"Here are all the valid date time format:\\n\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"                    \"MMM dd yyyy, yyyy-MM-dd\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"                    \"dd/MM/yyyy, yyyy/MM/dd\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"                    \"dd MMM yyyy, MMM dd, yyyy\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"                    \"dd-mm-yyyy\";","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    private final String VAILD_DURATION_FORMAT \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"            \"Here is the correct format to input a duration:\\n\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"                    \"\\\"PT20.345S\\\" -- parses as \\\"20.345 seconds\\\"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"PT15M\\\"     -- parses as \\\"15 minutes\\\" (where a minute is 60 seconds)\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"PT10H\\\"     -- parses as \\\"10 hours\\\" (where an hour is 3600 seconds)\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"P2D\\\"       -- parses as \\\"2 days\\\" (where a day is 24 hours or 86400 seconds)\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"P2DT3H4M\\\"  -- parses as \\\"2 days, 3 hours and 4 minutes\\\"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"P-6H3M\\\"    -- parses as \\\"-6 hours and +3 minutes\\\"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"-P6H3M\\\"    -- parses as \\\"-6 hours and -3 minutes\\\"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"-P-6H+3M\\\"  -- parses as \\\"+6 hours and -3 minutes\\\"\\n\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"            \"The letter \\\"P\\\" is next in upper or lower case. There are then four sections, \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"            \"each consisting of a number and a suffix. The sections have suffixes in ASCII of \\\"D\\\", \\\"H\\\", \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"            \"\\\"M\\\" and \\\"S\\\" for days, hours, minutes and seconds, accepted in upper or lower case. \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            \"The suffixes must occur in order. The ASCII letter \\\"T\\\" must occur before the first occurrence, \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"            \"if any, of an hour, minute or second section. At least one of the four sections must be present, \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"            \"and if \\\"T\\\" is present there must be at least one section after the \\\"T\\\". The number part of each \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            \"section must consist of one or more ASCII digits. The number may be prefixed by the ASCII negative\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"            \"or positive symbol. The number of days, hours and minutes must parse to an long. The number of \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"            \"seconds must parse to an long with optional fraction. The decimal point may be either a dot or a comma. \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"            \"The fractional part may have from zero to 9 digits.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     * Enum to represent the different types of commands supported by the application","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    private enum CommandType {","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"        BYE(\"bye\", \"Exits the program\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"        DEADLINE(\"deadline [description] /by [date time]\", \"Adds a deadline task with its \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"                \"deadline specified, type \\\"help time\\\" to check all the available date format\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        DELETE(\"delete [taskIndex]\", \"Deletes the task specified by the given index\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"        EVENT(\"event [description] /by [date time] /from [date time]\", \"Adds a event task \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"                \"with its starting and ending date specified, type \\\"help time\\\" \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"                \"to check all the available date format\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"        FIND(\"find [keyword]\", \"Lists all the events that matches the input keyword. \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"                \"(case insensitive)\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"        FIXED(\"fixed [description] /within [duration]\", \"Adds a fixed duration task with its \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"                \"duration specified, type \\\"help time\\\" to check the correct format of a duration\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"        Free(\"free\",\"Finds the next free date in the next month\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"        HELP(\"help\", \"Shows help menu\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"        LIST(\"list\", \"Displays all tasks in the current Task List\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"        MARK(\"mark [taskIndex]\", \"Marks the task specified by the given index as done\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"        MASS_DELETE(\"massDelete\", \"Deletes all the tasks that have been marked as done\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"        SORT(\"sort\", \"Sorts all the event in the task list according to their type\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"        TODO(\"todo [description]\", \"Adds a todo task\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"        UNMARK(\"unmark [taskIndex]\", \"Marks the task specified by the given index as undone\"),","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"        UPDATE(\"update [taskIndex] [description]\", \"Updates the description of the task specified \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"                \"by the given index to be the new description\"),","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"        VIEW(\"view [date]\", \"Lists all the Deadline tasks and Event tasks that takes \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"                \"place on the given day, type \\\"help date\\\" to check all the available date format\");","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"    private final String command;","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        private final String description;","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"        /**","lastModifiedDate":"2023-01-27"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"         * Constructor for the CommandType enum","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"         *","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"         * @param command     the command string that the user inputs","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"         * @param description the description of the command","lastModifiedDate":"2023-01-27"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"         */","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"        CommandType(String command, String description) {","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"            this.command \u003d command;","lastModifiedDate":"2023-01-24"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"            this.description \u003d description;","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"        /**","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"         * Gets the command string.","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"         *","lastModifiedDate":"2023-01-24"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"         * @return the command string","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"         */","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"        public String getCommand() {","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"            return command;","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"        /**","lastModifiedDate":"2023-01-24"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"         * Gets the command description.","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"         *","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"         * @return the command description","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"         */","lastModifiedDate":"2023-01-24"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"        public String getDescription() {","lastModifiedDate":"2023-01-24"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"            return description;","lastModifiedDate":"2023-01-24"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"     * Displays the available commands and their respective function.","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":151,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":152,"author":{"gitId":"Yufannnn"},"content":"        // Initialize a StringBuilder to store the help message","lastModifiedDate":"2023-01-27"},{"lineNumber":153,"author":{"gitId":"Yufannnn"},"content":"        if (type \u003d\u003d helpType.NORMAL) {","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"Yufannnn"},"content":"            StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"            message.append(HEADER).append(\"\\n\\n\");","lastModifiedDate":"2023-01-26"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"            // Iterate through the CommandType enum and append the command and its description to the message","lastModifiedDate":"2023-01-27"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"            for (CommandType commandType : CommandType.values()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"                message.append(\"- \").append(commandType.getCommand()).append(\" : \")","lastModifiedDate":"2023-01-24"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"                        .append(commandType.getDescription()).append(\"\\n\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":163,"author":{"gitId":"Yufannnn"},"content":"            message.append(PROMPT);","lastModifiedDate":"2023-01-26"},{"lineNumber":164,"author":{"gitId":"Yufannnn"},"content":"            // Send the message to the UI","lastModifiedDate":"2023-01-27"},{"lineNumber":165,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":166,"author":{"gitId":"Yufannnn"},"content":"        } if (type \u003d\u003d helpType.DATE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(VALID_DATE_FORMAT);","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"Yufannnn"},"content":"        } else if (type \u003d\u003d helpType.TIME) {","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(VALID_DATE_TIME_FORMAT);","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"Yufannnn"},"content":"        } else if (type \u003d\u003d helpType.DURATION) {","lastModifiedDate":"2023-01-28"},{"lineNumber":171,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(VAILD_DURATION_FORMAT);","lastModifiedDate":"2023-01-28"},{"lineNumber":172,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":173,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":174,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Yufannnn":174}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":" * A ListCommand class that encapsulates the action of displaying all the tasks on the TaskList.","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private final static String NO_TASKS_MESSAGE \u003d \"There are no tasks in your list.\";","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final static String TASK_LIST_MESSAGE \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * Displays all the tasks with their respective types and status.","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks   The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @param ui      The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-14"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        // check if there are no tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        if (tasks.getNoOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(NO_TASKS_MESSAGE);","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            return;","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-14"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        // append the final task list to the UI","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(TASK_LIST_MESSAGE + tasks.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":32}},{"path":"src/main/java/duke/command/MarkAsDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.ErrorMessage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A MarkAsDoneCommand class that encapsulates the actions of changing the status","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" * of a Task to be done.","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class MarkAsDoneCommand extends Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private final static String MARKED_AS_DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n \";","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of MarkAsDoneCommand that takes in the index of the task to marked.","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be marked","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public MarkAsDoneCommand(int taskIndex) {","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list.","lastModifiedDate":"2023-01-13"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given index is valid","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * Marks the list with the given index as done.","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception if the list is empty","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     *     or the given index is our of range","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"            // throw an error message if task list is empty","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d ErrorMessage.TASK_LIST_EMPTY_ERROR + ErrorMessage.ADD_MORE_TASKS;","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"            // throw an error message if the input index is invalid","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d String.format(ErrorMessage.INVALID_INDEX_ERROR, tasks.getNoOfTasks());","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2023-01-11"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"            // Mark the task as done","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"            DukeTask currentTask \u003d tasks.getTask(this.taskIndex);","lastModifiedDate":"2023-01-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            currentTask.markAsDone();","lastModifiedDate":"2023-01-11"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d MARKED_AS_DONE_MESSAGE + currentTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"            // Save the updated task list to storage","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"            storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-11"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":58,"-":12}},{"path":"src/main/java/duke/command/MassDeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class MassDeleteCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    private final static String DELETE_MESSAGE \u003d \"I have deleted all the tasks that have been marked as done.\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private final static String REMAINING_TASKS_MESSAGE \u003d \"Here are the remaining tasks in your list:\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     * Executes the command to delete all tasks that have been marked as done.","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception if there is an error in the execution of the command","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        // Delete done tasks from the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        deleteDoneTasks(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        // Create a response message containing the updated task list","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        String responseMessage \u003d createResponseMessage(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        // Append the response message to the UI","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(responseMessage);","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * Deletes all tasks that have been marked as done.","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    private void deleteDoneTasks(TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        // loop through all tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c tasks.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"            // check if task at index i is done","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            if (tasks.getTask(i).getStatus()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"                // if task is done, delete the task from the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"                tasks.deleteTask(i);","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * Creates a response message for the MassDeleteCommand execution.","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * @return The response message for the MassDeleteCommand execution","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    private String createResponseMessage(TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder responseMessage \u003d new StringBuilder(DELETE_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        //append the message to notify the user of the remaining tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        responseMessage.append(REMAINING_TASKS_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        //loop through the list of remaining tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c tasks.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"            //append the task number, task and a newline character to the response message","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"            responseMessage.append(i + 1).append(\".\").append(tasks.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        //return the response message","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        return responseMessage.toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Yufannnn":67}},{"path":"src/main/java/duke/command/ReminderCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"public class ReminderCommand extends Command{","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"    private static final String REMINDER_MESSAGE \u003d \"Here are the upcoming deadlines:\\n\";","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     * Displays all the upcoming deadlines.","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        //Create a new TaskList to store all the tasks with deadlines","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        TaskList deadlineList \u003d tasks.extractDeadlines();","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        //Create a response message for the tasks with deadlines","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        String responseMessage \u003d createResponseMessage(deadlineList);","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        //append the response message to the UI","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(responseMessage);","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Create the response message for the ReminderCommand.","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param deadlineList The TaskList that contains all the upcoming deadlines","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @return The response message","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    private String createResponseMessage(TaskList deadlineList) {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        //Creating a new string builder to store the response message","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder responseMessage \u003d new StringBuilder(REMINDER_MESSAGE);","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        //Iterating through the tasks in the deadlineList","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c deadlineList.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"            //Appending the task number, task details and newline character to the response message","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"            responseMessage.append(i + 1).append(\".\").append(deadlineList.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        //Returning the final response message as a string","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        return responseMessage.toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"Yufannnn":46}},{"path":"src/main/java/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * The SortCommand class is a command class that sorts all the tasks in the TaskList into different categories.","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" * The categories are: Deadline Task, Event Task, Fixed Duration Task, Todo Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * The sorted tasks are then saved in storage, and the sorted tasks are displayed to the user.","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"public class SortCommand extends Command{","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final static String NO_TASKS_MESSAGE \u003d \"There are no tasks in your list.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * Executes the SortCommand.","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The TaskList that contains all the tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The Ui that handles the display of the sorted tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage that saves the sorted tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @throws StorageFileException If there is an error in reading or writing to the storage file.","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws StorageFileException {","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        // check if there are no tasks","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        if (tasks.getNoOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(NO_TASKS_MESSAGE);","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"            return;","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        // categorize all the tasks in the TaskList into different categories","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        TaskList[] listOfList \u003d tasks.categorizeTask();","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        // clear all the tasks in the TaskList","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        tasks.clearTasks();","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        // add the sorted tasks back to the TaskList","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        for (TaskList list : listOfList) {","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"            for (DukeTask task : list.getTasks()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"                tasks.addTask(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        // save the sorted tasks in storage","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        // append the final task list to the UI","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"Here are all your Deadline Task:\\n\" + listOfList[0] + \"\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"Here are all your Event Task:\\n\" + listOfList[1] + \"\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"Here are all your Fixed Duration Task:\\n\" + listOfList[2] + \"\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"Here are all your Todo Task:\\n\" + listOfList[3]);","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Yufannnn":55}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.ErrorMessage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A UnmarkCommand class that encapsulates the actions of changing the status","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" * of a Task to be not done.","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private static final String UNMARKED_TASK_MESSAGE \u003d \"OK, I\u0027ve marked this task as not done yet:\\n \";","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of UnmarkCommand that takes in the index of the task to unmarked.","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be marked","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public UnmarkCommand(int taskIndex) {","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list.","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * Marks the list with the given index as not done.","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the task to be manipulated","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The ui Object used to display information","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage Object used to save and load the TaskList","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception if the list is empty or the given index is our of range","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"            // throw an error message if task list is empty","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d ErrorMessage.TASK_LIST_EMPTY_ERROR + ErrorMessage.ADD_MORE_TASKS;","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"            // throw an error message if the input index is invalid","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d String.format(ErrorMessage.INVALID_INDEX_ERROR, tasks.getNoOfTasks());","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2023-01-11"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"            // get the task at the input index and unmark it","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"            DukeTask currentTask \u003d tasks.getTask(this.taskIndex);","lastModifiedDate":"2023-01-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            currentTask.unmark();","lastModifiedDate":"2023-01-11"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"            // construct success message","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d UNMARKED_TASK_MESSAGE + currentTask;","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-11"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        // save the updated task list","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":57,"-":14}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.ErrorMessage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"public class UpdateCommand extends Command{","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final String information;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private static final String UPDATE_TASK_MESSAGE \u003d \"Nice! I\u0027ve updated the description of this task:\\n %s\";","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of UpdateCommand that takes in the index of the task to marked.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be marked","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param information The new information of the task","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public UpdateCommand(int taskIndex, String information) {","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.information \u003d information;","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the given list is empty.","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given list is empty","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public boolean isEmpty(TaskList list) {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        return list.getNoOfTasks() \u003d\u003d 0;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     * Checks whether the index is valid with respect to the given list.","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * @param list The given list to be checked","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the given index is valid","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    public boolean isValidIndex(TaskList list) {","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c list.getNoOfTasks();","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * Execute the update command on the tasklist","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * @param ui user interface","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * @param storage storage","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        // Check if task list is empty","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        if (isEmpty(tasks)) {","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d ErrorMessage.TASK_LIST_EMPTY_ERROR + ErrorMessage.ADD_MORE_TASKS;","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        // Check if the task index is valid","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        if (!isValidIndex(tasks)) {","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"            String errorMessage \u003d String.format(ErrorMessage.INVALID_INDEX_ERROR,","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"                    tasks.getNoOfTasks());","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        // Get the task at the specified index and update its information","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        DukeTask currentTask \u003d tasks.getTask(this.taskIndex);","lastModifiedDate":"2023-01-23"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        currentTask.updateInformation(this.information);","lastModifiedDate":"2023-01-23"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        // Construct success message and pass it to UI","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        String message \u003d String.format(UPDATE_TASK_MESSAGE, currentTask);","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(message);","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"        // Save the updated task list to storage","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"        storage.saveTaskList(tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Yufannnn":77}},{"path":"src/main/java/duke/command/ViewScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A ViewScheduleCommand class that takes in a date and finds all tasks that take place on that date.","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"public class ViewScheduleCommand extends Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final LocalDate date;","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private static final String TASK_ON_DATE_MESSAGE \u003d \"Here are the tasks on the specified date:\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private static final String NO_TASK_ON_DATE_ERROR \u003d \"There are no tasks on the specified date.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * The constructor of ViewScheduleCommand that takes in the date of the tasks to be found.","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date of the tasks to be found.","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public ViewScheduleCommand(LocalDate date) {","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * Displays all the tasks that take place on the specified date.","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The user TaskList that contains all the tasks to be searched","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param ui The Ui object used to display information","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * @param storage The Storage object used to save and load the TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException when no tasks are found on the specified date","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        //Find tasks that match the specified date","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        TaskList matchedTasks \u003d findTasksOnDate(tasks, this.date);","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        //If no tasks are found on the specified date, throw an exception","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        if (matchedTasks.isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(NO_TASK_ON_DATE_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"            //Otherwise, display the tasks found on the specified date","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"            String message \u003d TASK_ON_DATE_MESSAGE + matchedTasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"            ui.appendResponse(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     * Finds all tasks in the given {@code tasks} list that match the given {@code date}","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The list of tasks to search through","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date to match the tasks against","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @return A new TaskList containing all tasks that match the given date","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    private TaskList findTasksOnDate(TaskList tasks, LocalDate date) {","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        TaskList matchedTasks \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        //iterate through all tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        for (DukeTask task : tasks.getTasks()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"            //check if task matches the given date","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"            if (task.matchesDate(date)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"                //add task to the list of matched tasks","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"                matchedTasks.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        return matchedTasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":72}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.exception;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-01-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * An abstract Exception class encapsulating an exception in Duke, which can be extended","lastModifiedDate":"2023-01-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * by more specific exceptions like invalidInputException","lastModifiedDate":"2023-01-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeException with the error message to be printed.","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     * @param errorMessage  The error message to be printed","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":7,"-":10}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.exception;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * A custom exception that encapsulates the message when user input invalid instruction.","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"public class InvalidInputException extends DukeException {","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeException with the error message to be printed.","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     * @param errorMessage  The error message to be printed","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public InvalidInputException(String errorMessage) {","lastModifiedDate":"2023-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":10,"-":6}},{"path":"src/main/java/duke/exception/StorageFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.exception;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * An exception class that encapsulates the exceptions arisen from File operation.","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"public class StorageFileException extends DukeException {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeException with the error message to be printed.","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"     * @param errorMessage The error message to be printed","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    public StorageFileException(String errorMessage) {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":15}},{"path":"src/main/java/duke/parser/Decipherer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.command.AddTaskCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.command.MarkAsDoneCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import duke.command.UpdateCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import duke.command.ViewScheduleCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"import duke.task.FixedDurationTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"import java.time.Duration;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":" * The Decipherer class is responsible for decoding the input string and creating the corresponding command objects.","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":" * It contains methods for decoding different types of commands, including add, update, mark as done, unmark,","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":" * delete, find and search. Each method takes in a string as input and returns a command object or throws an","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":" * InvalidInputException if the input is invalid.","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":" * /","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"public class Decipherer {","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    private static final Pattern emptyStringChecker \u003d Pattern.compile(\"\\\\S.*+\");","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    private static String[] splitString(String information) {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        return information.split(\" \", 2);","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     * Helper method to parse the given string index to an int and return the corresponding index","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * in the TaskList, with an offset of -1.","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @param index The string index of a task","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @return The corresponding index in the TaskList, with an offset of -1","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    private static int getIndex(String index) {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"            //parse the input string as an integer and subtract 1 to convert it to zero-based index","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"            return Integer.parseInt(index) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"            //if the input is not a valid integer, return -1","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"            return -1;","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for an update command.","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index description\".","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     * @return an UpdateCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number or the description is empty","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"    public static UpdateCommand parseUpdateCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        //split the input into index and task description","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        String[] parts \u003d splitString(information);","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        //parse the index and convert it to zero-indexed","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        int index \u003d getIndex(parts[0]);","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"            //if the task description is empty, throw an exception","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            if (parts[1].isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(ErrorMessage.INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"            //if the index is invalid, throw an exception","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"            if (index \u003d\u003d -1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(ErrorMessage.INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"            //return a new UpdateCommand object with the index and task description","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            return new UpdateCommand(index, parts[1].strip());","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"            //if there is an index out of bounds exception, throw an exception","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a mark as done command.","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index\".","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"     * @return an MarkAsDoneCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"    public static MarkAsDoneCommand parseMarkCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"        // Use regular expression to check if the input is a number","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"        Matcher numberChecker \u003d Pattern.compile(\"\\\\d+?\").matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"        if (numberChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"            // convert the input to an integer and decrement by 1","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"            return new MarkAsDoneCommand(Integer.parseInt(information) - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"            // if the input is not a number, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for an unmark command.","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index\".","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"     * @return an UnmarkCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"    public static UnmarkCommand parseUnmarkCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"        // Use regular expression to check if the input is a number","lastModifiedDate":"2023-01-24"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"        Matcher numberChecker \u003d Pattern.compile(\"\\\\d+?\").matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"        if (numberChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"            // convert the input to an integer and decrement by 1","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"            return new UnmarkCommand(Integer.parseInt(information) - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"            // if the input is not a number, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a delete command.","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"index\".","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"     * @return a DeleteCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task index is not a number","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"    public static DeleteCommand parseDeleteCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"        // Use regular expression to check if the input is a number","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"        Matcher numberChecker \u003d Pattern.compile(\"\\\\d+?\").matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"        if (numberChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"            // convert the input to an integer and decrement by 1","lastModifiedDate":"2023-01-24"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"            return new DeleteCommand(Integer.parseInt(information) - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"            // if the input is not a number, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_TASK_INDEX_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a todo task.","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"description\".","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":151,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":152,"author":{"gitId":"Yufannnn"},"content":"     * @return an AddTaskCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":153,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty","lastModifiedDate":"2023-01-24"},{"lineNumber":154,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"    public static AddTaskCommand parseTodoCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.EMPTY_TODO_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"            // create a new TodoTask and return an AddTaskCommand with it","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"            return new AddTaskCommand(new TodoTask(information));","lastModifiedDate":"2023-01-17"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":163,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":164,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":165,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":166,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for a deadline task.","lastModifiedDate":"2023-01-24"},{"lineNumber":167,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"description /by date\"","lastModifiedDate":"2023-01-24"},{"lineNumber":168,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":169,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":170,"author":{"gitId":"Yufannnn"},"content":"     * @return an AddTaskCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":171,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty,","lastModifiedDate":"2023-01-24"},{"lineNumber":172,"author":{"gitId":"Yufannnn"},"content":"     * the input date format is invalid, or the input format is incorrect","lastModifiedDate":"2023-01-24"},{"lineNumber":173,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":174,"author":{"gitId":"Yufannnn"},"content":"    public static AddTaskCommand parseDeadlineCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":175,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":176,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":177,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.EMPTY_DEADLINE_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":178,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":179,"author":{"gitId":"Yufannnn"},"content":"            // Use regular expression to extract the name and date","lastModifiedDate":"2023-01-24"},{"lineNumber":180,"author":{"gitId":"Yufannnn"},"content":"            Matcher dateChecker \u003d Pattern.compile(\"(?\u003cname\u003e.*)/by\\\\s*(?\u003cdate\u003e.*)\").matcher(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":181,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":182,"author":{"gitId":"Yufannnn"},"content":"            if (dateChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":183,"author":{"gitId":"Yufannnn"},"content":"                String name \u003d dateChecker.group(\"name\").trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":184,"author":{"gitId":"Yufannnn"},"content":"                String date \u003d dateChecker.group(\"date\").trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":185,"author":{"gitId":"Yufannnn"},"content":"                try {","lastModifiedDate":"2023-01-17"},{"lineNumber":186,"author":{"gitId":"Yufannnn"},"content":"                    // create a new DeadlineTask and return an AddTaskCommand with it","lastModifiedDate":"2023-01-24"},{"lineNumber":187,"author":{"gitId":"Yufannnn"},"content":"                    return new AddTaskCommand(new DeadlineTask(name, TimeHandler.parseToLocalDateTime(date)));","lastModifiedDate":"2023-01-28"},{"lineNumber":188,"author":{"gitId":"Yufannnn"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":189,"author":{"gitId":"Yufannnn"},"content":"                    // if the input date format is invalid, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":190,"author":{"gitId":"Yufannnn"},"content":"                    throw new InvalidInputException(ErrorMessage.INVALID_DATETIME_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":191,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-17"},{"lineNumber":192,"author":{"gitId":"Yufannnn"},"content":"            } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":193,"author":{"gitId":"Yufannnn"},"content":"                // if the input format is incorrect, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":194,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(ErrorMessage.INVALID_DEADLINE_FORMAT_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":195,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":196,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":197,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":198,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":199,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":200,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for an event task.","lastModifiedDate":"2023-01-24"},{"lineNumber":201,"author":{"gitId":"Yufannnn"},"content":"     * The input string should be in the format of \"description /from start_date /to end_date\"","lastModifiedDate":"2023-01-24"},{"lineNumber":202,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":203,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":204,"author":{"gitId":"Yufannnn"},"content":"     * @return an AddTaskCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":205,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty,","lastModifiedDate":"2023-01-24"},{"lineNumber":206,"author":{"gitId":"Yufannnn"},"content":"     * the input date format is invalid, or the input format is incorrect","lastModifiedDate":"2023-01-24"},{"lineNumber":207,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":208,"author":{"gitId":"Yufannnn"},"content":"    public static AddTaskCommand parseEventCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":209,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":210,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":211,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.EMPTY_EVENT_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":212,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":213,"author":{"gitId":"Yufannnn"},"content":"            // Use regular expression to extract the name, start date, and end date","lastModifiedDate":"2023-01-24"},{"lineNumber":214,"author":{"gitId":"Yufannnn"},"content":"            Matcher intervalChecker \u003d Pattern.compile(\"(?\u003cname\u003e.*)/from(?\u003cfrom\u003e.*)/to(?\u003cto\u003e.*)\")","lastModifiedDate":"2023-01-17"},{"lineNumber":215,"author":{"gitId":"Yufannnn"},"content":"                    .matcher(information);","lastModifiedDate":"2023-01-17"},{"lineNumber":216,"author":{"gitId":"Yufannnn"},"content":"            if (intervalChecker.matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":217,"author":{"gitId":"Yufannnn"},"content":"                String name \u003d intervalChecker.group(\"name\").trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":218,"author":{"gitId":"Yufannnn"},"content":"                String from \u003d intervalChecker.group(\"from\").trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":219,"author":{"gitId":"Yufannnn"},"content":"                String to \u003d intervalChecker.group(\"to\").trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":220,"author":{"gitId":"Yufannnn"},"content":"                try {","lastModifiedDate":"2023-01-17"},{"lineNumber":221,"author":{"gitId":"Yufannnn"},"content":"                    // create a new EventTask and return an AddTaskCommand with it","lastModifiedDate":"2023-01-24"},{"lineNumber":222,"author":{"gitId":"Yufannnn"},"content":"                    return new AddTaskCommand(","lastModifiedDate":"2023-01-17"},{"lineNumber":223,"author":{"gitId":"Yufannnn"},"content":"                            new EventTask(name, TimeHandler.parseToLocalDateTime(from), TimeHandler.parseToLocalDateTime(to)));","lastModifiedDate":"2023-01-28"},{"lineNumber":224,"author":{"gitId":"Yufannnn"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":225,"author":{"gitId":"Yufannnn"},"content":"                    // if the input date format is invalid, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":226,"author":{"gitId":"Yufannnn"},"content":"                    throw new InvalidInputException(ErrorMessage.INVALID_DATETIME_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":227,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-17"},{"lineNumber":228,"author":{"gitId":"Yufannnn"},"content":"            } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":229,"author":{"gitId":"Yufannnn"},"content":"                // if the input format is incorrect, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":230,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(ErrorMessage.INVALID_EVENT_FORMAT_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":231,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":232,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":233,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":234,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":235,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":236,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for finding tasks with certain descriptions.","lastModifiedDate":"2023-01-24"},{"lineNumber":237,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":238,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":239,"author":{"gitId":"Yufannnn"},"content":"     * @return a FindCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":240,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty","lastModifiedDate":"2023-01-24"},{"lineNumber":241,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":242,"author":{"gitId":"Yufannnn"},"content":"    public static FindCommand parseFindCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":243,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":244,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":245,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":246,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":247,"author":{"gitId":"Yufannnn"},"content":"            String[] descriptions \u003d information.split(\" \");","lastModifiedDate":"2023-01-17"},{"lineNumber":248,"author":{"gitId":"Yufannnn"},"content":"            // create a new FindCommand with the array of descriptions","lastModifiedDate":"2023-01-24"},{"lineNumber":249,"author":{"gitId":"Yufannnn"},"content":"            return new FindCommand(descriptions);","lastModifiedDate":"2023-01-17"},{"lineNumber":250,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":251,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":252,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":253,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":254,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the information string for finding tasks on certain date.","lastModifiedDate":"2023-01-24"},{"lineNumber":255,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":256,"author":{"gitId":"Yufannnn"},"content":"     * @param information the string to be decoded","lastModifiedDate":"2023-01-24"},{"lineNumber":257,"author":{"gitId":"Yufannnn"},"content":"     * @return a ViewScheduleCommand object","lastModifiedDate":"2023-01-24"},{"lineNumber":258,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input task description is empty,","lastModifiedDate":"2023-01-24"},{"lineNumber":259,"author":{"gitId":"Yufannnn"},"content":"     * or the input date format is invalid","lastModifiedDate":"2023-01-24"},{"lineNumber":260,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":261,"author":{"gitId":"Yufannnn"},"content":"    public static ViewScheduleCommand parseViewCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":262,"author":{"gitId":"Yufannnn"},"content":"        // check if the input is not empty","lastModifiedDate":"2023-01-24"},{"lineNumber":263,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":264,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":265,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":266,"author":{"gitId":"Yufannnn"},"content":"            try {","lastModifiedDate":"2023-01-17"},{"lineNumber":267,"author":{"gitId":"Yufannnn"},"content":"                // create a new ViewScheduleCommand with the date","lastModifiedDate":"2023-01-24"},{"lineNumber":268,"author":{"gitId":"Yufannnn"},"content":"                return new ViewScheduleCommand(TimeHandler.parseToLocalDate(information));","lastModifiedDate":"2023-01-28"},{"lineNumber":269,"author":{"gitId":"Yufannnn"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":270,"author":{"gitId":"Yufannnn"},"content":"                // if the input date format is invalid, throw an exception","lastModifiedDate":"2023-01-24"},{"lineNumber":271,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(ErrorMessage.INVALID_DATE_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":272,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":273,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":274,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":275,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":276,"author":{"gitId":"Yufannnn"},"content":"    public static HelpCommand parseHelpCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":277,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":278,"author":{"gitId":"Yufannnn"},"content":"            return new HelpCommand(\"normal\");","lastModifiedDate":"2023-01-28"},{"lineNumber":279,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":280,"author":{"gitId":"Yufannnn"},"content":"            return new HelpCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":281,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":282,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":283,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":284,"author":{"gitId":"Yufannnn"},"content":"    public static Command parseFixedDurationCommand(String information) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":285,"author":{"gitId":"Yufannnn"},"content":"        if (!emptyStringChecker.matcher(information).matches()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":286,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.EMPTY_FIXED_DURATION_DESCRIPTION_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":287,"author":{"gitId":"Yufannnn"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":288,"author":{"gitId":"Yufannnn"},"content":"            // Use regular expression to extract the name and duration","lastModifiedDate":"2023-01-28"},{"lineNumber":289,"author":{"gitId":"Yufannnn"},"content":"            Matcher durationChecker \u003d Pattern.compile(\"(?\u003cname\u003e.*)/within\\\\s*(?\u003cduration\u003e.*)\").matcher(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":290,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":291,"author":{"gitId":"Yufannnn"},"content":"            if (durationChecker.matches()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":292,"author":{"gitId":"Yufannnn"},"content":"                String name \u003d durationChecker.group(\"name\").trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":293,"author":{"gitId":"Yufannnn"},"content":"                String duration \u003d durationChecker.group(\"duration\").trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":294,"author":{"gitId":"Yufannnn"},"content":"                try {","lastModifiedDate":"2023-01-28"},{"lineNumber":295,"author":{"gitId":"Yufannnn"},"content":"                    // create a new FixedDurationTask and return an AddTaskCommand with it","lastModifiedDate":"2023-01-28"},{"lineNumber":296,"author":{"gitId":"Yufannnn"},"content":"                    return new AddTaskCommand(new FixedDurationTask(name, Duration.parse(duration)));","lastModifiedDate":"2023-01-28"},{"lineNumber":297,"author":{"gitId":"Yufannnn"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":298,"author":{"gitId":"Yufannnn"},"content":"                    throw new InvalidInputException(ErrorMessage.INVALID_DURATION_FORMAT);","lastModifiedDate":"2023-01-28"},{"lineNumber":299,"author":{"gitId":"Yufannnn"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":300,"author":{"gitId":"Yufannnn"},"content":"            } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":301,"author":{"gitId":"Yufannnn"},"content":"                // if the input format is incorrect, throw an exception","lastModifiedDate":"2023-01-28"},{"lineNumber":302,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(ErrorMessage.INVALID_FIXED_DURATION_FORMAT_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":303,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":304,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":305,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":306,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":306}},{"path":"src/main/java/duke/parser/ErrorMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"public class ErrorMessage {","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"    // Errors related to task description","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"    public static final String EMPTY_DEADLINE_ERROR \u003d \"OOPS!!! The description of a deadline task cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"    public static final String EMPTY_EVENT_ERROR \u003d \"OOPS!!! The description of an event task cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"    public static final String EMPTY_TODO_ERROR \u003d \"OOPS!!! The description of a todo task cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    public static final String EMPTY_FIXED_DURATION_DESCRIPTION_ERROR \u003d \"OOPS!!! The description of \" +","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"            \"a fixed duration task cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_DESCRIPTION_ERROR \u003d \"OOPS!!! The description cannot be empty.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_HELP_COMMAND_ERROR \u003d \"OOPS!!! Unrecognized help Command.\\nPlease try:\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"            \"- help\\n- help date\\n- help time\";","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    // Errors related to task index","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_INDEX_ERROR \u003d \"OOPS!!! The input index is not within the range of [1, %d]. \"","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"            + \"Please input a index that is within the given range\";","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_TASK_INDEX_ERROR \u003d \"OOPS!!! The input task index is not a number. \"","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"            + \"Please input a valid task index.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    // Errors related to date and time","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_DATE_ERROR \u003d \"OOPS!!! The input date format is invalid. \"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"            + \"Type \\\"help date\\\" to check the date format\";","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_DATETIME_ERROR \u003d \"OOPS!!! The input date time format is invalid. \"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"            + \"Type \\\"help date\\\" to check the date time format\";","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_DURATION_FORMAT \u003d \"OOPS!!! The input duration format is invalid. \"","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"            + \"Type \\\"help duration\\\" to check the date time format\";","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_DEADLINE_FORMAT_ERROR \u003d \"OOPS!!! Please input the deadline task in the \"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"            + \"correct format. Example: deadline Assignment 1 /by 15/01/2023 1500\";","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_EVENT_FORMAT_ERROR \u003d \"OOPS!!! Please input the event task in the \"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            + \"correct format. Example: event Team Meeting /from 16/01/2023 1500 /to 16/01/2023 1900\";","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_FIXED_DURATION_FORMAT_ERROR \u003d \"OOPS!!! Please input the fixed duration task in the \"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"            + \"correct format. Example: fixed Time Practice /within 200\";","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    public static final String INVALID_FROM_AND_TO_ERROR \u003d \"OOPS!!! Start date can not be after than the End date\";","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    // Other errors","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    public static final String ADD_MORE_TASKS \u003d \"\\nPlease add in more tasks\";","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    public static final String EMPTY_ERROR \u003d \"OOPS!!! The instruction cannot be empty\";","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    public static final String NO_COMMAND_ERROR_MESSAGE \u003d \"No previous commands to undo.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    public static final String STORAGE_ERROR \u003d \"OOPS!!! There\u0027s something wrong when reading the storage list\";","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    public static final String TASK_LIST_EMPTY_ERROR \u003d \"OOPS!!! Your task list is currently empty\";","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    public static final String UNRECOGNIZED_ERROR \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-( \"","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"            + \"Please type in \\\"help\\\" to check all available commands.\";","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"Yufannnn":44}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.command.FindFreeTimeCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.command.MassDeleteCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import duke.command.ReminderCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import duke.command.SortCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"* A parser that parse the input String into a Duke Instruction with respective information encapsulated.","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"*/","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"public class Parser {","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    public enum Instruction {","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        BYE,","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        LIST,","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        REMINDER,","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        HELP,","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        MASSDELETE,","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        MARK,","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        UNMARK,","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        DELETE,","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        TODO,","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        DEADLINE,","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        EVENT,","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        FIND,","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        VIEW,","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        UPDATE,","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        FREE,","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        FIXED,","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        SORT;","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * A parse method that takes in a String representation of a Command, using","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * regular expression to parse it can construct to a Command object.","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param input The given String of Command to be parsed by the parser","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @return The actual Command objected represented by the given input String","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     * @throws DukeException Throws exception when invalid input is given","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-01-14"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        Matcher instructionExtractor \u003d extractInstructionAndInformation(input);","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        String instructionTag \u003d instructionExtractor.group(\"instructionTag\").strip();","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        String information \u003d instructionExtractor.group(\"information\").strip();","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        Instruction instruction \u003d matchInstructionTag(instructionTag);","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        return createCommand(instruction, information);","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * Extracts the instruction tag and information from the input by using a regular expression.","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     * @param input The input to be parsed.","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     * @return A Matcher object that contains the instruction tag and information extracted from the input.","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException If the input does not match the regular expression.","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    private static Matcher extractInstructionAndInformation(String input) throws InvalidInputException {","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        //@@author Yufannnn-reused","lastModifiedDate":"2023-01-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        //Reused from https://github.com/wweqg/ip/blob/master/src/main/java/duke/parser/Parser.java","lastModifiedDate":"2023-01-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        //with minor modification, it is a pretty clean and concise regular expression for general instructions","lastModifiedDate":"2023-01-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Matcher instructionExtractor \u003d Pattern","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .compile(\"(?\u003cinstructionTag\u003e\\\\S++)(?\u003cinformation\u003e.*)\").matcher(input.trim());","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        //@@author","lastModifiedDate":"2023-01-13"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        // Check if the input matches the regular expression","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        if (!instructionExtractor.matches()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            // If not, throw an exception","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.EMPTY_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"        // Return the Matcher object that contains the instruction tag and information","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        return instructionExtractor;","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"     * Matches the instruction tag with the corresponding instruction enum.","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     * @param instructionTag The instruction tag to be matched.","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     * @return The instruction enum that matches the instruction tag.","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException If the instruction tag is not recognized.","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"    private static Instruction matchInstructionTag(String instructionTag) throws InvalidInputException {","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"            //convert instruction tag to uppercase to match enum","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"            return Instruction.valueOf(instructionTag.toUpperCase());","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"            //thrown if instruction tag does not match any of the enum values","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.UNRECOGNIZED_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"     * Creates a command based on the instruction and the information provided.","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"     * @param instruction The instruction to be executed by the command.","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"     * @param information The information needed by the command to execute the instruction.","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"     * @return A command that can execute the instruction with the given information.","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException If the instruction or the information is invalid.","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"    private static Command createCommand(Instruction instruction, String information) throws InvalidInputException {","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"        switch (instruction) {","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"        case BYE:","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"            //create and return ExitCommand","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-13"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"        case LIST:","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"            //create and return ListCommand","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-13"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"        case REMINDER:","lastModifiedDate":"2023-01-24"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"            //create and return ReminderCommand","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"            return new ReminderCommand();","lastModifiedDate":"2023-01-21"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"        case MASSDELETE:","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"            //create and return MassDeleteCommand","lastModifiedDate":"2023-01-27"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"            return new MassDeleteCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"        case FREE:","lastModifiedDate":"2023-01-25"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"            //create and return FindFreeTimeCommand","lastModifiedDate":"2023-01-27"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"            return new FindFreeTimeCommand();","lastModifiedDate":"2023-01-25"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"        case SORT:","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"            //create and return FindFreeTimeCommand","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"            return new SortCommand();","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"        case HELP:","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to mark item using helpDecoder in Decipherer","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseHelpCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"        case MARK:","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to mark item using markDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseMarkCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"        case UNMARK:","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to unmark item using unmarkDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseUnmarkCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"        case DELETE:","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to delete item using deleteDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseDeleteCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"        case TODO:","lastModifiedDate":"2023-01-24"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to create to-do item using todoDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseTodoCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"        case FIXED:","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to create to-do item using todoDecoder in Decipherer","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseFixedDurationCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"        case DEADLINE:","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to create deadline item using deadlineDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseDeadlineCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"        case EVENT:","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to create event item using eventDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseEventCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"        case FIND:","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to find item using findDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":151,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseFindCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"Yufannnn"},"content":"        case VIEW:","lastModifiedDate":"2023-01-24"},{"lineNumber":153,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to view item using viewDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":154,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseViewCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"        case UPDATE:","lastModifiedDate":"2023-01-24"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"            //create and return command to update item using updateDecoder in Decipherer","lastModifiedDate":"2023-01-27"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"            return Decipherer.parseUpdateCommand(information);","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"        //if no case matched, return null","lastModifiedDate":"2023-01-27"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"        return null;","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":156,"-":6}},{"path":"src/main/java/duke/parser/TimeHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.time.Duration;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"public class TimeHandler {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    //@@author Yufannn-reused","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    //Reused from https://github.com/RussellDash332/ip/blob/master/src/main/java/stashy/parser/Parser.java","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //with minor modification, it is a pretty good way to organise and extend the acceptable date format.","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final static String[] ACCEPTABLE_DATETIME_FORMATS \u003d {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"MMM dd yyyy HHmm\", \"MMM dd yyyy HH:mm\",","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \"yyyy-MM-dd\u0027T\u0027HH:mm\", \"dd/MM/yyyy HHmm\",","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \"dd/MM/yyyy HH:mm\", \"yyyy/MM/dd HHmm\",","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \"yyyy/MM/dd HH:mm\", \"yyyy/MM/dd\u0027T\u0027HHmm\",","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \"yyyy/MM/dd\u0027T\u0027HH:mm\", \"yyyy-MM-dd HHmm\",","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"yyyy-MM-dd HH:mm\", \"dd MMM yyyy HHmm\",","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \"dd MMM yyyy HH:mm\", \"MMM dd, yyyy HHmm\",","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"MMM dd, yyyy HH:mm\", \"dd-mm-yyyy HHmm\"","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    };","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    private final static String[] ACCEPTABLE_DATE_FORMATS \u003d {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"            \"MMM dd yyyy\", \"yyyy-MM-dd\", \"dd/MM/yyyy\", \"yyyy/MM/dd\",","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"            \"dd MMM yyyy\", \"MMM dd, yyyy\", \"dd-mm-yyyy\"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    };","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    //@@author Yufannnn-reused","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    //Reused from https://github.com/wweqg/ip/blob/master/src/main/java/duke/parser/Parser.java","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    //with minor modification, it is a pretty clean and concise regular expression for general instructions","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * This method is used to parse a date string to {@link LocalDate}","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * The method will iterate through the list of acceptable date formats {@link #ACCEPTABLE_DATE_FORMATS}","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * and try to parse the date string to {@link LocalDate} using {@link DateTimeFormatter#ofPattern(String)}","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * If the parsing is successful, it will return the parsed {@link LocalDate}","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * If the parsing fails for all the acceptable date formats, the method will throw a {@link InvalidInputException}","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param date the date string to be parsed","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @return the parsed {@link LocalDate}","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws InvalidInputException when the date string is not in any of the acceptable date formats","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static LocalDate parseToLocalDate(String date) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (String dateFormat : ACCEPTABLE_DATE_FORMATS) {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                return LocalDate.parse(date, DateTimeFormatter.ofPattern(dateFormat));","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                // Go to the next dateFormat","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        throw new InvalidInputException(ErrorMessage.INVALID_DATE_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parsess a string to a LocalDateTime object using the acceptable date time formats defined","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * in {@link #ACCEPTABLE_DATETIME_FORMATS}.","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @param date The date string to be parsed","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @return The parsed LocalDateTime object","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws InvalidInputException if the date string does not match any of the acceptable date time formats","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static LocalDateTime parseToLocalDateTime(String date) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (String dateTimeFormat : ACCEPTABLE_DATETIME_FORMATS) {","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                return LocalDateTime.parse(date,","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                        DateTimeFormatter.ofPattern(dateTimeFormat));","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                // Go to the next dateTimeFormat","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        throw new InvalidInputException(ErrorMessage.INVALID_DATETIME_ERROR);","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    //@@author Yufannnn-reused","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    //Reused from https://stackoverflow.com/questions/3471397/how-can-i-pretty-print-a-duration-in-java","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    //with minor modification, a nice way to print out duration in a human-readable way","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns the human-readable format of a given duration.","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param duration the duration to be converted to human-readable format","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @return the human-readable format of the duration","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static String humanReadableFormat(Duration duration) {","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return duration.toString()","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .substring(2)","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .replaceAll(\"(\\\\d[HMS])(?!$)\", \"$1 \")","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .toLowerCase();","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Yufannnn":18,"-":78}},{"path":"src/main/java/duke/storage/Decoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.storage;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.TimeHandler;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.task.FixedDurationTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import java.time.Duration;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" * The Decoder class is responsible for decoding the information provided in the storage file and creating the","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" * corresponding task objects. It contains methods to decode TodoTask, DeadlineTask, and EventTask objects and","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":" * add them to the task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"public class Decoder {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * Decodes a TodoTask and adds it to a TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * @param list the TaskList to add the TodoTask to","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * @param description the description of the TodoTask","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone whether the TodoTask is done or not","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    public static void decodeTodo(TaskList list, String description, boolean isDone) {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        // Create a new TodoTask with the given description","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        TodoTask todo \u003d new TodoTask(description.strip());","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        // If the TodoTask is done, mark it as done","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            todo.markAsDone();","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        // Add the TodoTask to the given TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        list.addTask(todo);","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * Decodes a DeadlineTask and adds it to a TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @param list the TaskList to add the DeadlineTask to","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @param description the description of the DeadlineTask","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone whether the DeadlineTask is done or not","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @param date the deadline date of the task as a string in the format \"yyyy-MM-dd\"","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    public static void decodeDeadline(TaskList list, String description, boolean isDone, String date)","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"            throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        // Create a new DeadlineTask with the given description and deadline date","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask deadline \u003d new DeadlineTask(description.trim(),","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"                TimeHandler.parseToLocalDateTime(date));","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        // If the DeadlineTask is done, mark it as done","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"            deadline.markAsDone();","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        // Add the DeadlineTask to the given TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        list.addTask(deadline);","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * Decodes an EventTask and adds it to a TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     * @param list the TaskList to add the EventTask to","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     * @param description the description of the EventTask","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone whether the EventTask is done or not","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     * @param from the start date of the event as a string in the format \"yyyy-MM-dd\"","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"     * @param to the end date of the event as a string in the format \"yyyy-MM-dd\"","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input is invalid","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    public static void decodeEvent(TaskList list, String description, boolean isDone, String from, String to)","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"            throws InvalidInputException {","lastModifiedDate":"2023-01-17"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"        // Create a new EventTask with the given description and event dates","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"        EventTask event \u003d new EventTask(description.strip(), TimeHandler.parseToLocalDateTime(from),","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"                TimeHandler.parseToLocalDateTime(to));","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        // If the EventTask is done, mark it as done","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-17"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"            event.markAsDone();","lastModifiedDate":"2023-01-17"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"        // Add the EventTask to the given TaskList","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"        list.addTask(event);","lastModifiedDate":"2023-01-17"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"     * Decodes the given description, done status, and duration into a FixedDurationTask and adds it to the given TaskList.","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"     * @param list the TaskList to add the FixedDurationTask to","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"     * @param description the description of the FixedDurationTask","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone whether the FixedDurationTask is done or not","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"     * @param duration the duration of the FixedDurationTask in the format \"PT1H30M\"","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"    public static void decodeFixedDuration(TaskList list, String description, boolean isDone, String duration) {","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"        // Create a new FixedDurationTask with the given description and duration","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask fixedDuration \u003d new FixedDurationTask(description.trim(),","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"                Duration.parse(duration));","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"        // If the FixedDurationTask is done, mark it as done","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"            fixedDuration.markAsDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"        // Add the FixedDurationTask to the given TaskList","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"        list.addTask(fixedDuration);","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":109}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.storage;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.io.File;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import java.util.List;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.StorageFileException;","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.ErrorMessage;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"import duke.task.DukeTask;","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":" * A Storage object that handles the saving and loading of the TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":" * Writes the TaskList in an external file whenever it is updated. Load the existing","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":" * file when the user opens the Duke program.","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"public class Storage {","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    private final String filePath;","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    private final Path folder;","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    private final File storageFile;","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    private final String TODO_TAG \u003d \"[T]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    private final String DEADLINE_TAG \u003d \"[D]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    private final String EVENT_TAG \u003d \"[E]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    private final String FIXED_DURATION_TAG \u003d \"[F]\";","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    private final String IS_DONE_TAG \u003d \"[X]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    private final String NOT_DONE_TAG \u003d \"[ ]\";","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of that takes a path of the file and specify the file for","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * storage of the given path.","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     * @param filePath The path of the storage file","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-14"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        // Get the absolute path of the root directory","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        String rootPath \u003d Paths.get(\"\").toAbsolutePath().toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        // Create the full path to the storage file by concatenating the root path and the file path","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        this.filePath \u003d Paths.get(rootPath, filePath).toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        // Get the path of the file","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        // Get the number of elements in the path","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        int len \u003d path.getNameCount();","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        // Get the parent folder of the storage file by getting the path of all elements except the last one","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        this.folder \u003d Paths.get(rootPath, path.subpath(0, len - 1).toString());","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        // Create a new file object for the storage file","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        this.storageFile \u003d new File(this.filePath);","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     * Loads the TaskList from the given data file. If the file does not exist return","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * a new empty TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     * @return Return the TaskList parsed from the given file","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException Thrown when the Storage file has unrecognized record","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * @throws StorageFileException Thrown when encountering IOException when reading the file","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    public TaskList load() throws InvalidInputException, StorageFileException {","lastModifiedDate":"2023-01-16"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2023-01-13"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        // If the storage file does not exist, return an empty task list","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        if (!storageFile.exists()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"            return list;","lastModifiedDate":"2023-01-13"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            // Read the file","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"            List\u003cString\u003e lines \u003d readFile(storageFile);","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"            // Process each line in the file","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"            for (String line : lines) {","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"                // Parse the line and add the task to the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"                processLine(list, line);","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"            // Return the task list","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"            return list;","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"            // Throw an exception if the file is not found","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"            throw new StorageFileException(ErrorMessage.STORAGE_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"     * Reads the content of a file and returns the lines in a list.","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"     * @param file the file to read","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"     * @return list of lines in the file","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"     * @throws FileNotFoundException if the file doesn\u0027t exist","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"    private List\u003cString\u003e readFile(File file) throws FileNotFoundException {","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"        // Create a scanner to read the file","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"        // Initialize a list to store the lines read from the file","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"        // Iterate through each line of the file","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"            // Read the line and strip leading/trailing whitespaces","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"            String line \u003d sc.nextLine().strip();","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"            // Add the line to the list","lastModifiedDate":"2023-01-27"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"            lines.add(line);","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        // Return the list of lines","lastModifiedDate":"2023-01-27"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"        return lines;","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"     * Processes a line from the storage file and decodes the task information into a task object.","lastModifiedDate":"2023-01-26"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"     * The task object is then added to the task list.","lastModifiedDate":"2023-01-26"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"     * @param list the task list to add the task object to","lastModifiedDate":"2023-01-26"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"     * @param line the line of information to be processed","lastModifiedDate":"2023-01-26"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException if the input is invalid","lastModifiedDate":"2023-01-26"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"    private void processLine(TaskList list, String line) throws InvalidInputException {","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"        String[] information \u003d line.split(\"\\\\s\\\\|\\\\s\");","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"        String taskTag \u003d information[0];","lastModifiedDate":"2023-01-13"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"        boolean isDone \u003d information[1].equals(IS_DONE_TAG);","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"        storageFormatChecker(information[0], information[1]);","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"        // Decode the task information based on the task tag","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"        switch (taskTag) {","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"            case TODO_TAG:","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"                // Decode the to-do task information","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"                Decoder.decodeTodo(list, information[2], isDone);","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"            case DEADLINE_TAG:","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"                // Decode the deadline task information","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"                Decoder.decodeDeadline(list, information[2], isDone, information[3]);","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"            case EVENT_TAG:","lastModifiedDate":"2023-01-24"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"                // Decode the event task information","lastModifiedDate":"2023-01-27"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"                Decoder.decodeEvent(list, information[2], isDone, information[3], information[4]);","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"            case FIXED_DURATION_TAG:","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"                Decoder.decodeFixedDuration(list, information[2], isDone, information[3]);","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"            default:","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"                // Throw an exception if the task tag is not recognized","lastModifiedDate":"2023-01-27"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"                throw new InvalidInputException(\"Unrecognized task tag: \" + taskTag);","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":151,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":152,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":153,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":154,"author":{"gitId":"Yufannnn"},"content":"     * Checks if the input for the task tag and isDone match the expected format.","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"     * @param tag The task tag of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"     * @param isDone The status of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"    private void storageFormatChecker(String tag, String isDone) {","lastModifiedDate":"2023-01-19"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"        // Type tag of event should be [T], [D], or [E]","lastModifiedDate":"2023-01-27"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"        String errorMessage \u003d \"Type tag of event should be [T], [D], or [E]\";","lastModifiedDate":"2023-01-26"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"        assert Objects.equals(tag, TODO_TAG) || Objects.equals(tag, DEADLINE_TAG)","lastModifiedDate":"2023-01-28"},{"lineNumber":163,"author":{"gitId":"Yufannnn"},"content":"                || Objects.equals(tag, EVENT_TAG) || Objects.equals(tag, FIXED_DURATION_TAG)","lastModifiedDate":"2023-01-28"},{"lineNumber":164,"author":{"gitId":"Yufannnn"},"content":"                : errorMessage;","lastModifiedDate":"2023-01-26"},{"lineNumber":165,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":166,"author":{"gitId":"Yufannnn"},"content":"        // IsDone tag of event should be [ ], or [X]","lastModifiedDate":"2023-01-27"},{"lineNumber":167,"author":{"gitId":"Yufannnn"},"content":"        errorMessage \u003d \"IsDone tag of event should be [ ], or [X]\";","lastModifiedDate":"2023-01-26"},{"lineNumber":168,"author":{"gitId":"Yufannnn"},"content":"        assert Objects.equals(isDone, IS_DONE_TAG) || Objects.equals(isDone, NOT_DONE_TAG)","lastModifiedDate":"2023-01-23"},{"lineNumber":169,"author":{"gitId":"Yufannnn"},"content":"                : errorMessage;","lastModifiedDate":"2023-01-26"},{"lineNumber":170,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":171,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    //@@author Yufannnn-reused","lastModifiedDate":"2023-01-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    //https://nus-cs2103-ay2223s2.github.io/website/schedule/week3/topics.html#W3-4c","lastModifiedDate":"2023-01-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    //with minor modification, nice and concise function to overwrite text to a given file.","lastModifiedDate":"2023-01-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-01-16"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        // Initialize the FileWriter","lastModifiedDate":"2023-01-27"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-01-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // Write the text to the file","lastModifiedDate":"2023-01-27"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2023-01-13"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // Close the FileWriter","lastModifiedDate":"2023-01-27"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        fw.close();","lastModifiedDate":"2023-01-13"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2023-01-13"},{"lineNumber":184,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":185,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":186,"author":{"gitId":"Yufannnn"},"content":"     * Saves the given task list to the file associated with this StorageFile object.","lastModifiedDate":"2023-01-24"},{"lineNumber":187,"author":{"gitId":"Yufannnn"},"content":"     * If the parent folder of the file does not exist, it will be created.","lastModifiedDate":"2023-01-24"},{"lineNumber":188,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":189,"author":{"gitId":"Yufannnn"},"content":"     * @param taskList The task list to be saved.","lastModifiedDate":"2023-01-24"},{"lineNumber":190,"author":{"gitId":"Yufannnn"},"content":"     * @throws StorageFileException Throws StorageFileException when encountering an IOException when writing to the file","lastModifiedDate":"2023-01-24"},{"lineNumber":191,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":192,"author":{"gitId":"Yufannnn"},"content":"    public void saveTaskList(TaskList taskList) throws StorageFileException {","lastModifiedDate":"2023-01-24"},{"lineNumber":193,"author":{"gitId":"Yufannnn"},"content":"        // Create parent folder if it does not exist","lastModifiedDate":"2023-01-27"},{"lineNumber":194,"author":{"gitId":"Yufannnn"},"content":"        createParentFolderIfNotExists();","lastModifiedDate":"2023-01-24"},{"lineNumber":195,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":196,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder record \u003d new StringBuilder();","lastModifiedDate":"2023-01-13"},{"lineNumber":197,"author":{"gitId":"Yufannnn"},"content":"        // Append each task\u0027s storage string to the record","lastModifiedDate":"2023-01-27"},{"lineNumber":198,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c taskList.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":199,"author":{"gitId":"Yufannnn"},"content":"            DukeTask task \u003d taskList.getTask(i);","lastModifiedDate":"2023-01-24"},{"lineNumber":200,"author":{"gitId":"Yufannnn"},"content":"            record.append(task.storageString()).append(System.lineSeparator());","lastModifiedDate":"2023-01-13"},{"lineNumber":201,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":202,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":203,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":204,"author":{"gitId":"Yufannnn"},"content":"            // Write the record to the file","lastModifiedDate":"2023-01-27"},{"lineNumber":205,"author":{"gitId":"Yufannnn"},"content":"            writeToFile(this.filePath, record.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":206,"author":{"gitId":"Yufannnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-16"},{"lineNumber":207,"author":{"gitId":"Yufannnn"},"content":"            throw new StorageFileException(ErrorMessage.STORAGE_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":208,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":209,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":210,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":211,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":212,"author":{"gitId":"Yufannnn"},"content":"     * Creates the parent folder of the file associated with this StorageFile object if it does not exist.","lastModifiedDate":"2023-01-24"},{"lineNumber":213,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":214,"author":{"gitId":"Yufannnn"},"content":"    private void createParentFolderIfNotExists() {","lastModifiedDate":"2023-01-24"},{"lineNumber":215,"author":{"gitId":"Yufannnn"},"content":"        // check if the folder exists","lastModifiedDate":"2023-01-27"},{"lineNumber":216,"author":{"gitId":"Yufannnn"},"content":"        if (!this.folder.toFile().exists()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":217,"author":{"gitId":"Yufannnn"},"content":"            // if it does not, create the folder using mkdirs()","lastModifiedDate":"2023-01-27"},{"lineNumber":218,"author":{"gitId":"Yufannnn"},"content":"            this.folder.toFile().mkdirs();","lastModifiedDate":"2023-01-24"},{"lineNumber":219,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":220,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":221,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-24"},{"lineNumber":222,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":223,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"Yufannnn":211,"-":12}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"public class DeadlineTask extends DukeTask {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"     * The deadline date and time of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    public final LocalDateTime deadline;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private static final String STORAGE_FORMAT \u003d \"[D] | %s | %s | %s\";","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private static final String FORMAT \u003d \"[D]%s %s ( by: %s )\";","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DeadlineTask that takes in the information of the task and its Deadline.","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @param info     The information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param deadline The deadline of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public DeadlineTask(String info, LocalDateTime deadline) {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        super(info, TaskType.DEADLINE);","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * Returns true if the given date and time is equal to the deadline of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date and time to check","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the date and time is equal to the deadline, false otherwise","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public boolean matchesDate(LocalDate date) {","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        LocalDate deadlineDate \u003d this.deadline.toLocalDate();","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        return date.isEqual(deadlineDate);","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * Returns the deadline date and time of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @return The deadline date and time of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    public LocalDateTime getEndDate() {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        return this.deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating whether the task is done or not,","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     * the information of the task and the deadline.","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    public String storageString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        // Format the task status, task information, and deadline into a single string","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        String isCompleted \u003d this.getStatus() ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        return String.format(STORAGE_FORMAT, isCompleted, this.getInformation().trim(),","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"                this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm\")));","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating the task type, whether the task is","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     * done or not, the information of the task and the deadline.","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d this.getStatus() ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        return String.format(FORMAT, status ,this.getInformation(), this.deadline.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":74}},{"path":"src/main/java/duke/task/DukeTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-01-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * An abstract Task class encapsulating a task in Duke, which can be extended","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * by more specific tasks like Events, toDos, etc.","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"public abstract class DukeTask {","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private String information;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    private final TaskType type;","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final String DONE_FLAG \u003d \"[X] \";","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final String UNDONE_FLAG \u003d \"[ ] \";","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for DukeTask that takes in the information of the task and its type.","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * @param info The information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @param type The type of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    public DukeTask(String info, TaskType type) {","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.information \u003d info;","lastModifiedDate":"2023-01-11"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-01-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * Gets the information of the current task.","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     * @return the information of the current task","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public String getInformation() {","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        return this.information;","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"     * Gets the type of the current task.","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"     * @return the type of the current task","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    public TaskType getType() {","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        return this.type;","lastModifiedDate":"2023-01-13"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     * Check whether the task is done.","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the task is done","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    public boolean getStatus() {","lastModifiedDate":"2023-01-13"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-13"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     * Mark the current task as done.","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     * mark the current task as not done.","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     * Forms the String representation for the storage file.","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     * @return the String representation for the storage file.","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    public abstract String storageString();","lastModifiedDate":"2023-01-13"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"     * Takes in a date and check whether the current task happens on that date.","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"     * @param date The given date to be checked","lastModifiedDate":"2023-01-16"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the current task happens on that date","lastModifiedDate":"2023-01-16"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    public abstract boolean matchesDate(LocalDate date);","lastModifiedDate":"2023-01-16"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     * Takes in a description and check whether the current task information that matches the given description.","lastModifiedDate":"2023-01-16"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     * @param description The given description to be checked","lastModifiedDate":"2023-01-16"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     * @return Whether the description and the information matches","lastModifiedDate":"2023-01-16"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"    public boolean matches(String description) {","lastModifiedDate":"2023-01-16"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        return this.information.toUpperCase().contains(description.toUpperCase());","lastModifiedDate":"2023-01-16"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"     * Update the information of the task with the given string.","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"     * @param information the new information of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"    public void updateInformation(String information) {","lastModifiedDate":"2023-01-23"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"        this.information \u003d information;","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in the format \"DONE_FLAG/UNDONE_FLAG information\".","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"     * DONE_FLAG is used if the task is done, UNDONE_FLAG otherwise.","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2023-01-11"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"        return (getStatus() ?","lastModifiedDate":"2023-01-27"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"                DONE_FLAG : UNDONE_FLAG) + getInformation();","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":97,"-":15}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.ErrorMessage;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":" * A DeadlineTask that encapsulates the information and starting and ending","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":" * dates of a Deadline Task.","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"public class EventTask extends DukeTask {","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private static final String STORAGE_FORMAT \u003d \"[E] | %s %s | %s | %s\";","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    private static final String FORMAT \u003d \"[E]%s %s ( from: %s to: %s )\";","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     * Constructor for EventTask that takes in the information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * and its starting date and ending date.","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param info The information of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     * @param from The starting date of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * @param to   The ending date of the task","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     * @throws InvalidInputException Throws exception when the staring date is after the end date","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    public EventTask(String info, LocalDateTime from, LocalDateTime to) throws InvalidInputException {","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        super(info, TaskType.EVENT);","lastModifiedDate":"2023-01-13"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-13"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-13"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        if (from.isAfter(to)) {","lastModifiedDate":"2023-01-13"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            throw new InvalidInputException(ErrorMessage.INVALID_FROM_AND_TO_ERROR);","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * Returns the starting date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @return the starting date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    public LocalDateTime getStartDate() {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        return this.from;","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * Returns the ending date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * @return the ending date of the task","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    public LocalDateTime getEndDate() {","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        return this.to;","lastModifiedDate":"2023-01-25"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating whether the task is done or not,","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     * the information of the task, start date and end date of event.","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    public String storageString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d this.getStatus() ? \"[X] | \" : \"[ ] | \";","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        return String.format(STORAGE_FORMAT, status, this.getInformation().trim(), this.from, this.to);","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"     * Returns true if the given date is equal to the start date or end date of the task or between start and end date.","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date to check","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the date is equal to the start date or end date of the task or between start and end date.","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"    public boolean matchesDate(LocalDate date) {","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"        LocalDate fromDate \u003d this.from.toLocalDate();","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        LocalDate toDate \u003d this.to.toLocalDate();","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        return date.isEqual(fromDate) || date.isEqual(toDate)","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"                || (date.isAfter(fromDate) \u0026\u0026 date.isBefore(toDate));","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task in a specific format, indicating the information of the task,","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     * start date, and end date of the event.","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d this.getStatus() ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"        return String.format(FORMAT, status,","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"                this.getInformation(), this.from.format(formatter), this.to.format(formatter));","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"     * Returns true if the given object is equal to this EventTask.","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"     * Two EventTasks are considered equal if they have the same information, start date, and end date.","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"     * @param obj The object to compare to this EventTask","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the given object is equal to this EventTask","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-26"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-26"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d null || this.getClass() !\u003d obj.getClass()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"        EventTask other \u003d (EventTask) obj;","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"        return this.getInformation().equals(other.getInformation()) \u0026\u0026 this.from.equals(other.from)","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.to.equals(other.to);","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"     * Returns the hash code value of this EventTask","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"     * @return the hash code value of this EventTask","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"    public int hashCode() {","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"        return Objects.hash(this.getInformation(), this.from, this.to);","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":126}},{"path":"src/main/java/duke/task/FixedDurationTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.parser.TimeHandler;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.time.Duration;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" * A FixedDurationTask class that encapsulates the information of a task with a fixed duration.","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"public class FixedDurationTask extends DukeTask {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final Duration duration;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a FixedDurationTask object with the given task information and duration.","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"     * @param info The task information.","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"     * @param duration The duration of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    public FixedDurationTask(String info, Duration duration) {","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        super(info, TaskType.FIXED_DURATION);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     * Returns the duration of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"     * @return The duration of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    public Duration getDuration() {","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        return this.duration;","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * Returns the task information in the format suitable for storage.","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     * @return The task information in the storage format.","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    public String storageString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d \"[ ] | \";","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        if (this.getStatus()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"            status \u003d \"[X] | \";","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        return \"[F] | \" + status + this.getInformation().trim() + \" | \" + this.duration.toString();","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     * Determines whether the task matches the given date.","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date to check against.","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * @return false, as FixedDurationTasks do not have a date.","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    public boolean matchesDate(LocalDate date) {","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        return String.format(\"[F]%s ( duration: %s )\", super.toString(),","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"                TimeHandler.humanReadableFormat(this.duration));","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        if (!(obj instanceof FixedDurationTask)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask fixedObj \u003d (FixedDurationTask) obj;","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        return Objects.equals(this.getInformation(), fixedObj.getInformation())","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 Objects.equals(this.duration, fixedObj.duration)","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.getStatus() \u003d\u003d fixedObj.getStatus();","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"Yufannnn":80}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-11"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2023-01-11"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":" * A TaskList class that encapsulates the information and actions of a task list.","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"public class TaskList implements Cloneable {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private ArrayList\u003cDukeTask\u003e tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"     * Constructor of the TaskList class that create new Arraylist.","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     /**","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a TaskList object with the given ArrayList of DukeTask.","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"     * @param list ArrayList of DukeTask","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    public TaskList(ArrayList\u003cDukeTask\u003e list) {","lastModifiedDate":"2023-01-21"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d list;","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a TaskList object by copying the values from an existing TaskList object","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param other the existing TaskList object","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    public TaskList(TaskList other) {","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(other.tasks);","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"     * Adds the given task to the TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * @param task The TaskList to be added","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    public void addTask(DukeTask task) {","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"     * Removes the task at the specified index in the task list and returns the task that was removed.","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"     * @param taskIndex The index of the task to be removed","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * @return The task that was removed","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    public DukeTask deleteTask(int taskIndex) {","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        DukeTask taskToDelete \u003d tasks.get(taskIndex);","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        this.tasks.remove(taskIndex);","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        return taskToDelete;","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"     * Indicates the number of the task on the list.","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"     * @return The number of the task on the list","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    public int getNoOfTasks() {","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"     * Gets the Task of the given index from the TaskList.","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"     * @param index The index of the task to be obtained","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"     * @return The task of the given index","lastModifiedDate":"2023-01-16"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"    public DukeTask getTask(int index) {","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"     * Returns the ArrayList of DukeTask.","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     * @return The ArrayList of DukeTask","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    public ArrayList\u003cDukeTask\u003e getTasks() {","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"        return this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"     * Clears the task list by creating a new empty ArrayList.","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"    public void clearTasks() {","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"     * Sets the ArrayList of DukeTask.","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"     * @param tasks The ArrayList of DukeTask","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"    public void setTasks(ArrayList\u003cDukeTask\u003e tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"     * Check if the task list is empty.","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"     * @return true if the task list is empty, false otherwise","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        return this.tasks.isEmpty();","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"     * Extracts all incomplete deadline tasks from the task list and returns them as a new TaskList.","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"     * The tasks are sorted by their deadlines in ascending order.","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"     * @return A new TaskList containing all incomplete deadline tasks from the original list","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"    public TaskList extractDeadlines() {","lastModifiedDate":"2023-01-21"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"        // Create a stream of tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"        List\u003cDukeTask\u003e result \u003d this.tasks.stream()","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"                // filter the stream to only include DEADLINE tasks that are not done","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"                .filter(task -\u003e task.getType() \u003d\u003d TaskType.DEADLINE \u0026\u0026 !task.getStatus())","lastModifiedDate":"2023-01-21"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"                // sort the filtered tasks based on their end date","lastModifiedDate":"2023-01-26"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"                .sorted(Comparator.comparing(x -\u003e {","lastModifiedDate":"2023-01-23"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"                    DeadlineTask ddlTask \u003d (DeadlineTask) x;","lastModifiedDate":"2023-01-23"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"                    return ddlTask.getEndDate();","lastModifiedDate":"2023-01-25"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"                }))","lastModifiedDate":"2023-01-21"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"                // collect the sorted tasks into a list","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-01-21"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"        // return a new tasklist containing the filtered and sorted tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"        return new TaskList(new ArrayList\u003c\u003e(result));","lastModifiedDate":"2023-01-21"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"     * Categorizes the tasks in the task list into four different task lists: deadline, event, fixed duration, and to-do.","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"     * @return an array of task lists containing the categorized tasks. The order of the task lists in the array is","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"     * [deadline, event, fixed duration, to-do].","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"    public TaskList[] categorizeTask() {","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"        TaskList[] listOfLists \u003d new TaskList[4];","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"        // Initialize task lists for each task type","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"        TaskList deadlineList \u003d new TaskList();","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"        TaskList eventList \u003d new TaskList();","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"Yufannnn"},"content":"        TaskList fixedDurationList \u003d new TaskList();","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"Yufannnn"},"content":"        TaskList todoList \u003d new TaskList();","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"Yufannnn"},"content":"        // Iterate through all tasks in the master task list","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"Yufannnn"},"content":"        for (DukeTask task : this.tasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"Yufannnn"},"content":"            if (task.getType() \u003d\u003d TaskType.DEADLINE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"Yufannnn"},"content":"                // Add task to deadline list if it is a deadline task","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"Yufannnn"},"content":"                deadlineList.addTask(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"Yufannnn"},"content":"            } else if (task.getType() \u003d\u003d TaskType.EVENT) {","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"Yufannnn"},"content":"                // Add task to event list if it is an event task","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"Yufannnn"},"content":"                eventList.addTask(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"Yufannnn"},"content":"            } else if (task.getType() \u003d\u003d TaskType.FIXED_DURATION) {","lastModifiedDate":"2023-01-28"},{"lineNumber":161,"author":{"gitId":"Yufannnn"},"content":"                // Add task to fixed duration list if it is a fixed duration task","lastModifiedDate":"2023-01-28"},{"lineNumber":162,"author":{"gitId":"Yufannnn"},"content":"                fixedDurationList.addTask(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":163,"author":{"gitId":"Yufannnn"},"content":"            } else if (task.getType() \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2023-01-28"},{"lineNumber":164,"author":{"gitId":"Yufannnn"},"content":"                // Add task to to-do list if it is a to-do task","lastModifiedDate":"2023-01-28"},{"lineNumber":165,"author":{"gitId":"Yufannnn"},"content":"                todoList.addTask(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":166,"author":{"gitId":"Yufannnn"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"Yufannnn"},"content":"        // Add all task lists to the list of lists","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"Yufannnn"},"content":"        listOfLists[0] \u003d deadlineList;","lastModifiedDate":"2023-01-28"},{"lineNumber":171,"author":{"gitId":"Yufannnn"},"content":"        listOfLists[1] \u003d eventList;","lastModifiedDate":"2023-01-28"},{"lineNumber":172,"author":{"gitId":"Yufannnn"},"content":"        listOfLists[2] \u003d fixedDurationList;","lastModifiedDate":"2023-01-28"},{"lineNumber":173,"author":{"gitId":"Yufannnn"},"content":"        listOfLists[3] \u003d todoList;","lastModifiedDate":"2023-01-28"},{"lineNumber":174,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":175,"author":{"gitId":"Yufannnn"},"content":"        return listOfLists;","lastModifiedDate":"2023-01-28"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":178,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":179,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task list in the format \"index. task\\n\".","lastModifiedDate":"2023-01-24"},{"lineNumber":180,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":181,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task list","lastModifiedDate":"2023-01-24"},{"lineNumber":182,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":183,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":184,"author":{"gitId":"Yufannnn"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":185,"author":{"gitId":"Yufannnn"},"content":"        // Creating a string builder to append task index and details","lastModifiedDate":"2023-01-26"},{"lineNumber":186,"author":{"gitId":"Yufannnn"},"content":"        StringBuilder listContent \u003d new StringBuilder();","lastModifiedDate":"2023-01-16"},{"lineNumber":187,"author":{"gitId":"Yufannnn"},"content":"        // Iterating through the task list","lastModifiedDate":"2023-01-26"},{"lineNumber":188,"author":{"gitId":"Yufannnn"},"content":"        for (int i \u003d 0; i \u003c this.getNoOfTasks(); i++) {","lastModifiedDate":"2023-01-17"},{"lineNumber":189,"author":{"gitId":"Yufannnn"},"content":"            // Appending task index and task details","lastModifiedDate":"2023-01-26"},{"lineNumber":190,"author":{"gitId":"Yufannnn"},"content":"            listContent.append(i + 1).append(\".\").append(this.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-01-16"},{"lineNumber":191,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":192,"author":{"gitId":"Yufannnn"},"content":"        // Return the final string representation of the task list","lastModifiedDate":"2023-01-26"},{"lineNumber":193,"author":{"gitId":"Yufannnn"},"content":"        return String.valueOf(listContent);","lastModifiedDate":"2023-01-16"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":196,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":197,"author":{"gitId":"Yufannnn"},"content":"    public TaskList clone() {","lastModifiedDate":"2023-01-24"},{"lineNumber":198,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":199,"author":{"gitId":"Yufannnn"},"content":"            TaskList clone \u003d (TaskList) super.clone();","lastModifiedDate":"2023-01-24"},{"lineNumber":200,"author":{"gitId":"Yufannnn"},"content":"            // TODO: copy mutable state here, so the clone can\u0027t change the internals of the original","lastModifiedDate":"2023-01-24"},{"lineNumber":201,"author":{"gitId":"Yufannnn"},"content":"            return clone;","lastModifiedDate":"2023-01-24"},{"lineNumber":202,"author":{"gitId":"Yufannnn"},"content":"        } catch (CloneNotSupportedException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":203,"author":{"gitId":"Yufannnn"},"content":"            throw new AssertionError();","lastModifiedDate":"2023-01-24"},{"lineNumber":204,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":186,"-":20}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * An enum class that specify the type of the task.","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"public enum TaskType {","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"    TODO, EVENT, FIXED_DURATION, DEADLINE","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":8}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2023-01-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":" * A TodoTask class that encapsulates the information a Todo Task.","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"public class TodoTask extends DukeTask {","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"     * Constructs a TodoTask object with the given task information.","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"     * @param info The task information.","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TodoTask(String info) {","lastModifiedDate":"2023-01-11"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        super(info, TaskType.TODO);","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"     * Returns the task information in the format suitable for storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"     * @return The task information in the storage format.","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    public String storageString() {","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        String status \u003d \"[ ] | \";","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        if (this.getStatus()) {","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            status \u003d \"[X] | \";","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        return \"[T] | \" + status + this.getInformation().trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * Determines whether the task matches the given date.","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param date The date to check against.","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     * @return false, as TodoTasks do not have a date.","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    public boolean matchesDate(LocalDate date) {","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        return false;","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-01-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2023-01-11"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"            return true;","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        if (!(obj instanceof TodoTask)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"            return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        TodoTask todoObj \u003d (TodoTask) obj;","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        return Objects.equals(this.getInformation(), todoObj.getInformation())","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"                \u0026\u0026 this.getStatus() \u003d\u003d todoObj.getStatus();","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":52,"-":12}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    private Label dialog;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    private void flip() {","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        db.flip();","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        return db;","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":61}},{"path":"src/main/java/duke/ui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class Launcher {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":12}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import duke.Duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"public class Main extends Application {","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    private final Duke duke \u003d new Duke(\"data/tasks.txt\");","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"            // Set the Duke object in the controller","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"            // Set the window icon","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"            stage.getIcons().add(new Image(\"/images/icon.png\"));","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            stage.setTitle(\"Mr. Bear\");","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"            stage.isResizable();","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"            stage.show();","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":39}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import duke.Duke;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    private TextField userInput;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    private Button sendButton;","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    private Duke duke;","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"            .getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    private final Image dukeImage \u003d new Image(Objects","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"            .requireNonNull(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"     * Initializes the DialogBox and display the welcome message.","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    public void initialize() {","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"                DialogBox.getDukeDialog(\"Hello from Mr. Bear, your personal task manager.\\n\"","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"                        + \"What can I do for you?\", dukeImage)","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        );","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        this.duke \u003d d;","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"     * Duke\u0027s reply and then appends them to the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    @FXML","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        );","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        userInput.clear();","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        if (Objects.equals(response, \"Bye. Hope to see you again soon!\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"            Platform.exit();","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":69}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"/**","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":" * Customize the conversation interface by changing the length of the horizontal bar","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":" * and the space of indentation.","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-01-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class Ui {","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    //Fields","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    private final int DEFUALT_LENGTH \u003d 70;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    private final int DEFUALT_SPACE \u003d 4;","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    private final String UNDERSCORE \u003d \"_\";","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    private final String SPACE \u003d \" \";","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    private final String LINE_SEPERATOR \u003d \"\\n\";","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    private final int horizontalLineLength;","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final int indentSpace;","lastModifiedDate":"2023-01-11"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"    private StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    //Constructors","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"     * Constructor that sets HorizontalLineLength to be 70 and IndentSpace to be 4 by default.","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    public Ui() {","lastModifiedDate":"2023-01-13"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        this.horizontalLineLength \u003d DEFUALT_LENGTH;","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        this.indentSpace \u003d DEFUALT_SPACE;","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-13"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"     * Constructor that sets HorizontalLineLength to be the given length","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"     * and IndentSpace to be the given indent space.","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"     * @param horizontalLineLength The length of the horizontal line to be set","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"     * @param indentSpace The length of the indent space to be set","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    public Ui(int horizontalLineLength, int indentSpace) {","lastModifiedDate":"2023-01-16"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        this.horizontalLineLength \u003d horizontalLineLength;","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.indentSpace \u003d indentSpace;","lastModifiedDate":"2023-01-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"    //Methods","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"     * The indent method that places an indentation as specified by the space indent","lastModifiedDate":"2023-01-13"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"     * at the start of every line.","lastModifiedDate":"2023-01-13"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"     * @param input the text to be indented","lastModifiedDate":"2023-01-13"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"     * @return the indented text","lastModifiedDate":"2023-01-13"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public String indent(String input) {","lastModifiedDate":"2023-01-11"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        String delimiter \u003d this.LINE_SEPERATOR + this.SPACE.repeat(this.indentSpace);","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        String[] splitString \u003d input.split(this.LINE_SEPERATOR);","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        return this.SPACE.repeat(this.indentSpace) + String.join(delimiter, splitString);","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-11"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-13"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"     * Display the given message between two horizontal line and add the specified indentation.","lastModifiedDate":"2023-01-13"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-13"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"     * @param message the message to be display","lastModifiedDate":"2023-01-13"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void displayWithBar(String message) {","lastModifiedDate":"2023-01-11"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        String bar \u003d this.SPACE.repeat(indentSpace) + this.UNDERSCORE.repeat(this.horizontalLineLength);","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        System.out.println(bar + this.LINE_SEPERATOR + indent(message)","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"                + this.LINE_SEPERATOR + bar + this.LINE_SEPERATOR);","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-11"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"     * Reset the response StringBuilder.","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    public void reset() {","lastModifiedDate":"2023-01-17"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        this.response \u003d new StringBuilder();","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"     * Get the final response in String format","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"     * @return the final response in String format","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"    public String getResponse() {","lastModifiedDate":"2023-01-17"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        return String.valueOf(this.response);","lastModifiedDate":"2023-01-17"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"     * Appends a message to the existing response.","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"     * @param message the message to be appended","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"    public void appendResponse(String message) {","lastModifiedDate":"2023-01-17"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"        this.response.append(message);","lastModifiedDate":"2023-01-17"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-11"}],"authorContributionMap":{"Yufannnn":75,"-":15}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"\u003cfx:root id\u003d\"anchor\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" cache\u003d\"true\" lineSpacing\u003d\"2.0\" style\u003d\"-fx-background-color: #a9cdfc; -fx-background-radius: 12; -fx-label-padding: 12; -fx-border-color: #000000; -fx-border-radius: 12; -fx-border-width: 2;\" text\u003d\"Text\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        \u003cfont\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"            \u003cFont name\u003d\"Comic Sans MS Bold\" size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"        \u003c/font\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"        \u003cHBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        \u003c/HBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        \u003copaqueInsets\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        \u003c/opaqueInsets\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    \u003c/Label\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"66.0\" fitWidth\u003d\"66.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        \u003cHBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        \u003c/HBox.margin\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    \u003c/ImageView\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":29}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"520.0\" style\u003d\"-fx-background-color: linear-gradient(to BOTTOM, lightblue, skyblue);\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" stylesheets\u003d\"@Background.css\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.39999999999998\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"620.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    \u003cHBox layoutY\u003d\"558.0\" prefHeight\u003d\"46.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"-4.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"358.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"500.0\" promptText\u003d\"Hi, I am Mr. Bear. How can I help you?\" style\u003d\"-fx-background-color: #fcfce3;\" AnchorPane.bottomAnchor\u003d\"1.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"            \u003cfont\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"                \u003cFont name\u003d\"Comic Sans MS Italic\" size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"            \u003c/font\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        \u003c/TextField\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        \u003cButton fx:id\u003d\"sendButton\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-border-color: #000000; -fx-border-radius: 3; -fx-border-width: 2;\" text\u003d\"SEND\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"            \u003cfont\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"                \u003cFont name\u003d\"Comic Sans MS Bold\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"            \u003c/font\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        \u003c/Button\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"Yufannnn":27}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke;","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    public void anotherDummyTest() {","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"Yufannnn":17}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import duke.command.FindFreeTimeCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import duke.command.MassDeleteCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"import duke.command.ReminderCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"import duke.command.SortCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"class ParserTest {","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsBye_returnsExitCommand() throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"bye\";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(command instanceof ExitCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsList_returnsListCommand() throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"list\";","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(command instanceof ListCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsReminder_returnsReminderCommand() throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"reminder\";","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(command instanceof ReminderCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsMassdelete_returnsMassDeleteCommand() throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"massdelete\";","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(command instanceof MassDeleteCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsFree_returnsFindFreeTimeCommand() throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"free\";","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(command instanceof FindFreeTimeCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsSortByDate_returnsSortCommand() throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"sort by date\";","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(command instanceof SortCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsHelp_returnsHelpCommand() throws DukeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"help\";","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(command instanceof HelpCommand);","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsUnknownCommand_throwsInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"unknownCommand\";","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"            fail(\"Expected InvalidInputException to be thrown.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"            assertEquals(ErrorMessage.UNRECOGNIZED_ERROR, e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-16"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"    public void parse_inputIsEmpty_throwsInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"            fail(\"Expected InvalidInputException to be thrown.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"            assertEquals(ErrorMessage.EMPTY_ERROR, e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":92}},{"path":"src/test/java/duke/parser/TimeHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import duke.exception.InvalidInputException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.time.Duration;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"class TimeHandlerTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDate_validDate_shouldReturnLocalDate() throws InvalidInputException {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"Jan 20 2021\";","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"        LocalDate expected \u003d LocalDate.of(2021, 1, 20);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.parseToLocalDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDate_invalidDate_shouldThrowInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2021-13-40\";","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        assertThrows(InvalidInputException.class, () -\u003e TimeHandler.parseToLocalDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDate_validDate2_shouldReturnLocalDate() throws InvalidInputException {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"Feb 28 2022\";","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        LocalDate expected \u003d LocalDate.of(2022, 2, 28);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.parseToLocalDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDate_invalidDate2_shouldThrowInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2022-0-29\";","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        assertThrows(InvalidInputException.class, () -\u003e TimeHandler.parseToLocalDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDate_validDate3_shouldReturnLocalDate() throws InvalidInputException {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"Aprl 30 2021\";","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        LocalDate expected \u003d LocalDate.of(2021, 4, 30);","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        assertThrows(InvalidInputException.class, () -\u003e TimeHandler.parseToLocalDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDate_invalidDate3_shouldThrowInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"021-04-31\";","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        assertThrows(InvalidInputException.class, () -\u003e TimeHandler.parseToLocalDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDateTime_validDateTime_shouldReturnLocalDateTime() throws InvalidInputException {","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2021-01-20T09:30\";","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime expected \u003d LocalDateTime.of(2021, 1, 20, 9, 30);","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.parseToLocalDateTime(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDateTime_invalidDateTime_shouldThrowInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2021-1-20 09:30\";","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        assertThrows(InvalidInputException.class, () -\u003e TimeHandler.parseToLocalDateTime(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDateTime_validDateTime2_shouldReturnLocalDateTime() throws InvalidInputException {","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2022-11-20T15:45\";","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime expected \u003d LocalDateTime.of(2022, 11, 20, 15, 45);","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.parseToLocalDateTime(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDateTime_invalidDateTime2_shouldThrowInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2022-11-20 15:454\";","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"        assertThrows(InvalidInputException.class, () -\u003e TimeHandler.parseToLocalDateTime(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDateTime_validDateTime3_shouldReturnLocalDateTime() throws InvalidInputException {","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2022-11-20T23:59\";","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime expected \u003d LocalDateTime.of(2022, 11, 20, 23, 59);","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.parseToLocalDateTime(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"    void parseToLocalDateTime_invalidDateTime3_shouldThrowInvalidInputException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        String date \u003d \"2022-11-20 124:00\";","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"        assertThrows(InvalidInputException.class, () -\u003e TimeHandler.parseToLocalDateTime(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(2).plusMinutes(30);","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"2h 30m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration2_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofDays(3).plusHours(5).plusMinutes(45);","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"77h 45m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration3_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofMinutes(90);","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"1h 30m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":115,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration4_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofSeconds(3600);","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"1h\";","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":120,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration5_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofMillis(120000);","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"2m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration6_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofMillis(60000);","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"1m\";","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration7_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofMillis(10000);","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"10s\";","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":142,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":143,"author":{"gitId":"Yufannnn"},"content":"    void humanReadableFormat_validDuration8_shouldReturnHumanReadableFormat() {","lastModifiedDate":"2023-01-29"},{"lineNumber":144,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofMillis(1000);","lastModifiedDate":"2023-01-29"},{"lineNumber":145,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"1s\";","lastModifiedDate":"2023-01-29"},{"lineNumber":146,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, TimeHandler.humanReadableFormat(duration));","lastModifiedDate":"2023-01-29"},{"lineNumber":147,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":148,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Yufannnn":148}},{"path":"src/test/java/duke/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"class DeadlineTaskTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    public void testConstruction_withValidInputs_expectedAttributes() {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime deadline \u003d LocalDateTime.of(2022, 12, 31, 23, 59);","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Finish project\", deadline);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(\"Finish project\", task.getInformation());","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(deadline, task.getEndDate());","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(TaskType.DEADLINE, task.getType());","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(task.getStatus());","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    public void testMatchesDate_withValidDate_expectedOutcome() {","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime deadline \u003d LocalDateTime.of(2022, 12, 31, 23, 59);","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Finish project\", deadline);","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(task.matchesDate(LocalDate.of(2022, 12, 31)));","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(task.matchesDate(LocalDate.of(2022, 12, 30)));","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    public void testToString_withValidInputs_expectedOutcome() {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime deadline \u003d LocalDateTime.of(2022, 12, 31, 23, 59);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Finish project\", deadline);","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        String expectedString \u003d \"[D][ ] Finish project ( by: Dec 31 2022 23:59 )\";","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expectedString, task.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"    public void testStorageString_withValidInputs_expectedOutcome() {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime deadline \u003d LocalDateTime.of(2022, 12, 31, 23, 59);","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Finish project\", deadline);","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        String expectedString \u003d \"[D] | [ ] | Finish project | Dec 31 2022 11:59\";","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expectedString, task.storageString());","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    public void matchesDate_matchingDateBeforeDeadline_returnsTrue() {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime deadline \u003d LocalDateTime.of(2022, 3, 1, 12, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Task1\", deadline);","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        LocalDate dateToCheck \u003d LocalDate.of(2022, 3, 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(task.matchesDate(dateToCheck));","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"    public void matchesDate_matchingDateAfterDeadline_returnsFalse() {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime deadline \u003d LocalDateTime.of(2022, 3, 1, 12, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Task1\", deadline);","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        LocalDate dateToCheck \u003d LocalDate.of(2022, 3, 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(task.matchesDate(dateToCheck));","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    public void matchesDate_nonMatchingDate_returnsFalse() {","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime deadline \u003d LocalDateTime.of(2022, 3, 1, 12, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Task1\", deadline);","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        LocalDate dateToCheck \u003d LocalDate.of(2022, 4, 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(task.matchesDate(dateToCheck));","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Yufannnn":73}},{"path":"src/test/java/duke/task/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"public class EventTaskTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"    public void testEventTask_initialization_valuesAreCorrect() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"        EventTask event \u003d new EventTask(\"Conference\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(\"Conference\", event.getInformation());","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(start, event.getStartDate());","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(end, event.getEndDate());","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(event.getStatus());","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    public void testMatchesDate_compareDates_returnsTrueIfMatching() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        EventTask event \u003d new EventTask(\"Conference\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        LocalDate date1 \u003d LocalDate.of(2022, 10, 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        LocalDate date2 \u003d LocalDate.of(2022, 10, 2);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(event.matchesDate(date1));","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(event.matchesDate(date2));","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    public void testStorageString_getStorageString_returnsCorrectString() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        EventTask event \u003d new EventTask(\"Conference\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(\"[E] | [ ] |  Conference | 2022-10-01T09:00 | 2022-10-01T18:00\", event.storageString());","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    public void testToString_getToString_returnsCorrectString() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        EventTask event \u003d new EventTask(\"Conference\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(\"[E][ ] Conference ( from: Oct 01 2022 09:00 to: Oct 01 2022 18:00 )\", event.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    public void testEquals_compareTwoEvents_returnsTrueIfEqual() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        EventTask event1 \u003d new EventTask(\"Conference\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        EventTask event2 \u003d new EventTask(\"Conference\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(event1, event2);","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    public void testEquals_compareTwoEventsWithDifferentInformation_returnsFalse() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        EventTask event1 \u003d new EventTask(\"Conference\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        EventTask event2 \u003d new EventTask(\"Meeting\", start, end);","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(event1, event2);","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"    public void testEquals_compareTwoEventsWithDifferentStartDates_returnsFalse() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start1 \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end1 \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        EventTask event1 \u003d new EventTask(\"Conference\", start1, end1);","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start2 \u003d LocalDateTime.of(2022, 10, 2, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end2 \u003d LocalDateTime.of(2022, 10, 2, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        EventTask event2 \u003d new EventTask(\"Conference\", start2, end2);","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(event1, event2);","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"    public void testEquals_compareTwoEventsWithDifferentEndDates_returnsFalse() throws Exception {","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start1 \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end1 \u003d LocalDateTime.of(2022, 10, 1, 18, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"        EventTask event1 \u003d new EventTask(\"Conference\", start1, end1);","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime start2 \u003d LocalDateTime.of(2022, 10, 1, 9, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"        LocalDateTime end2 \u003d LocalDateTime.of(2022, 10, 1, 19, 0);","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"        EventTask event2 \u003d new EventTask(\"Conference\", start2, end2);","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(event1, event2);","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Yufannnn":90}},{"path":"src/test/java/duke/task/FixedDurationTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import java.time.Duration;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"class FixedDurationTaskTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    void getDuration_validDuration_correctDuration() {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(duration, task.getDuration());","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    void storageString_validTask_correctStorageString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"[F] | [ ] | Test task | PT5H\";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, task.storageString());","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"    void storageString_completedTask_correctStorageString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"[F] | [X] | Test task | PT5H\";","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, task.storageString());","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    void matchesDate_validDate_false() {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        LocalDate date \u003d LocalDate.now();","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(task.matchesDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    void toString_validTask_correctStringRepresentation() {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"[F][ ] Test task ( duration: 5h )\";","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    void equals_sameTask_true() {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task1 \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task2 \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(task1, task2);","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"    void equals_differentInformation_false() {","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task1 \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task2 \u003d new FixedDurationTask(\"Different task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(task1, task2);","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"    void equals_differentDuration_false() {","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        Duration duration1 \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        Duration duration2 \u003d Duration.ofHours(10);","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task1 \u003d new FixedDurationTask(\"Test task\", duration1);","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task2 \u003d new FixedDurationTask(\"Test task\", duration2);","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(task1, task2);","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"    void equals_differentStatus_false() {","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task1 \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task2 \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"Yufannnn"},"content":"        task1.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(task1, task2);","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"Yufannnn"},"content":"    void hashCode_differentInformation_differentHashCode() {","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"Yufannnn"},"content":"        Duration duration \u003d Duration.ofHours(5);","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task1 \u003d new FixedDurationTask(\"Test task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"Yufannnn"},"content":"        FixedDurationTask task2 \u003d new FixedDurationTask(\"Different task\", duration);","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(task1.hashCode(), task2.hashCode());","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Yufannnn":92}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"    public void addTask_validTask_taskAddedToList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"        DukeTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(1, taskList.getNoOfTasks());","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(task, taskList.getTask(0));","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    public void deleteTask_validIndex_taskDeletedFromList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        DukeTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(1, taskList.getNoOfTasks());","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(task, taskList.getTask(0));","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"        DukeTask deletedTask \u003d taskList.deleteTask(0);","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(task, deletedTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(0, taskList.getNoOfTasks());","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    public void getNoOfTasks_emptyList_returnsZero() {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(0, taskList.getNoOfTasks());","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    public void getNoOfTasks_listWithTask_returnsNumberOfTasksInList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        DukeTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(1, taskList.getNoOfTasks());","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    public void getTask_validIndex_returnsTaskAtIndex() {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        DukeTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(task, taskList.getTask(0));","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"    public void getTasks_listWithTask_returnsListOfTasks() {","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"        DukeTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"        ArrayList\u003cDukeTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(task, tasks.get(0));","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"    public void clearTasks_listWithTasks_listIsCleared() {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"        DukeTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(1, taskList.getNoOfTasks());","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        taskList.clearTasks();","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(0, taskList.getNoOfTasks());","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"Yufannnn"},"content":"    public void isEmpty_emptyList_returnsTrue() {","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"Yufannnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"Yufannnn"},"content":"        assertTrue(taskList.isEmpty());","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Yufannnn":79}},{"path":"src/test/java/duke/task/TodoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"public class TodoTaskTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"    public void storageString_taskCompleted_returnsCorrectString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"[T] | [X] | Buy milk\";","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, task.storageString());","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"    public void storageString_taskNotCompleted_returnsCorrectString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"        task.unmark();","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"[T] | [ ] | Buy milk\";","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, task.storageString());","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    public void matchesDate_todoTask_returnsFalse() {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"        LocalDate date \u003d LocalDate.now();","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"        assertFalse(task.matchesDate(date));","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    public void toString_taskCompleted_returnsCorrectString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"[T][X] Buy milk\";","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    public void toString_taskNotCompleted_returnsCorrectString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"        task.unmark();","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"[T][ ] Buy milk\";","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    public void equals_todoTaskWithSameInfo_returnsTrue() {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task1 \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task2 \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(task1, task2);","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"Yufannnn"},"content":"    public void equals_todoTaskWithDifferentInfo_returnsFalse() {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task1 \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task2 \u003d new TodoTask(\"Buy eggs\");","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(task1, task2);","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"Yufannnn"},"content":"    public void equals_todoTaskWithDifferentStatus_returnsFalse() {","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task1 \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"Yufannnn"},"content":"        task1.markAsDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"Yufannnn"},"content":"        TodoTask task2 \u003d new TodoTask(\"Buy milk\");","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"Yufannnn"},"content":"        task2.unmark();","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"Yufannnn"},"content":"        assertNotEquals(task1, task2);","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"Yufannnn":73}},{"path":"src/test/java/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"package duke.ui;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"public class UiTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"    private final Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"    public void indent_simpleString_indentationAdded() {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"Hello World!\";","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"    Hello World!\";","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, ui.indent(input));","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"    public void indent_stringWithMultipleLines_indentationAddedToEachLine() {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"        String input \u003d \"Hello\\nWorld!\\nHow are you?\";","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"    Hello\\n    World!\\n    How are you?\";","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, ui.indent(input));","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"Yufannnn"},"content":"    ","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"Yufannnn"},"content":"    public void getResponse_noAppendCalls_emptyString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, ui.getResponse());","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"Yufannnn"},"content":"    public void getResponse_appendCalledOnce_appendedString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"Hello World!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"Hello World!\";","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, ui.getResponse());","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"Yufannnn"},"content":"    public void getResponse_appendCalledMultipleTimes_appendedStringsConcatenated() {","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"Hello \");","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"World!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"Hello World!\";","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, ui.getResponse());","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"Yufannnn"},"content":"    @Test","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"Yufannnn"},"content":"    public void reset_appendCalledMultipleTimes_responseStringBuilderCleared() {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"Yufannnn"},"content":"        ui.appendResponse(\"Hello World!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"Yufannnn"},"content":"        ui.reset();","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"Yufannnn"},"content":"        String expected \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"Yufannnn"},"content":"        assertEquals(expected, ui.getResponse());","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"Yufannnn"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":53,"author":{"gitId":"Yufannnn"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"Yufannnn":53}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"list","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"hi","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"todo breakfast","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"deadline do homework /by 10","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"event meeting /from 14 /to 20","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"todo gym","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"list","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"mark 1","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"deadline assingment 2 /by Jan 20","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"mark 3","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"mark 2","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"unmark 2","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"delete 4","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"list","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"bye","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"@REM @@author Yufannnn-reused","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"@REM Reused from https://github.com/JeremyLoh/duke/blob/master/text-ui-test/runtest.bat","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"@REM with minor modifications to address the path issue in the given runtest.bat file","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"dir /s /B ..\\src\\main\\java\\*.java \u003e source.txt","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"javac -cp ..\\src\\duke -Xlint:none -d ..\\bin @source.txt","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"@REM @@author","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"Yufannnn"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Yufannnn":9,"-":19}},{"path":"text-ui-test/source.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\Duke.java","lastModifiedDate":"2023-01-13"},{"lineNumber":2,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\customization\\DisplayFormat.java","lastModifiedDate":"2023-01-13"},{"lineNumber":3,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\exception\\GeneralDukeException.java","lastModifiedDate":"2023-01-13"},{"lineNumber":4,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\exception\\InvalidInputException.java","lastModifiedDate":"2023-01-13"},{"lineNumber":5,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddDeadlineTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":6,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddEventTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":7,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":8,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\AddToDoTaskInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":9,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\DeleteInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":10,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\EchoInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":11,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\ExitInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":12,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\GeneralDukeInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":13,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\ListInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":14,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\MarkAsDoneInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":15,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\instruction\\UnmarkInstruction.java","lastModifiedDate":"2023-01-13"},{"lineNumber":16,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\parser\\Parser.java","lastModifiedDate":"2023-01-13"},{"lineNumber":17,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\DeadlineTask.java","lastModifiedDate":"2023-01-13"},{"lineNumber":18,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\EventTask.java","lastModifiedDate":"2023-01-13"},{"lineNumber":19,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\GeneralDukeTask.java","lastModifiedDate":"2023-01-13"},{"lineNumber":20,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\TaskList.java","lastModifiedDate":"2023-01-13"},{"lineNumber":21,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\TaskType.java","lastModifiedDate":"2023-01-13"},{"lineNumber":22,"author":{"gitId":"Yufannnn"},"content":"C:\\Users\\zhu13\\Desktop\\ip\\src\\main\\java\\duke\\task\\TodoTask.java","lastModifiedDate":"2023-01-13"}],"authorContributionMap":{"Yufannnn":22}}]
