[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"# duke.Utilities.Duke project template","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"3. After that, locate the `src/main/java/duke.Utilities.Duke.java` file, right-click it, and choose `Run duke.Utilities.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"ZHTang29":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"    mainClassName \u003d \"duke.Utilities.Launcher\"","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"checkstyle {","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"ZHTang29":21}},{"path":"src/main/java/duke/Command/AddNoteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidTaskException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Note.Note;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":" * The add note command which is executed by Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"public class AddNoteCommand extends Command {","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    private String data;","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     * Constructor for a new add note command.","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * @param data Data to be stored in note.","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    public AddNoteCommand(String data) {","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"        this.data \u003d data;","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        Note note \u003d new Note(data);","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d notes.addNote(note);","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":37}},{"path":"src/main/java/duke/Command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":" * The bye command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"     * Print out the farewell message, then exit duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"        return ui.getFarewellMessage();","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"        return true;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":28}},{"path":"src/main/java/duke/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":" * The abstraction behind each command executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * Performs the corresponding execution of the command.","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * @throws DukeException The exception thrown when there is an error in executing a command.","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    public abstract String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"     * Checks whether the current command from user is to exit the system.","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"     * @return Whether the current command is a bye command.","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"    public abstract boolean isByeCommand();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":30}},{"path":"src/main/java/duke/Command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidArgumentsException;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"import duke.Task.Deadline;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":" * The Deadline command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    private final String name;","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an (executable) DeadlineCommand.","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"     * @param name Name of deadline.","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"     * @param deadline Time at which deadline is due.","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidArgumentsException Exception thrown when the date/time input is given in an invalid format.","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"    public DeadlineCommand(String name, String deadline) throws InvalidArgumentsException {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"            this.deadline \u003d LocalDateTime.parse(deadline.trim(), formatter);","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidArgumentsException();","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"     * Creates a new Deadline task which is added to the task list.","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"     * The confirmation is then displayed on the UI, and the changes to task list are saved to file.","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"        Deadline dl \u003d new Deadline(name, deadline);","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d tasks.addTask(dl);","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":59}},{"path":"src/main/java/duke/Command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidArgumentsException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidTaskException;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" * The Delete command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    private final int index;","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a delete command object.","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * @param index User input after the delete command. If it is not in proper format, throw exception.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidArgumentsException Thrown if the arguments are not in the proper format.","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    public DeleteCommand(String index) throws InvalidArgumentsException {","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"            int numToDelete \u003d Integer.parseInt(index);","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"            this.index \u003d numToDelete;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidArgumentsException();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"     * If the index of the task input is valid (exists in task list), delete the corresponding task from the","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"     * task list.","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"     * The confirmation is then displayed on the UI, and the changes to task list are saved to file.","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"     * If not, throw an exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidTaskException Exception thrown when the index is invalid (does not exist in the task list","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"     * or cannot exist in the task list (negative numbers)).","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) throws InvalidTaskException {","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"        if (index \u003c 1 || index \u003e tasks.getItems()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidTaskException(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d tasks.deleteTask(index -1);","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":57}},{"path":"src/main/java/duke/Command/DeleteNoteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidArgumentsException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidNoteException;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":" * The delete note command which is executed by Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"public class DeleteNoteCommand extends Command {","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    private int index;","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a deletenote command object.","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * @param index User input after the deletenote command. If it is not in proper format, throw exception.","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidArgumentsException Thrown if the arguments are not in the proper format.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    public DeleteNoteCommand(String index) throws InvalidArgumentsException {","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"            int numToDelete \u003d Integer.parseInt(index);","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"            this.index \u003d numToDelete;","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidArgumentsException();","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) throws InvalidNoteException {","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"        if (index \u003c 1 || index \u003e notes.getItems()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidNoteException(index);","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d notes.deleteNote(index -1);","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":45}},{"path":"src/main/java/duke/Command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidArgumentsException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidEventException;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Task.Event;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":" * The Event command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    private final String name;","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    private final LocalDateTime until;","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"     * Constructor for an (executable) Event command.","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"     * @param name The name of the event.","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"     * @param from The start date/time of the event.","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"     * @param until The end date/time of the event.","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidArgumentsException Exception thrown when the date/time input is given in an invalid format.","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidEventException Exception thrown when the \u0027until\u0027 date/time input occurs before the \u0027from\u0027","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"     * date/time input","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"    public EventCommand(String name, String from, String until) throws InvalidArgumentsException,","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"            InvalidEventException {","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"            this.from \u003d LocalDateTime.parse(from.trim(), formatter);","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"            this.until \u003d LocalDateTime.parse(until.trim(), formatter);","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"            if (this.until.isBefore(this.from)) {","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"                throw new InvalidEventException(name);","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidArgumentsException();","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"     * Creates a new Event task which is added to the task list.","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"     * The confirmation is then displayed on the UI, and the changes to task list are saved to file.","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"        Event ev \u003d new Event(name, from, until);","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d tasks.addTask(ev);","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":69}},{"path":"src/main/java/duke/Command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"    private final String keyword;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"        return tasks.findKeyword(keyword);","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"ZHTang29":25}},{"path":"src/main/java/duke/Command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":" * The List command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"     * Print out the current list of tasks in the task list.","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"        return tasks.printTaskList();","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":28}},{"path":"src/main/java/duke/Command/ListNotesCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":" * The list notes command which is executed by Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"public class ListNotesCommand extends Command {","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"        return notes.printNoteList();","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":22}},{"path":"src/main/java/duke/Command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidArgumentsException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidTaskException;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" * The Mark command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    private final int index;","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a mark command object.","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * @param index User input after the mark command. If it is not in proper format, throw exception.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidArgumentsException Thrown if the arguments are not in the proper format.","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    public MarkCommand(String index) throws InvalidArgumentsException {","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"            int numToMark \u003d Integer.parseInt(index);","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"            this.index \u003d numToMark;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidArgumentsException();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"     * If the index of the task input is valid (exists in task list), mark the corresponding task from the","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"     * task list as done.","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"     * The confirmation is then displayed on the UI, and the changes to task list are saved to file.","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"     * If not, throw an exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidTaskException Exception thrown when the index is invalid (does not exist in the task list","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"     * or cannot exist in the task list (negative numbers)).","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) throws InvalidTaskException {","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"        if (index \u003c 1 || index \u003e tasks.getItems()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidTaskException(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d tasks.getTasks().get(index - 1).markAsDone();","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":57}},{"path":"src/main/java/duke/Command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Task.ToDo;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":" * The ToDo command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    private final String name;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an (executable) ToDo command.","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * @param name The name of the todo item.","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    public ToDoCommand(String name) {","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"     * Creates a new ToDo task which is added to the task list.","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"     * The confirmation is then displayed on the UI, and the changes to task list are saved to file.","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"        ToDo td \u003d new ToDo(name);","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d tasks.addTask(td);","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":44}},{"path":"src/main/java/duke/Command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Command;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidArgumentsException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.InvalidTaskException;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.NoteList;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.UI;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" * The unmark command which is executed by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    private final int index;","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a unmark command object.","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * @param index User input after the unmark command. If it is not in proper format, throw exception.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidArgumentsException Thrown if the arguments are not in the proper format.","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    public UnmarkCommand(String index) throws InvalidArgumentsException {","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"            int numToUnmark \u003d Integer.parseInt(index);","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"            this.index \u003d numToUnmark;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidArgumentsException();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"     * If the index of the task input is valid (exists in task list), mark the corresponding task from the","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"     * task list as undone.","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"     * The confirmation is then displayed on the UI, and the changes to task list are saved to file.","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"     * If not, throw an exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The task list to add to/edit/delete from.","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"     * @param ui The UI to display the confirmation messages/error messages to users.","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"     * @param storage The storage which to store to when a task is added/deleted or its status is changed.","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidTaskException Exception thrown when the index is invalid (does not exist in the task list","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"     * or cannot exist in the task list (negative numbers)).","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"    public String execute(TaskList tasks, NoteList notes, UI ui, Storage storage) throws InvalidTaskException {","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"        if (index \u003c 1 || index \u003e tasks.getItems()) {","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"            throw new InvalidTaskException(index);","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"        String confirmationMessage \u003d tasks.getTasks().get(index - 1).markAsUndone();","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"        storage.saveToFile(tasks.getTasks(), notes.getNotes());","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"        return confirmationMessage;","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"ZHTang29":57}},{"path":"src/main/java/duke/Exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * The abstraction behind each exception thrown by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a duke.Utilities.Duke exception.","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * @param message The error message.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"        super(message);","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     * Getter for the type of exception thrown.","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     * @return The type of exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    public abstract String getExceptionType();","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    public String toString() {","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"        return this.getExceptionType() + \" detected! \" + super.getMessage();","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ZHTang29":26}},{"path":"src/main/java/duke/Exception/IncorrectArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * An IncorrectArgumentsException a type of DukeException that is thrown when a certain valid command expects a","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" * certain number of arguments but the number of arguments the user input is not accurate.","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"public class IncorrectArgumentsException extends DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an incorrectArgumentsException.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     * @param command The name of the valid command.","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"     * @param numberExpected The number of arguments expected for the valid command.","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"     * @param numberActual The actual number of arguments that the user input.","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    public IncorrectArgumentsException(String command, int numberExpected, int numberActual) {","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"        super(String.format(\"Sorry, command: %s expected %s arguments, detected %s arguments!\",","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"                command, numberExpected, numberActual));","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    public String getExceptionType() {","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"        return \"Incorrect Argument(s)\";","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ZHTang29":24}},{"path":"src/main/java/duke/Exception/InvalidArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * An InvalidArgumentsException a type of DukeException that is thrown when a certain valid command expects","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" * arguments in a certain format, and detects the correct number of arguments but in an invalid format.","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"public class InvalidArgumentsException extends DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an InvalidArgumentsException.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    public InvalidArgumentsException() {","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"        super(\"Sorry, the arguments that you have input are in an incorrect format! Please try again!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    public String getExceptionType() {","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"        return \"Invalid Arguments\";","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":20}},{"path":"src/main/java/duke/Exception/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"public class InvalidEventException extends DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an InvalidEventException.","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"     * @param input The (invalid) user input.","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    public InvalidEventException(String input) {","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"        super(\"Sorry, the end date/time of your event \" + input","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"                + \"is before the start date/time! Please try again.\");","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    public String getExceptionType() {","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"        return \"Invalid Input(s)\";","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":18}},{"path":"src/main/java/duke/Exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * An InvalidInputException a type of DukeException that is thrown when a certain invalid command is input","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" * by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"public class InvalidInputException extends DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an InvalidInputException.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     * @param input The (invalid) user input.","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    public InvalidInputException(String input) {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"        super(\"Sorry, the input \" + input + \" is not a supported command!\");","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public String getExceptionType() {","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        return \"Invalid Input(s)\";","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ZHTang29":21}},{"path":"src/main/java/duke/Exception/InvalidNoteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * An InvalidNoteException a type of DukeException that is thrown when a certain valid command based on a note","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" * number (delete) takes in a task number of a task which does not yet exist/cannot exist.","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"public class InvalidNoteException extends DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an InvalidNoteException.","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     * @param noteNumber The (invalid) note number input by the user.","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    public InvalidNoteException(int noteNumber) {","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"        super(\"Sorry, the note number \" + noteNumber + \" has not been added/cannot be added! Please try again\");","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public String getExceptionType() {","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        return \"Invalid note number\";","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":21}},{"path":"src/main/java/duke/Exception/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * An InvalidTaskException a type of DukeException that is thrown when a certain valid command based on a task","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" * number (mark, delete, unmark) takes in a task number of a task which does not yet exist/cannot exist.","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"public class InvalidTaskException extends DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an InvalidTaskException.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     * @param taskNumber The (invalid) task number input by the user.","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    public InvalidTaskException(int taskNumber) {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"        super(\"Sorry, the task number \" + taskNumber + \" has not been added/cannot be added! Please try again\");","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public String getExceptionType() {","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        return \"Invalid task number\";","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ZHTang29":21}},{"path":"src/main/java/duke/Exception/NoSuchFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Exception;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * A NoSuchFileException a type of DukeException that is thrown when the file that is to be input/output","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" * fails to exist.","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"public class NoSuchFileException extends DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * Constructor for the NoSuchFileException.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     * @param input The (invalid) file name.","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    public NoSuchFileException(String input) {","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"        super(\"No such file name\" + input +  \"exists! Sorry!\");","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public String getExceptionType() {","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        return \"No such file\";","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":21}},{"path":"src/main/java/duke/Note/Note.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Note;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * The abstraction behind each task stored by the duke.Utilities.Duke note list.","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"public class Note {","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"    private String content;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a Note object.","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"     * @param content Content of the note.","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    public Note(String content) {","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * Create a new note that is loaded with data that comes from a notes list.","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * @param data Data to load in the note object.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     * @return Note object.","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    public static Note dataToNote(String data) {","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"        return new Note(data);","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"    public String toString() {","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        return this.content;","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":31}},{"path":"src/main/java/duke/Task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":" * The Deadline task which is to be stored by duke.Utilities.Duke. A Deadline has a task name, as well as a due time.","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a deadline object.","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * @param deadline The time at which the task is due.","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public Deadline(String name, LocalDateTime deadline) {","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        super(name);","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"        return \"D\";","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    public String taskToData() {","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"        return String.format(\"[D] | %s | %s | %s\", this.getStatusIcon(), this.name, this.deadline);","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"        return String.format(\"%s (by: %s)\", name, deadline.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")));","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"ZHTang29":37}},{"path":"src/main/java/duke/Task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":" * The Event task which is to be stored by duke.Utilities.Duke. An Event has an event name, start time and end time.","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    protected LocalDateTime until;","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for an event object.","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * @param name The event name.","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     * @param from The event start time.","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"     * @param until The event end time.","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    public Event(String name, LocalDateTime from, LocalDateTime until) {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"        super(name);","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"        this.until \u003d until;","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"        return \"E\";","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"    public String taskToData() {","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"        return String.format(\"[E] | %s | %s | %s | %s\", this.getStatusIcon(), this.name, this.from, this.until);","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"        return name + \" (from: \" + this.from.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"))","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"                + \" to: \" + this.until .format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")) + \")\";","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"ZHTang29":42}},{"path":"src/main/java/duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" * The abstraction behind each task stored by the duke.Utilities.Duke task list.","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    protected String name;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a task object.","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"     * The method to convert a string of data into a task object.","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"     * @param data String of data to take in.","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"     * @return The corresponding task object.","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    public static Task dataToTask(String data) {","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"        //| is a metacharacter in regex. You\u0027d need to escape it:","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        String[] tokens \u003d data.split(\"\\\\|\");","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"        //remove spaces in between","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"        for (int i \u003d 0; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"            tokens[i] \u003d tokens[i].trim();","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"        switch(tokens[0]) {","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"            case \"[T]\":","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"                task \u003d new ToDo(tokens[2]);","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"                break;","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"            case \"[D]\":","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"                LocalDateTime deadline \u003d LocalDateTime.parse(tokens[3]);","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"                task \u003d new Deadline(tokens[2], deadline);","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"                break;","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"            case \"[E]\":","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"                LocalDateTime from \u003d LocalDateTime.parse(tokens[3]);","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"                LocalDateTime until \u003d LocalDateTime.parse(tokens[4]);","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"                task \u003d new Event(tokens[2], from, until);","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"                break;","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"        if(tokens[1].equals(\"X\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"            assert task !\u003d null;","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"            task.silentMark();","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"        return task;","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"     * Get the current status of the task (whether it is done).","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"     * If the task is done, return \u0027X\u0027. Or else, return \u0027 \u0027.","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"     * @return The status of the task.","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"ZHTang29"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"ZHTang29"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"ZHTang29"},"content":"     * Mark a task as done without returning anything to the UI.","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":70,"author":{"gitId":"ZHTang29"},"content":"    public void silentMark() {","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"ZHTang29"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"ZHTang29"},"content":"     * Mark a task as done, then return a confirmation message to show that the task has","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"ZHTang29"},"content":"     * been successfully marked.","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"ZHTang29"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":79,"author":{"gitId":"ZHTang29"},"content":"    public String markAsDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"ZHTang29"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"ZHTang29"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"ZHTang29"},"content":"                + String.format(\"[%s][X] %s\", this.getTaskType(), this);","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":85,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":86,"author":{"gitId":"ZHTang29"},"content":"     * Mark a task as undone, then return a confirmation message to show that the task has","lastModifiedDate":"2023-02-12"},{"lineNumber":87,"author":{"gitId":"ZHTang29"},"content":"     * been successfully unmarked.","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"ZHTang29"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"ZHTang29"},"content":"    public String markAsUndone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":91,"author":{"gitId":"ZHTang29"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"ZHTang29"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"ZHTang29"},"content":"                + String.format(\"[%s][ ] %s\", this.getTaskType(), this);","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"ZHTang29"},"content":"     * Output a string of data which represents a task, to be stored in the data file.","lastModifiedDate":"2023-02-12"},{"lineNumber":98,"author":{"gitId":"ZHTang29"},"content":"     * @return The string of data representing the task.","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"ZHTang29"},"content":"    public abstract String taskToData();","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"ZHTang29"},"content":"     * Output a string which represents the type of task.","lastModifiedDate":"2023-02-12"},{"lineNumber":104,"author":{"gitId":"ZHTang29"},"content":"     * For Deadline, return \u0027D\u0027.","lastModifiedDate":"2023-02-12"},{"lineNumber":105,"author":{"gitId":"ZHTang29"},"content":"     * For Event, return \u0027E\u0027.","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"ZHTang29"},"content":"     * For ToDo, return \u0027T\u0027.","lastModifiedDate":"2023-02-12"},{"lineNumber":107,"author":{"gitId":"ZHTang29"},"content":"     * @return The type of task.","lastModifiedDate":"2023-02-12"},{"lineNumber":108,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":109,"author":{"gitId":"ZHTang29"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":112,"author":{"gitId":"ZHTang29"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"ZHTang29"},"content":"        return this.name;","lastModifiedDate":"2023-01-22"},{"lineNumber":114,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":115,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ZHTang29":115}},{"path":"src/main/java/duke/Task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":" * The ToDo task which is to be stored by duke.Utilities.Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"     * Constructor for a ToDo task.","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"     * @param name Name of the task.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"        super(name);","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"        return \"T\";","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    public String taskToData() {","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"        return String.format(\"[T] | %s | %s\", this.getStatusIcon(), this.name);","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"ZHTang29":26}},{"path":"src/main/java/duke/Utilities/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"    private void flip() {","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"        db.flip();","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"        return db;","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":61}},{"path":"src/main/java/duke/Utilities/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Command.Command;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":" * The main class to run duke.Utilities.Duke","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":" * @author Zong Hao (ZHTang29)","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"public class Duke {","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    private TaskList tl;","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    private NoteList nl;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    private UI ui;","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    private final String FILEPATH \u003d \"data.txt\";","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * Constructor to set up Duke, tries to load existing lists from the file.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     * If successful, the current task \u0026 note list will be loaded with the contents of the file.","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"     * If unsuccessful, create a new file with the file name, and new empty task \u0026 note list to add to.","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    public Duke() {","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"        ui \u003d new UI();","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"        storage \u003d new Storage(FILEPATH);","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"            tl \u003d new TaskList(storage.loadTasksFromFile());","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"            nl \u003d new NoteList(storage.loadNotesFromFile());","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"            tl \u003d new TaskList();","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"            nl \u003d new NoteList();","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"     * Parse a given user input and returns a String representing the result of the command execution.","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"     * If the user input is valid, returns the confirmation message/the current task list.","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"     * If the user input is not valid, returns the corresponding error message.","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"     * @param input The user input.","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"     * @return The response from Duke.","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"            Command c \u003d new Parser().parseCommand(input);","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"            isExit \u003d c.isByeCommand();","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"            return c.execute(tl, nl, ui, storage);","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"            return exception.toString();","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"     * Check if it is time to close the app (based on whether the user has inputted the \u0027bye\u0027 command).","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"     * @return True if \u0027bye\u0027 command has been entered, false otherwise.","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"    public boolean isShutdownTime() {","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"        return isExit;","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":62}},{"path":"src/main/java/duke/Utilities/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"public class Launcher {","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":12}},{"path":"src/main/java/duke/Utilities/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"            stage.show();","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":32}},{"path":"src/main/java/duke/Utilities/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.DialogBox;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Utilities.Duke;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"import javafx.util.Duration;","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"        assert duke !\u003d null;","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"                \"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\",","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"                dukeImage));","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"        assert userImage !\u003d null;","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"        assert dukeImage !\u003d null;","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"        );","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"ZHTang29"},"content":"        if (duke.isShutdownTime()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"ZHTang29"},"content":"            PauseTransition exitDelay \u003d new PauseTransition(Duration.seconds(1.0));","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ZHTang29"},"content":"            exitDelay.setOnFinished(e -\u003e Platform.exit());","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"ZHTang29"},"content":"            exitDelay.play();","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":69}},{"path":"src/main/java/duke/Utilities/NoteList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Note.Note;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import java.util.List;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":" * The main class that stores the notes that users input.","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"public class NoteList {","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    private List\u003cNote\u003e notes;","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    protected int items;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * Constructor to create a new NoteList object from scratch","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public NoteList() {","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        this.notes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"     * Constructor to create a new NoteList object from an existing list.","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"     * @param notes Existing list of notes.","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    public NoteList(List\u003cNote\u003e notes) {","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        this.notes \u003d notes;","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"        this.items \u003d notes.size();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    public List\u003cNote\u003e getNotes() {","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"        return notes;","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"    public int getItems() {","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"        return items;","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"     * Add a note to the list of notes.","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"     * @param note Note to be added.","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"     * @return Confirmation message that the note is added.","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"    public String addNote(Note note) {","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"        notes.add(note);","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"        items++;","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"        return \"Got it. I\u0027ve added this note:\\n\"","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"                + String.format(\" %s\\n Now you have %s notes in the list.\", note.toString(), items);","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"     * Delete a note from the existing list of notes.","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"     * @param noteNumber Note number of the note to be deleted.","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"     * @return Confirmation message that the node is deleted.","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"    public String deleteNote(int noteNumber) {","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"        Note removedNote \u003d notes.get(noteNumber);","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"        notes.remove(noteNumber);","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"        items--;","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"        return \"Got it. I\u0027ve removed this note:\\n\"","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"                + String.format(\" %s\\n Now you have %s notes in the list.\",","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"                  removedNote, items);","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ZHTang29"},"content":"    public String printNoteList() {","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"ZHTang29"},"content":"        StringBuilder notelist \u003d new StringBuilder();","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"ZHTang29"},"content":"        notelist.append(\"Here are the notes in your list:\" + \"\\n\");","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"ZHTang29"},"content":"        for (int i \u003d 0; i \u003c items; i++) {","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"ZHTang29"},"content":"            String noteToAdd \u003d String.format(\"%s. %s\\n\", i + 1, notes.get(i));","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"ZHTang29"},"content":"            notelist.append(noteToAdd);","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":73,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"ZHTang29"},"content":"        return notelist.toString();","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":76}},{"path":"src/main/java/duke/Utilities/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Command.*;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.*;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":" * Main class that parses the users inputs.","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"public class Parser {","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"     * Takes in the users input and splits it into single word inputs and multi-word inputs to separately handle.","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"     * @param command Users input.","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"     * @return If the user input is valid, return the corresponding (executable) command.","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * @throws DukeException If the user input is invalid, throw the corresponding exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public Command parseCommand(String command) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        String[] tokens \u003d command.split(\" \", 2);","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"        if (tokens.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"            return handleSingleInput(tokens[0]);","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"        } else {","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"            return handleMultiInput(tokens[0], tokens[1]);","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"     * For single word user input, check if user input is a valid single word command.","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"     * If valid, execute it or else throw a corresponding error.","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"     * @param command The users input.","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"     * @return if the user input is a valid command, return the corresponding (executable) command.","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidInputException If the user input is not a supported command, throw this exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"     * @throws IncorrectArgumentsException If the user input is a supported command, but with the wrong number of","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"     * arguments, throw this exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"    public Command handleSingleInput(String command) throws InvalidInputException,","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"            IncorrectArgumentsException {","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"        switch (command) {","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"            case \"bye\":","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"                return new ByeCommand();","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"            case \"list\":","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"                return new ListCommand();","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"            case \"listnotes\":","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"                return new ListNotesCommand();","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"            case \"mark\":","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"            case \"unmark\":","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"            case \"delete\":","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"            case \"todo\":","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"            case \"find\":","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"            case \"addnote\":","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"            case \"deletenote\":","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"                throw new IncorrectArgumentsException(command, 1, 0);","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"            case \"deadline\":","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"                throw new IncorrectArgumentsException(command, 2, 0);","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"            case \"event\":","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"                throw new IncorrectArgumentsException(command, 3, 0);","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"            default:","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"                throw new InvalidInputException(command);","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":64,"author":{"gitId":"ZHTang29"},"content":"     * For multi-word user input, check if user input is a valid multi-word command.","lastModifiedDate":"2023-02-12"},{"lineNumber":65,"author":{"gitId":"ZHTang29"},"content":"     * If valid, execute it or else throw a corresponding error.","lastModifiedDate":"2023-02-12"},{"lineNumber":66,"author":{"gitId":"ZHTang29"},"content":"     * @param command The first word of the users input.","lastModifiedDate":"2023-02-12"},{"lineNumber":67,"author":{"gitId":"ZHTang29"},"content":"     * @param details The subsequent words of the user input.","lastModifiedDate":"2023-02-12"},{"lineNumber":68,"author":{"gitId":"ZHTang29"},"content":"     * @return if the user input is a valid command, return the corresponding (executable) command.","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidInputException If the user input is not a supported command, throw this exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":70,"author":{"gitId":"ZHTang29"},"content":"     * @throws IncorrectArgumentsException If the user input is a supported command, but with the wrong number of","lastModifiedDate":"2023-02-12"},{"lineNumber":71,"author":{"gitId":"ZHTang29"},"content":"     * arguments, throw this exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":72,"author":{"gitId":"ZHTang29"},"content":"     * @throws InvalidArgumentsException If the user input is a supported command, but with the arguments given in","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"ZHTang29"},"content":"     * a wrong format, throw this exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"ZHTang29"},"content":"    public Command handleMultiInput(String command, String details) throws IncorrectArgumentsException,","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"ZHTang29"},"content":"            InvalidInputException, InvalidArgumentsException, InvalidEventException {","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"ZHTang29"},"content":"        switch (command) {","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"ZHTang29"},"content":"            case \"bye\":","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"ZHTang29"},"content":"            case \"list\":","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"ZHTang29"},"content":"            case \"listnotes\":","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"ZHTang29"},"content":"                throw new IncorrectArgumentsException(command, 0, 1);","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"ZHTang29"},"content":"            case \"mark\":","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"ZHTang29"},"content":"                return new MarkCommand(details);","lastModifiedDate":"2023-02-13"},{"lineNumber":84,"author":{"gitId":"ZHTang29"},"content":"            case \"unmark\":","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"ZHTang29"},"content":"                return new UnmarkCommand(details);","lastModifiedDate":"2023-02-13"},{"lineNumber":86,"author":{"gitId":"ZHTang29"},"content":"            case \"delete\":","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"ZHTang29"},"content":"                return new DeleteCommand(details);","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"ZHTang29"},"content":"            case \"deletenote\":","lastModifiedDate":"2023-02-13"},{"lineNumber":89,"author":{"gitId":"ZHTang29"},"content":"                return new DeleteNoteCommand(details);","lastModifiedDate":"2023-02-13"},{"lineNumber":90,"author":{"gitId":"ZHTang29"},"content":"            case \"todo\":","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"ZHTang29"},"content":"                return new ToDoCommand(details);","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"ZHTang29"},"content":"            case \"deadline\":","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"ZHTang29"},"content":"                String[] deadlineTokens \u003d details.split(\"/by\");","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":95,"author":{"gitId":"ZHTang29"},"content":"                if (deadlineTokens.length !\u003d 2) {","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"ZHTang29"},"content":"                    throw new IncorrectArgumentsException(\"deadline\", 2, deadlineTokens.length);","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"ZHTang29"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":99,"author":{"gitId":"ZHTang29"},"content":"                String DlTaskName \u003d deadlineTokens[0];","lastModifiedDate":"2023-02-12"},{"lineNumber":100,"author":{"gitId":"ZHTang29"},"content":"                String DlDueTime \u003d deadlineTokens[1];","lastModifiedDate":"2023-02-12"},{"lineNumber":101,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":102,"author":{"gitId":"ZHTang29"},"content":"                return new DeadlineCommand(DlTaskName, DlDueTime);","lastModifiedDate":"2023-02-12"},{"lineNumber":103,"author":{"gitId":"ZHTang29"},"content":"            case \"event\":","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"ZHTang29"},"content":"                String[] eventTokens \u003d details.split(\"/from\");","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":106,"author":{"gitId":"ZHTang29"},"content":"                if (eventTokens.length !\u003d 2) {","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"ZHTang29"},"content":"                    throw new IncorrectArgumentsException(\"event\", 3, eventTokens.length + 1);","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"ZHTang29"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":110,"author":{"gitId":"ZHTang29"},"content":"                String[] eventTokens1 \u003d eventTokens[1].split(\"/to\");","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":112,"author":{"gitId":"ZHTang29"},"content":"                if (eventTokens1.length !\u003d 2) {","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"ZHTang29"},"content":"                    throw new IncorrectArgumentsException(\"event\", 3, eventTokens.length + eventTokens1.length - 1);","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"ZHTang29"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":115,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":116,"author":{"gitId":"ZHTang29"},"content":"                String eTaskName \u003d eventTokens[0];","lastModifiedDate":"2023-02-12"},{"lineNumber":117,"author":{"gitId":"ZHTang29"},"content":"                String eStartTime \u003d eventTokens1[0];","lastModifiedDate":"2023-02-12"},{"lineNumber":118,"author":{"gitId":"ZHTang29"},"content":"                String eEndTime \u003d eventTokens1[1];","lastModifiedDate":"2023-02-12"},{"lineNumber":119,"author":{"gitId":"ZHTang29"},"content":"                return new EventCommand(eTaskName, eStartTime, eEndTime);","lastModifiedDate":"2023-02-12"},{"lineNumber":120,"author":{"gitId":"ZHTang29"},"content":"            case \"find\":","lastModifiedDate":"2023-02-12"},{"lineNumber":121,"author":{"gitId":"ZHTang29"},"content":"                return new FindCommand(details);","lastModifiedDate":"2023-02-12"},{"lineNumber":122,"author":{"gitId":"ZHTang29"},"content":"            case \"addnote\":","lastModifiedDate":"2023-02-13"},{"lineNumber":123,"author":{"gitId":"ZHTang29"},"content":"                return new AddNoteCommand(details);","lastModifiedDate":"2023-02-13"},{"lineNumber":124,"author":{"gitId":"ZHTang29"},"content":"            default:","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"ZHTang29"},"content":"                throw new InvalidInputException(command);","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":128}},{"path":"src/main/java/duke/Utilities/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Exception.NoSuchFileException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import duke.Note.Note;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import duke.Task.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"import java.io.File;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"import java.util.List;","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":" * The main class to store and load data from a file.","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"public class Storage {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    private List\u003cNote\u003e notes;","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"    private File file;","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"     * The constructor for a storage object, that loads a file from the filepath or creates a new file with the","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"     * filepath name input.","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"     * @param filepath The file name.","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"        this.notes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"        this.file \u003d new File(filepath);","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"     * Loads an existing task list from the data file.","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"     * @return the list of tasks stored in the file.","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"     * @throws NoSuchFileException If there is no space to make the file, throw this exception.","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"    public List\u003cTask\u003e loadTasksFromFile() throws NoSuchFileException {","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(this.file));","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"            tasks.clear();","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"            String line \u003d reader.readLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"            if (line !\u003d null \u0026\u0026 line.equals(\"Tasks:\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"                line \u003d reader.readLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"                while (line !\u003d null \u0026\u0026 !line.equals(\"Notes:\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"                    tasks.add(Task.dataToTask(line));","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"                    line \u003d reader.readLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"                }","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"            return tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"            throw new NoSuchFileException(file.getName());","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"     * Loads an existing notes list from the data file.","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"ZHTang29"},"content":"     * @return the list of notes stored in the file.","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"ZHTang29"},"content":"     * @throws NoSuchFileException If there is no space to make the file, throw this exception.","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"ZHTang29"},"content":"    public List\u003cNote\u003e loadNotesFromFile() throws NoSuchFileException {","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"ZHTang29"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(this.file));","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"ZHTang29"},"content":"            notes.clear();","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"ZHTang29"},"content":"            String line \u003d reader.readLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"ZHTang29"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2023-02-13"},{"lineNumber":73,"author":{"gitId":"ZHTang29"},"content":"                if (line.equals(\"Notes:\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"ZHTang29"},"content":"                    line \u003d reader.readLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"ZHTang29"},"content":"                    while (line !\u003d null) {","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"ZHTang29"},"content":"                        notes.add(Note.dataToNote(line));","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"ZHTang29"},"content":"                        line \u003d reader.readLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":78,"author":{"gitId":"ZHTang29"},"content":"                    }","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"ZHTang29"},"content":"                }","lastModifiedDate":"2023-02-13"},{"lineNumber":80,"author":{"gitId":"ZHTang29"},"content":"                line \u003d reader.readLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":81,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":82,"author":{"gitId":"ZHTang29"},"content":"            return notes;","lastModifiedDate":"2023-02-13"},{"lineNumber":83,"author":{"gitId":"ZHTang29"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-02-13"},{"lineNumber":84,"author":{"gitId":"ZHTang29"},"content":"            throw new NoSuchFileException(file.getName());","lastModifiedDate":"2023-02-13"},{"lineNumber":85,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":86,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":87,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":89,"author":{"gitId":"ZHTang29"},"content":"     * Saves the existing task list and notes list with the latest changes to the file.","lastModifiedDate":"2023-02-13"},{"lineNumber":90,"author":{"gitId":"ZHTang29"},"content":"     * @param taskList The task list with the latest changes to be saved.","lastModifiedDate":"2023-02-12"},{"lineNumber":91,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":92,"author":{"gitId":"ZHTang29"},"content":"    public void saveToFile(List\u003cTask\u003e taskList, List\u003cNote\u003e noteList) {","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"ZHTang29"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"ZHTang29"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"ZHTang29"},"content":"            if (!taskList.isEmpty()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":96,"author":{"gitId":"ZHTang29"},"content":"                writer.write(\"Tasks:\\n\");","lastModifiedDate":"2023-02-13"},{"lineNumber":97,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":98,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":99,"author":{"gitId":"ZHTang29"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"ZHTang29"},"content":"                writer.write(task.taskToData() + \u0027\\n\u0027);","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":103,"author":{"gitId":"ZHTang29"},"content":"            if (!noteList.isEmpty()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":104,"author":{"gitId":"ZHTang29"},"content":"                writer.write(\"Notes:\\n\");","lastModifiedDate":"2023-02-13"},{"lineNumber":105,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":106,"author":{"gitId":"ZHTang29"},"content":"            for (Note note : noteList) {","lastModifiedDate":"2023-02-13"},{"lineNumber":107,"author":{"gitId":"ZHTang29"},"content":"                writer.write(note.toString() + \u0027\\n\u0027);","lastModifiedDate":"2023-02-13"},{"lineNumber":108,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":109,"author":{"gitId":"ZHTang29"},"content":"            writer.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"ZHTang29"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"ZHTang29"},"content":"            System.out.println(\"Could not save the file :( \" + e);","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":115,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":115}},{"path":"src/main/java/duke/Utilities/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import duke.Task.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import java.util.List;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":" * The main class that stores the tasks that users input.","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"public class TaskList {","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    protected int items;","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"     * Constructor to create a new task list object from scratch.","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"     * Constructor to create a new task list object from an existing list.","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"     * @param tasks The existing list.","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"        this.items \u003d tasks.size();","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"     * Outputs the existing list of tasks.","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"     * @return List of tasks.","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"        return this.tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"     * Outputs the existing number of tasks in the list.","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"ZHTang29"},"content":"     * @return The number of tasks.","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"ZHTang29"},"content":"    public int getItems() {","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"ZHTang29"},"content":"        return this.items;","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"ZHTang29"},"content":"     * Takes in a task which to add on to the task list, and returns a confirmation message to show the task is","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"ZHTang29"},"content":"     * successfully added.","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"ZHTang29"},"content":"     * @param task The task to add","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"ZHTang29"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"ZHTang29"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"ZHTang29"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"ZHTang29"},"content":"        items++;","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"ZHTang29"},"content":"        return \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"ZHTang29"},"content":"                + String.format(\" [%s][ ] %s\\n Now you have %s tasks in the list.\", task.getTaskType(), task, items);","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"ZHTang29"},"content":"     * Takes in a number of the task which to delete from the task list,","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"ZHTang29"},"content":"     * and returns a confirmation message to show the task is successfully deleted.","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"ZHTang29"},"content":"     * @param taskNumber The task to delete","lastModifiedDate":"2023-02-12"},{"lineNumber":64,"author":{"gitId":"ZHTang29"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-02-12"},{"lineNumber":65,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":66,"author":{"gitId":"ZHTang29"},"content":"    public String deleteTask(int taskNumber) {","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"ZHTang29"},"content":"        Task removedTask \u003d tasks.get(taskNumber);","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"ZHTang29"},"content":"        tasks.remove(taskNumber);","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"ZHTang29"},"content":"        items--;","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"ZHTang29"},"content":"        return \"Got it. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"ZHTang29"},"content":"                + String.format(\" [%s][%s] %s\\n Now you have %s tasks in the list.\",","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"ZHTang29"},"content":"                removedTask.getTaskType(), removedTask.getStatusIcon() , removedTask, items);","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"ZHTang29"},"content":"     * Finds all task in the current task list containing a certain keyword, and returns them in a String.","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"ZHTang29"},"content":"     * @param keyword Keyword to query.","lastModifiedDate":"2023-02-13"},{"lineNumber":78,"author":{"gitId":"ZHTang29"},"content":"     * @return List of tasks in list containing the keyword.","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":80,"author":{"gitId":"ZHTang29"},"content":"    public String findKeyword(String keyword) {","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"ZHTang29"},"content":"        StringBuilder tasksWithKeyword \u003d new StringBuilder();","lastModifiedDate":"2023-02-12"},{"lineNumber":82,"author":{"gitId":"ZHTang29"},"content":"        tasksWithKeyword.append(\"Here are the tasks in your list containing the keyword \" + keyword + \":\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":83,"author":{"gitId":"ZHTang29"},"content":"        int keywordCounter \u003d 1;","lastModifiedDate":"2023-02-12"},{"lineNumber":84,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":85,"author":{"gitId":"ZHTang29"},"content":"        for (Task taskToCheck : tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":86,"author":{"gitId":"ZHTang29"},"content":"            if (taskToCheck.toString().contains(keyword)) {","lastModifiedDate":"2023-02-12"},{"lineNumber":87,"author":{"gitId":"ZHTang29"},"content":"                String taskWithKeyword \u003d String.format(\"%s.[%s][%s] %s\\n\", keywordCounter, taskToCheck.getTaskType(),","lastModifiedDate":"2023-02-12"},{"lineNumber":88,"author":{"gitId":"ZHTang29"},"content":"                        taskToCheck.getStatusIcon(), taskToCheck.toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":89,"author":{"gitId":"ZHTang29"},"content":"                tasksWithKeyword.append(taskWithKeyword);","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"ZHTang29"},"content":"                keywordCounter++;","lastModifiedDate":"2023-02-12"},{"lineNumber":91,"author":{"gitId":"ZHTang29"},"content":"            }","lastModifiedDate":"2023-02-12"},{"lineNumber":92,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":93,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":94,"author":{"gitId":"ZHTang29"},"content":"        return tasksWithKeyword.toString();","lastModifiedDate":"2023-02-12"},{"lineNumber":95,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":96,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":97,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":98,"author":{"gitId":"ZHTang29"},"content":"     * Prints out all the items in the current task list in String form.","lastModifiedDate":"2023-02-13"},{"lineNumber":99,"author":{"gitId":"ZHTang29"},"content":"     * @return The current items in the task list.","lastModifiedDate":"2023-02-13"},{"lineNumber":100,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":101,"author":{"gitId":"ZHTang29"},"content":"    public String printTaskList() {","lastModifiedDate":"2023-01-18"},{"lineNumber":102,"author":{"gitId":"ZHTang29"},"content":"        StringBuilder tasklist \u003d new StringBuilder();","lastModifiedDate":"2023-01-18"},{"lineNumber":103,"author":{"gitId":"ZHTang29"},"content":"        tasklist.append(\"Here are the tasks in your list:\" + \"\\n\");","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":105,"author":{"gitId":"ZHTang29"},"content":"        for (int i \u003d 0; i \u003c items; i++) {","lastModifiedDate":"2023-01-18"},{"lineNumber":106,"author":{"gitId":"ZHTang29"},"content":"            String taskToAdd \u003d String.format(\"%s.[%s][%s] %s\\n\", i + 1, tasks.get(i).getTaskType(),","lastModifiedDate":"2023-02-12"},{"lineNumber":107,"author":{"gitId":"ZHTang29"},"content":"                    tasks.get(i).getStatusIcon(), tasks.get(i).toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":108,"author":{"gitId":"ZHTang29"},"content":"            tasklist.append(taskToAdd);","lastModifiedDate":"2023-02-12"},{"lineNumber":109,"author":{"gitId":"ZHTang29"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":110,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":111,"author":{"gitId":"ZHTang29"},"content":"        return tasklist.toString();","lastModifiedDate":"2023-01-18"},{"lineNumber":112,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":113,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ZHTang29":113}},{"path":"src/main/java/duke/Utilities/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Utilities;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":" * User interface class that formats the UI in the terminal.","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"public class UI {","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    private Scanner sc;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"     * Constructor to create a new UI object.","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"    public UI() {","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"     * Calls to the scanner to take in the next user input.","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"     * @return The user input.","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"ZHTang29"},"content":"    public String readCommand() {","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"ZHTang29"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"ZHTang29"},"content":"     * Prints the farewell message to the UI.","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"ZHTang29"},"content":"    public String getFarewellMessage() {","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ZHTang29"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"ZHTang29"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"ZHTang29"},"content":"     * Prints to the UI an error message, if duke.Utilities.Duke is being run for the first time and the required data files to","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ZHTang29"},"content":"     * read from do not exist.","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"ZHTang29"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"ZHTang29"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"ZHTang29"},"content":"        System.out.println(\"Running Duke for the first time - Creating required data files\");","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"ZHTang29":40}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.Utilities.MainWindow\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ZHTang29":19}},{"path":"src/test/java/duke/Task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"    @Test","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    public void testFormatting() {","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"        Deadline dl \u003d new Deadline(\"sleep\", LocalDateTime.parse(\"2023-02-12 1530\", formatter));","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"        assertEquals(\"sleep (by: 12/02/2023 15:30)\", dl.toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"ZHTang29":18}},{"path":"src/test/java/duke/Task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"public class EventTest {","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    @Test","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"    public void testFormatting() {","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"ZHTang29"},"content":"        LocalDateTime from \u003d LocalDateTime.parse(\"2023-02-12 1400\", formatter);","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"ZHTang29"},"content":"        LocalDateTime until \u003d LocalDateTime.parse(\"2023-02-12 1600\", formatter);","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"ZHTang29"},"content":"        Event event \u003d new Event(\"do CS2103 ip\", from, until);","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"ZHTang29"},"content":"        assertEquals(\"do CS2103 ip (from: 12/02/2023 14:00 to: 12/02/2023 16:00)\", event.toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"ZHTang29":20}},{"path":"src/test/java/duke/Task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"package duke.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"public class ToDoTest {","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"    @Test","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"    public void testFormatting() {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"        ToDo td \u003d new ToDo(\"play floorball\");","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"        assertEquals(\"play floorball\", td.toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"ZHTang29":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ZHTang29"},"content":"todo borrow book","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"ZHTang29"},"content":"deadline sleep /by 10pm","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"ZHTang29"},"content":"event play floorball /from 6pm /to 9.30pm","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"ZHTang29"},"content":"mark 1","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"ZHTang29"},"content":"mark 4","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"ZHTang29"},"content":"mark 3","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"ZHTang29"},"content":"todo meet coach","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"ZHTang29"},"content":"remove 2","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"ZHTang29"},"content":"delete 2","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"ZHTang29"},"content":"unmark 1","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ZHTang29"},"content":"list","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ZHTang29"},"content":"deadline sleep","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"ZHTang29"},"content":"event wash clothes /from 6pm","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"ZHTang29"},"content":"bye","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ZHTang29":14}}]
