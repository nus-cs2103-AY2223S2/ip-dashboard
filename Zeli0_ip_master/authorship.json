[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"# Skylar","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"\u003e \"My name is Skyler White yo\" - Skyler White ([source](https://knowyourmeme.com/memes/my-name-is-skyler-white-yo))","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"Thus speaks Skylar, an advanced **chat-bot** here to make your life easier. :bowtie:","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"Skylar is text-based, and helps to record and organize any tasks that you need to do, all while responding in an entertaining manner!","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"## Setting up Skylar","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"Here","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"3. After that, locate the `src/main/java/center/center.Hoster.java` file, right-click it, and choose `Run center.Hoster.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"Zeli0":9}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"dependencies {","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"    testImplementation(\"org.junit.jupiter:junit-jupiter-api:5.5.0\")","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"javafx {","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"    version \u003d \"11.0.2\"","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.graphics\u0027, \u0027javafx.base\u0027 ]","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"-":36,"Zeli0":19}},{"path":"src/main/java/UI/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package UI;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-09"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-09"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-09"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-09"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.text.FontPosture;","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.text.FontWeight;","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"    private void flip() {","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"     * Sets the appearance of the Skylar textbox to be different from that of the user.","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"    private void setNewAppearance() {","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"        dialog.setFont(Font.font(\"Verdana\", FontWeight.BOLD, 12));","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"Zeli0"},"content":"        dialog.setStyle(\"-fx-background-color: burlywood; \" +","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"Zeli0"},"content":"                \"-fx-border-color:  chocolate; \" +","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"Zeli0"},"content":"                \"-fx-border-style: solid inside; \" +","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"Zeli0"},"content":"                \"-fx-border-width: 2; \" +","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"Zeli0"},"content":"                \"-fx-border-image-insets: 5; \" +","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"Zeli0"},"content":"                \"-fx-border-radius: 5;\" +","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"Zeli0"},"content":"                \"-fx-background-radius: 5\");","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":68,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":69,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"Zeli0"},"content":"     * Sets up the user\u0027s dialog box.","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"Zeli0"},"content":"     * @param text the text to be displayed in the box","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"Zeli0"},"content":"     * @param img the user\u0027s display icon","lastModifiedDate":"2023-02-15"},{"lineNumber":73,"author":{"gitId":"Zeli0"},"content":"     * @return the created dialogbox","lastModifiedDate":"2023-02-15"},{"lineNumber":74,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"Zeli0"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"Zeli0"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":78,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":79,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"Zeli0"},"content":"     * Sets up Skylar\u0027s dialog box.","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"Zeli0"},"content":"     * @param text the text to be displayed in the box","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"Zeli0"},"content":"     * @param img the user\u0027s display icon","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"Zeli0"},"content":"     * @return the created dialogbox","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"Zeli0"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-13"},{"lineNumber":86,"author":{"gitId":"Zeli0"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-13"},{"lineNumber":87,"author":{"gitId":"Zeli0"},"content":"        db.flip();","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"Zeli0"},"content":"        db.setNewAppearance();","lastModifiedDate":"2023-02-13"},{"lineNumber":89,"author":{"gitId":"Zeli0"},"content":"        return db;","lastModifiedDate":"2023-02-09"},{"lineNumber":90,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":91,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"Zeli0":91}},{"path":"src/main/java/UI/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package UI;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"import java.util.Objects;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"import center.Skylar;","lastModifiedDate":"2023-02-14"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"import javafx.util.Duration;","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"    private Skylar skylar;","lastModifiedDate":"2023-02-14"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    private Image userPic \u003d new javafx.scene.image.Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));","lastModifiedDate":"2023-02-14"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"    private Image skylarPic \u003d new Image(this.getClass().getResourceAsStream(\"/images/skyler.jpg\"));","lastModifiedDate":"2023-02-14"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.startMessage(), skylarPic));","lastModifiedDate":"2023-02-14"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"    public void setSkylar(Skylar d) {","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        skylar \u003d d;","lastModifiedDate":"2023-02-14"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Skylar\u0027s reply and then appends them to","lastModifiedDate":"2023-02-14"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"    @FXML","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"        String response \u003d skylar.getResponse(input);","lastModifiedDate":"2023-02-14"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"                DialogBox.getUserDialog(input, userPic),","lastModifiedDate":"2023-02-14"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"                DialogBox.getDukeDialog(response, skylarPic)","lastModifiedDate":"2023-02-14"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"        );","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"        if (Objects.equals(response, Ui.close())) {","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(5));","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"            delay.setOnFinished(event -\u003e  Platform.exit());","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"            delay.play();","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"Zeli0":62}},{"path":"src/main/java/UI/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package UI;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import task.Task;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"public class Ui {","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    // For all interactions with the user","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"     * Closes the UI from accepting any more inputs.","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    public static String close() {","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"        //Todo: Figure out a way to close the application when this is called","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"        return \"Pleasure doing business with you.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"     * Prints the corresponding error message when the user inputs a command not registered","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"     *  in Duke.","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"    public static String unknownCommand() {","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"        return \"Sorry sir, didn\u0027t quite get that.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"     * Prints the opening message for Duke.","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    public static String startMessage() {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"        return \"My name is Skyler White yo \\nHow can I help you? Type help to learn \" +","lastModifiedDate":"2023-02-14"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"                \"about the full list of commands.\";","lastModifiedDate":"2023-02-14"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"     * Displays an error message if Duke fails to read from the user\u0027s provided input path or the default write path","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"     * of the program after it terminates.","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"    public static String showLoadingError() {","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        return \"Looks like you don\u0027t have any old lists for me to include. That\u0027s alright; we\u0027ll start\" +","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"                \" from scratch!\";","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"    public static String showArrayOutOfBoundsError() {","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"        return \"Woah there. Got an index problem. That entry does not exist.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"     * Prints the error message for when a user makes a command, but with incorrect formatting.","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"     * @param message a String that contains the details for why the command failed.","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"    public static String showInvalidInputError(String message) {","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"        return \"Whoa. That command doesn\u0027t look right. Here\u0027s what seems to be wrong:\\n\" + message;","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"     * Prints the success message when the given task in the list has been marked as completed.","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"     * @param task the task that has been marked as completed","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"Zeli0"},"content":"    public static String showMarkSuccess(Task task) {","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"Zeli0"},"content":"        return \"Gotcha. Just marked this task as done:\\n\" + task;","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"Zeli0"},"content":"     * Prints the success message when the given task in the list has been marked as not completed.","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"Zeli0"},"content":"     * @param task the task that has been marked as not completed","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"Zeli0"},"content":"    public static String showUnmarkSuccess(Task task) {","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"Zeli0"},"content":"        return \"Gotcha. Just marked this task as not done:\\n\" + task;","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"Zeli0"},"content":"     * Prints success message when the given task has been added to the list.","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"Zeli0"},"content":"     * @param task the task that was added to the list of tasks","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"Zeli0"},"content":"     * @param list the list of tasks","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"Zeli0"},"content":"    public static String showAddTaskSuccess(Task task, TaskList list) {","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"Zeli0"},"content":"        return \"Gotcha. Just added this task to the list:\\n\" + task + \"\\n\" + showListLength(list);","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"Zeli0"},"content":"     * Prints success message when the given task has been removed from the list.","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"Zeli0"},"content":"     * @param task the task that was removed from the list of tasks","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"Zeli0"},"content":"     * @param list the list of tasks","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"Zeli0"},"content":"    public static String showDeleteSuccess(Task task, TaskList list) {","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"Zeli0"},"content":"        return \"Uh huh. Just removed this task:\\n\" + task + \"\\n\" + showListLength(list);","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"Zeli0"},"content":"     * Prints all the elements in the provided list of tasks with numerical labels.","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"Zeli0"},"content":"     * @param list the list of tasks to print","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"Zeli0"},"content":"    public static String showListState(TaskList list) {","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"Zeli0"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"Zeli0"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++){","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"Zeli0"},"content":"            sb.append(i).append(\". \").append(list.get(i - 1));","lastModifiedDate":"2023-02-13"},{"lineNumber":98,"author":{"gitId":"Zeli0"},"content":"            if (i !\u003d list.size()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":99,"author":{"gitId":"Zeli0"},"content":"                sb.append(System.lineSeparator());","lastModifiedDate":"2023-02-13"},{"lineNumber":100,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":101,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"Zeli0"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":103,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"Zeli0"},"content":"    public static String showListLength(TaskList list) {","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"Zeli0"},"content":"        return \"You have \" + list.size() + \" tasks left. Anything else?\";","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"Zeli0"},"content":"    public static String showFindListState(TaskList list, String keyword) {","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"Zeli0"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Righto, here are the tasks that contain the word \\\"\"","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"Zeli0"},"content":"                + keyword + \"\\\":\");","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"Zeli0"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++){","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"Zeli0"},"content":"            sb.append(i).append(\". \").append(list.get(i - 1));","lastModifiedDate":"2023-02-13"},{"lineNumber":114,"author":{"gitId":"Zeli0"},"content":"            if (i !\u003d list.size()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":115,"author":{"gitId":"Zeli0"},"content":"                sb.append(System.lineSeparator());","lastModifiedDate":"2023-02-13"},{"lineNumber":116,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":117,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":118,"author":{"gitId":"Zeli0"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":119,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":120,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"Zeli0":120}},{"path":"src/main/java/center/Hoster.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package center;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":" * Hosts the Duke Class","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"public class Hoster {","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"     * Launches Duke.","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"     * @param args the parameters for the main method","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"        Application.launch(Main.class,args);","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"Zeli0":22}},{"path":"src/main/java/center/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package center;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import UI.MainWindow;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    private Skylar skylar \u003d new Skylar();","lastModifiedDate":"2023-02-14"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setSkylar(skylar);","lastModifiedDate":"2023-02-14"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"            stage.show();","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"Zeli0":28}},{"path":"src/main/java/center/Skylar.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package center;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import command.Parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import command.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"public class Skylar {","lastModifiedDate":"2023-02-14"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    private Parser parser;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    //Todo: Let the user input the path to an existing list file that they have","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"    public Skylar() {","lastModifiedDate":"2023-02-14"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"        parser \u003d new Parser(tasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"        return parser.processInput(input);","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":1,"Zeli0":27}},{"path":"src/main/java/command/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"public class InvalidInputException extends Exception{","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    public InvalidInputException(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"        super(message);","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":7}},{"path":"src/main/java/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import UI.Ui;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import task.Event;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"import task.Todo;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"import java.util.Locale;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"public class Parser {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    // Interprets user input","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"    TaskList list;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"    public Parser(TaskList list) {","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"     * Central hub for processing user input and determining which specific process command should be used.","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"     * @param input the line of input that the user keyed in","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"    public String processInput(String input) {","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"        String[] inputAnalyzed \u003d input.split(\" \");","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"            checkIllegalCharacter(input);","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"            operationText \u003d checkOperationInputs(input, inputAnalyzed);","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"            additionText \u003d  checkAddEntryInputs(input, inputAnalyzed);","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"            return Ui.showInvalidInputError(e.getMessage());","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"            return Ui.showArrayOutOfBoundsError();","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"            return Ui.showInvalidInputError(\"I only take integers for number inputs.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"        assert !input.contains(\"#\"): \"Input should not have #\";","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        if (operationText !\u003d null) {","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"            return operationText;","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"        } else if (additionText !\u003d null) {","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"            return additionText;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"        } else {","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"            return Ui.unknownCommand();","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"     * Checks if the input contains the # character, which interferes with the storing function of the program.","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user has written an input with #","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"    public void checkIllegalCharacter(String input) throws InvalidInputException {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"        if (input.contains(\"#\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Illegal character \u0027#\u0027.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"Zeli0"},"content":"     * Checks if the user\u0027s input corresponds to one of the commands that operates the list or the program at large, and","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"Zeli0"},"content":"     * calls the corresponding commands if so.","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"Zeli0"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the user\u0027s input after splitting based on spaces","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"Zeli0"},"content":"     * @return the output text to be displayed on the UI, or null if the input does not match","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException when the user inputs their command in the wrong format","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException when the user attempts to access a position in the list that doesn\u0027t exist","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException when the user inputs something other than an integer","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"Zeli0"},"content":"    public String checkOperationInputs(String input, String[] inputAnalyzed) throws InvalidInputException,","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"Zeli0"},"content":"            IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"Zeli0"},"content":"        switch (inputAnalyzed[0].toLowerCase(Locale.ROOT)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"Zeli0"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"Zeli0"},"content":"            return processByeOperation(inputAnalyzed);","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"Zeli0"},"content":"        case \"list\":","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"Zeli0"},"content":"            return processListOperation(inputAnalyzed);","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"Zeli0"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"Zeli0"},"content":"            return processMarkOperation(inputAnalyzed);","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"Zeli0"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"Zeli0"},"content":"            return processUnmarkOperation(inputAnalyzed);","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"Zeli0"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"Zeli0"},"content":"            return processDeleteOperation(inputAnalyzed);","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"Zeli0"},"content":"        case \"find\":","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"Zeli0"},"content":"            return processFindOperation(input);","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"Zeli0"},"content":"        default:","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"Zeli0"},"content":"            return null;","lastModifiedDate":"2023-02-15"},{"lineNumber":87,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":88,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":89,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":90,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":91,"author":{"gitId":"Zeli0"},"content":"     * Checks if the user\u0027s input corresponds to one of the commands that adds new elements to the list, and calls the","lastModifiedDate":"2023-02-15"},{"lineNumber":92,"author":{"gitId":"Zeli0"},"content":"     * corresponding commands if so.","lastModifiedDate":"2023-02-15"},{"lineNumber":93,"author":{"gitId":"Zeli0"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-02-15"},{"lineNumber":94,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the user\u0027s input after splitting based on spaces","lastModifiedDate":"2023-02-15"},{"lineNumber":95,"author":{"gitId":"Zeli0"},"content":"     * @return the output text to be displayed on the UI, or null if the input does not match","lastModifiedDate":"2023-02-15"},{"lineNumber":96,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException when the user inputs their command in the wrong format","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException when the user attempts to access a position in the list that doesn\u0027t exist","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException when the user inputs something other than an integer","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"Zeli0"},"content":"    public String checkAddEntryInputs(String input, String[] inputAnalyzed) throws InvalidInputException,","lastModifiedDate":"2023-02-15"},{"lineNumber":101,"author":{"gitId":"Zeli0"},"content":"            IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2023-02-15"},{"lineNumber":102,"author":{"gitId":"Zeli0"},"content":"        switch (inputAnalyzed[0].toLowerCase(Locale.ROOT)) {","lastModifiedDate":"2023-02-15"},{"lineNumber":103,"author":{"gitId":"Zeli0"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"Zeli0"},"content":"            return processDeadlineOperation(input);","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"Zeli0"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-30"},{"lineNumber":106,"author":{"gitId":"Zeli0"},"content":"            return processTodoOperation(input);","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"Zeli0"},"content":"        case \"event\":","lastModifiedDate":"2023-01-30"},{"lineNumber":108,"author":{"gitId":"Zeli0"},"content":"            return processEventOperation(input);","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"Zeli0"},"content":"        default:","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"Zeli0"},"content":"            return null;","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is bye, terminating the program.","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":117,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types anything more than bye","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"Zeli0"},"content":"    private String processByeOperation(String[] inputAnalyzed) throws InvalidInputException {","lastModifiedDate":"2023-02-11"},{"lineNumber":120,"author":{"gitId":"Zeli0"},"content":"        //Check if there is anything other than bye","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length \u003e 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"bye\\\".\");","lastModifiedDate":"2023-01-30"},{"lineNumber":123,"author":{"gitId":"Zeli0"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":124,"author":{"gitId":"Zeli0"},"content":"            return Ui.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":126,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":127,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":128,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is list, displaying the details of the entries in the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types anything more than list","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"Zeli0"},"content":"    private String processListOperation(String[] inputAnalyzed) throws InvalidInputException {","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"Zeli0"},"content":"        //Check if there is anything other than list","lastModifiedDate":"2023-01-30"},{"lineNumber":135,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length \u003e 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":136,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"list\\\".\");","lastModifiedDate":"2023-01-30"},{"lineNumber":137,"author":{"gitId":"Zeli0"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":138,"author":{"gitId":"Zeli0"},"content":"            return Ui.showListState(list);","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":140,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":141,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":142,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is mark, marking the task at the index provided as completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types the complete mark command incorrectly","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException for when the user inputs an invalid index","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException for when the user doesn\u0027t input an integer in their input","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"Zeli0"},"content":"    private String processMarkOperation(String[] inputAnalyzed) throws InvalidInputException,","lastModifiedDate":"2023-02-11"},{"lineNumber":150,"author":{"gitId":"Zeli0"},"content":"            IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2023-01-30"},{"lineNumber":151,"author":{"gitId":"Zeli0"},"content":"        // Parse","lastModifiedDate":"2023-01-30"},{"lineNumber":152,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length !\u003d 2) {","lastModifiedDate":"2023-01-30"},{"lineNumber":153,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"mark i\\\", \"","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"Zeli0"},"content":"                    + \"with i being an integer.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":156,"author":{"gitId":"Zeli0"},"content":"        int index \u003d parseInt(inputAnalyzed[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":157,"author":{"gitId":"Zeli0"},"content":"        // List","lastModifiedDate":"2023-01-30"},{"lineNumber":158,"author":{"gitId":"Zeli0"},"content":"        list.mark(index - 1);","lastModifiedDate":"2023-02-12"},{"lineNumber":159,"author":{"gitId":"Zeli0"},"content":"        // UI.Ui","lastModifiedDate":"2023-02-11"},{"lineNumber":160,"author":{"gitId":"Zeli0"},"content":"        return Ui.showMarkSuccess(list.get(index - 1));","lastModifiedDate":"2023-02-11"},{"lineNumber":161,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":162,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":164,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":165,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is unmark, marking the task at the index provided as not","lastModifiedDate":"2023-02-01"},{"lineNumber":166,"author":{"gitId":"Zeli0"},"content":"     * completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":167,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":168,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types the complete unmark command incorrectly","lastModifiedDate":"2023-02-01"},{"lineNumber":169,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException for when the user inputs an invalid index","lastModifiedDate":"2023-02-01"},{"lineNumber":170,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException for when the user doesn\u0027t input an integer in their input","lastModifiedDate":"2023-02-01"},{"lineNumber":171,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":172,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":173,"author":{"gitId":"Zeli0"},"content":"    private String processUnmarkOperation(String[] inputAnalyzed) throws InvalidInputException, IndexOutOfBoundsException,","lastModifiedDate":"2023-02-11"},{"lineNumber":174,"author":{"gitId":"Zeli0"},"content":"            NumberFormatException {","lastModifiedDate":"2023-01-30"},{"lineNumber":175,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length !\u003d 2) {","lastModifiedDate":"2023-01-30"},{"lineNumber":176,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"unmark i\\\", \"","lastModifiedDate":"2023-02-01"},{"lineNumber":177,"author":{"gitId":"Zeli0"},"content":"                    + \"with i being an integer.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":178,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":179,"author":{"gitId":"Zeli0"},"content":"        int index \u003d parseInt(inputAnalyzed[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":180,"author":{"gitId":"Zeli0"},"content":"        list.unmark(index - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":181,"author":{"gitId":"Zeli0"},"content":"        return Ui.showUnmarkSuccess(list.get(index - 1));","lastModifiedDate":"2023-02-11"},{"lineNumber":182,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":183,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":184,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":185,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":186,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is delete, deleting the task at the provided index.","lastModifiedDate":"2023-02-01"},{"lineNumber":187,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":188,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types the complete delete command incorrectly","lastModifiedDate":"2023-02-01"},{"lineNumber":189,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException for when the user inputs an invalid index","lastModifiedDate":"2023-02-01"},{"lineNumber":190,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException for when the user doesn\u0027t input an integer in their input","lastModifiedDate":"2023-02-01"},{"lineNumber":191,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":192,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":193,"author":{"gitId":"Zeli0"},"content":"    private String processDeleteOperation(String[] inputAnalyzed) throws InvalidInputException, IndexOutOfBoundsException,","lastModifiedDate":"2023-02-11"},{"lineNumber":194,"author":{"gitId":"Zeli0"},"content":"            NumberFormatException {","lastModifiedDate":"2023-01-30"},{"lineNumber":195,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length !\u003d 2) {","lastModifiedDate":"2023-01-30"},{"lineNumber":196,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"delete i\\\", \"","lastModifiedDate":"2023-02-01"},{"lineNumber":197,"author":{"gitId":"Zeli0"},"content":"                    + \"with i being an integer.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":198,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":199,"author":{"gitId":"Zeli0"},"content":"        int index \u003d parseInt(inputAnalyzed[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":200,"author":{"gitId":"Zeli0"},"content":"        Task tempTask \u003d list.get(index - 1);","lastModifiedDate":"2023-02-15"},{"lineNumber":201,"author":{"gitId":"Zeli0"},"content":"        list.remove(index - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":202,"author":{"gitId":"Zeli0"},"content":"        return Ui.showDeleteSuccess(tempTask, list);","lastModifiedDate":"2023-02-15"},{"lineNumber":203,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":204,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":205,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":206,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":207,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is deadline, adding a new deadline task to the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":208,"author":{"gitId":"Zeli0"},"content":"     * @param input the user input","lastModifiedDate":"2023-02-01"},{"lineNumber":209,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user inputs the deadline command in the incorrect format","lastModifiedDate":"2023-02-01"},{"lineNumber":210,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":211,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":212,"author":{"gitId":"Zeli0"},"content":"    private String processDeadlineOperation(String input) throws IndexOutOfBoundsException, InvalidInputException {","lastModifiedDate":"2023-02-11"},{"lineNumber":213,"author":{"gitId":"Zeli0"},"content":"        String[] deadlineAnalyze \u003d input.split(\"/by\");","lastModifiedDate":"2023-01-30"},{"lineNumber":214,"author":{"gitId":"Zeli0"},"content":"        String date;","lastModifiedDate":"2023-02-01"},{"lineNumber":215,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":216,"author":{"gitId":"Zeli0"},"content":"            date \u003d deadlineAnalyze[1].trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":217,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":218,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing deadline date.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":219,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":220,"author":{"gitId":"Zeli0"},"content":"        String details \u003d deadlineAnalyze[0]","lastModifiedDate":"2023-02-01"},{"lineNumber":221,"author":{"gitId":"Zeli0"},"content":"                            .split(\"deadline\")[1]","lastModifiedDate":"2023-02-01"},{"lineNumber":222,"author":{"gitId":"Zeli0"},"content":"                            .trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":223,"author":{"gitId":"Zeli0"},"content":"        if (details.equals(\"\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":224,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing deadline description.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":225,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":226,"author":{"gitId":"Zeli0"},"content":"        Deadline newDeadline \u003d new Deadline(details, date);","lastModifiedDate":"2023-02-15"},{"lineNumber":227,"author":{"gitId":"Zeli0"},"content":"        list.add(newDeadline);","lastModifiedDate":"2023-02-15"},{"lineNumber":228,"author":{"gitId":"Zeli0"},"content":"        return Ui.showAddTaskSuccess(newDeadline, list);","lastModifiedDate":"2023-02-15"},{"lineNumber":229,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":230,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":231,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":232,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":233,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is to-do, adding a new to-do task to the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":234,"author":{"gitId":"Zeli0"},"content":"     * @param input the user input","lastModifiedDate":"2023-02-01"},{"lineNumber":235,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user inputs the to-do command in the incorrect format","lastModifiedDate":"2023-02-01"},{"lineNumber":236,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":237,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":238,"author":{"gitId":"Zeli0"},"content":"    private String processTodoOperation(String input) throws InvalidInputException {","lastModifiedDate":"2023-02-11"},{"lineNumber":239,"author":{"gitId":"Zeli0"},"content":"        //Possible Errors:","lastModifiedDate":"2023-01-30"},{"lineNumber":240,"author":{"gitId":"Zeli0"},"content":"        //No descriptor","lastModifiedDate":"2023-01-30"},{"lineNumber":241,"author":{"gitId":"Zeli0"},"content":"        String[] todoAnalyze \u003d input.split(\"todo \");","lastModifiedDate":"2023-01-30"},{"lineNumber":242,"author":{"gitId":"Zeli0"},"content":"        //Analyze","lastModifiedDate":"2023-01-30"},{"lineNumber":243,"author":{"gitId":"Zeli0"},"content":"        Todo newTodo;","lastModifiedDate":"2023-01-30"},{"lineNumber":244,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":245,"author":{"gitId":"Zeli0"},"content":"            newTodo \u003d new Todo(todoAnalyze[1].trim());","lastModifiedDate":"2023-01-30"},{"lineNumber":246,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":247,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing to-do description.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":248,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":249,"author":{"gitId":"Zeli0"},"content":"        //List","lastModifiedDate":"2023-01-30"},{"lineNumber":250,"author":{"gitId":"Zeli0"},"content":"        list.add(newTodo);","lastModifiedDate":"2023-01-30"},{"lineNumber":251,"author":{"gitId":"Zeli0"},"content":"        //UI.Ui","lastModifiedDate":"2023-02-11"},{"lineNumber":252,"author":{"gitId":"Zeli0"},"content":"        return Ui.showAddTaskSuccess(newTodo, list);","lastModifiedDate":"2023-02-11"},{"lineNumber":253,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":254,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":255,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":256,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":257,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is event, adding a new event task to the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":258,"author":{"gitId":"Zeli0"},"content":"     * @param input the user input","lastModifiedDate":"2023-02-01"},{"lineNumber":259,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user inputs the event command in the incorrect format","lastModifiedDate":"2023-02-01"},{"lineNumber":260,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":261,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":262,"author":{"gitId":"Zeli0"},"content":"    private String processEventOperation(String input) throws IndexOutOfBoundsException, InvalidInputException {","lastModifiedDate":"2023-02-11"},{"lineNumber":263,"author":{"gitId":"Zeli0"},"content":"        String[] eventAnalyze;","lastModifiedDate":"2023-01-30"},{"lineNumber":264,"author":{"gitId":"Zeli0"},"content":"        String[] timeAnalyze;","lastModifiedDate":"2023-01-30"},{"lineNumber":265,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":266,"author":{"gitId":"Zeli0"},"content":"            eventAnalyze \u003d input.split(\"/from\");","lastModifiedDate":"2023-01-30"},{"lineNumber":267,"author":{"gitId":"Zeli0"},"content":"            timeAnalyze \u003d eventAnalyze[1].split(\"/to\");","lastModifiedDate":"2023-01-30"},{"lineNumber":268,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":269,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing /from or /to. Format is \\\"event [name] /from [time] /to [time]\\\"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":270,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":271,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":272,"author":{"gitId":"Zeli0"},"content":"        String startTime \u003d timeAnalyze[0].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":273,"author":{"gitId":"Zeli0"},"content":"        String overTime \u003d timeAnalyze[1].trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":274,"author":{"gitId":"Zeli0"},"content":"        String details \u003d eventAnalyze[0]","lastModifiedDate":"2023-02-01"},{"lineNumber":275,"author":{"gitId":"Zeli0"},"content":"                            .split(\"event\")[1]","lastModifiedDate":"2023-02-01"},{"lineNumber":276,"author":{"gitId":"Zeli0"},"content":"                            .trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":277,"author":{"gitId":"Zeli0"},"content":"        if (startTime.equals(\"\") || overTime.equals(\"\") || details.equals(\"\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":278,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing details for at least one of the sections.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":279,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":280,"author":{"gitId":"Zeli0"},"content":"        //Add Item","lastModifiedDate":"2023-01-30"},{"lineNumber":281,"author":{"gitId":"Zeli0"},"content":"        Event newEvent \u003d new Event(details, startTime, overTime);","lastModifiedDate":"2023-02-15"},{"lineNumber":282,"author":{"gitId":"Zeli0"},"content":"        list.add(newEvent);","lastModifiedDate":"2023-01-30"},{"lineNumber":283,"author":{"gitId":"Zeli0"},"content":"        return Ui.showAddTaskSuccess(newEvent, list);","lastModifiedDate":"2023-02-11"},{"lineNumber":284,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":285,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":286,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":287,"author":{"gitId":"Zeli0"},"content":"     * Returns a list of all the tasks in the TaskList containing the provided keyword.","lastModifiedDate":"2023-02-01"},{"lineNumber":288,"author":{"gitId":"Zeli0"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":289,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException when the user does not input anything for a keyword","lastModifiedDate":"2023-02-01"},{"lineNumber":290,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":291,"author":{"gitId":"Zeli0"},"content":"    private String processFindOperation(String input) throws InvalidInputException {","lastModifiedDate":"2023-02-11"},{"lineNumber":292,"author":{"gitId":"Zeli0"},"content":"        String[] inputAnalyzed \u003d input.split(\"find \");","lastModifiedDate":"2023-02-01"},{"lineNumber":293,"author":{"gitId":"Zeli0"},"content":"        String keyword;","lastModifiedDate":"2023-02-01"},{"lineNumber":294,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":295,"author":{"gitId":"Zeli0"},"content":"            keyword \u003d inputAnalyzed[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":296,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":297,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing keyword.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":298,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":299,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":300,"author":{"gitId":"Zeli0"},"content":"        TaskList foundItems \u003d new TaskList();","lastModifiedDate":"2023-02-01"},{"lineNumber":301,"author":{"gitId":"Zeli0"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":302,"author":{"gitId":"Zeli0"},"content":"            if (task.toString().contains(keyword)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":303,"author":{"gitId":"Zeli0"},"content":"                foundItems.add(task);","lastModifiedDate":"2023-02-01"},{"lineNumber":304,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":305,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":306,"author":{"gitId":"Zeli0"},"content":"        return Ui.showFindListState(foundItems,keyword);","lastModifiedDate":"2023-02-11"},{"lineNumber":307,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":308,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":308}},{"path":"src/main/java/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"import java.util.List;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"public class Storage {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    // For loading from and storing into the file","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    Path loadPath;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    Path storePath;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"     * Constructor for a storage object","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"    public Storage() {","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        //loadPath \u003d java.nio.file.Paths.get(home, filePath);;","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"        storePath \u003d java.nio.file.Paths.get(System.getProperty(\"user.dir\"), \"dukeData.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"     * Stores the provided list of tasks into the default storage path of the project.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"     * @param list the list of tasks that will be stored into the filepath.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"    public void store(TaskList list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"        StringBuilder outputConstruct \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"        for (Task curr : list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"            outputConstruct.append(curr.toStorageString()).append(System.lineSeparator());","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"        String finalOut \u003d outputConstruct.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"            if (!java.nio.file.Files.exists(storePath)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"                java.nio.file.Files.createFile(storePath);","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"            java.nio.file.Files.write(storePath, finalOut.getBytes());","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"            //Todo: Could have a better way of dealing with this","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"     * Attempts to load preexisting stored tasks to a TaskList firstly from a user provided file path, then from the","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"     * program\u0027s default storage path. If neither exist, an IOException is thrown.","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"     * @return a TaskList containing the data read from the file","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"     * @throws IOException when neither the user\u0027s path nor the default storage path have files","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"    public List\u003cString\u003e load() throws IOException {","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"            return Files.readAllLines(storePath);","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":55}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    String dead;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    LocalDate deadDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"     * Constructor for a new Deadline object. Also processes the date provided if written in the correct format.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"     * @param details the specifics of what the deadline is for","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"     * @param dead when the deadline is","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    public Deadline(String details, String dead) {","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        super(details);","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"            this.deadDate \u003d LocalDate.parse(dead);","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"            this.dead \u003d deadDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        } catch (DateTimeParseException ignored) {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"            this.dead \u003d dead;","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    public String toString() {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"        String task \u003d super.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"        assert !task.equals(\"\") \u0026\u0026 !dead.equals(\"\"): \"Error checker did not catch missing input\";","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"        return \"[D] \" + task + \" (by: \" + dead + \")\";","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the deadline in a format that can be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"     *  in the file for easy loading later.","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"     * @return the string to store in the file","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        return \"D#\" + super.toStorageString() + \"#\" + dead;","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":42}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    String startString \u003d null;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    String endString \u003d null;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    LocalDate startDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    LocalDate endDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"     * Constructor for a new Event object. Also processes the dates provided if written in the correct format.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"     * @param details what the event is about","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"     * @param start when the event starts","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"     * @param end when the event ends","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"    public Event(String details, String start, String end) {","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"        super(details);","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"            this.startDate \u003d LocalDate.parse(start);","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"            this.startString \u003d startDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"            this.endDate \u003d LocalDate.parse(end);","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"            this.endString \u003d endDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"        } catch (DateTimeParseException ignored) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"            if (startString \u003d\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"                this.startString \u003d start;","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"                this.startDate \u003d null;","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"            if (endString \u003d\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"                this.endString \u003d end;","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"                this.endDate \u003d null;","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"    public String toString() {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        String task \u003d super.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"        boolean isTaskEmpty \u003d task.equals(\"\");","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"        boolean isStartStringEmpty \u003d startString.equals(\"\");","lastModifiedDate":"2023-02-17"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"        boolean isEndStringEmpty \u003d endString.equals(\"\");","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"        assert !isTaskEmpty \u0026\u0026 !isStartStringEmpty \u0026\u0026 !isEndStringEmpty: \"Error checker did not catch missing input\";","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"        return \"[E] \" + task + \" (from: \" + startString + \" to: \" + endString + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the deadline in a format that can be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"     *  in the file for easy loading later.","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"     * @return the string to store in the file","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"        return \"E#\" + super.toStorageString() + \"#\" + startString + \"#\" + endString;","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":57}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"public class Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    private boolean isChecked;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"    private String details;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"     * Creates a new task object","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"     * @param details the specifics of what the task is","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    public Task(String details) {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"        isChecked \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    public void setChecked(Boolean checked) {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        this.isChecked \u003d checked;","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"    public String toString(){","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"        String checkSymbol \u003d \" \";","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"        if (isChecked) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"            checkSymbol \u003d \"X\";","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"        return \"[\" + checkSymbol + \"] \" + details;","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the task in a format that can be stored easily later.","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"     * @return the string to be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"        String checkSymbol \u003d \"0\";","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        if (isChecked) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"            checkSymbol \u003d \"1\";","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"        return checkSymbol + \"#\" + details;","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Zeli0":40}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import java.util.List;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    // Stores everything in the lists and takes care of adding/removing from the list","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    // author: notnoop","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    // Reused from https://stackoverflow.com/questions/1096621/","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    public TaskList(List\u003cString\u003e fileData) throws IOException {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"        //Somehow gotta read the fileData in","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"        for (String line : fileData) {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"            // process the line","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"            String[] lineSplit \u003d line.split(\"#\");","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"            switch (lineSplit[0]) {","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"            case \"T\":","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"                initializeNewTodo(lineSplit);","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"            case \"D\":","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"                initializeNewDeadline(lineSplit);","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"            case \"E\":","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"                initializeNewEvent(lineSplit);","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"            default:","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"                System.out.println(\"Invalid input: \" + line);","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"    private void initializeNewEvent(String[] lineSplit) {","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        // task.Event","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"        Task event \u003d new Event(lineSplit[2], lineSplit[3], lineSplit[4]);","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"        if (parseInt(lineSplit[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"            event.setChecked(true);","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        this.add(event);","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"    private void initializeNewTodo(String[] lineSplit) {","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"        // To-do entry","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"        Task todo \u003d new Todo(lineSplit[2]);","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"        if (parseInt(lineSplit[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"            todo.setChecked(true);","lastModifiedDate":"2023-02-16"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"        this.add(todo);","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"    private void initializeNewDeadline(String[] lineSplit) {","lastModifiedDate":"2023-02-16"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"        // task.Deadline","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"        Task dead \u003d new Deadline(lineSplit[2], lineSplit[3]);","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"        if (parseInt(lineSplit[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"            dead.setChecked(true);","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"        this.add(dead);","lastModifiedDate":"2023-02-16"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-16"},{"lineNumber":60,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"Zeli0"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-16"},{"lineNumber":62,"author":{"gitId":"Zeli0"},"content":"        super();","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"Zeli0"},"content":"    public void mark(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"Zeli0"},"content":"        super.get(index).setChecked(true);","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"Zeli0"},"content":"    public void unmark(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"Zeli0"},"content":"        super.get(index).setChecked(false);","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":73}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    public Todo(String details) {","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"        super(details);","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    public String toString() {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"        String task \u003d super.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        assert !task.equals(\"\"): \"Error checker did not catch missing input\";","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"        return \"[T] \" + task;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the to-do in a format that can be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"     *  in the file for easy loading later.","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"     * @return the string to store in the file","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"        return \"T#\" + super.toStorageString();","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":24}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.layout.Priority?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"5.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"272.0\" style\u003d\"-fx-border-style: solid inside; -fx-background-color: blanchedalmond; -fx-border-width: 2; -fx-border-image-insets: 5; -fx-border-radius: 5; -fx-border-color: brown; -fx-background-radius: 5;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"            \u003cHBox.hgrow\u003e\u003cPriority fx:value\u003d\"ALWAYS\" /\u003e\u003c/HBox.hgrow\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"            \u003cfont\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"            \u003cFont name\u003d\"Calibri\" size\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"         \u003c/font\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"      \u003c/Label\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 10, 0, 0, 0);;\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"Zeli0":26}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"UI.MainWindow\"\u003e","lastModifiedDate":"2023-02-14"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: linear-gradient(from 0% 93% to 0% 100%, #a34313 0%, #903b12 100%),        #9d4024,        #d86e3a,        radial-gradient(center 50% 50%, radius 100%, #d86e3a, #c54e2c); -fx-background-insets: 0,0 0 5 0, 0 0 6 0, 0 0 7 0; -fx-background-radius: 8; -fx-effect: dropshadow( gaussian , rgba(0,0,0,0.75) , 4,0,0,1 ); -fx-font-weight: bold;\" text\u003d\"Send\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"8.0\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"         \u003c/padding\u003e\u003c/Button\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: olive;\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"Zeli0":23}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import task.Deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    public void deadTest1() {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"        Deadline testDead \u003d new Deadline(\"asdf\", \"1234\");","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"        testDead.setChecked(true);","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        assertEquals(testDead.toString(), \"[D] [X] asdf (by: 1234)\");","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":13}},{"path":"src/test/java/HosterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.testng.annotations.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"public class HosterTest {","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    public void dummyTest(){","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    public void anotherDummyTest(){","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":15}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":5}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import task.Deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.Event;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import task.Todo;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    public void markTest() {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        TaskList list  \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"        list.add(new Deadline(\"Say hi\", \"2019-09-09\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"        list.add(new Event(\"Say bye\", \"Now\", \"Later\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"        list.add(new Todo(\"cry\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"        list.mark(1);","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"        assertEquals(\"[E] [X] Say bye (from: Now to: Later)\",","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"                list.get(1).toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":19}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import task.Todo;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    public void todoTest1() {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"        Todo testDead \u003d new Todo(\"asdf\");","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"        testDead.setChecked(true);","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        assertEquals(testDead.toString(), \"[T] [X] asdf\");","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"fuck","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"todo Say hi","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"event Buy bughatti /from 10 /to 2","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"list","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"deadline This project /by some date","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"mark 1","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"java -classpath ..\\bin\\center center.Hoster \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"Zeli0":1}}]
