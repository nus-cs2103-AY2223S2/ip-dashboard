[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"# center.Duke project template","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"3. After that, locate the `src/main/java/center/center.Duke.java` file, right-click it, and choose `Run center.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"Zeli0":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"dependencies {","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    testImplementation(\"org.junit.jupiter:junit-jupiter-api:5.5.0\")","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"Zeli0":12}},{"path":"src/main/java/center/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package center;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import command.Parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import command.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import command.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"     * Constructs a new Duke object with the requisite Storage, TaskList, Ui and Parser objects.","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"     * @param filePath the path where a potential preexisting list can be read into the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"        parser \u003d new Parser(ui, tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"     * Starts up Duke and accepts user inputs for processing until termination, where the end list is stored in a file.","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"    public void run() {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"        ui.startMessage();","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"        while(ui.isOpenForInput()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"            String nextInput \u003d ui.getInput();","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"            parser.processInput(nextInput);","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"        storage.store(tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"        Duke duke \u003d new Duke(\"/dukeData/duke.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"        duke.run();","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"Zeli0":49}},{"path":"src/main/java/command/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"public class InvalidInputException extends Exception{","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    public InvalidInputException(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"        super(message);","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":7}},{"path":"src/main/java/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import task.Deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.Event;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import task.Todo;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"import java.util.Locale;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"public class Parser {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    // Interprets user input","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"    Ui ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    TaskList list;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"    public Parser(Ui ui, TaskList list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"     * Central hub for processing user input and determining which specific process command should be used.","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"     * @param input the line of input that the user keyed in","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"    public void processInput(String input) {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"        String[] inputAnalyzed \u003d input.split(\" \");","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"        if (input.contains(\"#\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"            ui.showInvalidInputError(\"Illegal character \u0027#\u0027.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"            return;","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"            switch (inputAnalyzed[0].toLowerCase(Locale.ROOT)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"            case \"bye\":","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"                processByeOperation(inputAnalyzed);","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"            case \"list\":","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"                processListOperation(inputAnalyzed);","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"            case \"mark\":","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"                processMarkOperation(inputAnalyzed);","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"            case \"unmark\":","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"                processUnmarkOperation(inputAnalyzed);","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"            case \"deadline\":","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"                processDeadlineOperation(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"            case \"todo\":","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"                processTodoOperation(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"            case \"event\":","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"                processEventOperation(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"            case \"delete\":","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"                processDeleteOperation(inputAnalyzed);","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"            case \"find\":","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"                processFindOperation(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"Zeli0"},"content":"            default:","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"Zeli0"},"content":"                ui.unknownCommand();","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"Zeli0"},"content":"                //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"Zeli0"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"Zeli0"},"content":"            ui.showInvalidInputError(e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"Zeli0"},"content":"            ui.showArrayOutOfBoundsError();","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"Zeli0"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"Zeli0"},"content":"            ui.showNumberFormatError();","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is bye, terminating the program.","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types anything more than bye","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"Zeli0"},"content":"    private void processByeOperation(String[] inputAnalyzed) throws InvalidInputException {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"Zeli0"},"content":"        //Check if there is anything other than bye","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length \u003e 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"bye\\\".\");","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"Zeli0"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"Zeli0"},"content":"            ui.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is list, displaying the details of the entries in the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types anything more than list","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"Zeli0"},"content":"    private void processListOperation(String[] inputAnalyzed) throws InvalidInputException {","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"Zeli0"},"content":"        //Check if there is anything other than list","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length \u003e 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"list\\\".\");","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"Zeli0"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"Zeli0"},"content":"            ui.showListState(list);","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is mark, marking the task at the index provided as completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types the complete mark command incorrectly","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException for when the user inputs an invalid index","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException for when the user doesn\u0027t input an integer in their input","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"Zeli0"},"content":"    private void processMarkOperation(String[] inputAnalyzed) throws InvalidInputException,","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"Zeli0"},"content":"            IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"Zeli0"},"content":"        // Parse","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length !\u003d 2) {","lastModifiedDate":"2023-01-30"},{"lineNumber":114,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"mark i\\\", \"","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"Zeli0"},"content":"                    + \"with i being an integer.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":117,"author":{"gitId":"Zeli0"},"content":"        int index \u003d parseInt(inputAnalyzed[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"Zeli0"},"content":"        // List","lastModifiedDate":"2023-01-30"},{"lineNumber":119,"author":{"gitId":"Zeli0"},"content":"        list.mark(index);","lastModifiedDate":"2023-01-30"},{"lineNumber":120,"author":{"gitId":"Zeli0"},"content":"        // command.Ui","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"Zeli0"},"content":"        ui.showMarkSuccess(list.get(index - 1));","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":123,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":124,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is unmark, marking the task at the index provided as not","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"Zeli0"},"content":"     * completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types the complete unmark command incorrectly","lastModifiedDate":"2023-02-01"},{"lineNumber":130,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException for when the user inputs an invalid index","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException for when the user doesn\u0027t input an integer in their input","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"Zeli0"},"content":"    private void processUnmarkOperation(String[] inputAnalyzed) throws InvalidInputException, IndexOutOfBoundsException,","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"Zeli0"},"content":"            NumberFormatException {","lastModifiedDate":"2023-01-30"},{"lineNumber":136,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length !\u003d 2) {","lastModifiedDate":"2023-01-30"},{"lineNumber":137,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"unmark i\\\", \"","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"Zeli0"},"content":"                    + \"with i being an integer.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":139,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":140,"author":{"gitId":"Zeli0"},"content":"        int index \u003d parseInt(inputAnalyzed[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":141,"author":{"gitId":"Zeli0"},"content":"        list.unmark(index - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":142,"author":{"gitId":"Zeli0"},"content":"        ui.showUnmarkSuccess(list.get(index - 1));","lastModifiedDate":"2023-01-30"},{"lineNumber":143,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":144,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":145,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is delete, deleting the task at the provided index.","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"Zeli0"},"content":"     * @param inputAnalyzed the split-up version of the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":149,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user types the complete delete command incorrectly","lastModifiedDate":"2023-02-01"},{"lineNumber":150,"author":{"gitId":"Zeli0"},"content":"     * @throws IndexOutOfBoundsException for when the user inputs an invalid index","lastModifiedDate":"2023-02-01"},{"lineNumber":151,"author":{"gitId":"Zeli0"},"content":"     * @throws NumberFormatException for when the user doesn\u0027t input an integer in their input","lastModifiedDate":"2023-02-01"},{"lineNumber":152,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":153,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"Zeli0"},"content":"    private void processDeleteOperation(String[] inputAnalyzed) throws InvalidInputException, IndexOutOfBoundsException,","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"Zeli0"},"content":"            NumberFormatException {","lastModifiedDate":"2023-01-30"},{"lineNumber":156,"author":{"gitId":"Zeli0"},"content":"        if (inputAnalyzed.length !\u003d 2) {","lastModifiedDate":"2023-01-30"},{"lineNumber":157,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Incorrect format. Correct form should be \\\"delete i\\\", \"","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"Zeli0"},"content":"                    + \"with i being an integer.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":159,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":160,"author":{"gitId":"Zeli0"},"content":"        int index \u003d parseInt(inputAnalyzed[1]);","lastModifiedDate":"2023-01-30"},{"lineNumber":161,"author":{"gitId":"Zeli0"},"content":"        Task temp \u003d list.get(index - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":162,"author":{"gitId":"Zeli0"},"content":"        list.remove(index - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"Zeli0"},"content":"        ui.showDeleteSuccess(temp, list);","lastModifiedDate":"2023-01-30"},{"lineNumber":164,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":165,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":166,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":167,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":168,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is deadline, adding a new deadline task to the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":169,"author":{"gitId":"Zeli0"},"content":"     * @param input the user input","lastModifiedDate":"2023-02-01"},{"lineNumber":170,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user inputs the deadline command in the incorrect format","lastModifiedDate":"2023-02-01"},{"lineNumber":171,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":172,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":173,"author":{"gitId":"Zeli0"},"content":"    private void processDeadlineOperation(String input) throws IndexOutOfBoundsException, InvalidInputException {","lastModifiedDate":"2023-02-01"},{"lineNumber":174,"author":{"gitId":"Zeli0"},"content":"        String[] deadlineAnalyze \u003d input.split(\"/by\");","lastModifiedDate":"2023-01-30"},{"lineNumber":175,"author":{"gitId":"Zeli0"},"content":"        String date;","lastModifiedDate":"2023-02-01"},{"lineNumber":176,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":177,"author":{"gitId":"Zeli0"},"content":"            date \u003d deadlineAnalyze[1].trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":178,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":179,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing deadline date.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":180,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":181,"author":{"gitId":"Zeli0"},"content":"        String details \u003d deadlineAnalyze[0]","lastModifiedDate":"2023-02-01"},{"lineNumber":182,"author":{"gitId":"Zeli0"},"content":"                            .split(\"deadline\")[1]","lastModifiedDate":"2023-02-01"},{"lineNumber":183,"author":{"gitId":"Zeli0"},"content":"                            .trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":184,"author":{"gitId":"Zeli0"},"content":"        if (details.equals(\"\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":185,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing deadline description.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":186,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":187,"author":{"gitId":"Zeli0"},"content":"        Deadline newDead \u003d new Deadline(details, date);","lastModifiedDate":"2023-02-01"},{"lineNumber":188,"author":{"gitId":"Zeli0"},"content":"        list.add(newDead);","lastModifiedDate":"2023-01-30"},{"lineNumber":189,"author":{"gitId":"Zeli0"},"content":"        ui.showAddTaskSuccess(newDead, list);","lastModifiedDate":"2023-01-30"},{"lineNumber":190,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":191,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":192,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":193,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":194,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is to-do, adding a new to-do task to the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":195,"author":{"gitId":"Zeli0"},"content":"     * @param input the user input","lastModifiedDate":"2023-02-01"},{"lineNumber":196,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user inputs the to-do command in the incorrect format","lastModifiedDate":"2023-02-01"},{"lineNumber":197,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":198,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":199,"author":{"gitId":"Zeli0"},"content":"    private void processTodoOperation(String input) throws InvalidInputException {","lastModifiedDate":"2023-02-01"},{"lineNumber":200,"author":{"gitId":"Zeli0"},"content":"        //Possible Errors:","lastModifiedDate":"2023-01-30"},{"lineNumber":201,"author":{"gitId":"Zeli0"},"content":"        //No descriptor","lastModifiedDate":"2023-01-30"},{"lineNumber":202,"author":{"gitId":"Zeli0"},"content":"        String[] todoAnalyze \u003d input.split(\"todo \");","lastModifiedDate":"2023-01-30"},{"lineNumber":203,"author":{"gitId":"Zeli0"},"content":"        //Analyze","lastModifiedDate":"2023-01-30"},{"lineNumber":204,"author":{"gitId":"Zeli0"},"content":"        Todo newTodo;","lastModifiedDate":"2023-01-30"},{"lineNumber":205,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":206,"author":{"gitId":"Zeli0"},"content":"            newTodo \u003d new Todo(todoAnalyze[1].trim());","lastModifiedDate":"2023-01-30"},{"lineNumber":207,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":208,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing to-do description.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":209,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":210,"author":{"gitId":"Zeli0"},"content":"        //List","lastModifiedDate":"2023-01-30"},{"lineNumber":211,"author":{"gitId":"Zeli0"},"content":"        list.add(newTodo);","lastModifiedDate":"2023-01-30"},{"lineNumber":212,"author":{"gitId":"Zeli0"},"content":"        //command.Ui","lastModifiedDate":"2023-01-30"},{"lineNumber":213,"author":{"gitId":"Zeli0"},"content":"        ui.showAddTaskSuccess(newTodo, list);","lastModifiedDate":"2023-01-30"},{"lineNumber":214,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":215,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":216,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":217,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":218,"author":{"gitId":"Zeli0"},"content":"     * Processes user input when the starting command is event, adding a new event task to the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":219,"author":{"gitId":"Zeli0"},"content":"     * @param input the user input","lastModifiedDate":"2023-02-01"},{"lineNumber":220,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException for when the user inputs the event command in the incorrect format","lastModifiedDate":"2023-02-01"},{"lineNumber":221,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":222,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":223,"author":{"gitId":"Zeli0"},"content":"    private void processEventOperation(String input) throws IndexOutOfBoundsException, InvalidInputException {","lastModifiedDate":"2023-02-01"},{"lineNumber":224,"author":{"gitId":"Zeli0"},"content":"        //Analyze","lastModifiedDate":"2023-01-30"},{"lineNumber":225,"author":{"gitId":"Zeli0"},"content":"        String[] eventAnalyze;","lastModifiedDate":"2023-01-30"},{"lineNumber":226,"author":{"gitId":"Zeli0"},"content":"        String[] timeAnalyze;","lastModifiedDate":"2023-01-30"},{"lineNumber":227,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":228,"author":{"gitId":"Zeli0"},"content":"            eventAnalyze \u003d input.split(\"/from\");","lastModifiedDate":"2023-01-30"},{"lineNumber":229,"author":{"gitId":"Zeli0"},"content":"            timeAnalyze \u003d eventAnalyze[1].split(\"/to\");","lastModifiedDate":"2023-01-30"},{"lineNumber":230,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":231,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing /from or /to. Format is \\\"event [name] /from [time] /to [time]\\\"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":232,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":233,"author":{"gitId":"Zeli0"},"content":"        String start \u003d timeAnalyze[0].trim();","lastModifiedDate":"2023-01-30"},{"lineNumber":234,"author":{"gitId":"Zeli0"},"content":"        String over \u003d timeAnalyze[1].trim();","lastModifiedDate":"2023-01-30"},{"lineNumber":235,"author":{"gitId":"Zeli0"},"content":"        String details \u003d eventAnalyze[0]","lastModifiedDate":"2023-02-01"},{"lineNumber":236,"author":{"gitId":"Zeli0"},"content":"                            .split(\"event\")[1]","lastModifiedDate":"2023-02-01"},{"lineNumber":237,"author":{"gitId":"Zeli0"},"content":"                            .trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":238,"author":{"gitId":"Zeli0"},"content":"        if (start.equals(\"\") || over.equals(\"\") || details.equals(\"\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":239,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing details for at least one of the sections.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":240,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":241,"author":{"gitId":"Zeli0"},"content":"        //Add Item","lastModifiedDate":"2023-01-30"},{"lineNumber":242,"author":{"gitId":"Zeli0"},"content":"        Event newEvent \u003d new Event(details, start, over);","lastModifiedDate":"2023-01-30"},{"lineNumber":243,"author":{"gitId":"Zeli0"},"content":"        list.add(newEvent);","lastModifiedDate":"2023-01-30"},{"lineNumber":244,"author":{"gitId":"Zeli0"},"content":"        //command.Ui Section","lastModifiedDate":"2023-01-30"},{"lineNumber":245,"author":{"gitId":"Zeli0"},"content":"        ui.showAddTaskSuccess(newEvent, list);","lastModifiedDate":"2023-01-30"},{"lineNumber":246,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":247,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":248,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":249,"author":{"gitId":"Zeli0"},"content":"     * Returns a list of all the tasks in the TaskList containing the provided keyword.","lastModifiedDate":"2023-02-01"},{"lineNumber":250,"author":{"gitId":"Zeli0"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-02-01"},{"lineNumber":251,"author":{"gitId":"Zeli0"},"content":"     * @throws InvalidInputException when the user does not input anything for a keyword","lastModifiedDate":"2023-02-01"},{"lineNumber":252,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":253,"author":{"gitId":"Zeli0"},"content":"    private void processFindOperation(String input) throws InvalidInputException {","lastModifiedDate":"2023-02-01"},{"lineNumber":254,"author":{"gitId":"Zeli0"},"content":"        String[] inputAnalyzed \u003d input.split(\"find \");","lastModifiedDate":"2023-02-01"},{"lineNumber":255,"author":{"gitId":"Zeli0"},"content":"        String keyword;","lastModifiedDate":"2023-02-01"},{"lineNumber":256,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":257,"author":{"gitId":"Zeli0"},"content":"            keyword \u003d inputAnalyzed[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":258,"author":{"gitId":"Zeli0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":259,"author":{"gitId":"Zeli0"},"content":"            throw new InvalidInputException(\"Missing keyword.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":260,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":261,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":262,"author":{"gitId":"Zeli0"},"content":"        TaskList foundItems \u003d new TaskList();","lastModifiedDate":"2023-02-01"},{"lineNumber":263,"author":{"gitId":"Zeli0"},"content":"        for (Task task : list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":264,"author":{"gitId":"Zeli0"},"content":"            if (task.toString().contains(keyword)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":265,"author":{"gitId":"Zeli0"},"content":"                foundItems.add(task);","lastModifiedDate":"2023-02-01"},{"lineNumber":266,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":267,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":268,"author":{"gitId":"Zeli0"},"content":"        ui.showFindListState(foundItems,keyword);","lastModifiedDate":"2023-02-01"},{"lineNumber":269,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":270,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":270}},{"path":"src/main/java/command/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"import java.util.List;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"public class Storage {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    // For loading from and storing into the file","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    Path loadPath;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    Path storePath;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"     * Constructor for a storage object","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"     * @param filePath the user\u0027s provided storage path where a file may potentially be","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"        loadPath \u003d java.nio.file.Paths.get(home, filePath);;","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"        storePath \u003d java.nio.file.Paths.get(System.getProperty(\"user.dir\"), \"dukeData.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"     * Stores the provided list of tasks into the default storage path of the project.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"     * @param list the list of tasks that will be stored into the filepath.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    public void store(TaskList list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"        StringBuilder outputConstruct \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"        for (Task curr : list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"            outputConstruct.append(curr.toStorageString()).append(System.lineSeparator());","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        String finalOut \u003d outputConstruct.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"            if (!java.nio.file.Files.exists(storePath)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"                java.nio.file.Files.createFile(storePath);","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"            java.nio.file.Files.write(storePath, finalOut.getBytes());","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"            //Todo: Could have a better way of dealing with this","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"            System.out.println(e);","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"     * Attempts to load preexisting stored tasks to a TaskList firstly from a user provided file path, then from the","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"     * program\u0027s default storage path. If neither exist, an IOException is thrown.","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"     * @return a TaskList containing the data read from the file","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"     * @throws IOException when neither the user\u0027s path nor the default storage path have files","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"    public List\u003cString\u003e load() throws IOException {","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"            //Todo: Handle the case where the user\u0027s provided file is contained in the incorrect format","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"            return Files.readAllLines(loadPath);","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"            return Files.readAllLines(storePath);","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":61}},{"path":"src/main/java/command/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package command;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"public class Ui {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    // For all interactions with the user","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    private Scanner userInput;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    private Boolean isOpenForInput;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"     * Constructor for UI object.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    public Ui() {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        userInput \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"        isOpenForInput \u003d true;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    //@@author IceFire","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    //Reused from https://stackoverflow.com/questions/36514289","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Prints a dashed line.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private void dashedLine()","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 90; i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            sb.append(\"-\");","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        System.out.println(sb.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Closes the UI from accepting any more inputs.","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void close() {","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        System.out.println(\"Pleasure doing business with you.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        isOpenForInput \u003d false;","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean isOpenForInput() {","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return isOpenForInput;","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Prints the corresponding error message when the user inputs a command not registered","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *  in Duke.","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void unknownCommand() {","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        System.out.println(\"Sorry sir, didn\u0027t quite get that.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Prints the opening message for Duke.","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void startMessage() {","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String intro \u003d \"My name is Skyler White yo \\nHow can I help you?\";","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        System.out.println(intro);","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public String getInput() {","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return userInput.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Displays an error message if Duke fails to read from the user\u0027s provided input path or the default write path","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * of the program after it terminates.","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        System.out.println(\"Looks like you don\u0027t have any old lists for me to include. That\u0027s alright; we\u0027ll start\" +","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \" from scratch!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void showArrayOutOfBoundsError() {","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        System.out.println(\"Woah there. Got an index problem. That entry does not exist.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Prints the error message for when a user makes a command, but with incorrect formatting.","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @param message a String that contains the details for why the command failed.","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void showInvalidInputError(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        System.out.println(\"Whoa. That command doesn\u0027t look right. Here\u0027s what seems to be wrong:\\n\" + message);","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Prints corresponding error message when there is a NumberFormatException.","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void showNumberFormatError() {","lastModifiedDate":"2023-01-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        //Todo:This can be removed and merged with showInvalidInputError in future iterations","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        System.out.println(\"I only take integers for that command, kid.\");","lastModifiedDate":"2023-01-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Prints the success message when the given task in the list has been marked as completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @param task the task that has been marked as completed","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void showMarkSuccess(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        System.out.println(\"Gotcha. Just marked this task as done:\\n\" + task);","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Prints the success message when the given task in the list has been marked as not completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @param task the task that has been marked as not completed","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void showUnmarkSuccess(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        System.out.println(\"Gotcha. Just marked this task as not done:\\n\" + task);","lastModifiedDate":"2023-01-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Prints success message when the given task has been added to the list.","lastModifiedDate":"2023-02-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * @param task the task that was added to the list of tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @param list the list of tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void showAddTaskSuccess(Task task, TaskList list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        System.out.println(\"Gotcha. Just added this task to the list:\\n\" + task + \"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        showListLength(list);","lastModifiedDate":"2023-01-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Prints success message when the given task has been removed from the list.","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @param task the task that was removed from the list of tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * @param list the list of tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void showDeleteSuccess(Task task, TaskList list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        System.out.println(\"Gotcha. Just marked this task as not done:\\n\" + task + \"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        showListLength(list);","lastModifiedDate":"2023-01-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Prints all the elements in the provided list of tasks with numerical labels.","lastModifiedDate":"2023-02-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @param list the list of tasks to print","lastModifiedDate":"2023-02-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void showListState(TaskList list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++){","lastModifiedDate":"2023-01-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            System.out.println(i + \". \" + list.get(i-1));","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void showListLength(TaskList list) {","lastModifiedDate":"2023-01-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        System.out.println(\"You have \" + list.size() + \" tasks left. Anything else?\");","lastModifiedDate":"2023-01-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void showFindListState(TaskList list, String keyword) {","lastModifiedDate":"2023-02-01"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        System.out.println(\"Righto, here are the tasks that contain the word \\\"\"","lastModifiedDate":"2023-02-01"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                                                                + keyword + \"\\\":\");","lastModifiedDate":"2023-02-01"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++){","lastModifiedDate":"2023-02-01"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            System.out.println(i + \". \" + list.get(i-1));","lastModifiedDate":"2023-02-01"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        dashedLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"-":160,"Zeli0":20}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    String dead;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    LocalDate deadDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"     * Constructor for a new Deadline object. Also processes the date provided if written in the correct format.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"     * @param details the specifics of what the deadline is for","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"     * @param dead when the deadline is","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    public Deadline(String details, String dead) {","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        super(details);","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"            this.deadDate \u003d LocalDate.parse(dead);","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"            this.dead \u003d deadDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        } catch (DateTimeParseException ignored) {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"            this.dead \u003d dead;","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    public String toString() {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"        String task \u003d super.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"        return \"[D] \" + task + \" (by: \" + dead + \")\";","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the deadline in a format that can be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"     *  in the file for easy loading later.","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"     * @return the string to store in the file","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"        return \"D#\" + super.toStorageString() + \"#\" + dead;","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":41}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    String startString \u003d null;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    String endString \u003d null;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    LocalDate startDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    LocalDate endDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"     * Constructor for a new Event object. Also processes the dates provided if written in the correct format.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"     * @param details what the event is about","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"     * @param start when the event starts","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"     * @param end when the event ends","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"    public Event(String details, String start, String end) {","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"        super(details);","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"            this.startDate \u003d LocalDate.parse(start);","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"            this.startString \u003d startDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"            this.endDate \u003d LocalDate.parse(end);","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"            this.endString \u003d endDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"        } catch (DateTimeParseException ignored) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"            if (startString \u003d\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"                this.startString \u003d start;","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"                this.startDate \u003d null;","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"            if (endString \u003d\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"                this.endString \u003d end;","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"                this.endDate \u003d null;","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"    public String toString() {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"        String task \u003d super.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"        return \"[E] \" + task + \" (from: \" + startString + \" to: \" + endString + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the deadline in a format that can be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"     *  in the file for easy loading later.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"     * @return the string to store in the file","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"        return \"E#\" + super.toStorageString() + \"#\" + startString + \"#\" + endString;","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":53}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"public class Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    private boolean isChecked;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"    private String details;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"     * Creates a new task object","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"     * @param details the specifics of what the task is","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    public Task(String details) {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"        isChecked \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"    public void setChecked(Boolean checked) {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"        this.isChecked \u003d checked;","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"    public String toString(){","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"        String checkSymbol \u003d \" \";","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"        if (isChecked) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"            checkSymbol \u003d \"X\";","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"        return \"[\" + checkSymbol + \"] \" + details;","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the task in a format that can be stored easily later.","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"     * @return the string to be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"        String checkSymbol \u003d \"0\";","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"        if (isChecked) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"            checkSymbol \u003d \"1\";","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"        return checkSymbol + \"#\" + details;","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"Zeli0":40}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import java.util.List;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    // Stores everything in the lists and takes care of adding/removing from the list","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    // author: notnoop","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    // Reused from https://stackoverflow.com/questions/1096621/","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"    public TaskList(List\u003cString\u003e fileData) throws IOException {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"        //Somehow gotta read the fileData in","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"        for (String line : fileData) {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"            // process the line","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"            String[] lineSplit \u003d line.split(\"#\");","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"            switch (lineSplit[0]) {","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"            case \"T\":","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"                // To-do entry","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"                Task todo \u003d new Todo(lineSplit[2]);","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"                if (parseInt(lineSplit[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"                    todo.setChecked(true);","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"Zeli0"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"Zeli0"},"content":"                this.add(todo);","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"Zeli0"},"content":"            case \"D\":","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"Zeli0"},"content":"                // task.Deadline","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"Zeli0"},"content":"                Task dead \u003d new Deadline(lineSplit[2], lineSplit[3]);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"Zeli0"},"content":"                if (parseInt(lineSplit[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"Zeli0"},"content":"                    dead.setChecked(true);","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"Zeli0"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"Zeli0"},"content":"                this.add(dead);","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"Zeli0"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"Zeli0"},"content":"            case \"E\":","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"Zeli0"},"content":"                // task.Event","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"Zeli0"},"content":"                Task event \u003d new Event(lineSplit[2], lineSplit[3], lineSplit[4]);","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"Zeli0"},"content":"                if (parseInt(lineSplit[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"Zeli0"},"content":"                    event.setChecked(true);","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"Zeli0"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"Zeli0"},"content":"                this.add(event);","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"Zeli0"},"content":"                //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"Zeli0"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"Zeli0"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"Zeli0"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"Zeli0"},"content":"    public void mark(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"Zeli0"},"content":"        super.get(index).setChecked(true);","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"Zeli0"},"content":"    public void unmark(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"Zeli0"},"content":"        super.get(index).setChecked(false);","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"Zeli0":59}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"package task;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"    public Todo(String details) {","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"        super(details);","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    public String toString() {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"        String task \u003d super.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        return \"[T] \" + task;","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"     * Returns the details of the to-do in a format that can be stored","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"     *  in the file for easy loading later.","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"     * @return the string to store in the file","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"Zeli0"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"Zeli0"},"content":"        return \"T#\" + super.toStorageString();","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":23}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import task.Deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    public void deadTest1() {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"        Deadline testDead \u003d new Deadline(\"asdf\", \"1234\");","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"        testDead.setChecked(true);","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        assertEquals(testDead.toString(), \"[D] [X] asdf (by: 1234)\");","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":13}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.testng.annotations.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    public void dummyTest(){","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    public void anotherDummyTest(){","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":15}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":5}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"import task.Deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import task.Event;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"import task.Todo;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"    public void markTest() {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        TaskList list  \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"        list.add(new Deadline(\"Say hi\", \"2019-09-09\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"        list.add(new Event(\"Say bye\", \"Now\", \"Later\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"Zeli0"},"content":"        list.add(new Todo(\"cry\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"Zeli0"},"content":"        list.mark(1);","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"Zeli0"},"content":"        assertEquals(\"[E] [X] Say bye (from: Now to: Later)\",","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"Zeli0"},"content":"                list.get(1).toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":19}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"import task.Todo;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"Zeli0"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"Zeli0"},"content":"    public void todoTest1() {","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"Zeli0"},"content":"        Todo testDead \u003d new Todo(\"asdf\");","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"Zeli0"},"content":"        testDead.setChecked(true);","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"Zeli0"},"content":"        assertEquals(testDead.toString(), \"[T] [X] asdf\");","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"Zeli0"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"Zeli0"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"Zeli0":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Zeli0"},"content":"fuck","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"Zeli0"},"content":"todo Say hi","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"Zeli0"},"content":"event Buy bughatti /from 10 /to 2","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"Zeli0"},"content":"list","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"Zeli0"},"content":"deadline This project /by some date","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"Zeli0"},"content":"mark 1","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"Zeli0":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Zeli0"},"content":"java -classpath ..\\bin\\center center.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"Zeli0":1}}]
