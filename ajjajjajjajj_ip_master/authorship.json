[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"    mainClassName \u003d \"launcher.Launcher\"","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"run {","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"checkstyle {","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ajjajjajjajj":25,"-":40}},{"path":"src/main/java/app/chatbot/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.Command;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.LoadCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.SaveCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":" * Entry point to the app backend.","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final Path STORAGE_LOCATION \u003d Paths.get(\".\", \"data\", \"storage.txt\");","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    private final Ui ui;","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructor for Duke.","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    public Duke() {","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            this.storage \u003d new Storage(STORAGE_LOCATION);","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"     * Starts the chatbot session. Upon startup, attempts to load in stored data","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     * for tasks at the location \u003ci\u003e\"./data/storage\"\u003c/i\u003e. Ends session when user types in","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003ci\u003e\"bye\"\u003c/i\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"    public void run() {","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        while (!isExit) {","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"            try {","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"                ui.showLine(); // show divider","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"                c.execute(taskList, ui, storage);","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"                if (c.isSave()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"                    Command save \u003d new SaveCommand();","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"                    save.execute(taskList, ui, storage);","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"                }","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"            } finally {","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"                ui.showLine();","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"        duke.run();","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"    public String getResponse(String fullCommand) {","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"            Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"            response.append(c.execute(taskList, ui, storage));","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"            if (c.isSave()) {","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"                Command save \u003d new SaveCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"                response.append(save.execute(taskList, ui, storage));","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"            return response.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"            return (e.getMessage());","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"     * Loads saved data from storage.","lastModifiedDate":"2023-02-04"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return Success message for loaded storage, or a message informing","lastModifiedDate":"2023-02-04"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"     * a load failure.","lastModifiedDate":"2023-02-04"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"    public String loadStorageData() {","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"        Command loadCommand \u003d new LoadCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"            System.out.println(\"Loading storage data...\");","lastModifiedDate":"2023-02-05"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"            return loadCommand.execute(taskList, ui, storage);","lastModifiedDate":"2023-02-04"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"            return (e.getMessage());","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ajjajjajjajj":98,"-":2}},{"path":"src/main/java/app/chatbot/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.AddCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.Command;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.CommandNotFoundException;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.DeleteCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.ExitCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.FindCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.ListCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.MarkAsDoneCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.MarkAsUndoneCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskTypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":" * Contains methods for parsing user input into the command line,","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":" * and converting input into executable Commands.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"public class Parser {","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     * Splits a String line of input into its command (the first word), and its subsequent arguments.","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     * By default, the key \"Command\" maps to the name of the command input (the first word).","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     * The name of the Command is also a key to its default arguments;","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"     * for eg: \"delete 1\" creates a mapping of \"delete\" -\u003e \"1\".","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"     * In the case of adding a new event, the name of the command is mapped to its description;","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"     * for eg: \"event\" -\u003e \"attend wedding\"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input arguments to be split","lastModifiedDate":"2023-01-25"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return map a mapping of each argument name to its value","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    private static Map\u003cString, String\u003e splitArgs(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        // returns a Map mapping name of arg to arg value based on the raw format","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        String[] args \u003d input.split(\" /\");","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"        // add name of main command (first word) to map","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        String[] mainCommand \u003d args[0].split(\" \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        String mainCommandName \u003d mainCommand[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        map.put(\"Command\", mainCommandName);","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        // check if there are arguments to main command, otherwise leave as \"\"","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        String mainCommandArg \u003d mainCommand.length \u003d\u003d 1 ? \"\" : mainCommand[1].stripTrailing();","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"        map.put(mainCommandName, mainCommandArg);","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        // process additional args, if present","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        if (args.length \u003e 1) {","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"            List\u003cString\u003e addtlArgs \u003d Arrays.asList(args).subList(1, args.length);","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"            for (String arg : addtlArgs) {","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"                String[] s \u003d arg.split(\" \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"                String name \u003d s[0];","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"                String value \u003d s.length \u003d\u003d 1 ? \"\" : s[1].stripTrailing();","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"                map.put(name, value);","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"        // map should always contain \"Command\" and mainCommandArg keys","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"        assert map.size() \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"        // value \"Command\" maps to should always be a key","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"        assert map.containsKey(map.get(\"Command\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"        return map;","lastModifiedDate":"2023-01-18"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"     * Parses an untreated string from the command line (entered by the user)","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"     * and returns a Command to be executed. If the command is not recognised, throws a","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"     * CommandNotFoundException.","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input untreated String entered into command line by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return an executable Command containing info given by user.","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws CommandNotFoundException","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"    public static Command parse(String input) throws CommandNotFoundException {","lastModifiedDate":"2023-01-23"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, String\u003e argValues \u003d Parser.splitArgs(input);","lastModifiedDate":"2023-01-23"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"        String command \u003d argValues.get(\"Command\");","lastModifiedDate":"2023-01-23"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"        switch (command) {","lastModifiedDate":"2023-01-23"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"list\":","lastModifiedDate":"2023-01-23"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-23"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"            return new MarkAsDoneCommand(argValues.get(command)); // pass in index to command","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-23"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"            return new MarkAsUndoneCommand(argValues.get(command)); // pass in index to command","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"delete\":","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"            return new DeleteCommand(argValues.get(command)); // pass in index to command","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"find\":","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"            return new FindCommand(argValues.get(command));","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"        default:","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"            if (TaskTypes.inputToTask.getValue().containsKey(command)) { // check if command is to add a task","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"                String desc \u003d argValues.get(command);","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"                argValues.put(\"Description\", desc); // change the for description from the name of Command","lastModifiedDate":"2023-01-25"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"                return new AddCommand(TaskTypes.inputToTask.getValue().get(command), argValues);","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new CommandNotFoundException(\"I\u0027m sorry, I don\u0027t recognise this command :/\");","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":107}},{"path":"src/main/java/app/chatbot/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":" * Helper class for formatting GUI responses.","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"public class Response {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    private StringBuilder sb;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response() {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response(String s) {","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb \u003d new StringBuilder(s);","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        sb.append(System.lineSeparator());","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a line separator to a String. Should be used whenever a","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * message is delivered to the user.","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    public void addLine(String input) {","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb.append(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb.append(System.lineSeparator());","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.sb.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":32}},{"path":"src/main/java/app/chatbot/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.File;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidDateTimeException;","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidInputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskTypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":" * Handles Storage of data. Converts Task data saved in text file into","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":" * Tasks the user interacts with during runtime. Saves Tasks into txt file","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":" * and overwrites changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"public class Storage {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    public static final String SEPARATOR_REGEX \u003d \" \\\\| \";","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    public static final String SUB_SEPARATOR \u003d \":\"; // for commands with additional args","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int SYMBOL_INDEX \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int ISDONE_INDEX \u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int DESC_INDEX \u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int MIN_STORAGE_ARG_SIZE \u003d 3;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    private final File file;","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     * Creates a new Storage object. A file is created at the stated path to store","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"     * data. If the path location does not exist, the necessary files and directories","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"     * are created.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param path the relative path for which the text data file will be stored.","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IOException, propagated from FileWriter.","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"    Storage(Path path) throws IOException {","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        this.file \u003d new File(path.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        // creates storage directory or data if they don\u0027t exist","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        this.file.getParentFile().mkdirs();","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!Files.exists(path)) {","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"            this.file.createNewFile();","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        assert this.file.exists();","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"     * Loads a single line in storage into a given task.TaskList.","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"     * Method is under review to return totalSuccesses and totalFailures.","lastModifiedDate":"2023-02-04"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"     * It is assumed that a line in storage follows the format specified here:","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"     * taskSymbol | isDone | desc | addtl-arg1:value | addtl-arg2:value ...","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"     * For example, a project meeting task.Event from 1pm to 3pm marked done:","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"     * E | 1 | project meeting | from:1pm | to:3pm","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl empty TaskList, assuming this is executed upon startup of app.","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return totalSuccess, the number of lines that have been successfully loaded into the tl.","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws","lastModifiedDate":"2023-02-04"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"    public Map\u003cString, Integer\u003e loadIntoTaskList(TaskList tl)","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"            throws IOException {","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, Integer\u003e successRates \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(this.file));","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"        String line \u003d br.readLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"        int totalRowsRead \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"        int totalSuccess \u003d 0;","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"        while (line !\u003d null) {","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"            totalRowsRead++;","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"            System.out.println(\"Loading task #\" + totalRowsRead);","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"                List\u003cString\u003e args \u003d splitStorageFormatArgs(line);","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"                TaskTypes.Type taskType \u003d getTaskTypeFromStorageFormat(args);","lastModifiedDate":"2023-02-04"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"                Map\u003cString, String\u003e argValues \u003d getArgMapFromStorageFormat(args);","lastModifiedDate":"2023-02-04"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"                boolean isDone \u003d getIsDoneFromStorageFormat(args);","lastModifiedDate":"2023-02-04"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"                boolean isSuccess \u003d addStorageTaskToTaskList(tl, taskType, argValues, isDone);","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"                if (isSuccess) {","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"                    totalSuccess++;","lastModifiedDate":"2023-02-05"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"                }","lastModifiedDate":"2023-02-05"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"            } catch (InvalidStorageException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"            } finally {","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"                line \u003d br.readLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"        successRates.put(\"Successes\", totalSuccess);","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"        successRates.put(\"Total\", totalRowsRead);","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"        return successRates;","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a storage format Task to a TaskList, given the processed arguments.","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param taskType","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param argValues","lastModifiedDate":"2023-02-05"},{"lineNumber":114,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param isDone","lastModifiedDate":"2023-02-05"},{"lineNumber":115,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return a boolean indicating if the addition was successful.","lastModifiedDate":"2023-02-05"},{"lineNumber":116,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":117,"author":{"gitId":"ajjajjajjajj"},"content":"    private boolean addStorageTaskToTaskList(TaskList tl,","lastModifiedDate":"2023-02-05"},{"lineNumber":118,"author":{"gitId":"ajjajjajjajj"},"content":"                                             TaskTypes.Type taskType,","lastModifiedDate":"2023-02-05"},{"lineNumber":119,"author":{"gitId":"ajjajjajjajj"},"content":"                                             Map\u003cString, String\u003e argValues,","lastModifiedDate":"2023-02-05"},{"lineNumber":120,"author":{"gitId":"ajjajjajjajj"},"content":"                                             boolean isDone) {","lastModifiedDate":"2023-02-05"},{"lineNumber":121,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"ajjajjajjajj"},"content":"            if (isDone) {","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"ajjajjajjajj"},"content":"                tl.addDoneTask(taskType, argValues);","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"ajjajjajjajj"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"ajjajjajjajj"},"content":"                tl.addTask(taskType, argValues);","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":127,"author":{"gitId":"ajjajjajjajj"},"content":"            return true;","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (InvalidInputException | InvalidDateTimeException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"ajjajjajjajj"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"ajjajjajjajj"},"content":"            return false;","lastModifiedDate":"2023-02-05"},{"lineNumber":131,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":133,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"ajjajjajjajj"},"content":"    private TaskTypes.Type getTaskTypeFromStorageFormat(List\u003cString\u003e args)","lastModifiedDate":"2023-02-05"},{"lineNumber":135,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidStorageException {","lastModifiedDate":"2023-02-05"},{"lineNumber":136,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":137,"author":{"gitId":"ajjajjajjajj"},"content":"        String symbol \u003d args.get(SYMBOL_INDEX);","lastModifiedDate":"2023-02-05"},{"lineNumber":138,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.Type taskType \u003d TaskTypes.symbolToTask.getValue().get(symbol);","lastModifiedDate":"2023-02-05"},{"lineNumber":139,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"ajjajjajjajj"},"content":"        if (taskType \u003d\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":141,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"Invalid TaskType\");","lastModifiedDate":"2023-02-05"},{"lineNumber":142,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":143,"author":{"gitId":"ajjajjajjajj"},"content":"        return taskType;","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":145,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":146,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":147,"author":{"gitId":"ajjajjajjajj"},"content":"     * Extracts task arguments from the split storageFormat.","lastModifiedDate":"2023-02-05"},{"lineNumber":148,"author":{"gitId":"ajjajjajjajj"},"content":"     * Compulsorily extracts description.","lastModifiedDate":"2023-02-05"},{"lineNumber":149,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args","lastModifiedDate":"2023-02-05"},{"lineNumber":150,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":151,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidStorageException - if Description is missing","lastModifiedDate":"2023-02-05"},{"lineNumber":152,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":153,"author":{"gitId":"ajjajjajjajj"},"content":"    private Map\u003cString,String\u003e getArgMapFromStorageFormat(List\u003cString\u003e args)","lastModifiedDate":"2023-02-05"},{"lineNumber":154,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidStorageException {","lastModifiedDate":"2023-02-05"},{"lineNumber":155,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":156,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, String\u003e argValues \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-04"},{"lineNumber":157,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":158,"author":{"gitId":"ajjajjajjajj"},"content":"            argValues.put(\"Description\", args.get(DESC_INDEX));","lastModifiedDate":"2023-02-05"},{"lineNumber":159,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":160,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"Missing description\");","lastModifiedDate":"2023-02-05"},{"lineNumber":161,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":162,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":163,"author":{"gitId":"ajjajjajjajj"},"content":"        // map additional arguments","lastModifiedDate":"2023-02-05"},{"lineNumber":164,"author":{"gitId":"ajjajjajjajj"},"content":"        if (args.size() \u003e MIN_STORAGE_ARG_SIZE) {","lastModifiedDate":"2023-02-05"},{"lineNumber":165,"author":{"gitId":"ajjajjajjajj"},"content":"            for (String pair : args.subList(MIN_STORAGE_ARG_SIZE, args.size())) {","lastModifiedDate":"2023-02-05"},{"lineNumber":166,"author":{"gitId":"ajjajjajjajj"},"content":"                String[] split \u003d pair.split(SUB_SEPARATOR, 2);","lastModifiedDate":"2023-02-04"},{"lineNumber":167,"author":{"gitId":"ajjajjajjajj"},"content":"                argValues.put(split[0], split[1]);","lastModifiedDate":"2023-02-04"},{"lineNumber":168,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-04"},{"lineNumber":169,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":170,"author":{"gitId":"ajjajjajjajj"},"content":"        return argValues;","lastModifiedDate":"2023-02-04"},{"lineNumber":171,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":172,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":173,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":174,"author":{"gitId":"ajjajjajjajj"},"content":"     * Extracts isDone from Storage. isDone is indicated with 1 for Done, 0 for Undone.","lastModifiedDate":"2023-02-05"},{"lineNumber":175,"author":{"gitId":"ajjajjajjajj"},"content":"     * Throws an exception for any other value.","lastModifiedDate":"2023-02-05"},{"lineNumber":176,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args","lastModifiedDate":"2023-02-05"},{"lineNumber":177,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":178,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidStorageException","lastModifiedDate":"2023-02-05"},{"lineNumber":179,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":180,"author":{"gitId":"ajjajjajjajj"},"content":"    private boolean getIsDoneFromStorageFormat(List\u003cString\u003e args) throws InvalidStorageException {","lastModifiedDate":"2023-02-04"},{"lineNumber":181,"author":{"gitId":"ajjajjajjajj"},"content":"        String arg \u003d args.get(ISDONE_INDEX);","lastModifiedDate":"2023-02-05"},{"lineNumber":182,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isDoneTrue \u003d arg.equals(\"1\");","lastModifiedDate":"2023-02-04"},{"lineNumber":183,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isUnDoneTrue \u003d arg.equals(\"0\");","lastModifiedDate":"2023-02-04"},{"lineNumber":184,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":185,"author":{"gitId":"ajjajjajjajj"},"content":"        // check if arg value !\u003d (1 or 0)","lastModifiedDate":"2023-02-05"},{"lineNumber":186,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!isDoneTrue \u0026\u0026 !isUnDoneTrue) {","lastModifiedDate":"2023-02-04"},{"lineNumber":187,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"error loading isDone\");","lastModifiedDate":"2023-02-04"},{"lineNumber":188,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":189,"author":{"gitId":"ajjajjajjajj"},"content":"        return isDoneTrue;","lastModifiedDate":"2023-02-04"},{"lineNumber":190,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":191,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":192,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":193,"author":{"gitId":"ajjajjajjajj"},"content":"     * Splits a single line from the storageFormat into a List","lastModifiedDate":"2023-02-05"},{"lineNumber":194,"author":{"gitId":"ajjajjajjajj"},"content":"     * of arguments.","lastModifiedDate":"2023-02-05"},{"lineNumber":195,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param line","lastModifiedDate":"2023-02-05"},{"lineNumber":196,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":197,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidStorageException if the line contains less than min","lastModifiedDate":"2023-02-05"},{"lineNumber":198,"author":{"gitId":"ajjajjajjajj"},"content":"     * number of args in storage","lastModifiedDate":"2023-02-05"},{"lineNumber":199,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":200,"author":{"gitId":"ajjajjajjajj"},"content":"    private List\u003cString\u003e splitStorageFormatArgs(String line) throws InvalidStorageException {","lastModifiedDate":"2023-02-05"},{"lineNumber":201,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cString\u003e args \u003d Arrays.asList(line.split(SEPARATOR_REGEX));","lastModifiedDate":"2023-02-05"},{"lineNumber":202,"author":{"gitId":"ajjajjajjajj"},"content":"        if (args.size() \u003c MIN_STORAGE_ARG_SIZE) {","lastModifiedDate":"2023-02-05"},{"lineNumber":203,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"Missing inputs for task in this line\");","lastModifiedDate":"2023-02-05"},{"lineNumber":204,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":205,"author":{"gitId":"ajjajjajjajj"},"content":"        return args;","lastModifiedDate":"2023-02-05"},{"lineNumber":206,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":207,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":208,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":209,"author":{"gitId":"ajjajjajjajj"},"content":"     * Overwrites the storage file \u003cstrong\u003ecompletely\u003c/strong\u003e with data for the TaskList passed in.","lastModifiedDate":"2023-01-29"},{"lineNumber":210,"author":{"gitId":"ajjajjajjajj"},"content":"     * Thus, this should only be executed when the TaskList contains the right information.","lastModifiedDate":"2023-01-29"},{"lineNumber":211,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":212,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl TaskList with updated data to be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":213,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IOException, propagated from FileWriter.","lastModifiedDate":"2023-02-04"},{"lineNumber":214,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":215,"author":{"gitId":"ajjajjajjajj"},"content":"    public void saveToStorage(TaskList tl) throws IOException {","lastModifiedDate":"2023-02-04"},{"lineNumber":216,"author":{"gitId":"ajjajjajjajj"},"content":"        BufferedWriter br \u003d new BufferedWriter(new FileWriter(this.file));","lastModifiedDate":"2023-01-24"},{"lineNumber":217,"author":{"gitId":"ajjajjajjajj"},"content":"        for (Task task : tl.getAllTasks()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":218,"author":{"gitId":"ajjajjajjajj"},"content":"            String data \u003d task.asDataFormat();","lastModifiedDate":"2023-01-24"},{"lineNumber":219,"author":{"gitId":"ajjajjajjajj"},"content":"            br.write(data);","lastModifiedDate":"2023-01-24"},{"lineNumber":220,"author":{"gitId":"ajjajjajjajj"},"content":"            br.newLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":221,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":222,"author":{"gitId":"ajjajjajjajj"},"content":"        br.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":223,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":224,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":225,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":226,"author":{"gitId":"ajjajjajjajj"},"content":"     * Indicates invalid storage data","lastModifiedDate":"2023-02-04"},{"lineNumber":227,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":228,"author":{"gitId":"ajjajjajjajj"},"content":"    public static class InvalidStorageException extends Exception {","lastModifiedDate":"2023-01-25"},{"lineNumber":229,"author":{"gitId":"ajjajjajjajj"},"content":"        InvalidStorageException(String msg) {","lastModifiedDate":"2023-01-25"},{"lineNumber":230,"author":{"gitId":"ajjajjajjajj"},"content":"            super(msg);","lastModifiedDate":"2023-01-25"},{"lineNumber":231,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":232,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":233,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":233}},{"path":"src/main/java/app/chatbot/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"public class Ui {","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String LOGO \u003d \"       _             _    _    _                _                \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"  ___ | |__    __ _ | |_ | |_ (_) _ __    __ _ | |_  ___   _ __  \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"            + \" / __|| \u0027_ \\\\  / _` || __|| __|| || \u0027_ \\\\  / _` || __|/ _ \\\\ | \u0027_ \\\\ \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"| (__ | | | || (_| || |_ | |_ | || | | || (_| || |_| (_) || | | |\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"            + \" \\\\___||_| |_| \\\\__,_| \\\\__| \\\\__||_||_| |_| \\\\__, | \\\\__|\\\\___/ |_| |_|\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"                                         |___/                   \";","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    private Scanner sc;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    Ui() {","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    public String readCommand() {","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        reply(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        reply(\"This is Chattington the Chatter, I\u0027ll chat with you.\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"                + \"What can I do for you?\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     * Prints out the input as an indented message to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param s","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    public void reply(String s) {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!s.endsWith(\"\\n\")) {","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            s +\u003d \u0027\\n\u0027;","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        for (String line : s.split(\"\\n\")) {","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"            System.out.println(indent(line));","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    public void showError(String s) {","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        reply(s);","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"    public void showLine() {","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"    private static String indent(String s) {","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        return \"\\t\" + s;","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":53}},{"path":"src/main/java/app/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskTypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" * Functions as an executor to convert user-input arguments","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * into a Task, and add into the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    private final Map\u003cString, String\u003e args;","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private final TaskTypes.Type taskType;","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructs an AddCommand.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param type type of Task as specified by TaskTypes","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args mapping of arguments needed for the Task and its arguments,","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     *             created by the Parser","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    public AddCommand(TaskTypes.Type type, Map\u003cString, String\u003e args) {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        this.args \u003d args;","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        this.taskType \u003d type;","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a Task into the TaskList and informs the user of the Task added.","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return String response","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage) throws Exception {","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        Response response \u003d new Response();","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"        Task newTask \u003d tl.addTask(this.taskType, this.args);","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        int numTasks \u003d tl.getAllTasks().size();","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        response.addLine(\"New task added:\");","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        response.addLine(newTask.toString());","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"        response.addLine(\"You now have \" + numTasks + \" task(s) in your list.\");","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        return response.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":52}},{"path":"src/main/java/app/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":" * Base class for Commands, which represent executable processes","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":" * in the application. A Command can be instantiated through front-end user-input","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":" * by calling the constructor through the Parser, or be executed at the back-end","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":" * (such as auto-save processes).","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isExit;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isSave;","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Command instantiated should define isExit (if command is to exit the session)","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * and isSaved (if command results in changes to the maintained TaskList).","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    protected Command() {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * Executes the command. Necessary interactions are conducted on TaskList,","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     * and actions are communicated to user via the Ui. Storage is called to save the","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     * changes executed by the command.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return String response","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    public abstract String execute(TaskList tl, Ui ui, Storage storage) throws Exception;","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.isExit;","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean isSave() {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.isSave;","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":44}},{"path":"src/main/java/app/command/CommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class CommandNotFoundException extends Exception {","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"    public CommandNotFoundException(String message) {","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"        super(message);","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":7}},{"path":"src/main/java/app/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidInputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    private final String deleteAtIndex;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"     * Takes in the USER-input index - this index refers to the task as","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"     * presented by the List command.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index user-input index.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    public DeleteCommand(String index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"        this.deleteAtIndex \u003d index;","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     * Deletes a Task from the TaskList, and informs the user of the Task deleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage) throws InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        Response response \u003d new Response();","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            int i \u003d Integer.parseInt(deleteAtIndex) - 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"            Task deletedTask \u003d tl.deleteTask(i);","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"            response.addLine(\"Removed \" + deletedTask.getDesc()","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"                    + \" from the list. You now have \" + tl.size() + \" tasks left.\");","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"Specify a task by its task number. \"","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"                    + \"Try \u0027list\u0027 or \u0027find\u0027 to get the number :)\");","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        return response.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":45}},{"path":"src/main/java/app/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":" * Allows for the app to exit. This is the only class with isExit \u003d true.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        super();","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * Prints the exit message. Duke.run() recognises the exit status and closes the app.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tasks","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        return new Response(\"Alright, goodbye to you too!\").toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":29}},{"path":"src/main/java/app/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    private final String searchContent;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    public FindCommand(String searchContent) {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.searchContent \u003d searchContent.toLowerCase();","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"        StringBuilder resultDisplay \u003d new StringBuilder();","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isSearchSuccessful \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"        for (int i \u003d 0; i \u003c tl.size(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"            Task t \u003d tl.getTask(i);","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"            String desc \u003d t.getDesc();","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"            if (desc.toLowerCase().contains(this.searchContent)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"                resultDisplay.append(i+1)","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\": \")","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(t)","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"                isSearchSuccessful \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!isSearchSuccessful) {","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"            assert resultDisplay.toString().equals(\"\");","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"            return (\"Ah I didn\u0027t find any tasks matching \u0027\" + this.searchContent + \"\u0027.\" + \"\\n\" );","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"            return (\"Here\u0027s the tasks matching \u0027\" + this.searchContent + \"\u0027:\\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"                    resultDisplay + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"ajjajjajjajj":40}},{"path":"src/main/java/app/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    public ListCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Lists the Tasks in the TaskList. If there are no tasks, replies with","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * a different message instead.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the tasks are numbered from 1 onwards. Order of tasks follows","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * the indexing of the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cTask\u003e listTasks \u003d tl.getAllTasks();","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        if (listTasks.isEmpty()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(\"You don\u0027t have anything listed right now.\").toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"            StringBuilder output \u003d new StringBuilder(\"Eh this is what you\u0027ve written down so far:\\n\");","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            for (int i \u003d 0; i \u003c listTasks.size(); i++) {","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"                output.append(i + 1)","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\": \")","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(listTasks.get(i))","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\u0027\\n\u0027);","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"            Response r \u003d new Response(output.toString());","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"            r.addLine(\"You have \" + listTasks.size() + \" tasks listed.\");","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"            return r.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":46}},{"path":"src/main/java/app/command/LoadCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"public class LoadCommand extends Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    public LoadCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Loads the Tasks specified in the storage text file into the TaskList by appending.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * Informs the user of the number of tasks that have been successfully loaded.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IOException, InvalidStorageException","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage)","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            throws IOException {","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, Integer\u003e successRates \u003d storage.loadIntoTaskList(tl);","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        int numSuccess \u003d successRates.get(\"Successes\");","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        int numTotalRows \u003d successRates.get(\"Total\");","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        return new Response(\"Successfully loaded \"","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"                + numSuccess + \" of \" + numTotalRows","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"                +\" task(s) from storage.\").toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ajjajjajjajj":36}},{"path":"src/main/java/app/command/MarkAsDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class MarkAsDoneCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    private String markAtIndex;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    public MarkAsDoneCommand(String index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.markAtIndex \u003d index;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks the Task at markAtIndex as Done. Notifies the user if the Task was","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * already previously done. Throws a message for formatting issues, or if the","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * corresponding Task to markAtIndex does not exist in the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage) throws Exception {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean alreadyMarked;","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            int i \u003d Integer.parseInt(this.markAtIndex) - 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"            alreadyMarked \u003d tl.markAsDone(i);","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"            if (alreadyMarked) {","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(tl.getTask(i).getDesc() + \" already marked as done!\").toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"            } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(\"Marked \" + tl.getTask(i).getDesc() + \" as done!\").toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new Exception(\"Please specify the task by its index number.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new Exception(\"Seems like this task doesn\u0027t exist.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":43}},{"path":"src/main/java/app/command/MarkAsUndoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class MarkAsUndoneCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    private String unmarkAtIndex;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    public MarkAsUndoneCommand(String index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.unmarkAtIndex \u003d index;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"     * Unmarks the Done status of the Task at markAtIndex. Notifies the user if the Task was","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * already undone. Throws a message for formatting issues, or if the","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * corresponding Task to markAtIndex does not exist in the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage) throws Exception {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean alreadyMarked;","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            int i \u003d Integer.parseInt(this.unmarkAtIndex) - 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"            alreadyMarked \u003d tl.unmarkDone(i);","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"            if (alreadyMarked) {","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(tl.getTask(i).getDesc() + \" is already undone!\").toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"            } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(\"Unmarked \" + tl.getTask(i).getDesc() + \".\").toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new Exception(\"Please specify the task by its index number.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new Exception(\"Seems like this task doesn\u0027t exist.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":43}},{"path":"src/main/java/app/command/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":" * Command to save the current TaskList state to storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":" * Serves to interact with the Storage - this command is not available","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":" * to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"public class SaveCommand extends Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"    public SaveCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false; // no data is changed in this command that warrants saving","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * Saves the current TaskList to storage. If successful, notifies the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * This Command is not presented as an option to the user and is exclusively","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * used for back-end only.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param ui","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public String execute(TaskList tl, Ui ui, Storage storage) throws Exception {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        storage.saveToStorage(tl);","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        return new Response(\"Changes are saved to storage.\").toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ajjajjajjajj":33}},{"path":"src/main/java/app/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructor for Deadline Task.","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param description","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param deadline","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException for any empty inputs.","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException for a badly formatted datetime.","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    Deadline(String description, String deadline)","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidInputException, InvalidDateTimeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"        this.symbol \u003d \"D\";","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        if (isArgEmpty(deadline)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"plz provide the deadline in \"","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"                    + \"yyyy-MM-dd HHmm or yyyy/MM/dd HHmm format\");","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        this.deadline \u003d parseDate(deadline);","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.toString() + \" (by: \" + this.deadline.format(OUTPUT_FORMAT) + \")\";","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    public String asDataFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.asDataFormat(\"by:\" + this.deadline);","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":40}},{"path":"src/main/java/app/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructor for Event Task.","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param description","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param from","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param to","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException for invalid from and to formats.","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException for any empty arguments.","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    Event(String description, String from, String to)","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidDateTimeException, InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        this.symbol \u003d \"E\";","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        if (isArgEmpty(from) || isArgEmpty(to)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"plz provide BOTH the \u0027from\u0027 and \u0027to\u0027 in \"","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"                    + \"yyyy-MM-dd HHmm or yyyy/MM/dd HHmm format\");","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        this.from \u003d parseDate(from);","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        this.to \u003d parseDate(to);","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    public String asDataFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.asDataFormat(\"from:\" + this.from, \"to:\" + this.to);","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.toString() + \" (from: \" + this.from.format(OUTPUT_FORMAT)","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"                + \", to: \" + this.to.format(OUTPUT_FORMAT) + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":45}},{"path":"src/main/java/app/task/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class InvalidDateTimeException extends Exception {","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"    InvalidDateTimeException(String msg) {","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"        super(msg);","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ajjajjajjajj":7}},{"path":"src/main/java/app/task/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"    public InvalidInputException(String msg) {","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"        super(msg);","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":8}},{"path":"src/main/java/app/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Objects;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":" * Represents a Task, which can contain additional attributes, such as the","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" * starting and ending datetime.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * A Task is not done by default.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" * A description for the Task is compulsory.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":" * Supported DateTime formats are included in this class for Tasks that","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":" * have DateTime attributes.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":" * Attributes of a Task cannot be accessed and modified directly from other packages","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":" * (use the TaskList to modify a Task).","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    protected static final List\u003cDateTimeFormatter\u003e SUPPORTED_DATE_TIME_INPUT \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    protected static final DateTimeFormatter OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEE, dd MMM yy hh:mma\");","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    protected String description;","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    protected String symbol;","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    static {","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        SUPPORTED_DATE_TIME_INPUT.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        SUPPORTED_DATE_TIME_INPUT.add(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        SUPPORTED_DATE_TIME_INPUT.add(DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * Abstract constructor for Task. Description is compulsory.","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param description","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task(String description) throws InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        if (isArgEmpty(description)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"plz provide the description!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"     * Checks if a String argument is null or blank.","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param arg","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isArgEmpty(String arg) {","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        return Objects.isNull(arg) || arg.equals(\"\");","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"     * Attempts to parse and return a String datetime into LocalDateTime,","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"     * by trying across supported formats.","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException if datetime fails to parse","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"     * against available formats","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"    protected LocalDateTime parseDate(String input) throws InvalidDateTimeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"        LocalDateTime date \u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"        for (DateTimeFormatter f : SUPPORTED_DATE_TIME_INPUT) {","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"                date \u003d LocalDateTime.parse(input, f);","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"                break;","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"            } catch (DateTimeParseException ignored) {","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"        if (Objects.isNull(date)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidDateTimeException(\"Try reformatting your date/time to the supported formats:\\n\"","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"                    + \"yyyy-MM-dd HHmm or yyyy/MM/dd HHmm\\n\"","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"                    + \"Make sure that the date/time is valid!\");","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"            return date;","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"     * Returns the status icon for display. Marks a task as done with \"X\", blank otherwise.","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-17"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-17"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"    public String getDesc() {","lastModifiedDate":"2023-01-23"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.description;","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks task as done","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"    protected void markAsDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-23"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks task as undone","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"    protected void unmarkDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":114,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":115,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app .","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"ajjajjajjajj"},"content":"    public abstract String asDataFormat();","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":121,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param fields variable number of fields (attributes) of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app.","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"ajjajjajjajj"},"content":"    protected String asDataFormat(String... fields) {","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"ajjajjajjajj"},"content":"        String base \u003d String.join(Storage.SEPARATOR, this.symbol, this.isDone() ? \"1\" : \"0\", this.description);","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"ajjajjajjajj"},"content":"        for (String s : fields) {","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"ajjajjajjajj"},"content":"            if (!s.isBlank()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"ajjajjajjajj"},"content":"                base \u003d String.join(Storage.SEPARATOR, base, s);","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":133,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":134,"author":{"gitId":"ajjajjajjajj"},"content":"        return base;","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":136,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":137,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return user-readable format with information regarding the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":141,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":142,"author":{"gitId":"ajjajjajjajj"},"content":"        return \"[\" + this.symbol + \"][\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-18"},{"lineNumber":143,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":144,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ajjajjajjajj":144}},{"path":"src/main/java/app/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":" * Represents the List of Tasks, and the primary class that the","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":" * app interacts with. A TaskList allows for modification of the Tasks contained","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":" * within, including deletion and insertion, getting a Task at a specified index,","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":" * and iterating through each contained Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":" *","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" * Modification of Tasks contained in the TaskList can only be done through the","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"public class TaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * Initialises an empty TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task getTask(int listIndex) {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks.get(listIndex);","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    public List\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks;","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    public int size() {","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a task to the TaskList. Requires a task type as specified by TaskTypes,","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"     * and the correct mappings of the task. Throws exceptions for if the inputs are invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"     * Tasks are always added to the end of the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param type one of the available task types provided in TaskTypes.","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args map of argument names to their values.","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return the same Task object that was added into the TaskList","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task addTask(TaskTypes.Type type, Map\u003cString, String\u003e args)","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidDateTimeException, InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"        Task newTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"        String desc \u003d args.get(\"Description\");","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        switch (type) {","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        case TODO:","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"            newTask \u003d new ToDo(desc);","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"        case DEADLINE:","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"            String by \u003d args.get(\"by\");","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"            newTask \u003d new Deadline(desc, by);","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"        case EVENT:","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"            String from \u003d args.get(\"from\");","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"            String to \u003d args.get(\"to\");","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"            newTask \u003d new Event(desc, from, to);","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"        default:","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"Task not recognised\");","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"        this.tasks.add(this.tasks.size(), newTask); // always adds to the end","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"        return newTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a task following addTask. Additionally, marks a task done after adding.","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param type one of the available task types provided in TaskTypes.","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args map of argument names to their values.","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return the same Task object that was added into the TaskList","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task addDoneTask(TaskTypes.Type type, Map\u003cString, String\u003e args)","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidDateTimeException, InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"        Task newTask \u003d addTask(type, args); // add to end of list","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"        int index \u003d this.tasks.size() - 1; // mark the last/latest item as done","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"        markAsDone(index);","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"        assert newTask.isDone();","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"        return newTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"     * Pops (deletes and returns) a task from the TaskList, given the index of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the index is starts from zero - Commands accept user input which starts from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index of the Task - starts from zero.","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return the deleted Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task deleteTask(int index) throws InvalidInputException {","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"        if (this.tasks.isEmpty()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"Hello hello there is no task to delete!!\");","lastModifiedDate":"2023-01-23"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"            Task deletedTask \u003d this.tasks.get(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"            this.tasks.remove(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"            return deletedTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"This task doesn\u0027t exist in your list.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":114,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":115,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks a task as done at the given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the index is starts from zero - Commands accept user input which starts from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index of the Task - starts from zero.","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return returns true if task is already marked done, false if not.","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2023-01-29"},{"lineNumber":120,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean markAsDone(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-01-23"},{"lineNumber":122,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isAlreadyMarked \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"ajjajjajjajj"},"content":"        Task task \u003d this.tasks.get(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":124,"author":{"gitId":"ajjajjajjajj"},"content":"        if (task.isDone()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":125,"author":{"gitId":"ajjajjajjajj"},"content":"            isAlreadyMarked \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":127,"author":{"gitId":"ajjajjajjajj"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":128,"author":{"gitId":"ajjajjajjajj"},"content":"        return isAlreadyMarked;","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":130,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":131,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks a task as UNdone at the given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the index is starts from zero - Commands accept user input which starts from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index of the Task - starts from zero.","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return returns true if task is already marked UNdone, false if not.","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean unmarkDone(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-01-23"},{"lineNumber":139,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isAlreadyMarked \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"ajjajjajjajj"},"content":"        Task task \u003d this.tasks.get(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":141,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":142,"author":{"gitId":"ajjajjajjajj"},"content":"            isAlreadyMarked \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":144,"author":{"gitId":"ajjajjajjajj"},"content":"        task.unmarkDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":145,"author":{"gitId":"ajjajjajjajj"},"content":"        return isAlreadyMarked;","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":147,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":148,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"ajjajjajjajj"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks.iterator();","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":152}},{"path":"src/main/java/app/task/TaskTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"public enum TaskTypes {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    inputToTask(new HashMap\u003cString, Type\u003e()),","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"    symbolToTask(new HashMap\u003cString, Type\u003e());","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    static {","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.inputToTask.getValue().put(\"todo\", TaskTypes.Type.TODO);","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.inputToTask.getValue().put(\"deadline\", TaskTypes.Type.DEADLINE);","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.inputToTask.getValue().put(\"event\", TaskTypes.Type.EVENT);","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.symbolToTask.getValue().put(\"T\", TaskTypes.Type.TODO);","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.symbolToTask.getValue().put(\"D\", TaskTypes.Type.DEADLINE);","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.symbolToTask.getValue().put(\"E\", TaskTypes.Type.EVENT);","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private Map\u003cString, Type\u003e value;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    TaskTypes(Map\u003cString, Type\u003e value) {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    public Map\u003cString, Type\u003e getValue() {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        return value;","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public enum Type { TODO, DEADLINE, EVENT }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"ajjajjajjajj":30}},{"path":"src/main/java/app/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"    ToDo(String description) throws InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"        this.symbol \u003d \"T\";","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    public String asDataFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.asDataFormat(\"\");","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":18}},{"path":"src/main/java/launcher/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.paint.Paint;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.text.TextAlignment;","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.text.TextFlow;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    private Text dialog;","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    private ImagePattern displayPicture;","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"    private Circle circle;","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"    private TextFlow tf;","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        displayPicture \u003d new ImagePattern(img);","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        circle.setFill(displayPicture);","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"    private void flip() {","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"        dialog.setTextAlignment(TextAlignment.LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"        tf.setTextAlignment(TextAlignment.LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"        setStyle(\"-fx-background-color:#474D63\");","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"        db.flip();","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"        return db;","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":80}},{"path":"src/main/java/launcher/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class Launcher {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"ajjajjajjajj":12}},{"path":"src/main/java/launcher/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"        System.out.println(\"Starting Application...\");","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            stage.show();","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"ajjajjajjajj":37}},{"path":"src/main/java/launcher/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/chicken.png\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duck.png\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        String savedDataLoad \u003d duke.loadStorageData();","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"                DialogBox.getDukeDialog(savedDataLoad, dukeImage)","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":58}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: transparent;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003cTextFlow fx:id\u003d\"tf\" prefHeight\u003d\"48.0\" prefWidth\u003d\"329.0\" textAlignment\u003d\"RIGHT\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003cText fx:id\u003d\"dialog\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"RIGHT\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003c/TextFlow\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#545b75\" radius\u003d\"24.0\" stroke\u003d\"#bfc1cb\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #1F294A;\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"launcher.MainWindow\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type something...\" style\u003d\"-fx-background-color: #1F294A; -fx-text-fill: #ffffff;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003cFont size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003c/font\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003c/TextField\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #1F294A;\" text\u003d\"Send\" textFill\u003d\"#c6c6c6\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003cFont size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003c/font\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003c/Button\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"570.0\" prefWidth\u003d\"399.0\" style\u003d\"-fx-background-color: #1F294A; -fx-border-color: #E3E4E8;\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"570.0\" prefWidth\u003d\"398.0\" style\u003d\"-fx-background-color: #3B4461#3B4461;\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":28}},{"path":"src/test/java/app/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    public void asDataFormat() {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"            Deadline d \u003d new Deadline(\"complete this task\", \"2023/01/26 1700\");","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"            d.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"            assertEquals(\"D | 1 | complete this task | by:2023-01-26T17:00\",","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"                    d.asDataFormat());","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"            fail();","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"ajjajjajjajj":22}},{"path":"src/test/java/app/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    public void addTask_InvalidInputExceptionThrown() {","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        InvalidInputException thrown \u003d assertThrows(InvalidInputException.class, () -\u003e {","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"            Map\u003cString, String\u003e args \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"            args.put(\"Command\",\"deadline\");","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"            args.put(\"Description\", \"it can be anything\");","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"            args.put(\"from\", \"2023/01/27\");","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"            // missing \"to\" -\u003e \u003csome valid date\u003e","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"            tl.addDoneTask(TaskTypes.Type.EVENT, args);","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        });","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        assertEquals(\"eh need to specify ur event from when to when - event \u003cdesc\u003e /from \u003cwhen\u003e /to \u003cwhen\u003e\", thrown.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"ajjajjajjajj":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"list","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"todo","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"todo go and do some stuff","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"list","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"deadline wake up","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"deadline wake up /by 1200hrs","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"list","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"event have lunch /from 1200hrs /to 1800hrs","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"ajjajjajjajj":8}}]
