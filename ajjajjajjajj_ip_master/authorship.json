[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"# DukeProPRO","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"\u003e “Why waste time say lot word when few word do trick” -Kevin Malone","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"### DukeProPRO frees your mind of having to say lot word for thing you need to do.","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"It\u0027s a personal task manager that stores and organises your tasks, with a CLI-based GUI.","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"Features it supports:","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"- concise commands!","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"- various types of tasks - ToDo, Deadline and Events","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"- search through your tasks with the find feature","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"- mark them as done or undone","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"- a text based storage system on your local machine","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"ajjajjajjajj":13,"-":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"    mainClassName \u003d \"launcher.Launcher\"","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"run {","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"checkstyle {","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ajjajjajjajj":25,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"### Add, Delete, Edit, List, Find","lastModifiedDate":"2023-02-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"Track a list of tasks, which can be any of these three types - Todo, Deadline, and Event.","lastModifiedDate":"2023-02-14"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"Use standard operations to manipulate the list of tasks to create new, update, and show","lastModifiedDate":"2023-02-14"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"the currently stored list of tasks. Search tasks by keyword using the \u0027Find\u0027 function.","lastModifiedDate":"2023-02-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"### Sorted Summary","lastModifiedDate":"2023-02-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"See a reader-friendly overview of the tasks, sorted into task types and ordered by ","lastModifiedDate":"2023-02-14"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"time.","lastModifiedDate":"2023-02-14"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"### Mark as done, Unmark done status","lastModifiedDate":"2023-02-14"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"Toggle between the state of done-ness of each task.","lastModifiedDate":"2023-02-14"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"### Storage","lastModifiedDate":"2023-02-14"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"Automatic saving of your list of tasks whenever changes are made. Load in saved data","lastModifiedDate":"2023-02-14"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"whenever the app is started.","lastModifiedDate":"2023-02-14"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"### `todo` - Add a ToDo task","lastModifiedDate":"2023-02-14"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"Add a ToDo type task to the list of tasks.","lastModifiedDate":"2023-02-14"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"`todo Buy eggs from the supermarket`","lastModifiedDate":"2023-02-14"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"A new todo task to buy eggs from the supermarket is added to the list.","lastModifiedDate":"2023-02-14"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"It is marked not done by default.","lastModifiedDate":"2023-02-14"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"New task added:","lastModifiedDate":"2023-02-14"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"[T][ ] Buy eggs from the supermarket","lastModifiedDate":"2023-02-14"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"You now have 1 task(s) in your list.","lastModifiedDate":"2023-02-14"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"Changes are saved to storage.","lastModifiedDate":"2023-02-14"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"### `deadline` - Add a Deadline","lastModifiedDate":"2023-02-14"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"Add a deadline to the list of tasks. Requires a specification of the ","lastModifiedDate":"2023-02-14"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"date-time for the deadline, in one of the supported formats:","lastModifiedDate":"2023-02-14"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"- yyyy-MM-dd HHmm","lastModifiedDate":"2023-02-14"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"- yyyy/MM/dd HHmm","lastModifiedDate":"2023-02-14"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"- ISO 8601 format: YYYY-MM-DD[T]HH:mm:ss","lastModifiedDate":"2023-02-14"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"Example of usage:","lastModifiedDate":"2023-02-14"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"`deadline Submit visa application /by 2023-02-20 2100`","lastModifiedDate":"2023-02-14"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"Adds a task to submit a visa application by the deadline on Mon, 20 Feb 23 9PM.","lastModifiedDate":"2023-02-14"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"It is marked not done by default.","lastModifiedDate":"2023-02-14"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"New task added:","lastModifiedDate":"2023-02-14"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"[D][ ] Submit visa application (by: Mon, 20 Feb 23 09:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"You now have 13 task(s) in your list.","lastModifiedDate":"2023-02-14"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"Changes are saved to storage.","lastModifiedDate":"2023-02-14"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"### `event` - Add an Event","lastModifiedDate":"2023-02-14"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"Add an event to the list of tasks. Requires a specification of the","lastModifiedDate":"2023-02-14"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"date-time for the start (from) and end (to) of the event, in one","lastModifiedDate":"2023-02-14"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"of the supported formats:","lastModifiedDate":"2023-02-14"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"- yyyy-MM-dd HHmm","lastModifiedDate":"2023-02-14"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"- yyyy/MM/dd HHmm","lastModifiedDate":"2023-02-14"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"- ISO 8601 format: YYYY-MM-DD[T]HH:mm:ss","lastModifiedDate":"2023-02-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"Example of usage:","lastModifiedDate":"2023-02-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"`event Mario Party with the boys /from 2023-02-21 2300 /to 2023-02-22 0200`","lastModifiedDate":"2023-02-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"Adds an event to play Mario Party with the boys, from 21 Feb 23 11pm to 22 Feb","lastModifiedDate":"2023-02-14"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"23 2am.","lastModifiedDate":"2023-02-14"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"New task added:","lastModifiedDate":"2023-02-14"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"[E][ ] Mario Party with the boys (from: Tue, 21 Feb 23 ","lastModifiedDate":"2023-02-14"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"11:00PM, to: Wed, 22 Feb 23 02:00AM)","lastModifiedDate":"2023-02-14"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"You now have 13 task(s) in your list.","lastModifiedDate":"2023-02-14"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"Changes are saved to storage.","lastModifiedDate":"2023-02-14"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"### `summary` - View an organised overview of the list","lastModifiedDate":"2023-02-14"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"Shows a summary of all tasks listed. Tasks divided among their types. Within","lastModifiedDate":"2023-02-14"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"each type, tasks are sorted from earliest to latest (if they are associated","lastModifiedDate":"2023-02-14"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"with date-time), and then by lexicographical order. Note that the tasks\u0027","lastModifiedDate":"2023-02-14"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"index are not shown (use `find` or `list` instead). ","lastModifiedDate":"2023-02-14"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"Example of usage:","lastModifiedDate":"2023-02-14"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"`summary`","lastModifiedDate":"2023-02-14"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"All tasks listed according to their types, and grouped by their type.","lastModifiedDate":"2023-02-14"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"Good day sir, here\u0027s a summary of what\u0027s on your plate.","lastModifiedDate":"2023-02-14"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":114,"author":{"gitId":"ajjajjajjajj"},"content":"Events - 3 items","lastModifiedDate":"2023-02-14"},{"lineNumber":115,"author":{"gitId":"ajjajjajjajj"},"content":"[E][] Midterm exams (from: Mon, 20 Feb 23 12:00PM,","lastModifiedDate":"2023-02-14"},{"lineNumber":116,"author":{"gitId":"ajjajjajjajj"},"content":"to: Mon, 20 Feb 23 02:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":117,"author":{"gitId":"ajjajjajjajj"},"content":"[E][] Dinner with pals (from: Mon, 20 Feb 23 06:00PM,","lastModifiedDate":"2023-02-14"},{"lineNumber":118,"author":{"gitId":"ajjajjajjajj"},"content":"to: Mon, 20 Feb 23 08:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":119,"author":{"gitId":"ajjajjajjajj"},"content":"[E][] My presidential inauguration speech (from: Wed,","lastModifiedDate":"2023-02-14"},{"lineNumber":120,"author":{"gitId":"ajjajjajjajj"},"content":"01 Mar 23 03:00PM, to: Wed, 01 Mar 23 05:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":121,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":122,"author":{"gitId":"ajjajjajjajj"},"content":"Deadlines - 4 items","lastModifiedDate":"2023-02-14"},{"lineNumber":123,"author":{"gitId":"ajjajjajjajj"},"content":"[D][X] Submit iP (by: Fri, 17 Feb 23 11:59PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":124,"author":{"gitId":"ajjajjajjajj"},"content":"[D][X] Pay the bills (by: Sat, 18 Feb 23 06:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":125,"author":{"gitId":"ajjajjajjajj"},"content":"[D][] Send out invitations (by: Sat, 18 Feb 23 08:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":126,"author":{"gitId":"ajjajjajjajj"},"content":"[D][] Settle the score with Tom (by: Sun, 19 Feb 23","lastModifiedDate":"2023-02-14"},{"lineNumber":127,"author":{"gitId":"ajjajjajjajj"},"content":"09:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":128,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":129,"author":{"gitId":"ajjajjajjajj"},"content":"Todo - 3 items","lastModifiedDate":"2023-02-14"},{"lineNumber":130,"author":{"gitId":"ajjajjajjajj"},"content":"[T][] Buy some food for my pet chicken","lastModifiedDate":"2023-02-14"},{"lineNumber":131,"author":{"gitId":"ajjajjajjajj"},"content":"[T][X] Feed my pet chicken","lastModifiedDate":"2023-02-14"},{"lineNumber":132,"author":{"gitId":"ajjajjajjajj"},"content":"[T][X] Throw out the garbage","lastModifiedDate":"2023-02-14"},{"lineNumber":133,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":134,"author":{"gitId":"ajjajjajjajj"},"content":"Use \u0027list\u0027, or \u0027find \u003ckeyword\u003e\u0027 to get a specific task and","lastModifiedDate":"2023-02-14"},{"lineNumber":135,"author":{"gitId":"ajjajjajjajj"},"content":"its index to modify at.","lastModifiedDate":"2023-02-14"},{"lineNumber":136,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":137,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":138,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":139,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":140,"author":{"gitId":"ajjajjajjajj"},"content":"### `list` - View all items in input order","lastModifiedDate":"2023-02-14"},{"lineNumber":141,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":142,"author":{"gitId":"ajjajjajjajj"},"content":"Shows all tasks that are in the list. Tasks are displayed in the sequence ","lastModifiedDate":"2023-02-14"},{"lineNumber":143,"author":{"gitId":"ajjajjajjajj"},"content":"that they have been input. Each task is labelled with their actual index ","lastModifiedDate":"2023-02-14"},{"lineNumber":144,"author":{"gitId":"ajjajjajjajj"},"content":"number.","lastModifiedDate":"2023-02-14"},{"lineNumber":145,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":146,"author":{"gitId":"ajjajjajjajj"},"content":"Example of usage:","lastModifiedDate":"2023-02-14"},{"lineNumber":147,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":148,"author":{"gitId":"ajjajjajjajj"},"content":"`list`","lastModifiedDate":"2023-02-14"},{"lineNumber":149,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":150,"author":{"gitId":"ajjajjajjajj"},"content":"All tasks are listed in input order, with their index number.","lastModifiedDate":"2023-02-14"},{"lineNumber":151,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":152,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":153,"author":{"gitId":"ajjajjajjajj"},"content":"Eh this is what you\u0027ve written down so far:","lastModifiedDate":"2023-02-14"},{"lineNumber":154,"author":{"gitId":"ajjajjajjajj"},"content":"1: [D][X] Submit iP (by: Fri, 17 Feb 23 11:59PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":155,"author":{"gitId":"ajjajjajjajj"},"content":"2: [E][] Dinner with pals (from: Mon, 20 Feb 23","lastModifiedDate":"2023-02-14"},{"lineNumber":156,"author":{"gitId":"ajjajjajjajj"},"content":"06:00PM, to: Mon, 20 Feb 23 08:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":157,"author":{"gitId":"ajjajjajjajj"},"content":"3: [T][] Buy some food for my pet chicken","lastModifiedDate":"2023-02-14"},{"lineNumber":158,"author":{"gitId":"ajjajjajjajj"},"content":"4: [E][] My presidential inauguration speech (from: Wed,","lastModifiedDate":"2023-02-14"},{"lineNumber":159,"author":{"gitId":"ajjajjajjajj"},"content":"01 Mar 23 03:00PM, to: Wed, 01 Mar 23 05:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":160,"author":{"gitId":"ajjajjajjajj"},"content":"5: [T][X] Feed my pet chicken","lastModifiedDate":"2023-02-14"},{"lineNumber":161,"author":{"gitId":"ajjajjajjajj"},"content":"6: [T][X] Throw out the garbage","lastModifiedDate":"2023-02-14"},{"lineNumber":162,"author":{"gitId":"ajjajjajjajj"},"content":"7: [E][] Midterm exams (from: Mon, 20 Feb 23 12:00PM,","lastModifiedDate":"2023-02-14"},{"lineNumber":163,"author":{"gitId":"ajjajjajjajj"},"content":"to: Mon, 20 Feb 23 02:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":164,"author":{"gitId":"ajjajjajjajj"},"content":"8: [D][] Settle the score with Tom (by: Sun, 19 Feb 23","lastModifiedDate":"2023-02-14"},{"lineNumber":165,"author":{"gitId":"ajjajjajjajj"},"content":"09:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":166,"author":{"gitId":"ajjajjajjajj"},"content":"9: [D] [X] Pay the bills (by: Sat, 18 Feb 23 06:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":167,"author":{"gitId":"ajjajjajjajj"},"content":"10: [D][] Send out invitations (by: Sat, 18 Feb 23","lastModifiedDate":"2023-02-14"},{"lineNumber":168,"author":{"gitId":"ajjajjajjajj"},"content":"08:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":169,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":170,"author":{"gitId":"ajjajjajjajj"},"content":"You have 10 tasks listed.","lastModifiedDate":"2023-02-14"},{"lineNumber":171,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":172,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":173,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":174,"author":{"gitId":"ajjajjajjajj"},"content":"### `find` - Search for a specific task description","lastModifiedDate":"2023-02-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":176,"author":{"gitId":"ajjajjajjajj"},"content":"Finds a task in the list whose description matches the keyword(s), and shows","lastModifiedDate":"2023-02-14"},{"lineNumber":177,"author":{"gitId":"ajjajjajjajj"},"content":"its information, including its index number.","lastModifiedDate":"2023-02-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":181,"author":{"gitId":"ajjajjajjajj"},"content":"`find chicken`","lastModifiedDate":"2023-02-14"},{"lineNumber":182,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":183,"author":{"gitId":"ajjajjajjajj"},"content":"Lists all tasks that contain \u0027chicken\u0027 in their description, and shows","lastModifiedDate":"2023-02-14"},{"lineNumber":184,"author":{"gitId":"ajjajjajjajj"},"content":"their index number.","lastModifiedDate":"2023-02-14"},{"lineNumber":185,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":186,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":187,"author":{"gitId":"ajjajjajjajj"},"content":"Here\u0027s the tasks matching \u0027chicken\u0027:","lastModifiedDate":"2023-02-14"},{"lineNumber":188,"author":{"gitId":"ajjajjajjajj"},"content":"3: [T][] Buy some food for my pet chicken","lastModifiedDate":"2023-02-14"},{"lineNumber":189,"author":{"gitId":"ajjajjajjajj"},"content":"5: [T][X] Feed my pet chicken","lastModifiedDate":"2023-02-14"},{"lineNumber":190,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":191,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":192,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":193,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":194,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":195,"author":{"gitId":"ajjajjajjajj"},"content":"### `edit` - Change a task\u0027s field","lastModifiedDate":"2023-02-14"},{"lineNumber":196,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":197,"author":{"gitId":"ajjajjajjajj"},"content":"Changes the content of a task at a specific index number,","lastModifiedDate":"2023-02-14"},{"lineNumber":198,"author":{"gitId":"ajjajjajjajj"},"content":"given the specific fields to change.","lastModifiedDate":"2023-02-14"},{"lineNumber":199,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":200,"author":{"gitId":"ajjajjajjajj"},"content":"Does not support changing the task type. For example, a Todo cannot be","lastModifiedDate":"2023-02-14"},{"lineNumber":201,"author":{"gitId":"ajjajjajjajj"},"content":"edited to become a Deadline.","lastModifiedDate":"2023-02-14"},{"lineNumber":202,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":203,"author":{"gitId":"ajjajjajjajj"},"content":"Example of usage:","lastModifiedDate":"2023-02-14"},{"lineNumber":204,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":205,"author":{"gitId":"ajjajjajjajj"},"content":"`edit 8 /description Make friends with Tom`","lastModifiedDate":"2023-02-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":209,"author":{"gitId":"ajjajjajjajj"},"content":"Description of the Deadline changed as depicted below. Note that the actual","lastModifiedDate":"2023-02-14"},{"lineNumber":210,"author":{"gitId":"ajjajjajjajj"},"content":"deadline date-time has not changed (specify `/by \u003cnew_deadline\u003e` to change).","lastModifiedDate":"2023-02-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":213,"author":{"gitId":"ajjajjajjajj"},"content":"Edited task at index 8!","lastModifiedDate":"2023-02-14"},{"lineNumber":214,"author":{"gitId":"ajjajjajjajj"},"content":"Old:","lastModifiedDate":"2023-02-14"},{"lineNumber":215,"author":{"gitId":"ajjajjajjajj"},"content":"[D][] Settle the score with Tom (by: Sun, 19 Feb 23","lastModifiedDate":"2023-02-14"},{"lineNumber":216,"author":{"gitId":"ajjajjajjajj"},"content":"09:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":217,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":218,"author":{"gitId":"ajjajjajjajj"},"content":"New:","lastModifiedDate":"2023-02-14"},{"lineNumber":219,"author":{"gitId":"ajjajjajjajj"},"content":"[D][] Make friends with Tom (by: Sun, 19 Feb 23 09:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":220,"author":{"gitId":"ajjajjajjajj"},"content":"Changes are saved to storage.","lastModifiedDate":"2023-02-14"},{"lineNumber":221,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":222,"author":{"gitId":"ajjajjajjajj"},"content":"Note that the index of the task does not change.","lastModifiedDate":"2023-02-14"},{"lineNumber":223,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":224,"author":{"gitId":"ajjajjajjajj"},"content":"Using the command `find Tom`:","lastModifiedDate":"2023-02-14"},{"lineNumber":225,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":226,"author":{"gitId":"ajjajjajjajj"},"content":"Here\u0027s the tasks matching \u0027tom\u0027:","lastModifiedDate":"2023-02-14"},{"lineNumber":227,"author":{"gitId":"ajjajjajjajj"},"content":"8: [D][] Make friends with Tom (by: Sun, 19 Feb 23","lastModifiedDate":"2023-02-14"},{"lineNumber":228,"author":{"gitId":"ajjajjajjajj"},"content":"09:00PM)","lastModifiedDate":"2023-02-14"},{"lineNumber":229,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":230,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":231,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":232,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":233,"author":{"gitId":"ajjajjajjajj"},"content":"### `delete` - Remove a task from the list","lastModifiedDate":"2023-02-14"},{"lineNumber":234,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":235,"author":{"gitId":"ajjajjajjajj"},"content":"Removes a task given at an index number from the list. If it doesn\u0027t exist,","lastModifiedDate":"2023-02-14"},{"lineNumber":236,"author":{"gitId":"ajjajjajjajj"},"content":"does nothing.","lastModifiedDate":"2023-02-14"},{"lineNumber":237,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":238,"author":{"gitId":"ajjajjajjajj"},"content":"Example of usage:","lastModifiedDate":"2023-02-14"},{"lineNumber":239,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":240,"author":{"gitId":"ajjajjajjajj"},"content":"`delete 8`","lastModifiedDate":"2023-02-14"},{"lineNumber":241,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":242,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":243,"author":{"gitId":"ajjajjajjajj"},"content":"The task with index number 8 is removed from the list. The deleted task is","lastModifiedDate":"2023-02-14"},{"lineNumber":244,"author":{"gitId":"ajjajjajjajj"},"content":"printed for reference.","lastModifiedDate":"2023-02-14"},{"lineNumber":245,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":246,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":247,"author":{"gitId":"ajjajjajjajj"},"content":"Removed \u0027Make friends with Tom\u0027 from the list. You now have","lastModifiedDate":"2023-02-14"},{"lineNumber":248,"author":{"gitId":"ajjajjajjajj"},"content":"10 task(s) left.","lastModifiedDate":"2023-02-14"},{"lineNumber":249,"author":{"gitId":"ajjajjajjajj"},"content":"Changes are saved to storage.","lastModifiedDate":"2023-02-14"},{"lineNumber":250,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":251,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":252,"author":{"gitId":"ajjajjajjajj"},"content":"---","lastModifiedDate":"2023-02-14"},{"lineNumber":253,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":254,"author":{"gitId":"ajjajjajjajj"},"content":"### `mark`/`unmark` - Mark or Unmark a task as done","lastModifiedDate":"2023-02-14"},{"lineNumber":255,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":256,"author":{"gitId":"ajjajjajjajj"},"content":"Marks or unmarks a task at an index number to be done.","lastModifiedDate":"2023-02-14"},{"lineNumber":257,"author":{"gitId":"ajjajjajjajj"},"content":"If the task is already done or not done, notifies the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":258,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":259,"author":{"gitId":"ajjajjajjajj"},"content":"Example of usage:","lastModifiedDate":"2023-02-14"},{"lineNumber":260,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":261,"author":{"gitId":"ajjajjajjajj"},"content":"`mark 3`","lastModifiedDate":"2023-02-14"},{"lineNumber":262,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":263,"author":{"gitId":"ajjajjajjajj"},"content":"Marks the task at index 3 (to buy some food for pet chicken) as done.","lastModifiedDate":"2023-02-14"},{"lineNumber":264,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":265,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":266,"author":{"gitId":"ajjajjajjajj"},"content":"Marked \u0027Buy some food for my pet chicken\u0027 as done!","lastModifiedDate":"2023-02-14"},{"lineNumber":267,"author":{"gitId":"ajjajjajjajj"},"content":"Changes are saved to storage.","lastModifiedDate":"2023-02-14"},{"lineNumber":268,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":269,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":270,"author":{"gitId":"ajjajjajjajj"},"content":"If the task was already done, shows the following message instead:","lastModifiedDate":"2023-02-14"},{"lineNumber":271,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":272,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":273,"author":{"gitId":"ajjajjajjajj"},"content":"\u0027Buy some food for my pet chicken\u0027 is already marked as done!","lastModifiedDate":"2023-02-14"},{"lineNumber":274,"author":{"gitId":"ajjajjajjajj"},"content":"```","lastModifiedDate":"2023-02-14"},{"lineNumber":275,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-14"}],"authorContributionMap":{"ajjajjajjajj":251,"-":24}},{"path":"src/main/java/app/chatbot/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.Command;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.LoadCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.SaveCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.SummaryCommand;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" * Entry point to the app backend.","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final Path STORAGE_LOCATION \u003d Paths.get(\".\", \"data\", \"storage.txt\");","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructor for Duke.","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    public Duke() {","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"            this.storage \u003d new Storage(STORAGE_LOCATION);","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"     * Gets the chatbot to process a String input into a Command and","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"     * executes it, returning a response string suitable for the chatbot","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     * to reply with.","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param fullCommand","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    public String getResponse(String fullCommand) {","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"            Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"            Response cmdResponse \u003d c.execute(taskList, storage);","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"            response.append(cmdResponse.toString());","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"            if (c.isSave() \u0026\u0026 cmdResponse.isSuccess()) {","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"                Command save \u003d new SaveCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"                response.append(save.execute(taskList, storage));","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"            return response.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"            return (e.getMessage());","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"     * Loads saved data from storage.","lastModifiedDate":"2023-02-04"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return Success message for loaded storage, or a message informing a load failure.","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"    public String loadStorageData() {","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"        Command loadCommand \u003d new LoadCommand();","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"        System.out.println(\"Loading storage data...\");","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"        return loadCommand.execute(taskList, storage).toString();","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"    public String showSummary() {","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"        Command summaryCommand \u003d new SummaryCommand();","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"        return summaryCommand.execute(taskList, storage).toString();","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ajjajjajjajj":69,"-":2}},{"path":"src/main/java/app/chatbot/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.AddCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.Command;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.CommandNotFoundException;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.DeleteCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.EditCommand;","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.ExitCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.FindCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.ListCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.MarkAsDoneCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.MarkAsUndoneCommand;","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"import app.command.SummaryCommand;","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskTypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":" * Contains methods for parsing user input into the command line,","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":" * and converting input into executable Commands.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"public class Parser {","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     * Splits a String line of input into its command (the first word), and its subsequent arguments.","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     * By default, the key \"Command\" maps to the name of the command input (the first word).","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"     * The name of the Command is also a key to its default arguments;","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"     * for eg: \"delete 1\" creates a mapping of \"delete\" -\u003e \"1\".","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"     * In the case of adding a new event, the name of the command is mapped to its description;","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"     * for eg: \"event\" -\u003e \"attend wedding\"","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input arguments to be split","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return map a mapping of each argument name to its value","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    private static Map\u003cString, String\u003e splitArgs(String input) {","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        // returns a Map mapping name of arg to arg value based on the raw format","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"        String[] args \u003d input.split(\" /\");","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        // add name of main command (first word) to map","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        String[] mainCommand \u003d args[0].split(\" \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"        String mainCommandName \u003d mainCommand[0];","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        map.put(\"Command\", mainCommandName);","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"        // check if there are arguments to main command, otherwise leave as \"\"","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"        String mainCommandArg \u003d mainCommand.length \u003d\u003d 1 ? \"\" : mainCommand[1].stripTrailing();","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        map.put(mainCommandName, mainCommandArg);","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        // process additional args, if present","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"        if (args.length \u003e 1) {","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"            List\u003cString\u003e addtlArgs \u003d Arrays.asList(args).subList(1, args.length);","lastModifiedDate":"2023-01-18"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"            for (String arg : addtlArgs) {","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"                String[] s \u003d arg.split(\" \", 2);","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"                String name \u003d s[0];","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"                String value \u003d s.length \u003d\u003d 1 ? \"\" : s[1].stripTrailing();","lastModifiedDate":"2023-01-18"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"                map.put(name, value);","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-18"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"        // map should always contain \"Command\" and mainCommandArg keys","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"        assert map.size() \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"        // value \"Command\" maps to should always be a key","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"        assert map.containsKey(map.get(\"Command\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"        return map;","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"     * Parses an untreated string from the command line (entered by the user)","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"     * and returns a Command to be executed. If the command is not recognised, throws a","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"     * CommandNotFoundException.","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input untreated String entered into command line by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return an executable Command containing info given by user.","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws CommandNotFoundException","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"    public static Command parse(String input) throws CommandNotFoundException {","lastModifiedDate":"2023-01-23"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, String\u003e argValues \u003d Parser.splitArgs(input);","lastModifiedDate":"2023-01-23"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"        String command \u003d argValues.get(\"Command\");","lastModifiedDate":"2023-01-23"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"        switch (command) {","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"list\":","lastModifiedDate":"2023-01-23"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-23"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"            return new MarkAsDoneCommand(argValues.get(command)); // pass in index to command","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"            return new MarkAsUndoneCommand(argValues.get(command)); // pass in index to command","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"delete\":","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"            return new DeleteCommand(argValues.get(command)); // pass in index to command","lastModifiedDate":"2023-01-23"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"find\":","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"            return new FindCommand(argValues.get(command));","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"edit\":","lastModifiedDate":"2023-02-09"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"            return new EditCommand(argValues.get(command),argValues);","lastModifiedDate":"2023-02-09"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"        case \"summary\":","lastModifiedDate":"2023-02-13"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"            return new SummaryCommand();","lastModifiedDate":"2023-02-13"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"        default:","lastModifiedDate":"2023-01-23"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"            if (TaskTypes.inputToTask.getValue().containsKey(command)) { // check if command is to add a task","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"                String desc \u003d argValues.get(command);","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"                argValues.put(\"description\", desc); // change the for description from the name of Command","lastModifiedDate":"2023-02-09"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"                return new AddCommand(TaskTypes.inputToTask.getValue().get(command), argValues);","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new CommandNotFoundException(\"I\u0027m sorry, I don\u0027t recognise this command :/\");","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":113}},{"path":"src/main/java/app/chatbot/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":" * Helper class for formatting GUI responses.","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"public class Response {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    private final boolean isSuccess;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"    private StringBuilder sb;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response(boolean isSuccess) {","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSuccess \u003d isSuccess;","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response(String s, boolean isSuccess) {","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb \u003d new StringBuilder(s);","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"        sb.append(System.lineSeparator());","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSuccess \u003d isSuccess;","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a line separator to a String. Should be used whenever a","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * message is delivered to the user.","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response addLine(String input) {","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb.append(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb.append(System.lineSeparator());","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        return this;","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response addBlankLine() {","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        this.sb.append(System.lineSeparator());","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        return this;","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean isSuccess() {","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.isSuccess;","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.sb.toString();","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":45}},{"path":"src/main/java/app/chatbot/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.chatbot;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.File;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidDateTimeException;","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidInputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskTypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":" * Handles Storage of data. Converts Task data saved in text file into","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":" * Tasks the user interacts with during runtime. Saves Tasks into txt file","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":" * and overwrites changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"public class Storage {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    public static final String SEPARATOR_REGEX \u003d \" \\\\| \";","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    public static final String SUB_SEPARATOR \u003d \":\"; // for commands with additional args","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int SYMBOL_INDEX \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int ISDONE_INDEX \u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int DESC_INDEX \u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final int MIN_STORAGE_ARG_SIZE \u003d 3;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    private final File file;","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     * Creates a new Storage object. A file is created at the stated path to store","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"     * data. If the path location does not exist, the necessary files and directories","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"     * are created.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param path the relative path for which the text data file will be stored.","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IOException, propagated from FileWriter.","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"    Storage(Path path) throws IOException {","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        this.file \u003d new File(path.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        // creates storage directory or data if they don\u0027t exist","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        this.file.getParentFile().mkdirs();","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!Files.exists(path)) {","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"            this.file.createNewFile();","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        assert this.file.exists();","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"     * Loads a single line in storage into a given task.TaskList.","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"     * Method is under review to return totalSuccesses and totalFailures.","lastModifiedDate":"2023-02-04"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"     * It is assumed that a line in storage follows the format specified here:","lastModifiedDate":"2023-01-25"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"     * taskSymbol | isDone | desc | addtl-arg1:value | addtl-arg2:value ...","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"     * For example, a project meeting task.Event from 1pm to 3pm marked done:","lastModifiedDate":"2023-01-25"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"     * E | 1 | project meeting | from:1pm | to:3pm","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-25"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl empty TaskList, assuming this is executed upon startup of app.","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return totalSuccess, the number of lines that have been successfully loaded into the tl.","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws","lastModifiedDate":"2023-02-04"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-25"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"    public Map\u003cString, Integer\u003e loadIntoTaskList(TaskList tl)","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"            throws IOException {","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, Integer\u003e successRates \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(this.file));","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"        String line \u003d br.readLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"        int totalRowsRead \u003d 0;","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"        int totalSuccess \u003d 0;","lastModifiedDate":"2023-01-24"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"        while (line !\u003d null) {","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"            totalRowsRead++;","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"            System.out.println(\"Loading task #\" + totalRowsRead);","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"                List\u003cString\u003e args \u003d splitStorageFormatArgs(line);","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"                TaskTypes.Type taskType \u003d getTaskTypeFromStorageFormat(args);","lastModifiedDate":"2023-02-04"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"                Map\u003cString, String\u003e argValues \u003d getArgMapFromStorageFormat(args);","lastModifiedDate":"2023-02-04"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"                boolean isDone \u003d getIsDoneFromStorageFormat(args);","lastModifiedDate":"2023-02-04"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"                boolean isSuccess \u003d addStorageTaskToTaskList(tl, taskType, argValues, isDone);","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"                if (isSuccess) {","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"                    totalSuccess++;","lastModifiedDate":"2023-02-05"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"                }","lastModifiedDate":"2023-02-05"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"            } catch (InvalidStorageException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"            } finally {","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"                line \u003d br.readLine();","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"        successRates.put(\"Successes\", totalSuccess);","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"        successRates.put(\"Total\", totalRowsRead);","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"        return successRates;","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a storage format Task to a TaskList, given the processed arguments.","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param taskType","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param argValues","lastModifiedDate":"2023-02-05"},{"lineNumber":114,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param isDone","lastModifiedDate":"2023-02-05"},{"lineNumber":115,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return a boolean indicating if the addition was successful.","lastModifiedDate":"2023-02-05"},{"lineNumber":116,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":117,"author":{"gitId":"ajjajjajjajj"},"content":"    private boolean addStorageTaskToTaskList(TaskList tl,","lastModifiedDate":"2023-02-05"},{"lineNumber":118,"author":{"gitId":"ajjajjajjajj"},"content":"                                             TaskTypes.Type taskType,","lastModifiedDate":"2023-02-05"},{"lineNumber":119,"author":{"gitId":"ajjajjajjajj"},"content":"                                             Map\u003cString, String\u003e argValues,","lastModifiedDate":"2023-02-05"},{"lineNumber":120,"author":{"gitId":"ajjajjajjajj"},"content":"                                             boolean isDone) {","lastModifiedDate":"2023-02-05"},{"lineNumber":121,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"ajjajjajjajj"},"content":"            if (isDone) {","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"ajjajjajjajj"},"content":"                tl.addDoneTask(taskType, argValues);","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"ajjajjajjajj"},"content":"            } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"ajjajjajjajj"},"content":"                tl.addTask(taskType, argValues);","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":127,"author":{"gitId":"ajjajjajjajj"},"content":"            return true;","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (InvalidInputException | InvalidDateTimeException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"ajjajjajjajj"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"ajjajjajjajj"},"content":"            return false;","lastModifiedDate":"2023-02-05"},{"lineNumber":131,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":133,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"ajjajjajjajj"},"content":"    private TaskTypes.Type getTaskTypeFromStorageFormat(List\u003cString\u003e args)","lastModifiedDate":"2023-02-05"},{"lineNumber":135,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidStorageException {","lastModifiedDate":"2023-02-05"},{"lineNumber":136,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":137,"author":{"gitId":"ajjajjajjajj"},"content":"        String symbol \u003d args.get(SYMBOL_INDEX);","lastModifiedDate":"2023-02-05"},{"lineNumber":138,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.Type taskType \u003d TaskTypes.symbolToTask.getValue().get(symbol);","lastModifiedDate":"2023-02-05"},{"lineNumber":139,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"ajjajjajjajj"},"content":"        if (taskType \u003d\u003d null) {","lastModifiedDate":"2023-02-05"},{"lineNumber":141,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"Invalid TaskType\");","lastModifiedDate":"2023-02-05"},{"lineNumber":142,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":143,"author":{"gitId":"ajjajjajjajj"},"content":"        return taskType;","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":145,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":146,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":147,"author":{"gitId":"ajjajjajjajj"},"content":"     * Extracts task arguments from the split storageFormat.","lastModifiedDate":"2023-02-05"},{"lineNumber":148,"author":{"gitId":"ajjajjajjajj"},"content":"     * Compulsorily extracts description.","lastModifiedDate":"2023-02-05"},{"lineNumber":149,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args","lastModifiedDate":"2023-02-05"},{"lineNumber":150,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":151,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidStorageException - if Description is missing","lastModifiedDate":"2023-02-05"},{"lineNumber":152,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":153,"author":{"gitId":"ajjajjajjajj"},"content":"    private Map\u003cString, String\u003e getArgMapFromStorageFormat(List\u003cString\u003e args)","lastModifiedDate":"2023-02-05"},{"lineNumber":154,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidStorageException {","lastModifiedDate":"2023-02-05"},{"lineNumber":155,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":156,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, String\u003e argValues \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-04"},{"lineNumber":157,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":158,"author":{"gitId":"ajjajjajjajj"},"content":"            argValues.put(\"description\", args.get(DESC_INDEX));","lastModifiedDate":"2023-02-09"},{"lineNumber":159,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":160,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"Missing description\");","lastModifiedDate":"2023-02-05"},{"lineNumber":161,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":162,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":163,"author":{"gitId":"ajjajjajjajj"},"content":"        // map additional arguments","lastModifiedDate":"2023-02-05"},{"lineNumber":164,"author":{"gitId":"ajjajjajjajj"},"content":"        if (args.size() \u003e MIN_STORAGE_ARG_SIZE) {","lastModifiedDate":"2023-02-05"},{"lineNumber":165,"author":{"gitId":"ajjajjajjajj"},"content":"            for (String pair : args.subList(MIN_STORAGE_ARG_SIZE, args.size())) {","lastModifiedDate":"2023-02-05"},{"lineNumber":166,"author":{"gitId":"ajjajjajjajj"},"content":"                String[] split \u003d pair.split(SUB_SEPARATOR, 2);","lastModifiedDate":"2023-02-04"},{"lineNumber":167,"author":{"gitId":"ajjajjajjajj"},"content":"                argValues.put(split[0], split[1]);","lastModifiedDate":"2023-02-04"},{"lineNumber":168,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-04"},{"lineNumber":169,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":170,"author":{"gitId":"ajjajjajjajj"},"content":"        return argValues;","lastModifiedDate":"2023-02-04"},{"lineNumber":171,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":172,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":173,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":174,"author":{"gitId":"ajjajjajjajj"},"content":"     * Extracts isDone from Storage. isDone is indicated with 1 for Done, 0 for Undone.","lastModifiedDate":"2023-02-05"},{"lineNumber":175,"author":{"gitId":"ajjajjajjajj"},"content":"     * Throws an exception for any other value.","lastModifiedDate":"2023-02-05"},{"lineNumber":176,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args","lastModifiedDate":"2023-02-05"},{"lineNumber":177,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":178,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidStorageException","lastModifiedDate":"2023-02-05"},{"lineNumber":179,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":180,"author":{"gitId":"ajjajjajjajj"},"content":"    private boolean getIsDoneFromStorageFormat(List\u003cString\u003e args) throws InvalidStorageException {","lastModifiedDate":"2023-02-04"},{"lineNumber":181,"author":{"gitId":"ajjajjajjajj"},"content":"        String arg \u003d args.get(ISDONE_INDEX);","lastModifiedDate":"2023-02-05"},{"lineNumber":182,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isDoneTrue \u003d arg.equals(\"1\");","lastModifiedDate":"2023-02-04"},{"lineNumber":183,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isUnDoneTrue \u003d arg.equals(\"0\");","lastModifiedDate":"2023-02-04"},{"lineNumber":184,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":185,"author":{"gitId":"ajjajjajjajj"},"content":"        // check if arg value !\u003d (1 or 0)","lastModifiedDate":"2023-02-05"},{"lineNumber":186,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!isDoneTrue \u0026\u0026 !isUnDoneTrue) {","lastModifiedDate":"2023-02-04"},{"lineNumber":187,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"error loading isDone\");","lastModifiedDate":"2023-02-04"},{"lineNumber":188,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":189,"author":{"gitId":"ajjajjajjajj"},"content":"        return isDoneTrue;","lastModifiedDate":"2023-02-04"},{"lineNumber":190,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":191,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":192,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":193,"author":{"gitId":"ajjajjajjajj"},"content":"     * Splits a single line from the storageFormat into a List","lastModifiedDate":"2023-02-05"},{"lineNumber":194,"author":{"gitId":"ajjajjajjajj"},"content":"     * of arguments.","lastModifiedDate":"2023-02-05"},{"lineNumber":195,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param line","lastModifiedDate":"2023-02-05"},{"lineNumber":196,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":197,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidStorageException if the line contains less than min","lastModifiedDate":"2023-02-05"},{"lineNumber":198,"author":{"gitId":"ajjajjajjajj"},"content":"     * number of args in storage","lastModifiedDate":"2023-02-05"},{"lineNumber":199,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":200,"author":{"gitId":"ajjajjajjajj"},"content":"    private List\u003cString\u003e splitStorageFormatArgs(String line) throws InvalidStorageException {","lastModifiedDate":"2023-02-05"},{"lineNumber":201,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cString\u003e args \u003d Arrays.asList(line.split(SEPARATOR_REGEX));","lastModifiedDate":"2023-02-05"},{"lineNumber":202,"author":{"gitId":"ajjajjajjajj"},"content":"        if (args.size() \u003c MIN_STORAGE_ARG_SIZE) {","lastModifiedDate":"2023-02-05"},{"lineNumber":203,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidStorageException(\"Missing inputs for task in this line\");","lastModifiedDate":"2023-02-05"},{"lineNumber":204,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":205,"author":{"gitId":"ajjajjajjajj"},"content":"        return args;","lastModifiedDate":"2023-02-05"},{"lineNumber":206,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":207,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":208,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":209,"author":{"gitId":"ajjajjajjajj"},"content":"     * Overwrites the storage file \u003cstrong\u003ecompletely\u003c/strong\u003e with data for the TaskList passed in.","lastModifiedDate":"2023-01-29"},{"lineNumber":210,"author":{"gitId":"ajjajjajjajj"},"content":"     * Thus, this should only be executed when the TaskList contains the right information.","lastModifiedDate":"2023-01-29"},{"lineNumber":211,"author":{"gitId":"ajjajjajjajj"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":212,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl TaskList with updated data to be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":213,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IOException, propagated from FileWriter.","lastModifiedDate":"2023-02-04"},{"lineNumber":214,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":215,"author":{"gitId":"ajjajjajjajj"},"content":"    public void saveToStorage(TaskList tl) throws IOException {","lastModifiedDate":"2023-02-04"},{"lineNumber":216,"author":{"gitId":"ajjajjajjajj"},"content":"        BufferedWriter br \u003d new BufferedWriter(new FileWriter(this.file));","lastModifiedDate":"2023-01-24"},{"lineNumber":217,"author":{"gitId":"ajjajjajjajj"},"content":"        for (Task task : tl.getAllTasks()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":218,"author":{"gitId":"ajjajjajjajj"},"content":"            String data \u003d task.asDataFormat();","lastModifiedDate":"2023-01-24"},{"lineNumber":219,"author":{"gitId":"ajjajjajjajj"},"content":"            br.write(data);","lastModifiedDate":"2023-01-24"},{"lineNumber":220,"author":{"gitId":"ajjajjajjajj"},"content":"            br.newLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":221,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":222,"author":{"gitId":"ajjajjajjajj"},"content":"        br.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":223,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":224,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":225,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":226,"author":{"gitId":"ajjajjajjajj"},"content":"     * Indicates invalid storage data","lastModifiedDate":"2023-02-04"},{"lineNumber":227,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":228,"author":{"gitId":"ajjajjajjajj"},"content":"    public static class InvalidStorageException extends Exception {","lastModifiedDate":"2023-01-25"},{"lineNumber":229,"author":{"gitId":"ajjajjajjajj"},"content":"        InvalidStorageException(String msg) {","lastModifiedDate":"2023-01-25"},{"lineNumber":230,"author":{"gitId":"ajjajjajjajj"},"content":"            super(msg);","lastModifiedDate":"2023-01-25"},{"lineNumber":231,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":232,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":233,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":233}},{"path":"src/main/java/app/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidDateTimeException;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidInputException;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskTypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * Functions as an executor to convert user-input arguments","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" * into a Task, and add into the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String ERROR_PREFIX \u003d \"I wasn\u0027t able to add this task - \";","lastModifiedDate":"2023-02-14"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    private final Map\u003cString, String\u003e args;","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    private final TaskTypes.Type taskType;","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructs an AddCommand.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param type type of Task as specified by TaskTypes","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args mapping of arguments needed for the Task and its arguments,","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     *             created by the Parser","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public AddCommand(TaskTypes.Type type, Map\u003cString, String\u003e args) {","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        this.args \u003d args;","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        this.taskType \u003d type;","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a Task into the TaskList and informs the user of the Task added.","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return String response","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"        Task newTask;","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"            newTask \u003d tl.addTask(this.taskType, this.args);","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (InvalidInputException | InvalidDateTimeException e) {","lastModifiedDate":"2023-02-14"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(ERROR_PREFIX, false)","lastModifiedDate":"2023-02-14"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"                    .addLine(e.getMessage());","lastModifiedDate":"2023-02-14"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"        Response response \u003d new Response(true);","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"        int numTasks \u003d tl.getAllTasks().size();","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        response.addLine(\"New task added:\");","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        response.addLine(newTask.toString());","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        response.addLine(\"You now have \" + numTasks + \" task(s) in your list.\");","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"        return response;","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":59}},{"path":"src/main/java/app/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":" * Base class for Commands, which represent executable processes","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":" * in the application. A Command can be instantiated through front-end user-input","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":" * by calling the constructor through the Parser, or be executed at the back-end","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":" * (such as auto-save processes).","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isExit;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isSave;","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Command instantiated should define isExit (if command is to exit the session)","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * and isSaved (if command results in changes to the maintained TaskList).","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    protected Command() {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * Executes the command. Necessary interactions are conducted on TaskList,","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     * and actions are communicated to user via the Ui. Storage is called to save the","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     * changes executed by the command.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return String response","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    public abstract Response execute(TaskList tl, Storage storage);","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.isExit;","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean isSave() {","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.isSave;","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":44}},{"path":"src/main/java/app/command/CommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class CommandNotFoundException extends Exception {","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"    public CommandNotFoundException(String message) {","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"        super(message);","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":7}},{"path":"src/main/java/app/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidInputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String INVALID_ARG_ERROR \u003d \"Specify a task by its task number. \"","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"Try \u0027list\u0027 or \u0027find\u0027 to get the number :)\";","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    private final String deleteAtIndex;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"     * Takes in the USER-input index - this index refers to the task as","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"     * presented by the List command.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index user-input index.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    public DeleteCommand(String index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        this.deleteAtIndex \u003d index;","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * Deletes a Task from the TaskList, and informs the user of the Task deleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage)  {","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        Response response;","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            response \u003d new Response(true);","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"            int i \u003d Integer.parseInt(deleteAtIndex) - 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"            Task deletedTask \u003d tl.deleteTask(i);","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"            response.addLine(\"Removed \u0027\" + deletedTask.getDesc()","lastModifiedDate":"2023-02-14"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"                    + \"\u0027 from the list. You now have \" + tl.size() + \" tasks left.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"            response \u003d new Response(false);","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"            response.addLine(INVALID_ARG_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"            response \u003d new Response(false);","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"            response.addLine(e.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        return response;","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":49}},{"path":"src/main/java/app/command/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidDateTimeException;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.InvalidInputException;","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-02-09"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2023-02-09"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String NO_FIELDS_INDICATED_ERROR \u003d","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"            \"Please specify a field to change using \u0027/\u003cfield\u003e \u003cvalue\u003e\u0027 :)\";","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    private final String editAtIndex;","lastModifiedDate":"2023-02-09"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    private final Map\u003cString, String\u003e args;","lastModifiedDate":"2023-02-09"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    public EditCommand(String editAtIndex, Map\u003cString, String\u003e args) {","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        this.editAtIndex \u003d editAtIndex;","lastModifiedDate":"2023-02-09"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"        this.args \u003d args;","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-02-09"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        this.args.remove(\"Command\");","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        this.args.remove(\"edit\");","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        if (this.args.isEmpty()) {","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(NO_FIELDS_INDICATED_ERROR, false);","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        Response r \u003d new Response(\"Edited task at index \" + this.editAtIndex + \"!\", true);","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        r.addLine(\"Old:\")","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"                .addLine(tl.getTask(editAtIndex).toString())","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"                .addBlankLine()","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"                .addLine(\"New: \");","lastModifiedDate":"2023-02-09"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"            Task editedTask \u003d tl.editTask(editAtIndex, this.args);","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"            r.addLine(editedTask.toString());","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"            return r;","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (InvalidInputException | InvalidDateTimeException e){","lastModifiedDate":"2023-02-10"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(e.getMessage(), false);","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"ajjajjajjajj":46}},{"path":"src/main/java/app/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":" * Allows for the app to exit. This is the only class with isExit \u003d true.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        super();","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Prints the exit message. Duke.run() recognises the exit status and closes the app.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tasks","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        return new Response(\"Alright, goodbye to you too!\", true);","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":27}},{"path":"src/main/java/app/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-10"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    private final String searchContent;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    public FindCommand(String searchContent) {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.searchContent \u003d searchContent.toLowerCase();","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"        Response response \u003d new Response(true);","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        StringBuilder searchHitsDisplay \u003d new StringBuilder();","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isSearchSuccessful \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        for (int i \u003d 0; i \u003c tl.size(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"            Task t \u003d tl.getTask(i);","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"            String desc \u003d t.getDesc();","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"            if (desc.toLowerCase().contains(this.searchContent)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"                searchHitsDisplay.append(i + 1)","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\": \")","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(t)","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\"\\n\");","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"                isSearchSuccessful \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        String responseString;","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!isSearchSuccessful) {","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            assert searchHitsDisplay.toString().equals(\"\");","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"            responseString \u003d \"Ah I didn\u0027t find any tasks matching \u0027\" + this.searchContent + \"\u0027.\" + \"\\n\";","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"            responseString \u003d \"Here\u0027s the tasks matching \u0027\" + this.searchContent + \"\u0027:\\n\"","lastModifiedDate":"2023-02-10"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"                    + searchHitsDisplay + \"\\n\";","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        return response.addLine(responseString);","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"ajjajjajjajj":43}},{"path":"src/main/java/app/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String NOTHING_TO_LIST_MESSAGE \u003d \"You don\u0027t have anything listed right now.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String LIST_INTRO_MESSAGE \u003d \"Eh this is what you\u0027ve written down so far:\\n\";","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    public ListCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Lists the Tasks in the TaskList. If there are no tasks, replies with","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * a different message instead.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the tasks are numbered from 1 onwards. Order of tasks follows","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * the indexing of the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cTask\u003e listTasks \u003d tl.getAllTasks();","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        Response response \u003d new Response(true);","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        if (listTasks.isEmpty()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"            response.addLine(NOTHING_TO_LIST_MESSAGE);","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"            StringBuilder output \u003d new StringBuilder(LIST_INTRO_MESSAGE);","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            int taskIndex \u003d 1;","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"            for (Task t : tl) {","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"                output.append(taskIndex)","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\": \")","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(t)","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"                        .append(\"\\n\");","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"                taskIndex++;","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"            response.addLine(output.toString());","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"            response.addLine(\"You have \" + listTasks.size() + \" tasks listed.\");","lastModifiedDate":"2023-02-10"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        return response;","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":49}},{"path":"src/main/java/app/command/LoadCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"public class LoadCommand extends Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String IO_ERROR \u003d \"IO Error - I dunno what went wrong :(\";","lastModifiedDate":"2023-02-10"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    public LoadCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"     * Loads the Tasks specified in the storage text file into the TaskList by appending.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Informs the user of the number of tasks that have been successfully loaded.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IOException propagated from FileWriter","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        Map\u003cString, Integer\u003e successRates;","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            successRates \u003d storage.loadIntoTaskList(tl);","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(IO_ERROR, false);","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        int numSuccess \u003d successRates.get(\"Successes\");","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        int numTotalRows \u003d successRates.get(\"Total\");","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        return new Response(\"Successfully loaded \"","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"                + numSuccess + \" of \" + numTotalRows","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"                +\" task(s) from storage.\", true);","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ajjajjajjajj":38}},{"path":"src/main/java/app/command/MarkAsDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"public class MarkAsDoneCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String NUM_FORMAT_ERROR \u003d \"Please specify the task by its index number.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String MISSING_TASK_ERROR \u003d \"Seems like this task doesn\u0027t exist.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    private final String markAtIndex;","lastModifiedDate":"2023-02-10"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    public MarkAsDoneCommand(String index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.markAtIndex \u003d index;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks the Task at markAtIndex as Done. Notifies the user if the Task was","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * already previously done. Throws a message for formatting issues, or if the","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * corresponding Task to markAtIndex does not exist in the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage)  {","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isAlreadyMarked;","lastModifiedDate":"2023-02-14"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"            isAlreadyMarked \u003d tl.markAsDone(markAtIndex);","lastModifiedDate":"2023-02-14"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            if (isAlreadyMarked) {","lastModifiedDate":"2023-02-14"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(\"\u0027\" + tl.getTask(markAtIndex).getDesc()","lastModifiedDate":"2023-02-14"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"                        + \"\u0027 already marked as done!\", false);","lastModifiedDate":"2023-02-14"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"            } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(\"Marked \u0027\" + tl.getTask(markAtIndex).getDesc() + \"\u0027 as done!\", true);","lastModifiedDate":"2023-02-14"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(NUM_FORMAT_ERROR, false);","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(MISSING_TASK_ERROR, false);","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":42}},{"path":"src/main/java/app/command/MarkAsUndoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"public class MarkAsUndoneCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String NUM_FORMAT_ERROR \u003d \"Please specify the task by its index number.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String MISSING_TASK_ERROR \u003d \"Seems like this task doesn\u0027t exist.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    private final String unmarkAtIndex;","lastModifiedDate":"2023-02-09"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    public MarkAsUndoneCommand(String index) {","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d true;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        this.unmarkAtIndex \u003d index;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * Unmarks the Done status of the Task at markAtIndex. Notifies the user if the Task was","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     * already undone. Throws a message for formatting issues, or if the","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"     * corresponding Task to markAtIndex does not exist in the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isAlreadyMarked;","lastModifiedDate":"2023-02-14"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"            isAlreadyMarked \u003d tl.unmarkDone(unmarkAtIndex);","lastModifiedDate":"2023-02-14"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            if (isAlreadyMarked) {","lastModifiedDate":"2023-02-14"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(\"\u0027\" + tl.getTask(unmarkAtIndex).getDesc()","lastModifiedDate":"2023-02-14"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"                        + \"\u0027 is already undone!\", false);","lastModifiedDate":"2023-02-14"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"            } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"                return new Response(\"Unmarked \u0027\" + tl.getTask(unmarkAtIndex).getDesc() + \"\u0027.\", true);","lastModifiedDate":"2023-02-14"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(NUM_FORMAT_ERROR, false);","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(MISSING_TASK_ERROR, false);","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":42}},{"path":"src/main/java/app/command/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":" * Command to save the current TaskList state to storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":" * Serves to interact with the Storage - this command is not available","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":" * to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"public class SaveCommand extends Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String SAVE_SUCCESSFUL_MSG \u003d \"Changes are saved to storage.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String IO_ERROR \u003d \"Something prevented the changes from being saved :(\";","lastModifiedDate":"2023-02-10"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    public SaveCommand() {","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false; // no data is changed in this command that warrants saving","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"     * Saves the current TaskList to storage. If successful, notifies the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"     * This Command is not presented as an option to the user and is exclusively","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"     * used for back-end only.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param storage","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws Exception","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage storage) {","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-10"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"            storage.saveToStorage(tl);","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(IO_ERROR, false);","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        return new Response(SAVE_SUCCESSFUL_MSG, true);","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ajjajjajjajj":39}},{"path":"src/main/java/app/command/SummaryCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.command;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Response;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.Task;","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskList;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import app.task.TaskTypes;","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":" * Summary - serves as a Command to gather all Tasks and provide","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" * a concise summary of each Task types to the user.","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"public class SummaryCommand extends Command{","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String SUMMARY_INTRO \u003d","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"            \"Good day sir, here\u0027s a summary of what\u0027s on your plate.\";","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String SUMMARY_INTRO_EMPTY \u003d","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"            \"Good day sir, you have no saved tasks! Feed me tasks to track :)\";","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String SUMMARY_CLOSING \u003d","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"            \"Use \u0027list\u0027, or \u0027find \u003ckeyword\u003e\u0027 to get a specific task and its index to modify at.\";","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    public SummaryCommand() {","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isSave \u003d false;","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     * Returns a summary view of all the tasks in the TaskList.","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"     * The summary is split by the type of tasks, and sorted within each type","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"     * (by the date if present, if not, alphabetically).","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param tl","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param s","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    public Response execute(TaskList tl, Storage s) {","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        Response r \u003d new Response(SUMMARY_INTRO, true).addBlankLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        if (tl.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"            return new Response(SUMMARY_INTRO_EMPTY, true);","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cTask\u003e events \u003d tl.getSortedTasksByType(TaskTypes.Type.EVENT);","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        r.addLine(\"Events - \" + events.size() + \" items\");","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        for (Task t : events) {","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"            r.addLine(t.toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        r.addBlankLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cTask\u003e deadlines \u003d tl.getSortedTasksByType(TaskTypes.Type.DEADLINE);","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        r.addLine(\"Deadlines - \" + deadlines.size() + \" items\");","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        for (Task t : deadlines) {","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"            r.addLine(t.toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        r.addBlankLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cTask\u003e todos \u003d tl.getSortedTasksByType(TaskTypes.Type.TODO);","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"        r.addLine(\"Todo - \" + todos.size() + \" items\");","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"        for (Task t : todos) {","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"            r.addLine(t.toString());","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"        r.addBlankLine();","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"        return r.addLine(SUMMARY_CLOSING);","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"ajjajjajjajj":65}},{"path":"src/main/java/app/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String MISSING_BY_ERROR \u003d \"Could you provide the deadline in \"","lastModifiedDate":"2023-02-14"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"yyyy-MM-dd HHmm or yyyy/MM/dd HHmm format please.\";","lastModifiedDate":"2023-02-14"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructor for Deadline Task.","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param description","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param deadline","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException for any empty inputs.","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException for a badly formatted datetime.","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    Deadline(String description, String deadline)","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidInputException, InvalidDateTimeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"        this.symbol \u003d \"D\";","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        this.taskType \u003d TaskTypes.Type.DEADLINE;","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        if (isArgEmpty(deadline)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(MISSING_BY_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        this.deadline \u003d parseDate(deadline);","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"        this.fieldToValueMap.put(\"by\", this.deadline.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.toString() + \" (by: \" + this.deadline.format(OUTPUT_FORMAT) + \")\";","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    public String asDataFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.asDataFormat(\"by:\" + this.deadline);","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"    private LocalDateTime getDeadline() {","lastModifiedDate":"2023-02-13"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.deadline;","lastModifiedDate":"2023-02-13"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"    public int compareTo(Task other) {","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"        int result \u003d this.getType().compareTo(other.getType());","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        if (result \u003d\u003d 0) {","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"            Deadline otherDeadline \u003d (Deadline) other;","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"            return (this.deadline.compareTo(otherDeadline.getDeadline()));","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"            return result;","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":58}},{"path":"src/main/java/app/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String MISSING_FROM_OR_TO_ERROR \u003d","lastModifiedDate":"2023-02-10"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"            \"Could provide BOTH the \u0027from\u0027 and \u0027to\u0027 in \"","lastModifiedDate":"2023-02-14"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"yyyy-MM-dd HHmm or yyyy/MM/dd HHmm format please.\";","lastModifiedDate":"2023-02-14"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"     * Constructor for Event Task.","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param description","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param from","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param to","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException for invalid from and to formats.","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException for any empty arguments.","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    Event(String description, String from, String to)","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidDateTimeException, InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        this.symbol \u003d \"E\";","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        this.taskType \u003d TaskTypes.Type.EVENT;","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        if (isArgEmpty(from) || isArgEmpty(to)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(MISSING_FROM_OR_TO_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"        this.from \u003d parseDate(from);","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        this.to \u003d parseDate(to);","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        this.fieldToValueMap.put(\"from\", this.from.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        this.fieldToValueMap.put(\"to\", this.from.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    public String asDataFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.asDataFormat(\"from:\" + this.from, \"to:\" + this.to);","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.toString() + \" (from: \" + this.from.format(OUTPUT_FORMAT)","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"                + \", to: \" + this.to.format(OUTPUT_FORMAT) + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"    public int compareTo(Task other) {","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        int result \u003d this.getType().compareTo(other.getType());","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        if (result \u003d\u003d 0) {","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"            return this.eventCompare(other);","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"            return result;","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"    private int eventCompare(Task other) {","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"        int fromDiff \u003d this.from.compareTo(otherEvent.from);","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"        if (fromDiff \u003d\u003d 0) {","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"            int toDiff \u003d this.to.compareTo(otherEvent.to);","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"            return toDiff;","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"            return fromDiff;","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":72}},{"path":"src/main/java/app/task/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class InvalidDateTimeException extends Exception {","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"    InvalidDateTimeException(String msg) {","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"        super(msg);","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"ajjajjajjajj":7}},{"path":"src/main/java/app/task/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"    public InvalidInputException(String msg) {","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"        super(msg);","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":8}},{"path":"src/main/java/app/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-09"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Objects;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * Represents a Task, which can contain additional attributes, such as the","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" * starting and ending datetime.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":" * A Task is not done by default.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":" * A description for the Task is compulsory.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":" * Supported DateTime formats are included in this class for Tasks that","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":" * have DateTime attributes.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":" * Attributes of a Task cannot be accessed and modified directly from other packages","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":" * (use the TaskList to modify a Task).","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"public abstract class Task implements Comparable\u003cTask\u003e {","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    protected static final String DESC_MISSING_ERROR \u003d \"Provide me with a description.\";","lastModifiedDate":"2023-02-14"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    protected static final String INVALID_DATETIME_FORMAT_ERROR \u003d","lastModifiedDate":"2023-02-10"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"            \"Try reformatting your date/time to the supported formats:\\n\"","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"yyyy-MM-dd HHmm or yyyy/MM/dd HHmm\\n\"","lastModifiedDate":"2023-02-10"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"Make sure that the date/time is valid!\";","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    protected static final List\u003cDateTimeFormatter\u003e SUPPORTED_DATE_TIME_INPUT \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    protected static final DateTimeFormatter OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEE, dd MMM yy hh:mma\");","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    protected String description;","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    protected String symbol;","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    protected TaskTypes.Type taskType;","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"    protected final Map\u003cString, String\u003e fieldToValueMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-09"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"    static {","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"        SUPPORTED_DATE_TIME_INPUT.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"        SUPPORTED_DATE_TIME_INPUT.add(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        SUPPORTED_DATE_TIME_INPUT.add(DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"     * Abstract constructor for Task. Description is compulsory.","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param description","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task(String description) throws InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"        if (isArgEmpty(description)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(DESC_MISSING_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        this.fieldToValueMap.put(\"description\", description);","lastModifiedDate":"2023-02-09"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"     * Checks if a String argument is null or blank.","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param arg","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean isArgEmpty(String arg) {","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"        return Objects.isNull(arg) || arg.equals(\"\");","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"     * Attempts to parse and return a String datetime into LocalDateTime,","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"     * by trying across supported formats.","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param input","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException if datetime fails to parse against available formats","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"    protected LocalDateTime parseDate(String input) throws InvalidDateTimeException {","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"        LocalDateTime date \u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"        for (DateTimeFormatter f : SUPPORTED_DATE_TIME_INPUT) {","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"            try {","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"                date \u003d LocalDateTime.parse(input, f);","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"                break;","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"            } catch (DateTimeParseException ignored) {","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"        if (Objects.isNull(date)) {","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidDateTimeException(INVALID_DATETIME_FORMAT_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"            return date;","lastModifiedDate":"2023-02-05"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"     * Returns the status icon for display. Marks a task as done with \"X\", blank otherwise.","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-17"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"    public String getDesc() {","lastModifiedDate":"2023-01-23"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.description;","lastModifiedDate":"2023-01-23"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"    public TaskTypes.Type getType() {","lastModifiedDate":"2023-02-09"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"        return TaskTypes.symbolToTask.getValue().get(this.symbol);","lastModifiedDate":"2023-02-09"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"    protected Map\u003cString, String\u003e getMapping() {","lastModifiedDate":"2023-02-09"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.fieldToValueMap;","lastModifiedDate":"2023-02-09"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":114,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":115,"author":{"gitId":"ajjajjajjajj"},"content":"    protected boolean containsField(String s) {","lastModifiedDate":"2023-02-09"},{"lineNumber":116,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.fieldToValueMap.containsKey(s);","lastModifiedDate":"2023-02-09"},{"lineNumber":117,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":118,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks task as done","lastModifiedDate":"2023-01-29"},{"lineNumber":120,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"ajjajjajjajj"},"content":"    protected void markAsDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"ajjajjajjajj"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-23"},{"lineNumber":123,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":124,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":125,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks task as undone","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"ajjajjajjajj"},"content":"    protected void unmarkDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"ajjajjajjajj"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":130,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":131,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":132,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app .","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"ajjajjajjajj"},"content":"    public abstract String asDataFormat();","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":138,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param fields variable number of fields (attributes) of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":142,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app.","lastModifiedDate":"2023-01-29"},{"lineNumber":143,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":144,"author":{"gitId":"ajjajjajjajj"},"content":"    protected String asDataFormat(String... fields) {","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"ajjajjajjajj"},"content":"        String base \u003d String.join(Storage.SEPARATOR, this.symbol, this.isDone() ? \"1\" : \"0\", this.description);","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"ajjajjajjajj"},"content":"        for (String s : fields) {","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"ajjajjajjajj"},"content":"            if (!s.isBlank()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"ajjajjajjajj"},"content":"                base \u003d String.join(Storage.SEPARATOR, base, s);","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":150,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":151,"author":{"gitId":"ajjajjajjajj"},"content":"        return base;","lastModifiedDate":"2023-01-24"},{"lineNumber":152,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":153,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":154,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return user-readable format with information regarding the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":156,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":157,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":158,"author":{"gitId":"ajjajjajjajj"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":159,"author":{"gitId":"ajjajjajjajj"},"content":"        return \"[\" + this.symbol + \"][\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-18"},{"lineNumber":160,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":161,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":162,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":163,"author":{"gitId":"ajjajjajjajj"},"content":"    public abstract int compareTo(Task other);","lastModifiedDate":"2023-02-13"},{"lineNumber":164,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"ajjajjajjajj":164}},{"path":"src/main/java/app/task/TaskFieldNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class TaskFieldNotFoundException extends Exception {","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"    TaskFieldNotFoundException(String msg) {","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"        super(msg);","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"ajjajjajjajj":7}},{"path":"src/main/java/app/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.List;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":" * Represents the List of Tasks, and the primary class that the","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":" * app interacts with. A TaskList allows for modification of the Tasks contained","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" * within, including deletion and insertion, getting a Task at a specified index,","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * and iterating through each contained Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":" * Modification of Tasks contained in the TaskList can only be done through the","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":" * TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"public class TaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String INVALID_TASKTYPE_ERROR \u003d \"Task not recognised.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String MISSING_TASK_FIELD_ERROR \u003d \"This task doesn\u0027t contain the fields you\u0027ve chosen\";","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String LIST_EMPTY_ON_DELETE_ERROR \u003d \"Hello hello there is no task to delete!!\";","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String TASK_NOT_IN_LIST_ERROR \u003d \"This task doesn\u0027t exist in your list.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"     * Initialises an empty TaskList","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"     * Getter for a task at a given listIndex, according to the index when","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"     * doing the List or Find Command","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param listIndex","lastModifiedDate":"2023-02-09"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-09"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws NumberFormatException","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task getTask(String listIndex)","lastModifiedDate":"2023-02-09"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"            throws NumberFormatException, IndexOutOfBoundsException {","lastModifiedDate":"2023-02-09"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        int i \u003d Integer.parseInt(listIndex) - 1;","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2023-02-09"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"     * Getter for task through list index (first item is at 0).","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param i","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-09"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2023-02-09"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task getTask(int i) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2023-02-09"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"    private int parseStringIndex(String listIndex) {","lastModifiedDate":"2023-02-09"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"        return Integer.parseInt(listIndex) - 1;","lastModifiedDate":"2023-02-09"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"     * Returns a view-only List of the Tasks in the TaskList.","lastModifiedDate":"2023-02-13"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-13"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"    public List\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"        return Collections.unmodifiableList(this.tasks);","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"    public int size() {","lastModifiedDate":"2023-01-23"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"ajjajjajjajj"},"content":"     * Makes a new Task. Requires a task type as specified by TaskTypes,","lastModifiedDate":"2023-02-09"},{"lineNumber":76,"author":{"gitId":"ajjajjajjajj"},"content":"     * and the correct mappings of the task.","lastModifiedDate":"2023-02-09"},{"lineNumber":77,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param type the type of task.","lastModifiedDate":"2023-02-09"},{"lineNumber":78,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args mapping of task fields to their values.","lastModifiedDate":"2023-02-09"},{"lineNumber":79,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return","lastModifiedDate":"2023-02-09"},{"lineNumber":80,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException","lastModifiedDate":"2023-02-09"},{"lineNumber":82,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"ajjajjajjajj"},"content":"    private Task makeNewTask(TaskTypes.Type type, Map\u003cString, String\u003e args)","lastModifiedDate":"2023-02-09"},{"lineNumber":84,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidInputException, InvalidDateTimeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":85,"author":{"gitId":"ajjajjajjajj"},"content":"        Task newTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":86,"author":{"gitId":"ajjajjajjajj"},"content":"        String desc \u003d args.get(\"description\");","lastModifiedDate":"2023-02-09"},{"lineNumber":87,"author":{"gitId":"ajjajjajjajj"},"content":"        switch (type) {","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"ajjajjajjajj"},"content":"        case TODO:","lastModifiedDate":"2023-01-23"},{"lineNumber":89,"author":{"gitId":"ajjajjajjajj"},"content":"            newTask \u003d new ToDo(desc);","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"ajjajjajjajj"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":91,"author":{"gitId":"ajjajjajjajj"},"content":"        case DEADLINE:","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"ajjajjajjajj"},"content":"            String by \u003d args.get(\"by\");","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"ajjajjajjajj"},"content":"            newTask \u003d new Deadline(desc, by);","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"ajjajjajjajj"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"ajjajjajjajj"},"content":"        case EVENT:","lastModifiedDate":"2023-01-23"},{"lineNumber":96,"author":{"gitId":"ajjajjajjajj"},"content":"            String from \u003d args.get(\"from\");","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"ajjajjajjajj"},"content":"            String to \u003d args.get(\"to\");","lastModifiedDate":"2023-01-23"},{"lineNumber":98,"author":{"gitId":"ajjajjajjajj"},"content":"            newTask \u003d new Event(desc, from, to);","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"ajjajjajjajj"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"ajjajjajjajj"},"content":"        default:","lastModifiedDate":"2023-01-23"},{"lineNumber":101,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(INVALID_TASKTYPE_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":102,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":103,"author":{"gitId":"ajjajjajjajj"},"content":"        return newTask;","lastModifiedDate":"2023-02-09"},{"lineNumber":104,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":105,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":106,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":107,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a task to the TaskList. Tasks are always added to the end of the TaskList.","lastModifiedDate":"2023-02-09"},{"lineNumber":108,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param type one of the available task types provided in TaskTypes.","lastModifiedDate":"2023-02-09"},{"lineNumber":109,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args map of argument names to their values.","lastModifiedDate":"2023-02-09"},{"lineNumber":110,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return the same Task object that was added into the TaskList","lastModifiedDate":"2023-02-09"},{"lineNumber":111,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException","lastModifiedDate":"2023-02-09"},{"lineNumber":112,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-02-09"},{"lineNumber":113,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":114,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task addTask(TaskTypes.Type type, Map\u003cString, String\u003e args)","lastModifiedDate":"2023-02-09"},{"lineNumber":115,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidInputException, InvalidDateTimeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":116,"author":{"gitId":"ajjajjajjajj"},"content":"        Task newTask \u003d makeNewTask(type, args);","lastModifiedDate":"2023-02-09"},{"lineNumber":117,"author":{"gitId":"ajjajjajjajj"},"content":"        this.tasks.add(this.tasks.size(), newTask); // always adds to the end","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"ajjajjajjajj"},"content":"        return newTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":119,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":120,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":121,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"ajjajjajjajj"},"content":"     * Adds a task following addTask. Additionally, marks a task done after adding.","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param type one of the available task types provided in TaskTypes.","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args map of argument names to their values.","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return the same Task object that was added into the TaskList","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidDateTimeException","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task addDoneTask(TaskTypes.Type type, Map\u003cString, String\u003e args)","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidDateTimeException, InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"ajjajjajjajj"},"content":"        Task newTask \u003d addTask(type, args); // add to end of list","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"ajjajjajjajj"},"content":"        newTask.markAsDone();","lastModifiedDate":"2023-02-09"},{"lineNumber":134,"author":{"gitId":"ajjajjajjajj"},"content":"        assert newTask.equals(this.tasks.get(this.tasks.size() - 1));","lastModifiedDate":"2023-02-09"},{"lineNumber":135,"author":{"gitId":"ajjajjajjajj"},"content":"        return newTask;","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":139,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":140,"author":{"gitId":"ajjajjajjajj"},"content":"     * Edits a Task in place, given a mapping of the new fields and their values.","lastModifiedDate":"2023-02-09"},{"lineNumber":141,"author":{"gitId":"ajjajjajjajj"},"content":"     * The index of the task doesn\u0027t change.","lastModifiedDate":"2023-02-09"},{"lineNumber":142,"author":{"gitId":"ajjajjajjajj"},"content":"     * The fields specified must exist in the Task.","lastModifiedDate":"2023-02-09"},{"lineNumber":143,"author":{"gitId":"ajjajjajjajj"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-02-09"},{"lineNumber":144,"author":{"gitId":"ajjajjajjajj"},"content":"     * Under the hood, a new Task instance is created, and the old one deleted.","lastModifiedDate":"2023-02-09"},{"lineNumber":145,"author":{"gitId":"ajjajjajjajj"},"content":"     * Any field that is not specified to be edited will take on the original value.","lastModifiedDate":"2023-02-09"},{"lineNumber":146,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param listIndex","lastModifiedDate":"2023-02-09"},{"lineNumber":147,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param args mapping of the name of the edited field(s) and the value","lastModifiedDate":"2023-02-09"},{"lineNumber":148,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return the new edited Task","lastModifiedDate":"2023-02-09"},{"lineNumber":149,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-02-09"},{"lineNumber":150,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":151,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task editTask(String listIndex, Map\u003cString, String\u003e args)","lastModifiedDate":"2023-02-09"},{"lineNumber":152,"author":{"gitId":"ajjajjajjajj"},"content":"            throws InvalidInputException, InvalidDateTimeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":153,"author":{"gitId":"ajjajjajjajj"},"content":"        Task toBeEdited \u003d getTask(listIndex);","lastModifiedDate":"2023-02-09"},{"lineNumber":154,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-09"},{"lineNumber":155,"author":{"gitId":"ajjajjajjajj"},"content":"            TaskTypes.Type type \u003d toBeEdited.getType();","lastModifiedDate":"2023-02-09"},{"lineNumber":156,"author":{"gitId":"ajjajjajjajj"},"content":"            Map\u003cString, String\u003e previousMappings \u003d toBeEdited.getMapping();","lastModifiedDate":"2023-02-09"},{"lineNumber":157,"author":{"gitId":"ajjajjajjajj"},"content":"            Map\u003cString, String\u003e editedMappings \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-02-09"},{"lineNumber":158,"author":{"gitId":"ajjajjajjajj"},"content":"            /*","lastModifiedDate":"2023-02-09"},{"lineNumber":159,"author":{"gitId":"ajjajjajjajj"},"content":"            Check if fields in args are fields in the Task","lastModifiedDate":"2023-02-09"},{"lineNumber":160,"author":{"gitId":"ajjajjajjajj"},"content":"            If yes, add them into the new mappings","lastModifiedDate":"2023-02-09"},{"lineNumber":161,"author":{"gitId":"ajjajjajjajj"},"content":"            */","lastModifiedDate":"2023-02-09"},{"lineNumber":162,"author":{"gitId":"ajjajjajjajj"},"content":"            for (String key : args.keySet()) {","lastModifiedDate":"2023-02-09"},{"lineNumber":163,"author":{"gitId":"ajjajjajjajj"},"content":"                if (!toBeEdited.containsField(key)) {","lastModifiedDate":"2023-02-09"},{"lineNumber":164,"author":{"gitId":"ajjajjajjajj"},"content":"                    throw new InvalidInputException(MISSING_TASK_FIELD_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":165,"author":{"gitId":"ajjajjajjajj"},"content":"                } else {","lastModifiedDate":"2023-02-09"},{"lineNumber":166,"author":{"gitId":"ajjajjajjajj"},"content":"                    editedMappings.put(key, args.get(key));","lastModifiedDate":"2023-02-09"},{"lineNumber":167,"author":{"gitId":"ajjajjajjajj"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":168,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":169,"author":{"gitId":"ajjajjajjajj"},"content":"            System.out.println(editedMappings);","lastModifiedDate":"2023-02-09"},{"lineNumber":170,"author":{"gitId":"ajjajjajjajj"},"content":"            /*","lastModifiedDate":"2023-02-09"},{"lineNumber":171,"author":{"gitId":"ajjajjajjajj"},"content":"            Add all previous mappings that have not been edited","lastModifiedDate":"2023-02-09"},{"lineNumber":172,"author":{"gitId":"ajjajjajjajj"},"content":"            to the new editedMappings map.","lastModifiedDate":"2023-02-09"},{"lineNumber":173,"author":{"gitId":"ajjajjajjajj"},"content":"             */","lastModifiedDate":"2023-02-09"},{"lineNumber":174,"author":{"gitId":"ajjajjajjajj"},"content":"            for (String key : previousMappings.keySet()) {","lastModifiedDate":"2023-02-09"},{"lineNumber":175,"author":{"gitId":"ajjajjajjajj"},"content":"                if (!editedMappings.containsKey(key)) {","lastModifiedDate":"2023-02-09"},{"lineNumber":176,"author":{"gitId":"ajjajjajjajj"},"content":"                    editedMappings.put(key, previousMappings.get(key));","lastModifiedDate":"2023-02-09"},{"lineNumber":177,"author":{"gitId":"ajjajjajjajj"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":178,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":179,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":180,"author":{"gitId":"ajjajjajjajj"},"content":"            Task afterEdited \u003d makeNewTask(type, editedMappings);","lastModifiedDate":"2023-02-09"},{"lineNumber":181,"author":{"gitId":"ajjajjajjajj"},"content":"            replaceTaskAt(listIndex, afterEdited);","lastModifiedDate":"2023-02-09"},{"lineNumber":182,"author":{"gitId":"ajjajjajjajj"},"content":"            return afterEdited;","lastModifiedDate":"2023-02-09"},{"lineNumber":183,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":184,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(\"This task doesn\u0027t exist in your list\");","lastModifiedDate":"2023-02-09"},{"lineNumber":185,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":186,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":187,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":188,"author":{"gitId":"ajjajjajjajj"},"content":"    private void replaceTaskAt(String index, Task t) {","lastModifiedDate":"2023-02-09"},{"lineNumber":189,"author":{"gitId":"ajjajjajjajj"},"content":"        int i \u003d parseStringIndex(index);","lastModifiedDate":"2023-02-09"},{"lineNumber":190,"author":{"gitId":"ajjajjajjajj"},"content":"        this.tasks.set(i, t);","lastModifiedDate":"2023-02-09"},{"lineNumber":191,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":192,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":193,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"ajjajjajjajj"},"content":"     * Pops (deletes and returns) a task from the TaskList, given the index of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":195,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the index is starts from zero - Commands accept user input which starts from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index of the Task - starts from zero.","lastModifiedDate":"2023-01-29"},{"lineNumber":197,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return the deleted Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":198,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws InvalidInputException","lastModifiedDate":"2023-01-29"},{"lineNumber":199,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":200,"author":{"gitId":"ajjajjajjajj"},"content":"    public Task deleteTask(int index) throws InvalidInputException {","lastModifiedDate":"2023-01-23"},{"lineNumber":201,"author":{"gitId":"ajjajjajjajj"},"content":"        if (this.tasks.isEmpty()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":202,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(LIST_EMPTY_ON_DELETE_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":203,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":204,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":205,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":206,"author":{"gitId":"ajjajjajjajj"},"content":"            Task deletedTask \u003d this.tasks.get(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":207,"author":{"gitId":"ajjajjajjajj"},"content":"            this.tasks.remove(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":208,"author":{"gitId":"ajjajjajjajj"},"content":"            return deletedTask;","lastModifiedDate":"2023-01-23"},{"lineNumber":209,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":210,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":211,"author":{"gitId":"ajjajjajjajj"},"content":"            throw new InvalidInputException(TASK_NOT_IN_LIST_ERROR);","lastModifiedDate":"2023-02-10"},{"lineNumber":212,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":213,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":214,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":215,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":216,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks a task as done at the given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":217,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the index is starts from zero - Commands accept user input which starts from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":218,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index of the Task - starts from zero.","lastModifiedDate":"2023-01-29"},{"lineNumber":219,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return returns true if task is already marked done, false if not.","lastModifiedDate":"2023-01-29"},{"lineNumber":220,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2023-01-29"},{"lineNumber":221,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":222,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean markAsDone(String index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-02-09"},{"lineNumber":223,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isAlreadyMarked \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":224,"author":{"gitId":"ajjajjajjajj"},"content":"        Task task \u003d this.getTask(index);","lastModifiedDate":"2023-02-09"},{"lineNumber":225,"author":{"gitId":"ajjajjajjajj"},"content":"        if (task.isDone()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":226,"author":{"gitId":"ajjajjajjajj"},"content":"            isAlreadyMarked \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":227,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":228,"author":{"gitId":"ajjajjajjajj"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":229,"author":{"gitId":"ajjajjajjajj"},"content":"        return isAlreadyMarked;","lastModifiedDate":"2023-01-28"},{"lineNumber":230,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":231,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":232,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":233,"author":{"gitId":"ajjajjajjajj"},"content":"     * Marks a task as UNdone at the given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":234,"author":{"gitId":"ajjajjajjajj"},"content":"     * Note that the index is starts from zero - Commands accept user input which starts from 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":235,"author":{"gitId":"ajjajjajjajj"},"content":"     * @param index of the Task - starts from zero.","lastModifiedDate":"2023-01-29"},{"lineNumber":236,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return returns true if task is already marked UNdone, false if not.","lastModifiedDate":"2023-01-29"},{"lineNumber":237,"author":{"gitId":"ajjajjajjajj"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2023-01-29"},{"lineNumber":238,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":239,"author":{"gitId":"ajjajjajjajj"},"content":"    public boolean unmarkDone(String index) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-02-09"},{"lineNumber":240,"author":{"gitId":"ajjajjajjajj"},"content":"        boolean isAlreadyMarked \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":241,"author":{"gitId":"ajjajjajjajj"},"content":"        Task task \u003d this.getTask(index);","lastModifiedDate":"2023-02-09"},{"lineNumber":242,"author":{"gitId":"ajjajjajjajj"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":243,"author":{"gitId":"ajjajjajjajj"},"content":"            isAlreadyMarked \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":244,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":245,"author":{"gitId":"ajjajjajjajj"},"content":"        task.unmarkDone();","lastModifiedDate":"2023-01-23"},{"lineNumber":246,"author":{"gitId":"ajjajjajjajj"},"content":"        return isAlreadyMarked;","lastModifiedDate":"2023-01-28"},{"lineNumber":247,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":248,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":249,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":250,"author":{"gitId":"ajjajjajjajj"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2023-01-28"},{"lineNumber":251,"author":{"gitId":"ajjajjajjajj"},"content":"        return this.tasks.iterator();","lastModifiedDate":"2023-01-28"},{"lineNumber":252,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":253,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":254,"author":{"gitId":"ajjajjajjajj"},"content":"    public List\u003cTask\u003e getSortedTasksByType(TaskTypes.Type type) {","lastModifiedDate":"2023-02-13"},{"lineNumber":255,"author":{"gitId":"ajjajjajjajj"},"content":"        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-13"},{"lineNumber":256,"author":{"gitId":"ajjajjajjajj"},"content":"        for (Task t : this.getAllTasks()) {","lastModifiedDate":"2023-02-13"},{"lineNumber":257,"author":{"gitId":"ajjajjajjajj"},"content":"            if (t.getType().equals(type)) {","lastModifiedDate":"2023-02-13"},{"lineNumber":258,"author":{"gitId":"ajjajjajjajj"},"content":"                result.add(t);","lastModifiedDate":"2023-02-13"},{"lineNumber":259,"author":{"gitId":"ajjajjajjajj"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":260,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":261,"author":{"gitId":"ajjajjajjajj"},"content":"        result.sort(null);","lastModifiedDate":"2023-02-13"},{"lineNumber":262,"author":{"gitId":"ajjajjajjajj"},"content":"        return Collections.unmodifiableList(result);","lastModifiedDate":"2023-02-13"},{"lineNumber":263,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":264,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"ajjajjajjajj":264}},{"path":"src/main/java/app/task/TaskTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"public enum TaskTypes {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"    inputToTask(new HashMap\u003cString, Type\u003e()),","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"    symbolToTask(new HashMap\u003cString, Type\u003e());","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    static {","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.inputToTask.getValue().put(\"todo\", TaskTypes.Type.TODO);","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.inputToTask.getValue().put(\"deadline\", TaskTypes.Type.DEADLINE);","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.inputToTask.getValue().put(\"event\", TaskTypes.Type.EVENT);","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.symbolToTask.getValue().put(\"T\", TaskTypes.Type.TODO);","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.symbolToTask.getValue().put(\"D\", TaskTypes.Type.DEADLINE);","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        TaskTypes.symbolToTask.getValue().put(\"E\", TaskTypes.Type.EVENT);","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private Map\u003cString, Type\u003e value;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    TaskTypes(Map\u003cString, Type\u003e value) {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    public Map\u003cString, Type\u003e getValue() {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        return value;","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    public enum Type { TODO, DEADLINE, EVENT }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"ajjajjajjajj":30}},{"path":"src/main/java/app/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"    ToDo(String description) throws InvalidInputException {","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"        this.symbol \u003d \"T\";","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"        this.taskType \u003d TaskTypes.Type.TODO;","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"     * Formats the task as data to be stored in text file.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"     * @return data format recognisable by the app","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"    public String asDataFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"        return super.asDataFormat(\"\");","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    public int compareTo(Task other) {","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        int result \u003d this.getType().compareTo(other.getType());","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"        if (result \u003d\u003d 0) {","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"            return this.description.compareTo(other.getDesc());","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"            return result;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"ajjajjajjajj":29}},{"path":"src/main/java/launcher/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.text.TextAlignment;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.text.TextFlow;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    private Text dialog;","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    private ImagePattern displayPicture;","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"    private Circle circle;","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    private TextFlow tf;","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"        displayPicture \u003d new ImagePattern(img);","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"        circle.setFill(displayPicture);","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"    private void flip() {","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"        dialog.setTextAlignment(TextAlignment.LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"        tf.setTextAlignment(TextAlignment.LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"        setStyle(\"-fx-background-color:#474D63\");","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"ajjajjajjajj"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"ajjajjajjajj"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"ajjajjajjajj"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"ajjajjajjajj"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"ajjajjajjajj"},"content":"        db.flip();","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"ajjajjajjajj"},"content":"        return db;","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":73}},{"path":"src/main/java/launcher/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class Launcher {","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"ajjajjajjajj":12}},{"path":"src/main/java/launcher/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"        System.out.println(\"Starting Application...\");","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"            stage.show();","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"ajjajjajjajj":35}},{"path":"src/main/java/launcher/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package launcher;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import app.chatbot.Duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/chicken.png\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duck.png\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"ajjajjajjajj"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"ajjajjajjajj"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"ajjajjajjajj"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"ajjajjajjajj"},"content":"        String messageUponStartUp \u003d duke.loadStorageData()","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"ajjajjajjajj"},"content":"                + \"\\n\"","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"ajjajjajjajj"},"content":"                + duke.showSummary();","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"ajjajjajjajj"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"ajjajjajjajj"},"content":"                DialogBox.getDukeDialog(messageUponStartUp, dukeImage)","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"ajjajjajjajj"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"ajjajjajjajj"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"ajjajjajjajj"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"ajjajjajjajj"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"ajjajjajjajj"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"ajjajjajjajj"},"content":"    @FXML","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"ajjajjajjajj"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"ajjajjajjajj"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"ajjajjajjajj"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"ajjajjajjajj"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"ajjajjajjajj"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"ajjajjajjajj"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"ajjajjajjajj"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"ajjajjajjajj"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":63}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: transparent;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003cTextFlow fx:id\u003d\"tf\" prefHeight\u003d\"48.0\" prefWidth\u003d\"329.0\" textAlignment\u003d\"RIGHT\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003cText fx:id\u003d\"dialog\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"RIGHT\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003c/TextFlow\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#545b75\" radius\u003d\"24.0\" stroke\u003d\"#bfc1cb\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #1F294A;\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"launcher.MainWindow\"\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003cHBox alignment\u003d\"CENTER\" layoutY\u003d\"571.0\" prefHeight\u003d\"29.0\" prefWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"              \u003cTextField fx:id\u003d\"userInput\" alignment\u003d\"BOTTOM_LEFT\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type something...\" style\u003d\"-fx-background-color: #1F294A; -fx-text-fill: #ffffff;\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"               \u003cfont\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"                  \u003cFont size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"               \u003c/font\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003c/TextField\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"              \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"BOTTOM_RIGHT\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #1F294A;\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textFill\u003d\"#c6c6c6\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"               \u003cfont\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"                  \u003cFont size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"               \u003c/font\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003c/Button\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"570.0\" prefWidth\u003d\"399.0\" style\u003d\"-fx-background-color: #1F294A; -fx-border-color: #E3E4E8;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"30.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"398.0\" style\u003d\"-fx-background-color: #3B4461#3B4461;\" /\u003e","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"ajjajjajjajj"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"ajjajjajjajj"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"ajjajjajjajj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"ajjajjajjajj"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"ajjajjajjajj":33}},{"path":"src/test/java/app/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"    public void asDataFormat() {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"            Deadline d \u003d new Deadline(\"complete this task\", \"2023/01/26 1700\");","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"            d.markAsDone();","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"            assertEquals(\"D | 1 | complete this task | by:2023-01-26T17:00\",","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"                    d.asDataFormat());","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"            fail();","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"ajjajjajjajj":22}},{"path":"src/test/java/app/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"package app.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"ajjajjajjajj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"ajjajjajjajj"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"ajjajjajjajj"},"content":"    private static final String ERROR_MSG_CHECK \u003d \"Plz provide BOTH the \u0027from\u0027 and \u0027to\u0027 in \"","lastModifiedDate":"2023-02-10"},{"lineNumber":13,"author":{"gitId":"ajjajjajjajj"},"content":"            + \"yyyy-MM-dd HHmm or yyyy/MM/dd HHmm format.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":14,"author":{"gitId":"ajjajjajjajj"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"ajjajjajjajj"},"content":"    public void addTask_InvalidInputExceptionThrown() {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"ajjajjajjajj"},"content":"        InvalidInputException thrown \u003d assertThrows(InvalidInputException.class, () -\u003e {","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"ajjajjajjajj"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"ajjajjajjajj"},"content":"            Map\u003cString, String\u003e args \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"ajjajjajjajj"},"content":"            args.put(\"Command\",\"deadline\");","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"ajjajjajjajj"},"content":"            args.put(\"description\", \"it can be anything\");","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"ajjajjajjajj"},"content":"            args.put(\"from\", \"2023/01/27\");","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"ajjajjajjajj"},"content":"            // missing \"to\" -\u003e \u003csome valid date\u003e","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"ajjajjajjajj"},"content":"            tl.addDoneTask(TaskTypes.Type.EVENT, args);","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"ajjajjajjajj"},"content":"        });","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"ajjajjajjajj"},"content":"        assertEquals(ERROR_MSG_CHECK, thrown.getMessage());","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"ajjajjajjajj"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"ajjajjajjajj"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"ajjajjajjajj"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"ajjajjajjajj":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ajjajjajjajj"},"content":"list","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"ajjajjajjajj"},"content":"todo","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"ajjajjajjajj"},"content":"todo go and do some stuff","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"ajjajjajjajj"},"content":"list","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"ajjajjajjajj"},"content":"deadline wake up","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"ajjajjajjajj"},"content":"deadline wake up /by 1200hrs","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"ajjajjajjajj"},"content":"list","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"ajjajjajjajj"},"content":"event have lunch /from 1200hrs /to 1800hrs","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"ajjajjajjajj":8}}]
