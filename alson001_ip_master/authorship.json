[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"alson001":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"alson001":1,"-":40}},{"path":"savedFile.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"[T] | 0 | ride bicycle","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"[D] | 0 | complete duke | 2000-11-20","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"[E] | 0 |  | 2023-01-29 | 2023-01-29","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"[E] | 0 | do what | 2000-11-20 | 2023-01-29","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"alson001":4}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.exceptions.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import duke.utils.Parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"import java.io.File;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":" * Duke is the class that represents the chat bot.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    private TaskList commandList;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"    private static final File savedFile \u003d new File(\"savedFile.txt\");","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"        duke.run();","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"     * Before setup for Duke","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"    public Duke() {","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"        commandList \u003d new TaskList();","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"     * Runs Duke.","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"    public void run() {","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"        //Creating/Loading from storage","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"        boolean isCreated \u003d savedFile.exists();","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"        if (isCreated) {","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"            this.storage.loadFromFile(new File(\"savedFile.txt\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"            this.commandList.setTaskList(this.storage.getStorage());","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"                savedFile.createNewFile();","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"                throw new RuntimeException(\"Unable to create file\" + e);","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"        ui.greetingMessage();","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"alson001"},"content":"            String userCommands \u003d scanner.nextLine();","lastModifiedDate":"2023-01-16"},{"lineNumber":60,"author":{"gitId":"alson001"},"content":"            Command command;","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"alson001"},"content":"            try {","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"alson001"},"content":"                command \u003d parser.parse(userCommands, commandList, storage, ui, savedFile);","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"alson001"},"content":"                command.action();","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"alson001"},"content":"            } catch (InvalidCmdValueException | InvalidTaskTypeException |","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"alson001"},"content":"                     EmptyCommandException | InvalidTimeException | InvalidDateException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"alson001"},"content":"                System.out.println(Ui.HORIZONTAL_LINE + \"\\n\" + e.getMessage() + \"\\n\" + Ui.HORIZONTAL_LINE);","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"alson001"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"alson001":70,"-":2}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":" * AddCommand represents a command to add a task to the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    private Task task;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    private File file;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"     * Creates a AddCommand to add a ToDo, Event or Deadline to the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * @param ui The ui used.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     * @param taskList The TaskList to add the task to.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * @param storage The storage to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * @param file The specified file to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"    public AddCommand(Ui ui, TaskList taskList, Task task,","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"                      Storage storage, File file) {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"     * Adds the task to the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"    public void action() {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"        ui.addResponse(task, taskList);","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"        storage.editStorage(taskList.getTaskList());","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"        storage.saveToFile(file);","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":47}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":" * ByeCommand represents a command to say bye.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"     * Creates a ByeCommand to say bye.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"     * @param ui The ui used.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    public ByeCommand(Ui ui) {","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * Says bye and exit.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"    public void action() {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"        ui.byeMessage();","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"        System.exit(0);","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":29}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":" * Command represents a command to be executed.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"     * Performs an action in response to the command.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"    public abstract void action();","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":12}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidCmdValueException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":" * DeleteCommand represents a command to delete a task from the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    private int index;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    private File file;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * Creates a DeleteCommand to delete a ToDo, Event or Deadline from the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     * @param ui The ui used","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * @param taskList The TaskList to delete the task from.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * @param index The specified task to be deleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * @param storage The storage to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     * @param file The specified file to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"     * @throws InvalidCmdValueException If a delete command specify a wrong index.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"    public DeleteCommand(Ui ui, TaskList taskList, int index,","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"                         Storage storage, File file)","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"            throws InvalidCmdValueException {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"        if (index + 1 \u003e taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"            throw new InvalidCmdValueException();","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"     * Delete the task from the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"    public void action() {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"        Task task \u003d taskList.removeTask(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"        ui.deleteResponse(task, taskList);","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"        storage.editStorage(taskList.getTaskList());","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"        storage.saveToFile(file);","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":53}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import java.util.List;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"    private String string;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    public FindCommand(Ui ui, TaskList taskList, String string) {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"        this.string \u003d string;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"    public void action() {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"        List\u003cTask\u003e matchedTasks \u003d taskList.findTask(string);","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"        ui.findResponse(matchedTasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"alson001":27}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":" * ListCommand represents a command to list all tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"     * Creates a ListCommand to list all task of the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"     * @param ui The ui used.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"     * @param taskList The TaskList to list the tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    public ListCommand(Ui ui, TaskList taskList) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * List all task of the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"    public void action() {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"        ui.listResponse(taskList);","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":30}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidCmdValueException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":" * MarkCommand represents a command to mark a task on the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    private int index;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"    private File file;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     * Creates a MarkCommand to mark a ToDo, Event or Deadline on the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * @param ui The ui used.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * @param taskList The TaskList to mark the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * @param index The specified task to be marked.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     * @param storage The storage to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"     * @param file The specified file to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"    public MarkCommand(Ui ui, TaskList taskList, int index,","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"                       Storage storage, File file)","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"            throws InvalidCmdValueException {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"        if (index + 1 \u003e taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"            throw new InvalidCmdValueException();","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"     * Marks the task on the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"    public void action() {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"        Task task \u003d taskList.markTask(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"        ui.markResponse(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"        storage.editStorage(taskList.getTaskList());","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"        storage.saveToFile(file);","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":53}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.commands;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidCmdValueException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":" * UnmarkCommand represents a command to unmark a task on the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    private int index;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    private File file;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * Creates a UnmarkCommand to unmark a ToDo, Event or Deadline on the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     * @param ui The ui used.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * @param taskList The TaskList to unmark the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * @param index The specified task to be unmarked.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * @param storage The storage to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     * @param file The specified file to store the changes.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    public UnmarkCommand(Ui ui, TaskList taskList, int index,","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"                         Storage storage, File file)","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"            throws InvalidCmdValueException {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"        if (index + 1 \u003e taskList.getSize() || index \u003c 0) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"            throw new InvalidCmdValueException();","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"     * Unmark the task on the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"    public void action() {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"        Task task \u003d taskList.unmarkTask(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"        ui.unmarkResponse(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"        storage.editStorage(taskList.getTaskList());","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"        storage.saveToFile(file);","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":52}},{"path":"src/main/java/duke/exceptions/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"public class EmptyCommandException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"    public EmptyCommandException(String taskType) {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"            super(\"OOPS!!! The description of a \" + taskType + \" cannot be empty.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"alson001":9}},{"path":"src/main/java/duke/exceptions/InvalidCmdValueException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"public class InvalidCmdValueException extends Exception {","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"    public InvalidCmdValueException() {","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"        super(\"Please input a correct value\");","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":8}},{"path":"src/main/java/duke/exceptions/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"public class InvalidDateException extends Exception {","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"    public InvalidDateException() {","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"        super(\"OOPS!!! Please key the date in the format: yyyy-mm-dd\");","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":7}},{"path":"src/main/java/duke/exceptions/InvalidTaskTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"public class InvalidTaskTypeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"    public InvalidTaskTypeException() {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that task type means :-(\"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"         + \"\\n\" + \"task types are : todo, deadline, event\");","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"alson001":9}},{"path":"src/main/java/duke/exceptions/InvalidTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"public class InvalidTimeException extends Exception {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"    public InvalidTimeException() {","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"        super (\"OOPS!!! Please specify a time.\");","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"alson001":7}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidDateException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":" * Deadline is a task that is due by a specific date/time.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"    private static final DateTimeFormatter formatter \u003d","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"     * @param command Description of the Deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"     * @param deadline The date/time when the Deadline is due.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * @throws InvalidDateException If the date is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"    public Deadline(String command, String deadline)","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"            throws InvalidDateException {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"        super(command);","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"            this.deadline \u003d LocalDate.parse(deadline);","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"     * Returns the String representation of the Deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"     * @return String representation of the Deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(formatter) + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"     * Returns the String representation to be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"     * @return The string storage representation of the Deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"    public String taskToData() {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"        int done \u003d isDone() ? 1 : 0;","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"        String task \u003d getTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"        return String.format(\"[D] | %d | %s | %s\",","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"                done,","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"                task,","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"                this.deadline);","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"alson001":58}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidDateException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":" * Event is a task that happens from a start date/time to an end period.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"    private final LocalDate start;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"    private final LocalDate end;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    private static final DateTimeFormatter formatter \u003d","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"     * Constructor for Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     * @param command Description of the Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * @param start The date/time when the Event is supposed to start.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * @param end The date/time when the Event is supposed to end","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * @throws InvalidDateException If the date is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    public Event(String command, String start, String end)","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"            throws InvalidDateException {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"        super(command);","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"            this.start \u003d LocalDate.parse(start);","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"            this.end \u003d LocalDate.parse(end);","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"     * Returns the String representation of the Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"     * @return String representation of the Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start.format(formatter) +","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"                \" to: \" + end.format(formatter) + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"     * Returns the String representation of Event to be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"     * @return The string storage representation of the Event.","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"    public String taskToData() {","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"alson001"},"content":"        int done \u003d isDone() ? 1 : 0;","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"alson001"},"content":"        String task \u003d getTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"alson001"},"content":"        return String.format(\"[E] | %d | %s | %s | %s\",","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"alson001"},"content":"                done,","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"alson001"},"content":"                task,","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"alson001"},"content":"                this.start,","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"alson001"},"content":"                this.end);","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"alson001":68}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidDateException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidTaskTypeException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":" * Task is an abstract class of ToDo, Event and deadline","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":" * with a description and a completion status.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"    private final String task;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"    private boolean done;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"     * Constructor for Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"     * @param command Description of the Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    public Task(String command) {","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"        this.task \u003d command;","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * Creates a Task object from a storage String.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * @param data The Storage String representing the Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     * @return The Task represented by the Storage String.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    public static Task dataToTask(String data)","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"            throws InvalidTaskTypeException, InvalidDateException {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"        Task task;","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"        //| is a metacharacter in regex. You\u0027d need to escape it:","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"        String[] dataArray \u003d data.split(\"\\\\|\");","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        //remove spaces in between","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"        for (int i \u003d 0; i \u003c dataArray.length; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"            dataArray[i] \u003d dataArray[i].trim();","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"        switch(dataArray[0]) {","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"            case \"[T]\":","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"                task \u003d new ToDo(dataArray[2]);","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"                break;","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"            case \"[D]\":","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"                task \u003d new Deadline(dataArray[2], dataArray[3]);","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"                break;","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"            case \"[E]\":","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"                task \u003d new Event(dataArray[2], dataArray[3], dataArray[4]);","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"                break;","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"            default:","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"                throw new InvalidTaskTypeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"        if(dataArray[1].equals(\"1\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"            task.mark();","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"        return task;","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"alson001"},"content":"     * Mark the Task as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"alson001"},"content":"    public void mark() {","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"alson001"},"content":"        this.done \u003d true;","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"alson001"},"content":"     * Unmark the Task as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"alson001"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"alson001"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":74,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"alson001"},"content":"     * Returns the boolean representation of the task completion.","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"alson001"},"content":"     * @return  True if task is done else return false.","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"alson001"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"alson001"},"content":"        return this.done;","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"alson001"},"content":"     * Returns the String representation of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"alson001"},"content":"     * @return string task.","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"alson001"},"content":"    public String getTask() {","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"alson001"},"content":"        return this.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"alson001"},"content":"     * Returns the String representation of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"alson001"},"content":"     * @return string representation of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"alson001"},"content":"    public String toString(){","lastModifiedDate":"2023-01-17"},{"lineNumber":98,"author":{"gitId":"alson001"},"content":"        String checkbox \u003d \"[\" + (done ? \"X\" : \" \") + \"]\";","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"alson001"},"content":"        return checkbox + \" \" + this.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":101,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"alson001"},"content":"    public abstract String taskToData();","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"alson001":103}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import java.util.List;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":" * TaskList represents the list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"public class TaskList {","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"     * Returns a list of tasks saved.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"     * @return List of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    public List\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"        return taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * Edit a list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     * @param taskList New list of the tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * @return Edited list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"    public void setTaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"     * Return a task from a list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"     * @param index Index of task to retrieve.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"     * @return A specified task.","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"        return taskList.get(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"     * Return size of list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"     * @return number of tasks in list.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"        return taskList.size();","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"     * Add task to list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"     * @param newTask Add new task.","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"    public void addTask(Task newTask) {","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"        taskList.add(newTask);","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"     * Removes the Task at the given index from the TaskList.","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"     * @param index The given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"alson001"},"content":"     * @return The task removed.","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"alson001"},"content":"    public Task removeTask(int index) {","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"alson001"},"content":"        return taskList.remove(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"alson001"},"content":"     * Marks the Task at the given index as uncompleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"alson001"},"content":"     * @param index The given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"alson001"},"content":"     * @return The Task unmarked.","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"alson001"},"content":"    public Task markTask(int index) {","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"alson001"},"content":"        Task task \u003d taskList.get(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"alson001"},"content":"        task.mark();","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"alson001"},"content":"        return task;","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"alson001"},"content":"     * Marks the Task at the given index as uncompleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"alson001"},"content":"     * @param index The given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"alson001"},"content":"     * @return The Task unmarked.","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"alson001"},"content":"    public Task unmarkTask(int index) {","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"alson001"},"content":"        Task task \u003d taskList.get(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"alson001"},"content":"        task.unmark();","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"alson001"},"content":"        return task;","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"alson001"},"content":"    public List\u003cTask\u003e findTask(String s) {","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"alson001"},"content":"        return taskList.stream()","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"alson001"},"content":"                .filter(task -\u003e task.getTask().contains(s))","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"alson001"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":96}},{"path":"src/main/java/duke/tasks/TaskTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":" * TaskTypes represents the different types of Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"public enum TaskTypes {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"    TODO,","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"    DEADLINE,","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"    EVENT","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":10}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidDateException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":" * ToDo is a task without a specified date/time.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"     * Constructor for ToDo.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"     * @param command Description of the ToDo.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"    public ToDo(String command) {","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"        super(command);","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"     * Returns the String representation of the ToDo.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * @return String representation of the ToDo.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"     * Returns the String representation of ToDo to be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"     * @return The string storage representation of the ToDo.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"    public String taskToData() {","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"        int done \u003d isDone() ? 1 : 0;","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"        String task \u003d getTask();","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"        return String.format(\"[T] | %d | %s\",","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"                done,","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"                task);","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"alson001":42}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import java.util.List;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":" * Ui handles user interaction.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"public class Ui {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"    public static final String HORIZONTAL_LINE \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"            \"____________________________________________________________\";","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"    public static final String GREETING_MESSAGE \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"            HORIZONTAL_LINE + \"\\n\" + \"Hello! I\u0027m Duke\"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"                    + \"\\n\" + \"What can I do for you?\" + \"\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"                    + HORIZONTAL_LINE;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"    public static final String BYE_MESSAGE \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"            HORIZONTAL_LINE + \"\\n\" + \"Bye. Hope to see you again soon!\"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"                    + \"\\n\" + HORIZONTAL_LINE;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * Prints a greeting message to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"    public void greetingMessage() {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"        System.out.println(GREETING_MESSAGE);","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"     * Prints a bye message to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"    public void byeMessage() {","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        System.out.println(BYE_MESSAGE);","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"     * Prints a response to List command to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"    public void listResponse(TaskList list) {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"        System.out.println(HORIZONTAL_LINE + \"\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"                + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"        for (int i \u003d 1; i \u003c\u003d list.getSize(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"            System.out.println(i + \".\" + list.getTask(i - 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"     * Prints a response to Delete command to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"    public void deleteResponse(Task task, TaskList taskList) {","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"        System.out.println(HORIZONTAL_LINE + \"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"                \"Noted. I\u0027ve removed this task:\" + \"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"                task + \"\\n\" + \"Now you have \" + taskList.getSize()","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"                + \" tasks in the list.\" + \"\\n\" + HORIZONTAL_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"alson001"},"content":"     * Prints a response to Mark command to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"alson001"},"content":"    public void markResponse(Task task) {","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"alson001"},"content":"        System.out.println(HORIZONTAL_LINE + \"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"alson001"},"content":"                \"Nice! I\u0027ve marked this task as done:\"","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"alson001"},"content":"                + \"\\n\" + task + \"\\n\" + HORIZONTAL_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"alson001"},"content":"     * Prints a response to Unmark command to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"alson001"},"content":"    public void unmarkResponse(Task task) {","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"alson001"},"content":"        System.out.println(HORIZONTAL_LINE + \"\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"alson001"},"content":"                \"OK, I\u0027ve marked this task as not done yet:\"","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"alson001"},"content":"                + \"\\n\" + task + \"\\n\" + HORIZONTAL_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"alson001"},"content":"     * Prints a response to Todo, Event or Deadline command to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"alson001"},"content":"    public void addResponse(Task task, TaskList taskList) {","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"alson001"},"content":"        System.out.println(HORIZONTAL_LINE + \"\\n\" + \"Got it. I\u0027ve added this task:\"","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"alson001"},"content":"                + \"\\n\" + task + \"\\n\" + \"Now you have \" + taskList.getSize()","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"alson001"},"content":"                + \" tasks in the list.\" + \"\\n\" + HORIZONTAL_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"alson001"},"content":"    public void findResponse(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"alson001"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"alson001"},"content":"        sb.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"alson001"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"alson001"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"alson001"},"content":"            sb.append(String.format(\"%d.%s\\n\", i, task.toString()));","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"alson001"},"content":"            ++i;","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"alson001"},"content":"        System.out.print(HORIZONTAL_LINE+ \"\\n\" + sb + HORIZONTAL_LINE + \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":98}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.utils;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.commands.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.exceptions.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":" * Parser to convert user inputs to executable commands.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"public class Parser {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"     * Parses a command from a string.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"     * @param userCommands The string command to parse.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"     * @param commandList The task list that has list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"     * @param storage The storage that store tasks from previous and new sessions.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"     * @param ui The ui used for the bot.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"     * @param file The file that data is read and written from.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"     * @return The command corresponding to the user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"     * @throws InvalidCmdValueException If a delete, mark or unmark command specify a wrong index.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"     * @throws InvalidTaskTypeException If no such task type exists.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"     * @throws EmptyCommandException If the existing command is empty","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * @throws InvalidTimeException If the format of event or deadline is unrecognised.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     * @throws InvalidDateException If the date entered for event or deadline is unrecognised.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"    public Command parse(String userCommands, TaskList commandList,","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"                         Storage storage, Ui ui, File file)","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"            throws InvalidCmdValueException, InvalidTaskTypeException,","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"            EmptyCommandException, InvalidTimeException, InvalidDateException {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"        String[] strArray \u003d userCommands.split(\" \", 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"        String action \u003d strArray[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"        if (action.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"            return new ByeCommand(ui);","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"        } else if (action.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"            return new ListCommand(ui, commandList);","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"        } else if (action.equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"            return new MarkCommand(ui, commandList,","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"                    Integer.parseInt(strArray[1]) - 1, storage, file);","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"        } else if (action.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"            return new UnmarkCommand(ui, commandList,","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"                    Integer.parseInt(strArray[1]) - 1, storage, file);","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"        } else if (action.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"            return new DeleteCommand(ui, commandList,","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"                    Integer.parseInt(strArray[1]) - 1, storage, file);","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"        } else if (action.equalsIgnoreCase(\"find\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"            return new FindCommand(ui, commandList, strArray[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"            TaskTypes type \u003d getTaskType(action);","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"            Task task \u003d getTask(type, strArray);","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"            return new AddCommand(ui, commandList, task, storage, file);","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"alson001"},"content":"     * Retrieve a task type for a given action.","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"alson001"},"content":"     * @param action The string command to parse.","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"alson001"},"content":"     * @return The task type corresponding to the action.","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"alson001"},"content":"     * @throws InvalidTaskTypeException If no such task type exists.","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"alson001"},"content":"    public TaskTypes getTaskType(String action)","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"alson001"},"content":"            throws InvalidTaskTypeException {","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"alson001"},"content":"        if (action.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"alson001"},"content":"            return TaskTypes.TODO;","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"alson001"},"content":"        } else if (action.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"alson001"},"content":"            return TaskTypes.DEADLINE;","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"alson001"},"content":"        } else if (action.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"alson001"},"content":"            return TaskTypes.EVENT;","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"alson001"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"alson001"},"content":"            throw new InvalidTaskTypeException();","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"alson001"},"content":"     * Return a task for given its type and string array input.","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"alson001"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"alson001"},"content":"     * @param type The task type to convert.","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"alson001"},"content":"     * @param strArray The string array of the command","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"alson001"},"content":"     * @return The task corresponding to its type and string array.","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"alson001"},"content":"     * @throws InvalidTaskTypeException If no such task type exists.","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"alson001"},"content":"     * @throws EmptyCommandException If the existing command is empty","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"alson001"},"content":"     * @throws InvalidTimeException If the format of event or deadline is unrecognised.","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"alson001"},"content":"     * @throws InvalidDateException If the date entered for event or deadline is unrecognised.","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"alson001"},"content":"    public Task getTask(TaskTypes type, String[] strArray)","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"alson001"},"content":"            throws InvalidTaskTypeException, EmptyCommandException,","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"alson001"},"content":"            InvalidTimeException, InvalidDateException {","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"alson001"},"content":"        String command;","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"alson001"},"content":"        if (strArray.length \u003c 2 || strArray[1].trim().equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"alson001"},"content":"            throw new EmptyCommandException(strArray[0]);","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"alson001"},"content":"        if (type.equals(TaskTypes.TODO)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"alson001"},"content":"            command \u003d strArray[1].trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"alson001"},"content":"            return new ToDo(command);","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"alson001"},"content":"        } else if (type.equals(TaskTypes.DEADLINE)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"alson001"},"content":"            String[] temp \u003d strArray[1].split(\"/by\", 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"alson001"},"content":"            if (temp.length \u003c 2 || temp[1].trim().equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"alson001"},"content":"                throw new InvalidTimeException();","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"alson001"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"alson001"},"content":"            command \u003d temp[0].trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"alson001"},"content":"            String deadline \u003d temp[1].trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"alson001"},"content":"            return new Deadline(command, deadline);","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"alson001"},"content":"        } else if (type.equals(TaskTypes.EVENT)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"alson001"},"content":"            String[] temp \u003d strArray[1].split(\"/from\", 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"alson001"},"content":"            if (temp.length \u003c 2 || temp[1].trim().equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"alson001"},"content":"                throw new InvalidTimeException();","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"alson001"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"alson001"},"content":"            String[] temp2 \u003d temp[1].split(\"/to\", 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"alson001"},"content":"            if (temp2.length \u003c 2 || temp2[1].trim().equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"alson001"},"content":"                throw new InvalidTimeException();","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"alson001"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"alson001"},"content":"            command \u003d temp[0].trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"alson001"},"content":"            String start \u003d temp2[0].trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"alson001"},"content":"            String end \u003d temp2[1].trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"alson001"},"content":"            return new Event(command, start, end);","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"alson001"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"alson001"},"content":"            throw new InvalidTaskTypeException();","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"alson001":127}},{"path":"src/main/java/duke/utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke.utils;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidDateException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidTaskTypeException;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"import java.io.*;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"import java.util.List;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":" * Storage handles loading data from and saving data to files.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"public class Storage {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"     * Creates a new Storage object.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    public Storage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"     * Edit existing storage given a task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"     * @param taskList The edited task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"    public void editStorage(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"     * Return task list from existing storage.","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"     * @return The task list stored in storage","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"    public List\u003cTask\u003e getStorage() {","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"        return this.taskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"alson001"},"content":"     * Load storage with the specified file.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"alson001"},"content":"     * @param file The file that stores required data.","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"alson001"},"content":"    public void loadFromFile(File file) {","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"alson001"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"alson001"},"content":"            BufferedReader bufReader \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"alson001"},"content":"            taskList.clear();","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"alson001"},"content":"            String line \u003d bufReader.readLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"alson001"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"alson001"},"content":"                try {","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"alson001"},"content":"                    taskList.add(Task.dataToTask(line));","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"alson001"},"content":"                } catch (InvalidTaskTypeException | InvalidDateException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"alson001"},"content":"                    System.out.println(Ui.HORIZONTAL_LINE + \"\\n\" + e.getMessage() +","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"alson001"},"content":"                            \"\\n\" + Ui.HORIZONTAL_LINE);","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"alson001"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"alson001"},"content":"                line \u003d bufReader.readLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"alson001"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"alson001"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"alson001"},"content":"            throw new RuntimeException(\"File not found when trying to read data file.\");","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"alson001"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"alson001"},"content":"            throw new RuntimeException(\"Error while loading from file: \" + e);","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"alson001"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"alson001"},"content":"     * Writes the tasks into the Storage file.","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"alson001"},"content":"     * @param file The file to write tasks in.","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"alson001"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"alson001"},"content":"    public void saveToFile(File file) {","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"alson001"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"alson001"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"alson001"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"alson001"},"content":"                writer.write(task.taskToData());","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"alson001"},"content":"                writer.write(\u0027\\n\u0027);","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"alson001"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"alson001"},"content":"            writer.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"alson001"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"alson001"},"content":"            System.out.println(\"Error while saving file: \" + e);","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"alson001":89}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"import duke.exceptions.InvalidDateException;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"public class EventTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"    public void toString_newEvent() throws InvalidDateException {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"        Event event \u003d new Event(\"Test\", \"2023-01-28\", \"2023-01-29\");","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"        assertEquals(\"[E][ ] Test (from: Jan 28 2023 to: Jan 29 2023)\",","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"                event.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"    public void toString_invalidDateExceptionThrown() {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"            Event event \u003d new Event(\"Test\", \"28-01-2023\", \"29-01-2023\");","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"            assertEquals(\"[E][ ] Test (at: Sep 21 2022)\", event.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"            fail();","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"        } catch (InvalidDateException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"            assertEquals(\"OOPS!!! Please key the date in the format: yyyy-mm-dd\", e.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"    public void toStorageString() throws InvalidDateException {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"        Event event \u003d new Event(\"Test\", \"2023-01-28\", \"2023-01-29\");","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"        assertEquals(\"[E] | 0 | Test | 2023-01-28 | 2023-01-29\",","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"                event.taskToData());","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"alson001":33}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"import duke.exceptions.*;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"import duke.utils.Parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"alson001"},"content":"    private static Parser parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"alson001"},"content":"    private static Storage storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"alson001"},"content":"    private static Ui ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"alson001"},"content":"    private static TaskList taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"    private final File savedFile \u003d new File(\"savedFile.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"alson001"},"content":"    @BeforeAll","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"alson001"},"content":"    public static void setup() {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"alson001"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"alson001"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"alson001"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"alson001"},"content":"        storage.loadFromFile(new File(\"savedFile.txt\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"alson001"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"alson001"},"content":"        taskList.setTaskList(storage.getStorage());","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"alson001"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"alson001"},"content":"    public void parseTest() throws EmptyCommandException, InvalidTimeException,","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"alson001"},"content":"            InvalidDateException, InvalidTaskTypeException, InvalidCmdValueException {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"alson001"},"content":"        String bye \u003d \"bye\";","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"alson001"},"content":"        assertEquals(parser.parse(bye, taskList, storage, ui, savedFile).getClass(),","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"alson001"},"content":"                ByeCommand.class);","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"alson001"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"alson001"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"alson001"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"alson001":42}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"alson001"},"content":"todo","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"alson001"},"content":"todo ride bicycle","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"alson001"},"content":"deadline","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"alson001"},"content":"deadline complete duke /by Thursday","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"alson001"},"content":"event","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"alson001"},"content":"event attend 2103T lecture /from friday 2pm /to 4pm","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"alson001"},"content":"help","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"alson001"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"alson001"},"content":"mark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"alson001"},"content":"mark 2","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"alson001"},"content":"mark 3","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"alson001"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"alson001"},"content":"unmark 1","lastModifiedDate":"2023-01-18"},{"lineNumber":14,"author":{"gitId":"alson001"},"content":"unmark 2","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"alson001"},"content":"unmark 3","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"alson001"},"content":"list","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"alson001"},"content":"bye","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"alson001":17}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"alson001"},"content":"# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"alson001":1,"-":37}}]
