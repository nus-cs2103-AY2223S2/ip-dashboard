[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"# DukePro - Jarvis","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"   \u003e“Your mind is for having ideas, not holding them.” – David Allen \\([source](https://dansilvestre.com/productivity-quotes))","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"   ","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"DukePro frees your mind of having to remember things you need to do. It\u0027s,","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"- text-based","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"* easy to learn","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"+ ~FAST~ _SUPER_ FAST to use ","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"All you need to do is,","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"1. download it from [here](https://nus-cs2103-ay2223s2.github.io/website/schedule/week4/project.html).","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"2. double-click it.","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"3. add your tasks.","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"4. let it manage your tasks for you :wink:","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"And it is **FREE!**","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"Features:","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"- [x] Managing tasks","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"- [ ] Managing deadlines","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"- [ ] Reminders","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"---","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"If you are a Java programmer, you can use it to practice Java too. Here\u0027s the `main` method:","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"```java","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"public class Main {","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2023-02-04"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"\u003c!--","lastModifiedDate":"2023-02-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"--\u003e","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"anthonynmh":39,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"    archiveBaseName \u003d \"seedu.duke\"","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"test {","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"dependencies {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":10,"-":40}},{"path":"data/jarvis.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"[T][ ] run","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"[D][ ] eat rice  (Due: Jan 23 2023)","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"[E][ ] meeting  (Start: Jan 25 2023 | End: Jan 27 2023)","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"[T][ ] bake cake","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"[T][ ] bake cookies","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"[T][ ] sing","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":6}},{"path":"src/main/java/seedu/duke/AsciiArt.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * The Ascii art to be printed.","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class AsciiArt {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"    private String computer \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"            \"              ,------------------------------------,\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"                    \"              |  /------------------------------\\\\  |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"                    \"              | |J.A.R.V.I.S(v1.0)      CS2103(T)| |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"                    \"              | |                                | |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"                    \"              | | *HOW CAN I HELP YOU MR STARK?* | |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"                    \"              | |                                | |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"                    \"              | | *command list                  | |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"                    \"              | |  - todo        -list           | |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"                    \"              | |  - deadline    -markdone       | |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"                    \"              | |  - event       -unmark         | |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"                    \"              |  \\\\______________________________/  |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"                    \"              |____________________________________|\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"                    \"            ,------\\\\_____     []     _______/---,\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"                    \"          /             /______________\\\\      / |\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"                    \"        /___________________________________ /  | ___\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"                    \"        |credits: www.asciiart.eu/computers |   |    )\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"                    \"        |  _ _ _                 [-------]  |   |   (\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"                    \"        |  o o o                 [-------]  |  /    _)_\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"                    \"        |__________________________________ |/     /  /\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"                    \"    /-------------------------------------/|      ( )/\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"                    \"  /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"                    \"/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /\\n\" +","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"                    \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"    public AsciiArt() {};","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"     * Prints the Ascii art.","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"    public void printArt() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(computer);","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":42}},{"path":"src/main/java/seedu/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" * The Deadline Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"    private LocalDate timeParsed;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"    public Deadline(int id, String task, LocalDate timeParsed) {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"        super(id, task);","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"        this.timeParsed \u003d timeParsed;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"        return this.isDone()","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"                ? \"[D][x] \" + this.getTask()","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"                        + \" (Due: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"                        + this.timeParsed.format(formatter) + \")\"","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"                : \"[D][ ] \" + this.getTask()","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"                        + \" (Due: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"                        + this.timeParsed.format(formatter) + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":34}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":" * The Duke chatbot","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"public class Duke {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    private final Storage STORAGE;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"    private ToDoList todolist;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"    private final Parser PARSER;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    boolean isBye;","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     * Duke Constructor.","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"     * @param dataPath","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"    public Duke(String dataPath) {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"        STORAGE \u003d new Storage(dataPath);","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"        todolist \u003d new ToDoList();","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"        PARSER \u003d new Parser();","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"        isBye \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"        // Print previous data","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"            STORAGE.loadTasks(todolist);","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"     * Starts the Duke chatbot.","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"    public void run() {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"        AsciiArt asciiArt \u003d new AsciiArt();","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"        asciiArt.printArt();","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\nPlease enter a command Mr Stark.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"        while(!isBye) {","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"            String line \u003d ui.getNextCommand();","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"            isBye \u003d PARSER.parse(line, todolist, STORAGE);","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        new Duke(\"./data/jarvis.txt\").run();","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":54}},{"path":"src/main/java/seedu/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" * The Event Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"    private LocalDate startTimeParsed;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    private LocalDate endTimeParsed;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    public Event(int id, String task, LocalDate startTime, LocalDate endTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"        super(id, task);","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"        this.startTimeParsed \u003d startTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"        this.endTimeParsed \u003d endTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"        return this.isDone()","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"                ? \"[E][x] \" + this.getTask() + \" (Start: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"                        + this.startTimeParsed.format(formatter)","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"                        + \" | End: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"                        + endTimeParsed.format(formatter) + \")\"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"                : \"[E][ ] \" + this.getTask() + \" (Start: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"                        + this.startTimeParsed.format(formatter)","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"                        + \" | End: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"                        + this.endTimeParsed.format(formatter) + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":38}},{"path":"src/main/java/seedu/duke/JarvisException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"public class JarvisException extends Exception {","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"    public JarvisException (String errormsg) {","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"        super(errormsg);","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":7}},{"path":"src/main/java/seedu/duke/NoTaskFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"public class NoTaskFoundException extends JarvisException {","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"    public NoTaskFoundException(String msg) {","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"        super(msg);","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":7}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" * Deals with understanding user commands.","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"public class Parser {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    public Parser() {};","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     * Parses the user commands.","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     * @param command user command","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"     * @param storage the storage associated with the current ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     * @return isBye boolean indicated the ending \u0027bye\u0027 command","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    public boolean parse(String command, ToDoList todolist, Storage storage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"                storage.saveTasks(todolist);","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(e);","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"\\tHave a nice day sir.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"            return true;","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"            todolist.list();","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"mark(.*)\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"                int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"                int taskNum \u003d Integer.parseInt(command.substring(spacer + 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"                validateTask(todolist, taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"                todolist.markDone(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"Which task have you completed, sir?\");","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"            } catch (NoTaskFoundException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"Sir, that task does not exist.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"unmark(.*)\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"                int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"                int taskNum \u003d Integer.parseInt(command.substring(spacer + 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"                validateTask(todolist, taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"                todolist.unmark(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"Which task would you like to unmark sir?\");","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"            } catch (NoTaskFoundException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"Sir, that task does not exist.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"find(.*)\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"            int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"            String task \u003d command.substring(spacer + 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"            if (todolist.hasTask(task)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"                todolist.printTasks(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"            } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"Sir, that task does not exist.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"todo(.*)\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"                addToDo(todolist, command);","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"            } catch (JarvisException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"\\tPlease enter in format \u0027todo \u003ctask\u003e\u0027\");","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"deadline(.*)\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"            // check format","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"            if (!command.contains(\"/\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"\\tPlease enter in format \u0027deadline \u003ctask\u003e /\u003cdeadline\u003e\u0027\");","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"            } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"                int firstSlash \u003d command.indexOf(\"/\");","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"                String task \u003d command.substring(9, firstSlash);","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"                String time \u003d command.substring(firstSlash + 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"                try {","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"                    LocalDate startTimeParsed \u003d LocalDate.parse(time);","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"                    todolist.add(task, startTimeParsed);","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"anthonynmh"},"content":"                    System.out.println(\"Wrong date format\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"                    System.out.println(\"Input date format \u0027event \u003ctask\u003e /\u003cYYYY-MM-DD\u003e\u0027\");","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"anthonynmh"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"event(.*)\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"anthonynmh"},"content":"            int firstSlash \u003d command.indexOf(\"/\");","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"            // check format","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"            if (firstSlash \u003d\u003d -1 || !command.substring(firstSlash + 1).contains(\"/\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"\\tPlease enter in format \u0027event \u003ctask\u003e /\u003cstart\u003e/\u003cend\u003e\u0027\");","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"            } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"                int secondSlash \u003d command.substring(firstSlash + 1).indexOf(\"/\") + firstSlash + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"anthonynmh"},"content":"                String startTime \u003d command.substring(firstSlash + 1, secondSlash);","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"anthonynmh"},"content":"                String endTime \u003d command.substring(secondSlash + 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"anthonynmh"},"content":"                String task \u003d command.substring(6, firstSlash);","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"anthonynmh"},"content":"                try {","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"anthonynmh"},"content":"                    LocalDate startTimeParsed \u003d LocalDate.parse(startTime);","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"anthonynmh"},"content":"                    LocalDate endTimeParsed \u003d LocalDate.parse(endTime);","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"anthonynmh"},"content":"                    todolist.add(task, startTimeParsed, endTimeParsed);","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"anthonynmh"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"anthonynmh"},"content":"                    System.out.println(\"Wrong date format\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"anthonynmh"},"content":"                    System.out.println(\"Input date format \u0027event \u003ctask\u003e /\u003cYYYY-MM-DD\u003e/\u003cYYYY-MM-DD\u003e\u0027\");","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"anthonynmh"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"delete(.*)\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"anthonynmh"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"anthonynmh"},"content":"                int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"anthonynmh"},"content":"                int taskNum \u003d Integer.parseInt(command.substring(spacer + 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"anthonynmh"},"content":"                validateTask(todolist, taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"anthonynmh"},"content":"                todolist.delete(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"anthonynmh"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"Which task would you like to delete, sir?\");","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"anthonynmh"},"content":"            } catch (NoTaskFoundException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(\"Sir, you may not delete nonexistent tasks.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"anthonynmh"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":130,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"I do not know that command, sir.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"Perhaps you can add that functionality for J.A.R.V.I.S(v2.0).\");","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"anthonynmh"},"content":"        return false;","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"anthonynmh"},"content":"     * Checks whether the Task number exists.","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"anthonynmh"},"content":"     * @param toDo the current ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"anthonynmh"},"content":"     * @param num the task number","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"anthonynmh"},"content":"     * @throws NoTaskFoundException If no task at specified number exists","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"anthonynmh"},"content":"    public static void validateTask(ToDoList toDo, int num) throws NoTaskFoundException {","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"anthonynmh"},"content":"        if (num \u003e toDo.getCount()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"anthonynmh"},"content":"            throw new NoTaskFoundException(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"anthonynmh"},"content":"     * Instantiates a new Todo Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"anthonynmh"},"content":"     * @param toDo the current ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"anthonynmh"},"content":"     * @param line user command containing task to be instantiate Todo with","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"anthonynmh"},"content":"     * @throws JarvisException If task not in proper format","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"anthonynmh"},"content":"    public static void addToDo(ToDoList toDo, String line) throws JarvisException {","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"anthonynmh"},"content":"            String task \u003d line.substring(5);","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"anthonynmh"},"content":"            toDo.add(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"anthonynmh"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":161,"author":{"gitId":"anthonynmh"},"content":"            throw new JarvisException(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":162,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":163,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":164,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":164}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":" * Handles data read and write.","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"public class Storage {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"    private String dataPath;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"    public Storage(String dataPath) {","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"        this.dataPath \u003d dataPath;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"     * Writes the tasks in current list onto text file.","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"     * Path of text file to be specified on instantiation.","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the ToDoList to be associated with this storage","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"     * @throws IOException If format of tasks saved incorrectly on text file","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"    public void saveTasks(ToDoList todolist) throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"        FileWriter fw \u003d new FileWriter(dataPath);","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c todolist.getCount(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"            fw.write(todolist.getTask(i) + System.lineSeparator());","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"        fw.close();","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"     * Writes the tasks in current list onto text file.","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"     * Path of text file to be specified on instantiation.","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the ToDoList to be associated with this storage","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"     * @throws FileNotFoundException If file not found at the path specified","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"    public void loadTasks(ToDoList todolist) throws FileNotFoundException {","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tTasks from the previous session:\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"        File f \u003d new File(dataPath);","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"            String curr \u003d s.nextLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"            String taskType \u003d curr.substring(1, 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"\\t\" + curr);","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"            switch (taskType) {","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"            case \"T\":","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(curr.substring(7));","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"            case \"D\":","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"                int firstColonD \u003d curr.indexOf(\":\");","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"                int firstBracketD \u003d curr.indexOf(\"(\");","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"                String taskD \u003d curr.substring(7, firstBracketD - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"                String time \u003d curr.substring(firstColonD + 2, curr.length() - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"                LocalDate startTimeParsed \u003d LocalDate.parse(time, formatter);","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(taskD, startTimeParsed);","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"            case \"E\":","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"                int firstColonE \u003d curr.indexOf(\":\");","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"                int secondColonE \u003d curr.substring(firstColonE + 1).indexOf(\":\") + firstColonE + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"                int firstBracketE \u003d curr.indexOf(\"(\");","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"                String startTime \u003d curr.substring(firstColonE + 2, secondColonE - 6);","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"                String endTime \u003d curr.substring(secondColonE + 2, curr.length() - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"                String taskE \u003d curr.substring(7, firstBracketE - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"                LocalDate startTimeParsedE \u003d LocalDate.parse(startTime, formatter);","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"                LocalDate endTimeParsed \u003d LocalDate.parse(endTime, formatter);","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(taskE, startTimeParsedE, endTimeParsed);","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":87}},{"path":"src/main/java/seedu/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * Handles the tasks relating to the ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"    private int id;","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    private String task;","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    private boolean done;","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    public Task(int id, String task) {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"     * Prints the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     * @return This task","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"        return done ? \"[x] \" + task: \"[ ] \" + task;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"     * Marks the current task as done.","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"     * @param index the task number to mark","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    public void markDone(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        this.done \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tCongratulations, Mr Stark. You have completed task \" + index);","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t\" + printTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"     * Unmarks the current task; mark current task undone.","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"     * @param index the task number to unmark","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tjarvis.Task \" + index + \" has been unmarked.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t\" + printTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"     * Returns the unique id associated with the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"     * @return Id","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"    public int getId() {","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"        return this.id;","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"     * Checks if current task is completed.","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"     * @return boolean of done-ness","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"        return this.done;","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"     * Prints the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"     * @return The current task","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"    public String getTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"        return this.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"    public boolean hasTask(String task) {","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"        return (this.task.contains(task));","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"anthonynmh":79}},{"path":"src/main/java/seedu/duke/ToDoList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.util.List;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" * The ToDoList class manages and stores Tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"public class ToDoList {","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    private List\u003cTask\u003e todolist;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"    private int count \u003d 0;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"    public ToDoList() {","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"        todolist \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     * Lists all tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    public void list() {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tTasks for Tony Stark:\");","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"\\t\" + (i + 1) + \".\" +","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"                    todolist.get(i).printTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"     * Prints the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task to print task","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"     * @return the task at specified index","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"    public String getTask(int index) {","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"        return todolist.get(index).printTask();","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Todo.","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"     * @param task task to be instantiated","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"    public void add(String task) {","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"        Task t \u003d new Todo(count, task);","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"        todolist.add(count, t);","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"        count++;","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tI have added task: \" + t.getTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"     * @param task task to be instantiated","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"     * @param time deadline of task","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"    public void add(String task, LocalDate time) {","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"        Task t \u003d new Deadline(count, task, time);","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"        todolist.add(count, t);","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"        count++;","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tI have added task: \" + t.getTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tDue: \" + time);","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Event.","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"     * @param task task to be instantiated","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"     * @param startTime starting time of event","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"     * @param endTime ending time of event","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"    public void add(String task, LocalDate startTime, LocalDate endTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"        Task t \u003d new Event(count, task, startTime, endTime);","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"        todolist.add(count, t);","lastModifiedDate":"2023-01-17"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"        count++;","lastModifiedDate":"2023-01-17"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tI have added task: \" + t.getTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tStarts: \" + startTime);","lastModifiedDate":"2023-01-17"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tEnds: \" + endTime);","lastModifiedDate":"2023-01-17"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":90,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"     * Deletes the task at specified index.","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"anthonynmh"},"content":"    public void delete(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":96,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tDeleted: \" + todolist.get(index - 1).printTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"        todolist.remove(index - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"        count--;","lastModifiedDate":"2023-01-17"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":103,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"anthonynmh"},"content":"     * Marks the task at specified index as done.","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"anthonynmh"},"content":"    public void markDone (int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":109,"author":{"gitId":"anthonynmh"},"content":"        todolist.get(index - 1).markDone(index);","lastModifiedDate":"2023-01-17"},{"lineNumber":110,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":111,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":112,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"anthonynmh"},"content":"     * Marks the task at specified index as not done.","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"anthonynmh"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"anthonynmh"},"content":"        todolist.get(index - 1).unmark(index);","lastModifiedDate":"2023-01-17"},{"lineNumber":119,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":120,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":121,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"anthonynmh"},"content":"     * Returns the last index of the current arrayList.","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"anthonynmh"},"content":"     * @return last index of arrayList","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"anthonynmh"},"content":"    public int getCount() {","lastModifiedDate":"2023-01-17"},{"lineNumber":127,"author":{"gitId":"anthonynmh"},"content":"        return count;","lastModifiedDate":"2023-01-17"},{"lineNumber":128,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":129,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":130,"author":{"gitId":"anthonynmh"},"content":"    public boolean hasTask(String task) {","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"anthonynmh"},"content":"        boolean res \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"anthonynmh"},"content":"            if (todolist.get(i).hasTask(task)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"anthonynmh"},"content":"                res \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"anthonynmh"},"content":"        return res;","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"anthonynmh"},"content":"    public void printTasks(String task) {","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"anthonynmh"},"content":"            if (todolist.get(i).hasTask(task)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(todolist.get(i).printTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"anthonynmh":150}},{"path":"src/main/java/seedu/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * A Todo Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"    public Todo(int id, String task) {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"        super(id, task);","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"        return this.isDone() ? \"[T][x] \" + this.getTask(): \"[T][ ] \" + this.getTask();","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":20}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":" * Deals with user interactions.","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"public class Ui {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    public Ui() {};","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     * Gets the next instruction line from user","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     * @return user command","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"    public String getNextCommand() {","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":22}},{"path":"src/test/java/seedu/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    public void dummyTest(){","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"    public void anotherDummyTest(){","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":19}},{"path":"src/test/java/seedu/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"public class EventTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    public void printTask_newTask_success() {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"        LocalDate startTime \u003d LocalDate.parse(\"2023-01-01\");","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"        LocalDate endTime \u003d LocalDate.parse(\"2023-01-02\");","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(\"[E][ ] eat (Start: Jan 01 2023 | End: Jan 02 2023)\",","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"                new Event(0, \"eat\", startTime, endTime).printTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":21}},{"path":"src/test/java/seedu/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    public void printTask_newTask_success() {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(\"[T][ ] eat\", new Todo(0, \"eat\").printTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"todo","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"todo buy bread","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"eat","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"mark","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"mark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"unmark","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"unmark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"hye","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"bye","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":11}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"java -classpath ../bin Jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"anthonynmh":2,"-":32}}]
