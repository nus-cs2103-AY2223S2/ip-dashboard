[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"# DukePro - Jarvis","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"   \u003e“Your mind is for having ideas, not holding them.” – David Allen \\([source](https://dansilvestre.com/productivity-quotes))","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"   ","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"DukePro frees your mind of having to remember things you need to do. It\u0027s,","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"- text-based","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"* easy to learn","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"+ ~FAST~ _SUPER_ FAST to use ","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"All you need to do is,","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"1. download it from [here](https://nus-cs2103-ay2223s2.github.io/website/schedule/week4/project.html).","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"2. double-click it.","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"3. add your tasks.","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"4. let it manage your tasks for you :wink:","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"And it is **FREE!**","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"Features:","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"- [x] Managing tasks","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"- [ ] Managing deadlines","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"- [ ] Reminders","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"---","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"If you are a Java programmer, you can use it to practice Java too. Here\u0027s the `main` method:","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"```java","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"public class Main {","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2023-02-04"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"\u003c!--","lastModifiedDate":"2023-02-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"--\u003e","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"anthonynmh":39,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"checkstyle {","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"    archiveBaseName \u003d \"seedu.duke\"","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"anthonynmh":22,"-":40}},{"path":"data/jarvis.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"[T][ ] cook dinner","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"[D][ ] finish essay  (Due: Feb 22 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"[D][ ] read lecture  (Due: Feb 23 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"[E][ ] travel  (Start: Feb 25 2023 | End: Feb 28 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"[T][ ] feed the fish","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"anthonynmh":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"### Feature - Task saving","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"Create a new task in any of the following types:","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"1. todo","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"2. deadline","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"3. event","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"### Feature - Task deletion","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"Delete existing task in the current ToDoList.","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"### Feature - Task completion","lastModifiedDate":"2023-02-16"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"Mark the task specified as completed!","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"### Feature - Undo task completion","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"Undo the specified task as incomplete!","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"### Feature - Find next upcoming deadline","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"Shows the next task with the nearest deadline.","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"---","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"### `list` - List all tasks","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"Jarvis will return a list of all tasks of the user.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"Example of usage: `list`","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"Expected outcome:","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"Tasks for Tony Stark:","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"### `todo` - Creates a \u0027todo\u0027 type Task","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"This task only has a description.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"No time parameters taken.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"Example of usage: `todo cook dinner`","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"Expected outcome:","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"Tasks for Tony Stark:","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"1[T][ ] cook dinner","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"### `deadline` - Creates a \u0027deadline\u0027 type Task","lastModifiedDate":"2023-02-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"This task has a description and a deadline.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"Example of usage: `deadline finish essay /2023-02-22`","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"Tasks for Tony Stark:","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"1[T][ ] cook dinner","lastModifiedDate":"2023-02-16"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"2[D][ ] finish essay  (Due: Feb 22 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"### `event` - Creates a \u0027event\u0027 type Task","lastModifiedDate":"2023-02-16"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"This task has a description and a time span.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"Example of usage: `event travel /2023-02-25 /2023-02-28`","lastModifiedDate":"2023-02-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"Expected outcome:","lastModifiedDate":"2023-02-16"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"Tasks for Tony Stark:","lastModifiedDate":"2023-02-16"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"1[T][ ] cook dinner","lastModifiedDate":"2023-02-16"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"2[D][ ] finish essay  (Due: Feb 22 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"3[E][ ] travel  (Start: Feb 25 2023 | End: Feb 28 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"### `mark` - Marks a task as done","lastModifiedDate":"2023-02-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"This task has a description and a time span.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"Example of usage: `mark 1`","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2023-02-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"Tasks for Tony Stark:","lastModifiedDate":"2023-02-16"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"1[T][X] cook dinner","lastModifiedDate":"2023-02-16"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"2[D][ ] finish essay  (Due: Feb 22 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":103,"author":{"gitId":"anthonynmh"},"content":"3[E][ ] travel  (Start: Feb 25 2023 | End: Feb 28 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":104,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":105,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":106,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":107,"author":{"gitId":"anthonynmh"},"content":"### `unmark` - Un-marks a task as done","lastModifiedDate":"2023-02-16"},{"lineNumber":108,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":109,"author":{"gitId":"anthonynmh"},"content":"This task has a description and a time span.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":110,"author":{"gitId":"anthonynmh"},"content":"Example of usage: `unmark 1`","lastModifiedDate":"2023-02-16"},{"lineNumber":111,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":112,"author":{"gitId":"anthonynmh"},"content":"Expected outcome:","lastModifiedDate":"2023-02-16"},{"lineNumber":113,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":114,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":115,"author":{"gitId":"anthonynmh"},"content":"Tasks for Tony Stark:","lastModifiedDate":"2023-02-16"},{"lineNumber":116,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":117,"author":{"gitId":"anthonynmh"},"content":"1[T][ ] cook dinner","lastModifiedDate":"2023-02-16"},{"lineNumber":118,"author":{"gitId":"anthonynmh"},"content":"2[D][ ] finish essay  (Due: Feb 22 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":119,"author":{"gitId":"anthonynmh"},"content":"3[E][ ] travel  (Start: Feb 25 2023 | End: Feb 28 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":120,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":121,"author":{"gitId":"anthonynmh"},"content":"```","lastModifiedDate":"2023-02-16"},{"lineNumber":122,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":123,"author":{"gitId":"anthonynmh"},"content":"### `unmark` - Un-marks a task as done","lastModifiedDate":"2023-02-16"},{"lineNumber":124,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":125,"author":{"gitId":"anthonynmh"},"content":"This task has a description and a time span.\u003cbr\u003e","lastModifiedDate":"2023-02-16"},{"lineNumber":126,"author":{"gitId":"anthonynmh"},"content":"Example of usage: `unmark 1`","lastModifiedDate":"2023-02-16"},{"lineNumber":127,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":128,"author":{"gitId":"anthonynmh"},"content":"Expected outcome:","lastModifiedDate":"2023-02-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":131,"author":{"gitId":"anthonynmh"},"content":"Tasks for Tony Stark:","lastModifiedDate":"2023-02-16"},{"lineNumber":132,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":133,"author":{"gitId":"anthonynmh"},"content":"1[T][ ] cook dinner","lastModifiedDate":"2023-02-16"},{"lineNumber":134,"author":{"gitId":"anthonynmh"},"content":"2[D][ ] finish essay  (Due: Feb 22 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":135,"author":{"gitId":"anthonynmh"},"content":"3[E][ ] travel  (Start: Feb 25 2023 | End: Feb 28 2023)","lastModifiedDate":"2023-02-16"},{"lineNumber":136,"author":{"gitId":"anthonynmh"},"content":"-------------------","lastModifiedDate":"2023-02-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"anthonynmh":112,"-":25}},{"path":"src/main/java/seedu/duke/AsciiArt.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * The Ascii art to be printed.","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class AsciiArt {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"    private String computer \u003d","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"            \"              ,------------------------------------,\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"            + \"              |  /------------------------------\\\\  |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"            + \"              | |J.A.R.V.I.S(v1.0)      CS2103(T)| |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"            + \"              | |                                | |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"            + \"              | | *HOW CAN I HELP YOU MR STARK?* | |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"            + \"              | |                                | |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"            + \"              | | *command list                  | |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"            + \"              | |  - todo        -list           | |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"            + \"              | |  - deadline    -markdone       | |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"            + \"              | |  - event       -unmark         | |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"            + \"              |  \\\\______________________________/  |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"            + \"              |____________________________________|\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"            + \"            ,------\\\\_____     []     _______/---,\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"            + \"          /             /______________\\\\      / |\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"            + \"        /___________________________________ /  | ___\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"            + \"        |credits: www.asciiart.eu/computers |   |    )\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"            + \"        |  _ _ _                 [-------]  |   |   (\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"            + \"        |  o o o                 [-------]  |  /    _)_\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"            + \"        |__________________________________ |/     /  /\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"            + \"    /-------------------------------------/|      ( )/\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"            + \"  /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"            + \"/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /\\n\"","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"            + \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"    public AsciiArt() {};","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"     * Prints the Ascii art.","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"    public void printArt() {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(computer);","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":42}},{"path":"src/main/java/seedu/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" * The Deadline Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-02-14"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     * @param id the id associated with this Task","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     * @param task deadline description","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"     * @param timeParsed time of deadline","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"    public Deadline(int id, String task, LocalDate timeParsed) {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"        super(id, task);","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"        this.deadline \u003d timeParsed;","lastModifiedDate":"2023-02-14"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        return this.isDone()","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"                ? \"[D][x] \" + this.getTask()","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"                        + \" (Due: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"                        + this.deadline.format(formatter) + \")\"","lastModifiedDate":"2023-02-14"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"                : \"[D][ ] \" + this.getTask()","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"                        + \" (Due: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"                        + this.deadline.format(formatter) + \")\";","lastModifiedDate":"2023-02-14"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"     * Returns deadline.","lastModifiedDate":"2023-02-14"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-14"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"     * @return LocalDate of the deadline","lastModifiedDate":"2023-02-14"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2023-02-14"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"        return this.deadline;","lastModifiedDate":"2023-02-14"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":50}},{"path":"src/main/java/seedu/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":" * DiaglogBox.","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"    private Label text;","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     * Displays the dialog box.","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"     * @param l label of the dialog box","lastModifiedDate":"2023-02-13"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"     * @param iv image of the dialog box","lastModifiedDate":"2023-02-13"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"        text \u003d l;","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"        displayPicture \u003d iv;","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"        text.setWrapText(true);","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"        displayPicture.setFitWidth(100.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"        displayPicture.setFitHeight(100.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"        this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"    private void flip() {","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"        return new DialogBox(l, iv);","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        var db \u003d new DialogBox(l, iv);","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"        db.flip();","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"        return db;","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"anthonynmh":56}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":" * The Duke chatbot.","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"    private static String dataPath \u003d \"./data/jarvis.txt\";","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"    private final Storage storage;","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"    private ToDoList todolist;","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"    private final Parser parser;","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"    private boolean isBye;","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"    private Scene scene;","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/TonyStark.png\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"    private Image jarvis \u003d new Image(this.getClass().getResourceAsStream(\"/images/jarvis.png\"));","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"     * Duke Constructor.","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"    public Duke() {","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"        storage \u003d new Storage(dataPath);","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"        todolist \u003d new ToDoList();","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"        isBye \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"        // Print previous data","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"            storage.loadTasks(todolist);","lastModifiedDate":"2023-02-04"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"     * Starts the Duke chatbot.","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"    public void run() {","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"        AsciiArt asciiArt \u003d new AsciiArt();","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"        asciiArt.printArt();","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\nPlease enter a command Mr Stark.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"        //Step 1. Setting up required components","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"        //The container for the content of the chat to scroll.","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"        stage.show();","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"        stage.setTitle(\"J.A.R.V.I.S\");","lastModifiedDate":"2023-02-16"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"        stage.setMinHeight(800.0);","lastModifiedDate":"2023-02-16"},{"lineNumber":90,"author":{"gitId":"anthonynmh"},"content":"        stage.setMinWidth(600.0);","lastModifiedDate":"2023-02-16"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":92,"author":{"gitId":"anthonynmh"},"content":"        mainLayout.setPrefSize(600.0, 800.0);","lastModifiedDate":"2023-02-16"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setPrefSize(585, 735);","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-02-05"},{"lineNumber":96,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"anthonynmh"},"content":"        userInput.setPrefWidth(525.0);","lastModifiedDate":"2023-02-16"},{"lineNumber":105,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"anthonynmh"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":108,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":114,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":115,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":116,"author":{"gitId":"anthonynmh"},"content":"        //Part 3. Add functionality to handle user input.","lastModifiedDate":"2023-02-05"},{"lineNumber":117,"author":{"gitId":"anthonynmh"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-02-05"},{"lineNumber":118,"author":{"gitId":"anthonynmh"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-05"},{"lineNumber":119,"author":{"gitId":"anthonynmh"},"content":"        });","lastModifiedDate":"2023-02-05"},{"lineNumber":120,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":121,"author":{"gitId":"anthonynmh"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"anthonynmh"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-05"},{"lineNumber":123,"author":{"gitId":"anthonynmh"},"content":"        });","lastModifiedDate":"2023-02-05"},{"lineNumber":124,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"anthonynmh"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-02-05"},{"lineNumber":127,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"anthonynmh"},"content":"     * Iteration 1:","lastModifiedDate":"2023-02-05"},{"lineNumber":131,"author":{"gitId":"anthonynmh"},"content":"     * Creates a label with the specified text and adds it to the dialog container.","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":133,"author":{"gitId":"anthonynmh"},"content":"     * @param text String containing text to add","lastModifiedDate":"2023-02-05"},{"lineNumber":134,"author":{"gitId":"anthonynmh"},"content":"     * @return a label with the specified text that has word wrap enabled.","lastModifiedDate":"2023-02-05"},{"lineNumber":135,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":136,"author":{"gitId":"anthonynmh"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2023-02-05"},{"lineNumber":137,"author":{"gitId":"anthonynmh"},"content":"        // You will need to import `javafx.scene.control.Label`.","lastModifiedDate":"2023-02-05"},{"lineNumber":138,"author":{"gitId":"anthonynmh"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2023-02-05"},{"lineNumber":139,"author":{"gitId":"anthonynmh"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2023-02-05"},{"lineNumber":140,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":141,"author":{"gitId":"anthonynmh"},"content":"        return textToAdd;","lastModifiedDate":"2023-02-05"},{"lineNumber":142,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":143,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":145,"author":{"gitId":"anthonynmh"},"content":"     * Iteration 2:","lastModifiedDate":"2023-02-05"},{"lineNumber":146,"author":{"gitId":"anthonynmh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-05"},{"lineNumber":147,"author":{"gitId":"anthonynmh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-05"},{"lineNumber":148,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":149,"author":{"gitId":"anthonynmh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-05"},{"lineNumber":150,"author":{"gitId":"anthonynmh"},"content":"        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2023-02-05"},{"lineNumber":151,"author":{"gitId":"anthonynmh"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText()));","lastModifiedDate":"2023-02-05"},{"lineNumber":152,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-05"},{"lineNumber":153,"author":{"gitId":"anthonynmh"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),","lastModifiedDate":"2023-02-05"},{"lineNumber":154,"author":{"gitId":"anthonynmh"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(jarvis))","lastModifiedDate":"2023-02-13"},{"lineNumber":155,"author":{"gitId":"anthonynmh"},"content":"        );","lastModifiedDate":"2023-02-05"},{"lineNumber":156,"author":{"gitId":"anthonynmh"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-05"},{"lineNumber":157,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":158,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":159,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":160,"author":{"gitId":"anthonynmh"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-02-05"},{"lineNumber":161,"author":{"gitId":"anthonynmh"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-02-05"},{"lineNumber":162,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":163,"author":{"gitId":"anthonynmh"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2023-02-05"},{"lineNumber":164,"author":{"gitId":"anthonynmh"},"content":"        assert input !\u003d null : \"No input given\";","lastModifiedDate":"2023-02-13"},{"lineNumber":165,"author":{"gitId":"anthonynmh"},"content":"        return parser.parse(input, todolist, storage);","lastModifiedDate":"2023-02-05"},{"lineNumber":166,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":167,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":168,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":169,"author":{"gitId":"anthonynmh"},"content":"     * Returns the current date.","lastModifiedDate":"2023-02-13"},{"lineNumber":170,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":171,"author":{"gitId":"anthonynmh"},"content":"     * @return the current date","lastModifiedDate":"2023-02-13"},{"lineNumber":172,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":173,"author":{"gitId":"anthonynmh"},"content":"    public static LocalDate getCurrDate() {","lastModifiedDate":"2023-02-13"},{"lineNumber":174,"author":{"gitId":"anthonynmh"},"content":"        return LocalDate.now();","lastModifiedDate":"2023-02-14"},{"lineNumber":175,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":176,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":177,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":178,"author":{"gitId":"anthonynmh"},"content":"     * main.","lastModifiedDate":"2023-02-05"},{"lineNumber":179,"author":{"gitId":"anthonynmh"},"content":"     * @param args main args","lastModifiedDate":"2023-02-13"},{"lineNumber":180,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":181,"author":{"gitId":"anthonynmh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-28"},{"lineNumber":182,"author":{"gitId":"anthonynmh"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2023-02-05"},{"lineNumber":183,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":184,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":184}},{"path":"src/main/java/seedu/duke/Duke2.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":" * JavaFX tutorial","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"public class Duke2 extends Application {","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"    private Scene scene;","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"    public Duke2() {}","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        //Step 1. Setting up required components","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"        //The container for the content of the chat to scroll.","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"        stage.show();","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"        //Part 3. Add functionality to handle user input.","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"        });","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-05"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-05"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"        });","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"anthonynmh"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2023-02-05"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-02-05"},{"lineNumber":92,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":95,"author":{"gitId":"anthonynmh"},"content":"     * Iteration 1:","lastModifiedDate":"2023-02-05"},{"lineNumber":96,"author":{"gitId":"anthonynmh"},"content":"     * Creates a label with the specified text and adds it to the dialog container.","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"anthonynmh"},"content":"     * @param text String containing text to add","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"     * @return a label with the specified text that has word wrap enabled.","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"        // You will need to import `javafx.scene.control.Label`.","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2023-02-05"},{"lineNumber":103,"author":{"gitId":"anthonynmh"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":105,"author":{"gitId":"anthonynmh"},"content":"        return textToAdd;","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":107,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":108,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"anthonynmh"},"content":"     * Iteration 2:","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"anthonynmh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"anthonynmh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"anthonynmh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-05"},{"lineNumber":114,"author":{"gitId":"anthonynmh"},"content":"        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2023-02-05"},{"lineNumber":115,"author":{"gitId":"anthonynmh"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText()));","lastModifiedDate":"2023-02-05"},{"lineNumber":116,"author":{"gitId":"anthonynmh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-05"},{"lineNumber":117,"author":{"gitId":"anthonynmh"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),","lastModifiedDate":"2023-02-05"},{"lineNumber":118,"author":{"gitId":"anthonynmh"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(duke))","lastModifiedDate":"2023-02-05"},{"lineNumber":119,"author":{"gitId":"anthonynmh"},"content":"        );","lastModifiedDate":"2023-02-05"},{"lineNumber":120,"author":{"gitId":"anthonynmh"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-05"},{"lineNumber":121,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":123,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":124,"author":{"gitId":"anthonynmh"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-02-05"},{"lineNumber":125,"author":{"gitId":"anthonynmh"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-02-05"},{"lineNumber":126,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":127,"author":{"gitId":"anthonynmh"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2023-02-05"},{"lineNumber":128,"author":{"gitId":"anthonynmh"},"content":"        return \"Duke heard: \" + input;","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":130,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"anthonynmh":130}},{"path":"src/main/java/seedu/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" * The Event Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"    private LocalDate startTimeParsed;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    private LocalDate endTimeParsed;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Event.","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     * @param id the id associated with this Task","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"     * @param task the event description","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"     * @param startTime starting time of event","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     * @param endTime ending time of event","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    public Event(int id, String task, LocalDate startTime, LocalDate endTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"        super(id, task);","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"        this.startTimeParsed \u003d startTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"        this.endTimeParsed \u003d endTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"        return this.isDone()","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"                ? \"[E][x] \" + this.getTask() + \" (Start: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"                        + this.startTimeParsed.format(formatter)","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"                        + \" | End: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"                        + endTimeParsed.format(formatter) + \")\"","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"                : \"[E][ ] \" + this.getTask() + \" (Start: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"                        + this.startTimeParsed.format(formatter)","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"                        + \" | End: \"","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"                        + this.endTimeParsed.format(formatter) + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":46}},{"path":"src/main/java/seedu/duke/JarvisException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * JarvisException class.","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class JarvisException extends Exception {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"    public JarvisException(String errormsg) {","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"        super(errormsg);","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":10}},{"path":"src/main/java/seedu/duke/NoTaskFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * NoTaskFoundException class.","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class NoTaskFoundException extends JarvisException {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"    public NoTaskFoundException(String msg) {","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"        super(msg);","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":10}},{"path":"src/main/java/seedu/duke/NotValidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-02-13"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-02-13"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * NotValidDateException class.","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class NotValidDateException extends JarvisException {","lastModifiedDate":"2023-02-13"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"    public NotValidDateException(String msg) {","lastModifiedDate":"2023-02-13"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"        super(msg);","lastModifiedDate":"2023-02-13"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-02-13"}],"authorContributionMap":{"anthonynmh":10}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" * Deals with understanding user commands.","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"public class Parser {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    public Parser() {};","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     * Parses the user commands.","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     * @param command user command","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"     * @param storage the storage associated with the current ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     * @return isBye boolean indicated the ending \u0027bye\u0027 command","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    public String parse(String command, ToDoList todolist, Storage storage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"            assert command.equals(\"bye\") : \"Command !\u003d \u0027bye\u0027\";","lastModifiedDate":"2023-02-13"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"            return endDuke(storage, todolist);","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"            assert command.equals(\"list\") : \"Command !\u003d \u0027list\u0027\";","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"            return todolist.list();","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"mark(.*)\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"            return markTask(command, todolist);","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"unmark(.*)\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"            return unmarkTask(command, todolist);","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"todo(.*)\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"            return createTask(command, todolist);","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"deadline(.*)\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"            return createDeadlineTask(command, todolist);","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"event(.*)\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"            return createEventTask(command, todolist);","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"delete(.*)\")) {","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"            return createDeleteTask(command, todolist);","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"findtask(.*)\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"            return findTask(command, todolist);","lastModifiedDate":"2023-02-14"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"findtime(.*)\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"            return findTime(command, todolist);","lastModifiedDate":"2023-02-14"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"how many days until my next deadline\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"            return findDaysUntilNextDeadline(todolist);","lastModifiedDate":"2023-02-14"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"find free times\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"            return findDaysUntilNextDeadline(todolist);","lastModifiedDate":"2023-02-14"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"        } else if (command.matches(\"find(.*)\")) {","lastModifiedDate":"2023-02-14"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"            return askUserWhichFind();","lastModifiedDate":"2023-02-14"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        return (\"I do not know that command, sir.\");","lastModifiedDate":"2023-02-13"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"     * Ends the current Duke program.","lastModifiedDate":"2023-02-13"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"     * @param storage the current storage","lastModifiedDate":"2023-02-13"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current todolist","lastModifiedDate":"2023-02-13"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of ending process, or error message","lastModifiedDate":"2023-02-13"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"    public String endDuke(Storage storage, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"            storage.saveTasks(todolist);","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"            return (\"Unable to store properly.\");","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"        return (\"Have a nice day sir.\\nBye!\");","lastModifiedDate":"2023-02-13"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"     * Marks the task indicated.","lastModifiedDate":"2023-02-13"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"     * @param command the user input","lastModifiedDate":"2023-02-13"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current todolist","lastModifiedDate":"2023-02-13"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of marking, or error message","lastModifiedDate":"2023-02-13"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"    public String markTask(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"            int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"            int taskNum \u003d Integer.parseInt(command.substring(spacer + 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"            taskExistChecker(todolist, taskNum);","lastModifiedDate":"2023-02-13"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"            todolist.markDone(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"            return (\"Which task have you completed, sir?\");","lastModifiedDate":"2023-02-13"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"        } catch (NoTaskFoundException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"            return (\"Sir, that task does not exist.\");","lastModifiedDate":"2023-02-13"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"        return todolist.list();","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":92,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"     * Unmarks the task indicated.","lastModifiedDate":"2023-02-13"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":95,"author":{"gitId":"anthonynmh"},"content":"     * @param command the user input","lastModifiedDate":"2023-02-13"},{"lineNumber":96,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current todolist","lastModifiedDate":"2023-02-13"},{"lineNumber":97,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of unmarking, or error message","lastModifiedDate":"2023-02-13"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"    public String unmarkTask(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"            int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"            int taskNum \u003d Integer.parseInt(command.substring(spacer + 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"anthonynmh"},"content":"            taskExistChecker(todolist, taskNum);","lastModifiedDate":"2023-02-13"},{"lineNumber":104,"author":{"gitId":"anthonynmh"},"content":"            todolist.unmark(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"anthonynmh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"anthonynmh"},"content":"            return (\"Which task would you like to unmark sir?\");","lastModifiedDate":"2023-02-13"},{"lineNumber":107,"author":{"gitId":"anthonynmh"},"content":"        } catch (NoTaskFoundException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"anthonynmh"},"content":"            return (\"Sir, that task does not exist.\");","lastModifiedDate":"2023-02-13"},{"lineNumber":109,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"anthonynmh"},"content":"        return todolist.list();","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":112,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":113,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":114,"author":{"gitId":"anthonynmh"},"content":"     * Asks user for specific find command.","lastModifiedDate":"2023-02-14"},{"lineNumber":115,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-14"},{"lineNumber":116,"author":{"gitId":"anthonynmh"},"content":"     * @return String of question to ask","lastModifiedDate":"2023-02-14"},{"lineNumber":117,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":118,"author":{"gitId":"anthonynmh"},"content":"    public String askUserWhichFind() {","lastModifiedDate":"2023-02-14"},{"lineNumber":119,"author":{"gitId":"anthonynmh"},"content":"        return (\"Which find command are you looking for?\\n\"","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"anthonynmh"},"content":"                + \"findtask, findtime, find free times?\");","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":122,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":123,"author":{"gitId":"anthonynmh"},"content":"     * Finds the task indicated by the user.","lastModifiedDate":"2023-02-13"},{"lineNumber":124,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":125,"author":{"gitId":"anthonynmh"},"content":"     * @param command the task to find","lastModifiedDate":"2023-02-13"},{"lineNumber":126,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current todolist","lastModifiedDate":"2023-02-13"},{"lineNumber":127,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of found Task, or Task not found","lastModifiedDate":"2023-02-13"},{"lineNumber":128,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":129,"author":{"gitId":"anthonynmh"},"content":"    public String findTask(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":130,"author":{"gitId":"anthonynmh"},"content":"        int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"anthonynmh"},"content":"        String task \u003d command.substring(spacer + 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"anthonynmh"},"content":"        return todolist.findTaskIfExist(task);","lastModifiedDate":"2023-02-14"},{"lineNumber":133,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":134,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":135,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":136,"author":{"gitId":"anthonynmh"},"content":"     * Finds the timeslot indicated by the user.","lastModifiedDate":"2023-02-14"},{"lineNumber":137,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-14"},{"lineNumber":138,"author":{"gitId":"anthonynmh"},"content":"     * @param command the timeslot to find","lastModifiedDate":"2023-02-14"},{"lineNumber":139,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current todolist","lastModifiedDate":"2023-02-14"},{"lineNumber":140,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of found timeslots, or timeslot not found","lastModifiedDate":"2023-02-14"},{"lineNumber":141,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":142,"author":{"gitId":"anthonynmh"},"content":"    public String findTime(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-14"},{"lineNumber":143,"author":{"gitId":"anthonynmh"},"content":"        int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-02-14"},{"lineNumber":144,"author":{"gitId":"anthonynmh"},"content":"        String timeLength \u003d command.substring(spacer + 1);","lastModifiedDate":"2023-02-14"},{"lineNumber":145,"author":{"gitId":"anthonynmh"},"content":"        return todolist.findTimeslot(timeLength);","lastModifiedDate":"2023-02-14"},{"lineNumber":146,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":149,"author":{"gitId":"anthonynmh"},"content":"     * Creates a new Task.","lastModifiedDate":"2023-02-13"},{"lineNumber":150,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":151,"author":{"gitId":"anthonynmh"},"content":"     * @param command the user input","lastModifiedDate":"2023-02-13"},{"lineNumber":152,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the todolist to save the created Task","lastModifiedDate":"2023-02-13"},{"lineNumber":153,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of creation of Task, or error message","lastModifiedDate":"2023-02-13"},{"lineNumber":154,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":155,"author":{"gitId":"anthonynmh"},"content":"    public String createTask(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":156,"author":{"gitId":"anthonynmh"},"content":"        int lengthOfStringTodo \u003d 4;","lastModifiedDate":"2023-02-13"},{"lineNumber":157,"author":{"gitId":"anthonynmh"},"content":"        int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-02-13"},{"lineNumber":158,"author":{"gitId":"anthonynmh"},"content":"        if (spacer \u003d\u003d -1) {","lastModifiedDate":"2023-02-13"},{"lineNumber":159,"author":{"gitId":"anthonynmh"},"content":"            return \"Please enter in format \u0027todo \u003ctask\u003e\u0027\";","lastModifiedDate":"2023-02-13"},{"lineNumber":160,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":161,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":162,"author":{"gitId":"anthonynmh"},"content":"            String task \u003d command.substring(lengthOfStringTodo + 1);","lastModifiedDate":"2023-02-13"},{"lineNumber":163,"author":{"gitId":"anthonynmh"},"content":"            todolist.add(task);","lastModifiedDate":"2023-02-13"},{"lineNumber":164,"author":{"gitId":"anthonynmh"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":165,"author":{"gitId":"anthonynmh"},"content":"            return (\"Please enter in format \u0027todo \u003ctask\u003e\u0027\");","lastModifiedDate":"2023-02-13"},{"lineNumber":166,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"anthonynmh"},"content":"        return todolist.list();","lastModifiedDate":"2023-02-05"},{"lineNumber":168,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":169,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":171,"author":{"gitId":"anthonynmh"},"content":"     * Creates a new Deadline task.","lastModifiedDate":"2023-02-13"},{"lineNumber":172,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":173,"author":{"gitId":"anthonynmh"},"content":"     * @param command the user input","lastModifiedDate":"2023-02-13"},{"lineNumber":174,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the todolist to save the created Task","lastModifiedDate":"2023-02-13"},{"lineNumber":175,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of creation of Deadline, or error message","lastModifiedDate":"2023-02-13"},{"lineNumber":176,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":177,"author":{"gitId":"anthonynmh"},"content":"    public String createDeadlineTask(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":178,"author":{"gitId":"anthonynmh"},"content":"        boolean isValidCommand \u003d command.contains(\"/\");","lastModifiedDate":"2023-02-13"},{"lineNumber":179,"author":{"gitId":"anthonynmh"},"content":"        int lengthOfStringDeadline \u003d 8;","lastModifiedDate":"2023-02-13"},{"lineNumber":180,"author":{"gitId":"anthonynmh"},"content":"        if (isValidCommand) {","lastModifiedDate":"2023-02-13"},{"lineNumber":181,"author":{"gitId":"anthonynmh"},"content":"            int firstSlashIndex \u003d command.indexOf(\"/\");","lastModifiedDate":"2023-02-13"},{"lineNumber":182,"author":{"gitId":"anthonynmh"},"content":"            String task \u003d command.substring(lengthOfStringDeadline + 1, firstSlashIndex);","lastModifiedDate":"2023-02-13"},{"lineNumber":183,"author":{"gitId":"anthonynmh"},"content":"            String time \u003d command.substring(firstSlashIndex + 1);","lastModifiedDate":"2023-02-13"},{"lineNumber":184,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":185,"author":{"gitId":"anthonynmh"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":186,"author":{"gitId":"anthonynmh"},"content":"                LocalDate deadlineParsed \u003d LocalDate.parse(time);","lastModifiedDate":"2023-02-13"},{"lineNumber":187,"author":{"gitId":"anthonynmh"},"content":"                validDateChecker(deadlineParsed);","lastModifiedDate":"2023-02-13"},{"lineNumber":188,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(task, deadlineParsed);","lastModifiedDate":"2023-02-13"},{"lineNumber":189,"author":{"gitId":"anthonynmh"},"content":"            } catch (NotValidDateException e) {","lastModifiedDate":"2023-02-13"},{"lineNumber":190,"author":{"gitId":"anthonynmh"},"content":"                System.out.println(e);","lastModifiedDate":"2023-02-13"},{"lineNumber":191,"author":{"gitId":"anthonynmh"},"content":"                return \"Please enter date that is current.\";","lastModifiedDate":"2023-02-13"},{"lineNumber":192,"author":{"gitId":"anthonynmh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":193,"author":{"gitId":"anthonynmh"},"content":"                return (\"Wrong date format\\nInput date format \u0027event \u003ctask\u003e /\u003cYYYY-MM-DD\u003e\u0027\");","lastModifiedDate":"2023-02-13"},{"lineNumber":194,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":195,"author":{"gitId":"anthonynmh"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":196,"author":{"gitId":"anthonynmh"},"content":"            return (\"Please enter in format \u0027deadline \u003ctask\u003e /\u003cdeadline\u003e\u0027\");","lastModifiedDate":"2023-02-13"},{"lineNumber":197,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":198,"author":{"gitId":"anthonynmh"},"content":"        return todolist.list();","lastModifiedDate":"2023-02-05"},{"lineNumber":199,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":200,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":201,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":202,"author":{"gitId":"anthonynmh"},"content":"     * Creates a new Event task.","lastModifiedDate":"2023-02-13"},{"lineNumber":203,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":204,"author":{"gitId":"anthonynmh"},"content":"     * @param command the user input","lastModifiedDate":"2023-02-13"},{"lineNumber":205,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the todolist to save the created Task","lastModifiedDate":"2023-02-13"},{"lineNumber":206,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of creation of Event, or error message","lastModifiedDate":"2023-02-13"},{"lineNumber":207,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":208,"author":{"gitId":"anthonynmh"},"content":"    public String createEventTask(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":209,"author":{"gitId":"anthonynmh"},"content":"        int lengthOfStringEvent \u003d 5;","lastModifiedDate":"2023-02-13"},{"lineNumber":210,"author":{"gitId":"anthonynmh"},"content":"        int firstSlashIndex \u003d command.indexOf(\"/\");","lastModifiedDate":"2023-02-13"},{"lineNumber":211,"author":{"gitId":"anthonynmh"},"content":"        String timeString \u003d command.substring(firstSlashIndex + 1);","lastModifiedDate":"2023-02-13"},{"lineNumber":212,"author":{"gitId":"anthonynmh"},"content":"        boolean isValidCommand \u003d firstSlashIndex !\u003d -1 \u0026\u0026 timeString.contains(\"/\");","lastModifiedDate":"2023-02-16"},{"lineNumber":213,"author":{"gitId":"anthonynmh"},"content":"        if (isValidCommand) {","lastModifiedDate":"2023-02-13"},{"lineNumber":214,"author":{"gitId":"anthonynmh"},"content":"            int secondSlashIndex \u003d timeString.indexOf(\"/\") + firstSlashIndex + 1;","lastModifiedDate":"2023-02-13"},{"lineNumber":215,"author":{"gitId":"anthonynmh"},"content":"            String startTime \u003d command.substring(firstSlashIndex + 1, secondSlashIndex);","lastModifiedDate":"2023-02-13"},{"lineNumber":216,"author":{"gitId":"anthonynmh"},"content":"            String endTime \u003d command.substring(secondSlashIndex + 1);","lastModifiedDate":"2023-02-13"},{"lineNumber":217,"author":{"gitId":"anthonynmh"},"content":"            String task \u003d command.substring(lengthOfStringEvent + 1, firstSlashIndex);","lastModifiedDate":"2023-02-13"},{"lineNumber":218,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":219,"author":{"gitId":"anthonynmh"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":220,"author":{"gitId":"anthonynmh"},"content":"                LocalDate startTimeParsed \u003d LocalDate.parse(startTime);","lastModifiedDate":"2023-01-28"},{"lineNumber":221,"author":{"gitId":"anthonynmh"},"content":"                LocalDate endTimeParsed \u003d LocalDate.parse(endTime);","lastModifiedDate":"2023-01-28"},{"lineNumber":222,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(task, startTimeParsed, endTimeParsed);","lastModifiedDate":"2023-01-28"},{"lineNumber":223,"author":{"gitId":"anthonynmh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":224,"author":{"gitId":"anthonynmh"},"content":"                return (\"Wrong date format\\nInput date format \u0027event \u003ctask\u003e /\u003cYYYY-MM-DD\u003e/\u003cYYYY-MM-DD\u003e\u0027\");","lastModifiedDate":"2023-02-13"},{"lineNumber":225,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":226,"author":{"gitId":"anthonynmh"},"content":"        } else {","lastModifiedDate":"2023-02-13"},{"lineNumber":227,"author":{"gitId":"anthonynmh"},"content":"            return (\"\\tPlease enter in format \u0027event \u003ctask\u003e /\u003cstart\u003e/\u003cend\u003e\u0027\");","lastModifiedDate":"2023-02-13"},{"lineNumber":228,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":229,"author":{"gitId":"anthonynmh"},"content":"        return todolist.list();","lastModifiedDate":"2023-02-05"},{"lineNumber":230,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":231,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":232,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":233,"author":{"gitId":"anthonynmh"},"content":"     * Creates a new Delete task.","lastModifiedDate":"2023-02-13"},{"lineNumber":234,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":235,"author":{"gitId":"anthonynmh"},"content":"     * @param command the user input","lastModifiedDate":"2023-02-13"},{"lineNumber":236,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the todolist to save the created Task","lastModifiedDate":"2023-02-13"},{"lineNumber":237,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of creation of Delete, or error message","lastModifiedDate":"2023-02-13"},{"lineNumber":238,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":239,"author":{"gitId":"anthonynmh"},"content":"    public String createDeleteTask(String command, ToDoList todolist) {","lastModifiedDate":"2023-02-13"},{"lineNumber":240,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":241,"author":{"gitId":"anthonynmh"},"content":"            int spacer \u003d command.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":242,"author":{"gitId":"anthonynmh"},"content":"            int taskNum \u003d Integer.parseInt(command.substring(spacer + 1));","lastModifiedDate":"2023-01-28"},{"lineNumber":243,"author":{"gitId":"anthonynmh"},"content":"            taskExistChecker(todolist, taskNum);","lastModifiedDate":"2023-02-13"},{"lineNumber":244,"author":{"gitId":"anthonynmh"},"content":"            todolist.delete(taskNum);","lastModifiedDate":"2023-01-28"},{"lineNumber":245,"author":{"gitId":"anthonynmh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":246,"author":{"gitId":"anthonynmh"},"content":"            return \"Which task would you like to delete, sir?\";","lastModifiedDate":"2023-02-05"},{"lineNumber":247,"author":{"gitId":"anthonynmh"},"content":"        } catch (NoTaskFoundException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":248,"author":{"gitId":"anthonynmh"},"content":"            return \"Sir, you may not delete nonexistent tasks.\";","lastModifiedDate":"2023-02-05"},{"lineNumber":249,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":250,"author":{"gitId":"anthonynmh"},"content":"        return todolist.list();","lastModifiedDate":"2023-02-05"},{"lineNumber":251,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":252,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":253,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":254,"author":{"gitId":"anthonynmh"},"content":"     * Finds time (in days) until next deadline.","lastModifiedDate":"2023-02-14"},{"lineNumber":255,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-14"},{"lineNumber":256,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the current todolist","lastModifiedDate":"2023-02-14"},{"lineNumber":257,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of found time length, or error message","lastModifiedDate":"2023-02-14"},{"lineNumber":258,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":259,"author":{"gitId":"anthonynmh"},"content":"    public String findDaysUntilNextDeadline(ToDoList todolist) {","lastModifiedDate":"2023-02-14"},{"lineNumber":260,"author":{"gitId":"anthonynmh"},"content":"        return todolist.findDaysUntilNextDeadline();","lastModifiedDate":"2023-02-14"},{"lineNumber":261,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":262,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":263,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":264,"author":{"gitId":"anthonynmh"},"content":"     * Checks whether the Task number exists.","lastModifiedDate":"2023-01-28"},{"lineNumber":265,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":266,"author":{"gitId":"anthonynmh"},"content":"     * @param toDo the current ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":267,"author":{"gitId":"anthonynmh"},"content":"     * @param num the task number","lastModifiedDate":"2023-01-28"},{"lineNumber":268,"author":{"gitId":"anthonynmh"},"content":"     * @throws NoTaskFoundException If no task at specified number exists","lastModifiedDate":"2023-01-28"},{"lineNumber":269,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":270,"author":{"gitId":"anthonynmh"},"content":"    public void taskExistChecker(ToDoList toDo, int num) throws NoTaskFoundException {","lastModifiedDate":"2023-02-13"},{"lineNumber":271,"author":{"gitId":"anthonynmh"},"content":"        if (num \u003e toDo.getCount()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":272,"author":{"gitId":"anthonynmh"},"content":"            throw new NoTaskFoundException(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":273,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":274,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":275,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":276,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":277,"author":{"gitId":"anthonynmh"},"content":"     * Checks if date provided is not in the past.","lastModifiedDate":"2023-02-13"},{"lineNumber":278,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-13"},{"lineNumber":279,"author":{"gitId":"anthonynmh"},"content":"     * @param date date provided","lastModifiedDate":"2023-02-13"},{"lineNumber":280,"author":{"gitId":"anthonynmh"},"content":"     * @throws NotValidDateException If date not valid","lastModifiedDate":"2023-02-13"},{"lineNumber":281,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":282,"author":{"gitId":"anthonynmh"},"content":"    public void validDateChecker(LocalDate date) throws NotValidDateException {","lastModifiedDate":"2023-02-13"},{"lineNumber":283,"author":{"gitId":"anthonynmh"},"content":"        if (date.isBefore(Duke.getCurrDate())) {","lastModifiedDate":"2023-02-13"},{"lineNumber":284,"author":{"gitId":"anthonynmh"},"content":"            throw new NotValidDateException(\"Ensure date is not in the past.\");","lastModifiedDate":"2023-02-13"},{"lineNumber":285,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":286,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":287,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":287}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.io.File;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":" * Handles data read and write.","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"public class Storage {","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"    private String dataPath;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"    public Storage(String dataPath) {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"        this.dataPath \u003d dataPath;","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"     * Writes the tasks in current list onto text file.","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"     * Path of text file to be specified on instantiation.","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the ToDoList to be associated with this storage","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"     * @throws IOException If format of tasks saved incorrectly on text file","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"    public void saveTasks(ToDoList todolist) throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"        FileWriter fw \u003d new FileWriter(dataPath);","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c todolist.getCount(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"            fw.write(todolist.getTask(i) + System.lineSeparator());","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"        fw.close();","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"     * Writes the tasks in current list onto text file.","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"     * Path of text file to be specified on instantiation.","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"     * @param todolist the ToDoList to be associated with this storage","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"     * @throws FileNotFoundException If file not found at the path specified","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"    public void loadTasks(ToDoList todolist) throws FileNotFoundException {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tTasks from the previous session:\\n\");","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        Path path \u003d Paths.get(dataPath);","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"        File newFile \u003d new File(dataPath);","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"            if (!Files.exists(path)) {","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"                Files.createDirectories(path.getParent());","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"                boolean success \u003d newFile.createNewFile();","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"                assert success : \"File cannot be created.\";","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"File can\u0027t be loaded.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"        Scanner s \u003d new Scanner(newFile);","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"            String curr \u003d s.nextLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"            String taskType \u003d curr.substring(1, 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"            System.out.println(\"\\t\" + curr);","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"            switch (taskType) {","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"            case \"T\":","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(curr.substring(7));","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"            case \"D\":","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"                int firstColonD \u003d curr.indexOf(\":\");","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"                int firstBracketD \u003d curr.indexOf(\"(\");","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"                String taskD \u003d curr.substring(7, firstBracketD - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"                String time \u003d curr.substring(firstColonD + 2, curr.length() - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"                LocalDate startTimeParsed \u003d LocalDate.parse(time, formatter);","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(taskD, startTimeParsed);","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"            case \"E\":","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"                int firstColonE \u003d curr.indexOf(\":\");","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"                int secondColonE \u003d curr.substring(firstColonE + 1).indexOf(\":\") + firstColonE + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"                int firstBracketE \u003d curr.indexOf(\"(\");","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"                String startTime \u003d curr.substring(firstColonE + 2, secondColonE - 6);","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"anthonynmh"},"content":"                String endTime \u003d curr.substring(secondColonE + 2, curr.length() - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"                String taskE \u003d curr.substring(7, firstBracketE - 1);","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"                LocalDate startTimeParsedE \u003d LocalDate.parse(startTime, formatter);","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"                LocalDate endTimeParsed \u003d LocalDate.parse(endTime, formatter);","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"anthonynmh"},"content":"                todolist.add(taskE, startTimeParsedE, endTimeParsed);","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"anthonynmh"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"anthonynmh"},"content":"            default:","lastModifiedDate":"2023-02-04"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":102}},{"path":"src/main/java/seedu/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":" * Handles the tasks relating to the ToDoList","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"public class Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"    private int id;","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    private String task;","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-13"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Task.","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     * @param id the is associated with this Task","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     * @param task task description","lastModifiedDate":"2023-02-04"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"    public Task(int id, String task) {","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-13"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"     * Prints the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"     * @return This task","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"        return isDone ? \"[x] \" + task : \"[ ] \" + task;","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"     * Marks the current task as done.","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"     * @param index the task number to mark","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"    public void markDone(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tCongratulations, Mr Stark. You have completed task \" + index);","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t\" + printTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"     * Unmarks the current task; mark current task undone.","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"     * @param index the task number to unmark","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-13"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tjarvis.Task \" + index + \" has been unmarked.\");","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t\" + printTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"     * Returns the unique id associated with the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"     * @return Id","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"    public int getId() {","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"        return this.id;","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"     * Checks if current task is completed.","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"     * @return boolean of done-ness","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"        return this.isDone;","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"     * Prints the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"     * @return The current task","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"    public String getTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"        return this.task;","lastModifiedDate":"2023-01-17"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"    public boolean hasTask(String task) {","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"        return (this.task.contains(task));","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"anthonynmh":85}},{"path":"src/main/java/seedu/duke/ToDoList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.util.List;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":" * The ToDoList class manages and stores Tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"public class ToDoList {","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    private List\u003cTask\u003e todolist;","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"    private int count \u003d 0;","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"    public ToDoList() {","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"        todolist \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"     * Lists all tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    public String list() {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"        String res \u003d \"\\tTasks for Tony Stark:\\n\";","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"        res +\u003d \"\\t--------------------------\\n\";","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"            String temp \u003d \"\\t\" + (i + 1) + todolist.get(i).printTask() + \"\\n\";","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"            res +\u003d temp;","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"        res +\u003d \"\\t--------------------------\\n\";","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"        return res;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"anthonynmh"},"content":"     * Prints the current task.","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task to print task","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"anthonynmh"},"content":"     * @return the task at specified index","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"anthonynmh"},"content":"    public String getTask(int index) {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"anthonynmh"},"content":"        return todolist.get(index).printTask();","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Todo.","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"anthonynmh"},"content":"     * @param task task to be instantiated","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"anthonynmh"},"content":"    public void add(String task) {","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"anthonynmh"},"content":"        Task t \u003d new Todo(count, task);","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"anthonynmh"},"content":"        todolist.add(count, t);","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"anthonynmh"},"content":"        count++;","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tI have added task: \" + t.getTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"anthonynmh"},"content":"     * @param task task to be instantiated","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"anthonynmh"},"content":"     * @param time deadline of task","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"anthonynmh"},"content":"    public void add(String task, LocalDate time) {","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"anthonynmh"},"content":"        Task t \u003d new Deadline(count, task, time);","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"anthonynmh"},"content":"        todolist.add(count, t);","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"anthonynmh"},"content":"        count++;","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tI have added task: \" + t.getTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":69,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tDue: \" + time);","lastModifiedDate":"2023-01-17"},{"lineNumber":70,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":72,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Event.","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"anthonynmh"},"content":"     * @param task task to be instantiated","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"anthonynmh"},"content":"     * @param startTime starting time of event","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"anthonynmh"},"content":"     * @param endTime ending time of event","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"anthonynmh"},"content":"    public void add(String task, LocalDate startTime, LocalDate endTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"anthonynmh"},"content":"        Task t \u003d new Event(count, task, startTime, endTime);","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"anthonynmh"},"content":"        todolist.add(count, t);","lastModifiedDate":"2023-01-17"},{"lineNumber":83,"author":{"gitId":"anthonynmh"},"content":"        count++;","lastModifiedDate":"2023-01-17"},{"lineNumber":84,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":85,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tI have added task: \" + t.getTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":86,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tStarts: \" + startTime);","lastModifiedDate":"2023-01-17"},{"lineNumber":87,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tEnds: \" + endTime);","lastModifiedDate":"2023-01-17"},{"lineNumber":88,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":89,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":90,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":91,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"anthonynmh"},"content":"     * Deletes the task at specified index.","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"anthonynmh"},"content":"    public void delete(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":97,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":98,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\tDeleted: \" + todolist.get(index - 1).printTask());","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"anthonynmh"},"content":"        System.out.println(\"\\t--------------------------\");","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"anthonynmh"},"content":"        todolist.remove(index - 1);","lastModifiedDate":"2023-01-17"},{"lineNumber":101,"author":{"gitId":"anthonynmh"},"content":"        count--;","lastModifiedDate":"2023-01-17"},{"lineNumber":102,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":103,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":104,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"anthonynmh"},"content":"     * Marks the task at specified index as done.","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"anthonynmh"},"content":"    public void markDone(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":110,"author":{"gitId":"anthonynmh"},"content":"        todolist.get(index - 1).markDone(index);","lastModifiedDate":"2023-01-17"},{"lineNumber":111,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":112,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":113,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"anthonynmh"},"content":"     * Marks the task at specified index as not done.","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"anthonynmh"},"content":"     * @param index index of task","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"anthonynmh"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-01-17"},{"lineNumber":119,"author":{"gitId":"anthonynmh"},"content":"        todolist.get(index - 1).unmark(index);","lastModifiedDate":"2023-01-17"},{"lineNumber":120,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":121,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":122,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"anthonynmh"},"content":"     * Returns the last index of the current arrayList.","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"anthonynmh"},"content":"     * @return last index of arrayList","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"anthonynmh"},"content":"    public int getCount() {","lastModifiedDate":"2023-01-17"},{"lineNumber":128,"author":{"gitId":"anthonynmh"},"content":"        return count;","lastModifiedDate":"2023-01-17"},{"lineNumber":129,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":130,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":132,"author":{"gitId":"anthonynmh"},"content":"     * Returns boolean of whether todolist has specified tasks.","lastModifiedDate":"2023-02-04"},{"lineNumber":133,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-04"},{"lineNumber":134,"author":{"gitId":"anthonynmh"},"content":"     * @param task task description","lastModifiedDate":"2023-02-04"},{"lineNumber":135,"author":{"gitId":"anthonynmh"},"content":"     * @return boolean result","lastModifiedDate":"2023-02-04"},{"lineNumber":136,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":137,"author":{"gitId":"anthonynmh"},"content":"    public boolean hasTask(String task) {","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"anthonynmh"},"content":"            if (todolist.get(i).hasTask(task)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"anthonynmh"},"content":"                return true;","lastModifiedDate":"2023-02-13"},{"lineNumber":141,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"anthonynmh"},"content":"        return false;","lastModifiedDate":"2023-02-13"},{"lineNumber":144,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":147,"author":{"gitId":"anthonynmh"},"content":"     * Finds the specified task.","lastModifiedDate":"2023-02-14"},{"lineNumber":148,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-04"},{"lineNumber":149,"author":{"gitId":"anthonynmh"},"content":"     * @param task task description","lastModifiedDate":"2023-02-04"},{"lineNumber":150,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":151,"author":{"gitId":"anthonynmh"},"content":"    public String findTaskIfExist(String task) {","lastModifiedDate":"2023-02-14"},{"lineNumber":152,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"anthonynmh"},"content":"            if (todolist.get(i).hasTask(task)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"anthonynmh"},"content":"                return todolist.get(i).printTask();","lastModifiedDate":"2023-02-13"},{"lineNumber":155,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"anthonynmh"},"content":"        return (\"Task does not exist\");","lastModifiedDate":"2023-02-13"},{"lineNumber":158,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":160,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":161,"author":{"gitId":"anthonynmh"},"content":"     * Finds available timeslots","lastModifiedDate":"2023-02-14"},{"lineNumber":162,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-14"},{"lineNumber":163,"author":{"gitId":"anthonynmh"},"content":"     * @param timeLength task description","lastModifiedDate":"2023-02-14"},{"lineNumber":164,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":165,"author":{"gitId":"anthonynmh"},"content":"    public String findTimeslot(String timeLength) {","lastModifiedDate":"2023-02-14"},{"lineNumber":166,"author":{"gitId":"anthonynmh"},"content":"        return \"\";","lastModifiedDate":"2023-02-14"},{"lineNumber":167,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":168,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":169,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":170,"author":{"gitId":"anthonynmh"},"content":"     * Finds time (in days) until next deadline.","lastModifiedDate":"2023-02-14"},{"lineNumber":171,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-14"},{"lineNumber":172,"author":{"gitId":"anthonynmh"},"content":"     * @return Confirmation of found time length, or error message","lastModifiedDate":"2023-02-14"},{"lineNumber":173,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":174,"author":{"gitId":"anthonynmh"},"content":"    public String findDaysUntilNextDeadline() {","lastModifiedDate":"2023-02-14"},{"lineNumber":175,"author":{"gitId":"anthonynmh"},"content":"        LocalDate currEarliestDate \u003d null;","lastModifiedDate":"2023-02-14"},{"lineNumber":176,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":177,"author":{"gitId":"anthonynmh"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2023-02-14"},{"lineNumber":178,"author":{"gitId":"anthonynmh"},"content":"            Task currTask \u003d todolist.get(i);","lastModifiedDate":"2023-02-14"},{"lineNumber":179,"author":{"gitId":"anthonynmh"},"content":"            if (currTask instanceof Deadline) {","lastModifiedDate":"2023-02-14"},{"lineNumber":180,"author":{"gitId":"anthonynmh"},"content":"                boolean isFutureDate \u003d ((Deadline) currTask).getDeadline()","lastModifiedDate":"2023-02-14"},{"lineNumber":181,"author":{"gitId":"anthonynmh"},"content":"                        .isAfter(Duke.getCurrDate());","lastModifiedDate":"2023-02-14"},{"lineNumber":182,"author":{"gitId":"anthonynmh"},"content":"                if (!isFutureDate) {","lastModifiedDate":"2023-02-14"},{"lineNumber":183,"author":{"gitId":"anthonynmh"},"content":"                    continue;","lastModifiedDate":"2023-02-14"},{"lineNumber":184,"author":{"gitId":"anthonynmh"},"content":"                } else if (currEarliestDate \u003d\u003d null) {","lastModifiedDate":"2023-02-14"},{"lineNumber":185,"author":{"gitId":"anthonynmh"},"content":"                    currEarliestDate \u003d ((Deadline) currTask).getDeadline();","lastModifiedDate":"2023-02-14"},{"lineNumber":186,"author":{"gitId":"anthonynmh"},"content":"                } else if (currEarliestDate.isAfter(((Deadline) currTask).getDeadline())) {","lastModifiedDate":"2023-02-14"},{"lineNumber":187,"author":{"gitId":"anthonynmh"},"content":"                    currEarliestDate \u003d ((Deadline) currTask).getDeadline();","lastModifiedDate":"2023-02-14"},{"lineNumber":188,"author":{"gitId":"anthonynmh"},"content":"                }","lastModifiedDate":"2023-02-14"},{"lineNumber":189,"author":{"gitId":"anthonynmh"},"content":"            }","lastModifiedDate":"2023-02-14"},{"lineNumber":190,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":191,"author":{"gitId":"anthonynmh"},"content":"        if (currEarliestDate \u003d\u003d null) {","lastModifiedDate":"2023-02-14"},{"lineNumber":192,"author":{"gitId":"anthonynmh"},"content":"            return \"No deadlines in todolist.\";","lastModifiedDate":"2023-02-14"},{"lineNumber":193,"author":{"gitId":"anthonynmh"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":194,"author":{"gitId":"anthonynmh"},"content":"        long daysDiff \u003d Duke.getCurrDate().datesUntil(currEarliestDate).count();","lastModifiedDate":"2023-02-14"},{"lineNumber":195,"author":{"gitId":"anthonynmh"},"content":"        return (daysDiff + \" days until next deadline.\");","lastModifiedDate":"2023-02-14"},{"lineNumber":196,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":197,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"anthonynmh":197}},{"path":"src/main/java/seedu/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-14"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":" * A Todo Task.","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    private LocalDate dateCreated;","lastModifiedDate":"2023-02-14"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"     * Constructor for Todo.","lastModifiedDate":"2023-02-14"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-02-14"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     * @param id id of this Task","lastModifiedDate":"2023-02-14"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     * @param task task description","lastModifiedDate":"2023-02-14"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"    public Todo(int id, String task) {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"        super(id, task);","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"        dateCreated \u003d Duke.getCurrDate();","lastModifiedDate":"2023-02-14"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"anthonynmh"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"anthonynmh"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"anthonynmh"},"content":"        return this.isDone() ? \"[T][x] \" + this.getTask() : \"[T][ ] \" + this.getTask();","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":30}},{"path":"src/main/java/seedu/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":" * Deals with user interactions.","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"public class Ui {","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    public Ui() {};","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"     * Gets the next instruction line from user.","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"     * @return user command","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"    public String getNextCommand() {","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-04"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"        String command \u003d sc.nextLine();","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"        sc.close();","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"        return command;","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":23}},{"path":"src/test/java/seedu/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"    public void anotherDummyTest() {","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":19}},{"path":"src/test/java/seedu/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"public class EventTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    public void printTask_newTask_success() {","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"anthonynmh"},"content":"        LocalDate startTime \u003d LocalDate.parse(\"2023-01-01\");","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"anthonynmh"},"content":"        LocalDate endTime \u003d LocalDate.parse(\"2023-01-02\");","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(\"[E][ ] eat (Start: Jan 01 2023 | End: Jan 02 2023)\",","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"anthonynmh"},"content":"                new Event(0, \"eat\", startTime, endTime).printTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":21}},{"path":"src/test/java/seedu/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"package seedu.duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"public class TodoTest {","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"    @Test","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"    public void printTask_newTask_success() {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"        assertEquals(\"[T][ ] eat\", new Todo(0, \"eat\").printTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"anthonynmh"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"anthonynmh"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"anthonynmh":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"anthonynmh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"anthonynmh"},"content":"todo","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"anthonynmh"},"content":"todo buy bread","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"anthonynmh"},"content":"eat","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"anthonynmh"},"content":"mark","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"anthonynmh"},"content":"mark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"anthonynmh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"anthonynmh"},"content":"unmark","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"anthonynmh"},"content":"unmark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"anthonynmh"},"content":"hye","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"anthonynmh"},"content":"bye","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"anthonynmh":11}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"anthonynmh"},"content":"java -classpath ../bin Jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"anthonynmh"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"anthonynmh":2,"-":32}}]
