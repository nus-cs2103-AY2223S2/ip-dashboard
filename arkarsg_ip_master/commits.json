{"authorDailyContributionsMap":{"arkarsg":[{"date":"2023-01-17","commitResults":[{"hash":"a84005af710a532755626eea5f542321fed7b088","messageTitle":"test","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":0}}},{"hash":"8735837f6e5574c95a5cd06b650e16c6447540b7","messageTitle":"Delete test.txt","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":2}}}]},{"date":"2023-01-18","commitResults":[{"hash":"2975e60cad150349a9fb4c83b99860f26c70b61a","messageTitle":"Completed Level-1 to echo inputs and quit on command.","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":60,"deletions":6}}},{"hash":"e3555d8591176ff7dfd51d937cf60993c378b98e","messageTitle":"Add ability to store any text as Task object and display as list.","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":60,"deletions":6}}},{"hash":"ef998dbbbbeb9c5710ed8d47fc5e3776418c6929","messageTitle":"Implemented mark and unmark","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":49,"deletions":10}}},{"hash":"dae8e613f9ef992e39296830ccccd4ff118ec17e","messageTitle":"Added new Task classes and typesafe ArrayList of tasks","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":112,"deletions":10}}},{"hash":"76e1a1328e576360728eb25288ab89c13ab239c5","messageTitle":"Duke handles ToDo, Deadline and Event. Other strings show \"invalid command\"","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":10}}},{"hash":"aec79dae032898863f2f1188de2531d4da863964","messageTitle":"A-TextUITesting. Tasks now cannot be marked/unmarked if they are already in that state.","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":177,"deletions":0},"java":{"insertions":13,"deletions":8}}},{"hash":"c67d97d007d2566b8890e22676be960ec069794d","messageTitle":"Fixed Text-ui-test","messageBody":"","tags":["A-TextUITesting"],"fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":147},"sh":{"insertions":0,"deletions":0}}}]},{"date":"2023-01-19","commitResults":[{"hash":"b12a15076fc6d98147eec9211e71e3c84269214c","messageTitle":"Error handling with \"InvalidCommandException\" specific to Duke.","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":104,"deletions":40}}},{"hash":"592d37a91af6d663f1cac0a8d66ab0602374b425","messageTitle":"\"Delete\" implemented","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"txt":{"insertions":13,"deletions":25},"java":{"insertions":38,"deletions":1}}},{"hash":"d08aa6be18f5faa19b01338adc169f9e3670ef65","messageTitle":"Fixed some formatting issues","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":3}}},{"hash":"f392054ed6348a90fd8d8e175e2d3bcaaa55eb09","messageTitle":"Deleted unused variables","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":2}}},{"hash":"bb4aae54c6b193cfa0c26f7d5d113c9a495091ad","messageTitle":"Removed unused variables and packages","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":1}}}]},{"date":"2023-01-23","commitResults":[{"hash":"3ed24b1f1cea7b44eab8fd50f99b9b00ac936eb7","messageTitle":"refactor: command methods are wrapped in HashMap --------------------------------------------------------------------------------- Commands are now handled with a HashMap storing a string and a consumer. This removes the need for switch-case/if-else blocks and allow easier expansion for growing list of commands in the future.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":25,"deletions":32}}}]},{"date":"2023-01-24","commitResults":[{"hash":"9356b5c0c304c04b88c1f481518d82104dc79b7f","messageTitle":"feat: Added rudimentary save function.","messageBody":"All objects of class Task and its children are now serialisable. save feature serialises all tasks present at the end of the session and writes to duke.txt.\n","fileTypesAndContributionMap":{"java":{"insertions":34,"deletions":8}}},{"hash":"a2b3dfd25256622451bd706f9651cccb044c9434","messageTitle":"fix: Fixed duke.txt directory to save","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"c030cf8baecea6d528be5f1a6b5718cada42d3c4","messageTitle":"fix: Removed save features to support development in its own branch","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":14}}},{"hash":"c30884bdee72f425d4d22e7de39c135a8200ef0c","messageTitle":"Revert \"fix: Removed save features to support development in its own branch\"","messageBody":"This reverts commit c030cf8baecea6d528be5f1a6b5718cada42d3c4.\n","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":0}}},{"hash":"30ca1319a98b658690d663115394326134ae3f60","messageTitle":"feat: Save/ Load feature implemented.","messageBody":"Duke can now save each session to a .txt file and load from that file in the future sessions. Save takes in the ArrayList of Tasks and serializes through the Serializable interface. The byte stream is then written to \u0027duke.txt\u0027 file. The object is then retrieved in the future session. This is immediately assigned to the new session\u0027s ArrayList of Tasks.\n\nIf directory to duke.txt does not exist, it is created. If the directory and file exists, it is overwritten to the latest session of save.\n","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":8}}},{"hash":"f0dfd55676ed9aa04f0a5cef3095b2109c5359ab","messageTitle":"fix: removed redundant lines of code.","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"f0c0e32a6976d30b97c93cd22d3e8c3716e0a2da","messageTitle":"feat: Events and Deadlines now converts string to DateTime object.","messageBody":"This feature supports different formats for input and display to users for readability\n","fileTypesAndContributionMap":{"java":{"insertions":47,"deletions":12}}}]},{"date":"2023-01-26","commitResults":[{"hash":"95e181f82ab3928388720f08546963cbd39ef90e","messageTitle":"Add DukeIO","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":156,"deletions":82}}}]},{"date":"2023-01-27","commitResults":[{"hash":"623cd6378be97ce9c094db3059dfbef9bb6cb31c","messageTitle":"Fix UI messages and error messages","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":115,"deletions":52}}}]},{"date":"2023-01-29","commitResults":[{"hash":"299fa0ea248d0ae935f4ba3183d1084756d4fb1f","messageTitle":"fix: DukeIO implementation.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":55,"deletions":53}}},{"hash":"9a8db4b78b48799a30bc2ab5f32bb2af3c8a6878","messageTitle":"Add A-MoreOOP","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":139,"deletions":97}}},{"hash":"1325c426abe169176bbc65213c364532f0d86920","messageTitle":"Fix formatting issues with DukeIO","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":16}}},{"hash":"530eb45924e0dc035b18192be7fb39424b50f4b5","messageTitle":"Repackage classes into `duke` package","messageBody":"","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":615,"deletions":0}}},{"hash":"66465e4fdf4118b167eec0bd908aba649b632d2b","messageTitle":"Change processCommands from public to private","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"e8218233f1cf452807cd1f9aeb0d10ae0d095110","messageTitle":"Clean up directories","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":588}}}]},{"date":"2023-01-31","commitResults":[{"hash":"c5cf5a706d7d8c3eed1b42fe25220e2b8309705c","messageTitle":"Tests TaskList and ToDo classes with JUnit testing","messageBody":"","tags":["A-Jar","A-JUnit"],"fileTypesAndContributionMap":{"gradle":{"insertions":2,"deletions":2},"java":{"insertions":108,"deletions":12}}},{"hash":"2c6f197ce791fa0db9e50961d2b6fe821ead8703","messageTitle":"Repacks Duke into more packages for better abstraction","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":10}}},{"hash":"40e245bac55d870ac8bcb21bd9c54ccc67ec8073","messageTitle":"Fixes minor formatting","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":2}}}]},{"date":"2023-02-01","commitResults":[{"hash":"fc1320f73b3e827f69e15be2ddff60f0db7023c9","messageTitle":"Implements find, writes JavaDoc and follows coding standard.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":402,"deletions":15}}},{"hash":"b4ec0f241806322e9d6897787fd183e24f79bd0d","messageTitle":"Revert \"Implements find, writes JavaDoc and follows coding standard.\"","messageBody":"This reverts commit fc1320f73b3e827f69e15be2ddff60f0db7023c9.\n","fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":402}}},{"hash":"385c6dbdf5166478dba617c456eae374ae4f2751","messageTitle":"Adds JavaDoc for duke.Tasks and duke.Duke","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":167,"deletions":4}}},{"hash":"a2b279aff0031b57b82daaa281cf5ee4ecb0c5bb","messageTitle":"Add JavaDoc to duke.utils package.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":117,"deletions":1}}},{"hash":"66e1e097b7870e650d7912c3610773f19ef59c31","messageTitle":"Add JavaDoc for duke.InvalidCommandException","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"520d3a6a50bdad152be14ae1c4274f18162f0b5b","messageTitle":"Fixes formatting to follow Java Coding Standard","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":11}}},{"hash":"043cd742a4ae69850a8a7a9f69644acfab24a989","messageTitle":"Implements \"find\" function.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":82,"deletions":6}}},{"hash":"e97f7746baf1318271e1bd048bbfd67b84d4b1e1","messageTitle":"Resolve additional confilcts","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":264,"deletions":80}}}]},{"date":"2023-02-02","commitResults":[{"hash":"37a7d5be80b940dc5da76e1ca9db046b387e4d1d","messageTitle":"Fix DukeIo","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":226}}},{"hash":"0d8d7ab789acea2f69a2105ba883d50c23ff8765","messageTitle":"Fix DukeIo.java","messageBody":"","tags":["Level-9","A-JavaDoc","A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":228,"deletions":0}}},{"hash":"aaf036b991823739c9b5dc735ba5b7ed1381d07a","messageTitle":"A-CheckStyle","messageBody":"","tags":["A-CheckStyle"],"fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0},"java":{"insertions":150,"deletions":226}}}]},{"date":"2023-02-09","commitResults":[{"hash":"4e56060b90a303d93c57d3f518c7201cfec3ccfc","messageTitle":"Preliminary implementation of GUI for Duke","messageBody":"","fileTypesAndContributionMap":{"fxml":{"insertions":52,"deletions":0},"java":{"insertions":195,"deletions":29}}},{"hash":"90fe35d6e16a7fecf2ad66189375a14e87221ad3","messageTitle":"Refactors Duke.java","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":16,"deletions":1},"java":{"insertions":7,"deletions":30}}}]},{"date":"2023-02-11","commitResults":[{"hash":"55d563a0c6ff1e89ac53512fbdefa6c2674867aa","messageTitle":"Completes Level-10. Refactors for code quality.","messageBody":"","fileTypesAndContributionMap":{"fxml":{"insertions":5,"deletions":5},"java":{"insertions":714,"deletions":370}}},{"hash":"8a675400ccd3f3c150792b8fb424dafb1033e9f2","messageTitle":"Rename \"Tasks\" directory to \"tasks\".","messageBody":"The folder for package named \"Tasks\" does not follow Coding Standard and hence, renamed to \"tasks\".","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":0}}},{"hash":"d7cdb6df9c17da75afa048b58e6318aadde32042","messageTitle":"Fixes GUI issues.","messageBody":"GUI does not handle long outputs properly and wraps text. This leaves user with missing information.\nResponses are now `Text` instead of `Label` to work around this issue.\n\n`Text` as response is more suitable as `Label` are meant for controls. `Text` also allows dialog boxes to resize according to the length of the response.\n","fileTypesAndContributionMap":{"fxml":{"insertions":16,"deletions":9},"java":{"insertions":16,"deletions":12}}}]},{"date":"2023-02-12","commitResults":[{"hash":"a50a15c5d079e680ece2e50a33b27556ce962de1","messageTitle":"Implements a custom welcome message shown at start up.","messageBody":"","fileTypesAndContributionMap":{"fxml":{"insertions":28,"deletions":11},"java":{"insertions":10,"deletions":6}}},{"hash":"ac58b0f7c53186c7f3e7576d848112f17cae6afe","messageTitle":"Uses `assert` to test at various points of the code.","messageBody":"Assert is used in Parser class to check the assumption that methods parses inputs correctly. This is done by checking that the number of arguments returned after parsing equals the expected number of arguments. Assert is also used in Command classes. As retrieving arguments is hardcoded with the expected index of the arguments, it should be asserted that there are only the expected arguments present.\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":2}}},{"hash":"28e352353b6141fe81b238d389bca8b0e479d881","messageTitle":"Updates JavaDoc and CodeQuality","messageBody":"Deviating from the coding standards, there are missing JavaDocs and code quality with room for improvement.\n\nLet\u0027s\n- Add JavaDoc and header comments for all files\n- Refactor condition checks as its own methods\n","tags":["A-FullCommitMessage","A-Assertions"],"fileTypesAndContributionMap":{"java":{"insertions":119,"deletions":89}}},{"hash":"9c4151ce1779aeed6eb053fe855369deb7deed63","messageTitle":"Updates JavaDoc","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":0}}}]}]},"authorFileTypeContributionMap":{"arkarsg":{"java":1651,"md":0,"fxml":76,"sh":0,"bat":0,"gradle":22,"txt":18}},"authorContributionVariance":{"arkarsg":195622.34},"authorDisplayNameMap":{"arkarsg":"CS2103T-W15-2 ARKA..AUNG"}}
