[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"benedict733":19}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"Duke is a desktop tasks lists to allow you to keep track of your tasks and events easily.","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"It provides an easy to use Graphical User Interface for users to interact with Duke.","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"1. Ensure that you have `Java 11` or above installed ","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"2. Download the latest `duke.jar` from [here](https://github.com/benedict733/ip/releases)","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"3. Copy `duke.jar` to the folder you want to use.","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"4. Double-click the file to start Duke.","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"* Keep track of your tasks easily","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"  * Tasks include todos, tasks with deadlines and events","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"* Mark tasks as done/not done","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"* Snooze on tasks with deadlines","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"* Delete tasks when not needed ","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"* Find tasks by keywords","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"* Save details into text file for easily retrieval","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"## Usage","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"### Adding a task: `Todo`, `Event`, `Deadline`","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"Adds a task into Skylark.","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"The format for the command is as per follows:","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"1. `Todo`: `todo DESCRIPTION`","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"2. `Event`: `event DESCRIPTION /from WHEN /to WHEN`","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"3. `Deadline`: `deadline DESCRIPTION /by DATETIME`","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"**NOTE** ","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"* There is no particular format for `WHEN` used in `Event`","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"* The format for `DATETIME` used in `Deadline`:","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"  * `DATETIME`: `yyy-mm-ddThh:mm:ss`","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"Example of usage:","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"* `todo read book`","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"* `deadline return book /by 2023-03-28T23:59:59`","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"* `event cs2103 finals /from 26 April 9am /to 11am`","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"Expected outcome:","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"* After running `todo read book`","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"  ```","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"  Got it. I\u0027ve added this task:","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"    [T][ ] read book","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"  Now you have 1 tasks in the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"  ```","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"* After running `deadline return book /by 2023-03-28T23:59:59`","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"  ```","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"  Got it. I\u0027ve added this task:","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"    [D][ ] return book (by:2023-02-28T23:59:59)","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"  Now you have 2 tasks in the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"  ```","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"* After running `event cs2103 finals /from 26 April 9am /to 11am`","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"  ```","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"  Got it. I\u0027ve added this task:","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"    [E][ ] cs2103 finals (from : 26 April 9am to: 11am)","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"  Now you have 3 tasks in the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"  ```","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"### Lists the current tasks - `list`","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"Shows the list of tasks saved in Skylark","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"Example of usage:","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"* `list`","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"Expected outcome:","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"1. [T][ ] borrow book","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"2. [D][ ] return book (by:2023-02-28T23:59:59)","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"3. [E][ ] cs2103 finals (from : 26 April 9am to: 11am)","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"### Note for the following commands: `delete`, `mark`, `unmark`, `snooze`","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"1. If the index does not exist:","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"   * After running `delete/mark/unmark/snooze 8`","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"       ```","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"       Please enter a number from 1 to 2","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"       ```","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"2. If an integer is not entered:","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"   * After running `delete/mark/unmark/snooze six`","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"      ```","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"     Please enter a valid number","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"     ```","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"benedict733"},"content":"### Delete a Task - `delete`","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"benedict733"},"content":"Delete a particular task ","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"benedict733"},"content":"Example of usage:","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"benedict733"},"content":"* `delete INDEX`","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"benedict733"},"content":"**NOTE:** The index must be a valid `integer` representing the index of the task","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":97,"author":{"gitId":"benedict733"},"content":"Expected outcome:","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"benedict733"},"content":"* After running `delete 1`","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":100,"author":{"gitId":"benedict733"},"content":"    Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"benedict733"},"content":"        [T][ ] borrow book","lastModifiedDate":"2023-03-06"},{"lineNumber":102,"author":{"gitId":"benedict733"},"content":"    Now you have 2 tasks in the list","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":105,"author":{"gitId":"benedict733"},"content":"### Marking/Unmarking a Task as complete - `unmark`, `mark`","lastModifiedDate":"2023-03-06"},{"lineNumber":106,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":107,"author":{"gitId":"benedict733"},"content":"Marks/Unmarks a particular task from as done/undone","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"benedict733"},"content":"Example of usage:","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"benedict733"},"content":"* `mark INDEX`","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"benedict733"},"content":"* `unmark INDEX`","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"benedict733"},"content":"**NOTE:** The index must be a valid `integer` representing the index of the task","lastModifiedDate":"2023-03-06"},{"lineNumber":114,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":115,"author":{"gitId":"benedict733"},"content":"Expected outcome:","lastModifiedDate":"2023-03-06"},{"lineNumber":116,"author":{"gitId":"benedict733"},"content":"* After running `mark 1`","lastModifiedDate":"2023-03-06"},{"lineNumber":117,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":118,"author":{"gitId":"benedict733"},"content":"    Noted. I\u0027ve marked this task as done:","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"benedict733"},"content":"        [D][X] return book (by:2023-03-28T23:59:59)","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"benedict733"},"content":"* After running `unmark 1`","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":123,"author":{"gitId":"benedict733"},"content":"    Noted. I\u0027ve unmarked this task as done:","lastModifiedDate":"2023-03-06"},{"lineNumber":124,"author":{"gitId":"benedict733"},"content":"        [D][ ] return book (by:2023-03-28T23:59:59)","lastModifiedDate":"2023-03-06"},{"lineNumber":125,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":126,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":127,"author":{"gitId":"benedict733"},"content":"### Snoozing a Task - `snooze`","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":129,"author":{"gitId":"benedict733"},"content":"Snoozes a particular task for 1 day","lastModifiedDate":"2023-03-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":132,"author":{"gitId":"benedict733"},"content":"* `snooze INDEX`","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":134,"author":{"gitId":"benedict733"},"content":"**NOTE:** The index must be a valid `integer` representing the index of the task","lastModifiedDate":"2023-03-06"},{"lineNumber":135,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":136,"author":{"gitId":"benedict733"},"content":"Expected outcome:","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"benedict733"},"content":"* After running `snooze 1`","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"benedict733"},"content":"    Nice!. I\u0027ve snoozed this task:","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"benedict733"},"content":"        [D][ ] return book (by:2023-03-29T23:59:59)","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"benedict733"},"content":"**NOTE:** If the task at the index is not a `Deadline` task:","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"benedict733"},"content":"* After running `snooze 2`","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":145,"author":{"gitId":"benedict733"},"content":"    Please enter the index of a task which is a deadline","lastModifiedDate":"2023-03-06"},{"lineNumber":146,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":147,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":148,"author":{"gitId":"benedict733"},"content":"### Finding a particular task - `find`","lastModifiedDate":"2023-03-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":150,"author":{"gitId":"benedict733"},"content":"Finds any task that contains the keyword(s) given by the user","lastModifiedDate":"2023-03-06"},{"lineNumber":151,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":152,"author":{"gitId":"benedict733"},"content":"Example of usage:","lastModifiedDate":"2023-03-06"},{"lineNumber":153,"author":{"gitId":"benedict733"},"content":"* `find KEYWORDS`","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":156,"author":{"gitId":"benedict733"},"content":"* After running `find CS2103`","lastModifiedDate":"2023-03-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":158,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"benedict733"},"content":"    1. [E][ ] CS2103 finals (from : 26 April 9am to: 11am)","lastModifiedDate":"2023-03-06"},{"lineNumber":160,"author":{"gitId":"benedict733"},"content":"    ```","lastModifiedDate":"2023-03-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":162,"author":{"gitId":"benedict733"},"content":"**NOTE:** If there are no matching tasks:","lastModifiedDate":"2023-03-06"},{"lineNumber":163,"author":{"gitId":"benedict733"},"content":"* After running `find hehe`","lastModifiedDate":"2023-03-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2021-07-17"},{"lineNumber":165,"author":{"gitId":"benedict733"},"content":"    There are no tasks found with words:","lastModifiedDate":"2023-03-06"},{"lineNumber":166,"author":{"gitId":"benedict733"},"content":"    hehe","lastModifiedDate":"2023-03-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2021-07-17"},{"lineNumber":168,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":169,"author":{"gitId":"benedict733"},"content":"### Exiting the program - `bye`","lastModifiedDate":"2023-03-06"},{"lineNumber":170,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":171,"author":{"gitId":"benedict733"},"content":"Exits the program","lastModifiedDate":"2023-03-06"},{"lineNumber":172,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":173,"author":{"gitId":"benedict733"},"content":"Example of usage:","lastModifiedDate":"2023-03-06"},{"lineNumber":174,"author":{"gitId":"benedict733"},"content":"* `bye`","lastModifiedDate":"2023-03-06"},{"lineNumber":175,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":176,"author":{"gitId":"benedict733"},"content":"### Saving data","lastModifiedDate":"2023-03-06"},{"lineNumber":177,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":178,"author":{"gitId":"benedict733"},"content":"Tasks stored in Duke are automatically saved after any command.","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"-":27,"benedict733":151}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    private Label dialog;","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-03-04"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-03-04"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-03-04"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-04"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-03-04"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"    private void flip() {","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-03-04"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"        db.flip();","lastModifiedDate":"2023-03-04"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"        return db;","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"benedict733":60}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import java.util.Map;","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-04"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":" * The class that encompasses the main logic of running Duke, the name of the todo list","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * Minimum length of a string command is given by","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     * The length of the command +2 (for whitespace and","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"     * at least 1 letter for the command)","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"    static final String HOME_DIRECTORY \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"    static final Path DUKE_LIST_DIRECTORY \u003d Paths.get(HOME_DIRECTORY, \"SavedList.txt\");","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"    static final String GREETING \u003d \"Hello my name is Duke.\\nWhat can I do for you?\";","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"    static final String NAME \u003d \"DUKE\";","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"     * Returns Duke with the Path specified as filePath and loads the stored tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"     * @param filePath Path of where the tasks are stored","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"    public Duke(Path filePath) {","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"     * Returns Duke with the Path as the default path and loads the stored tasks","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"    public Duke() {","lastModifiedDate":"2023-03-04"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"        this(DUKE_LIST_DIRECTORY);","lastModifiedDate":"2023-03-04"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-03-04"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"        return;","lastModifiedDate":"2023-03-04"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"        /*","lastModifiedDate":"2023-03-04"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"        //Step 1. Formatting the window to look as expected.","lastModifiedDate":"2023-03-04"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"        //The container for the content of the chat to scroll.","lastModifiedDate":"2023-03-04"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-03-04"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-03-04"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-03-04"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-03-04"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-03-04"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-03-04"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-03-04"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-03-04"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-03-04"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"        stage.show();","lastModifiedDate":"2023-03-04"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2023-03-04"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-03-04"},{"lineNumber":88,"author":{"gitId":"benedict733"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-03-04"},{"lineNumber":89,"author":{"gitId":"benedict733"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":90,"author":{"gitId":"benedict733"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":91,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":92,"author":{"gitId":"benedict733"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":93,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":94,"author":{"gitId":"benedict733"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-03-04"},{"lineNumber":95,"author":{"gitId":"benedict733"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-03-04"},{"lineNumber":96,"author":{"gitId":"benedict733"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-03-04"},{"lineNumber":97,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":98,"author":{"gitId":"benedict733"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":99,"author":{"gitId":"benedict733"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-03-04"},{"lineNumber":100,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":101,"author":{"gitId":"benedict733"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-03-04"},{"lineNumber":102,"author":{"gitId":"benedict733"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-03-04"},{"lineNumber":103,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":104,"author":{"gitId":"benedict733"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":105,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":106,"author":{"gitId":"benedict733"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":107,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":108,"author":{"gitId":"benedict733"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":109,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":110,"author":{"gitId":"benedict733"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":111,"author":{"gitId":"benedict733"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":112,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":113,"author":{"gitId":"benedict733"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":114,"author":{"gitId":"benedict733"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-03-04"},{"lineNumber":115,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":116,"author":{"gitId":"benedict733"},"content":"        //Part 3. Add functionality to handle user input.","lastModifiedDate":"2023-03-04"},{"lineNumber":117,"author":{"gitId":"benedict733"},"content":"//        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-03-04"},{"lineNumber":118,"author":{"gitId":"benedict733"},"content":"//            handleUserInput();","lastModifiedDate":"2023-03-04"},{"lineNumber":119,"author":{"gitId":"benedict733"},"content":"//        });","lastModifiedDate":"2023-03-04"},{"lineNumber":120,"author":{"gitId":"benedict733"},"content":"//","lastModifiedDate":"2023-03-04"},{"lineNumber":121,"author":{"gitId":"benedict733"},"content":"//        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-03-04"},{"lineNumber":122,"author":{"gitId":"benedict733"},"content":"//            handleUserInput();","lastModifiedDate":"2023-03-04"},{"lineNumber":123,"author":{"gitId":"benedict733"},"content":"//        });","lastModifiedDate":"2023-03-04"},{"lineNumber":124,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":125,"author":{"gitId":"benedict733"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2023-03-04"},{"lineNumber":126,"author":{"gitId":"benedict733"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-03-04"},{"lineNumber":127,"author":{"gitId":"benedict733"},"content":"        // more code to be added here later","lastModifiedDate":"2023-03-04"},{"lineNumber":128,"author":{"gitId":"benedict733"},"content":"        */","lastModifiedDate":"2023-03-04"},{"lineNumber":129,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":130,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":131,"author":{"gitId":"benedict733"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-03-04"},{"lineNumber":132,"author":{"gitId":"benedict733"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-03-04"},{"lineNumber":133,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":134,"author":{"gitId":"benedict733"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-03-04"},{"lineNumber":135,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-04"},{"lineNumber":136,"author":{"gitId":"benedict733"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-03-04"},{"lineNumber":137,"author":{"gitId":"benedict733"},"content":"            return c.execute(tasks, storage);","lastModifiedDate":"2023-03-04"},{"lineNumber":138,"author":{"gitId":"benedict733"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-03-04"},{"lineNumber":139,"author":{"gitId":"benedict733"},"content":"            return e.getMessage();","lastModifiedDate":"2023-03-04"},{"lineNumber":140,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":141,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":142,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":143,"author":{"gitId":"benedict733"},"content":"     * Runs Duke, allowing the user to use interact with Duke","lastModifiedDate":"2023-03-01"},{"lineNumber":144,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":145,"author":{"gitId":"benedict733"},"content":"    public void run() {","lastModifiedDate":"2023-02-26"},{"lineNumber":146,"author":{"gitId":"benedict733"},"content":"        ui.greet();","lastModifiedDate":"2023-02-26"},{"lineNumber":147,"author":{"gitId":"benedict733"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-02-26"},{"lineNumber":148,"author":{"gitId":"benedict733"},"content":"        while (!isExit) {","lastModifiedDate":"2023-02-26"},{"lineNumber":149,"author":{"gitId":"benedict733"},"content":"            try {","lastModifiedDate":"2023-02-26"},{"lineNumber":150,"author":{"gitId":"benedict733"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-02-26"},{"lineNumber":151,"author":{"gitId":"benedict733"},"content":"                ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2023-02-26"},{"lineNumber":152,"author":{"gitId":"benedict733"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-02-26"},{"lineNumber":153,"author":{"gitId":"benedict733"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-02-26"},{"lineNumber":154,"author":{"gitId":"benedict733"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-02-26"},{"lineNumber":155,"author":{"gitId":"benedict733"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":156,"author":{"gitId":"benedict733"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-02-26"},{"lineNumber":157,"author":{"gitId":"benedict733"},"content":"            } finally {","lastModifiedDate":"2023-02-26"},{"lineNumber":158,"author":{"gitId":"benedict733"},"content":"                ui.showLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":159,"author":{"gitId":"benedict733"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":160,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":161,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":162,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":163,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":164,"author":{"gitId":"benedict733"},"content":"     * Creates Duke with the specified directory where the tasks are stored","lastModifiedDate":"2023-03-01"},{"lineNumber":165,"author":{"gitId":"benedict733"},"content":"     * In this case using the default DUKELISTDIRECTORY","lastModifiedDate":"2023-03-01"},{"lineNumber":166,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":167,"author":{"gitId":"benedict733"},"content":"     * @param args String[] of any input","lastModifiedDate":"2023-03-01"},{"lineNumber":168,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":170,"author":{"gitId":"benedict733"},"content":"        new Duke(DUKE_LIST_DIRECTORY).run();","lastModifiedDate":"2023-03-02"},{"lineNumber":171,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"benedict733":170}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":" * Exception thrown from Duke\u0027s code.","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"     * Returns a DukeException with errorMessage stored","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"     * @param errorMessage String of the error message","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":15}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.Duke;","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"public class Launcher {","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"benedict733":14}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"public class Main extends Application {","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-03-04"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"            stage.setTitle(Duke.NAME);","lastModifiedDate":"2023-03-04"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"            stage.show();","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"benedict733":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    private TextField userInput;","lastModifiedDate":"2023-03-04"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    private Button sendButton;","lastModifiedDate":"2023-03-04"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"    private Duke duke;","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    private Stage stage;","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    public void initialize() {","lastModifiedDate":"2023-03-04"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-03-04"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-03-04"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"                DialogBox.getDukeDialog(Duke.GREETING, dukeImage)","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"        );","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"        duke \u003d d;","lastModifiedDate":"2023-03-04"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"    public void setStage(Stage stage) {","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"        this.stage \u003d stage;","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"    @FXML","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"        if (input.equals(new ExitCommand().toString())) {","lastModifiedDate":"2023-03-04"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"            this.stage.close();","lastModifiedDate":"2023-03-04"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-03-04"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-03-04"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-03-04"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-03-04"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"        );","lastModifiedDate":"2023-03-04"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"        userInput.clear();","lastModifiedDate":"2023-03-04"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"benedict733":67}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.command.AddTaskCommand;","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"import duke.command.SnoozeCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"import java.util.Map;","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":" * The Parser class that is used to take in and parse commands to be used for the correct purpose","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"public class Parser {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"    static final String VALID_COMMANDS \u003d \"bye, list, mark, unmark, delete, todo, deadline, event, find, snooze\";","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    static final String INVALID_COMMAND_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means. My valid commands are:\\n\"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"            + VALID_COMMANDS;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    static final HashMap\u003cString, String\u003e CORRECT_FORMAT \u003d new HashMap\u003c\u003e(Map.of(","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"            \"list\", \"list\",","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"            \"bye\", \"bye\",","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"            \"todo\", \"todo THE TASK\",","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"            \"deadline\", \"deadline THE TASK /by yyyy-mm-ddThh:mm:ss\",","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"            \"event\", \"event THE TASK /from TIME /to TIME\",","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"            \"mark\", \"mark INDEX\",","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"            \"unmark\", \"unmark INDEX\",","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"            \"delete\", \"delete INDEX\",","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"            \"find\", \"find WORDS\",","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"            \"snooze\", \"snooze INDEX\"","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"    ));","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"     * Returns the correct Command given by the string input","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"     * @param fullCommand String containing the input of the full command","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"     * @return cmd the correct type of Command","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the command does not exist or is in the wrong format","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"        String[] words \u003d fullCommand.split(\" \");","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"        if (!CORRECT_FORMAT.containsKey(words[0])) {","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"        Command cmd \u003d new Command();","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"            switch (words[0]) {","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"            case \"bye\":","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new ExitCommand();","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"            case \"list\":","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new ListCommand();","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"            case \"mark\":","lastModifiedDate":"2023-02-26"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new MarkCommand(words[1]);","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"            case \"unmark\":","lastModifiedDate":"2023-02-26"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new UnmarkCommand(words[1]);","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"            case \"delete\":","lastModifiedDate":"2023-02-26"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new DeleteCommand(words[1]);","lastModifiedDate":"2023-02-26"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"            case \"find\":","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new FindCommand(words[1]);","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-28"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"            case \"snooze\":","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new SnoozeCommand(words[1]);","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"            default:    // for tasks","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"                cmd \u003d new AddTaskCommand(fullCommand);","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(correctFormat(words[0]));","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"        return cmd;","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"    private static String correctFormat(String typeOfTask) {","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"        return String.format(\"Please enter in the correct format:\\n%s\", CORRECT_FORMAT.get(typeOfTask));","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":83}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"import java.nio.file.FileAlreadyExistsException;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"import java.util.List;","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":" * The Storage class that is used to store and read the list of Task(s)","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"public class Storage {","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    static final String IO_MESSAGE \u003d \"File is corrupted\";","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    static final String FILE_ERROR_MESSAGE \u003d \"File format of tasks is wrong.\";","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    static final String HOME_DIRECTORY \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    static final Path DEFAULT_DIRECTORY \u003d Paths.get(HOME_DIRECTORY, \"SavedList.txt\");","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"    private final Path filePath;","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     * Returns a Storage object with the filePath as the default Path","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"    public Storage() {","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"        this.filePath \u003d DEFAULT_DIRECTORY;","lastModifiedDate":"2023-03-04"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"     * Returns a Storage object with filePath stored as the Path","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"     * @param filePath Path of the stored list","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"     * Returns an ArrayList of Task(s) loaded from the filePath","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"     * @return ArrayList\u003cTask\u003e list of Task(s)","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if unable to read the file or the format of a line in the file is wrong","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"            return this.readSavedFile(this.filePath);","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(IO_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"     * Returns an ArrayList of Task(s) loaded from the Path given","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"     * @param path Path directory of stored list of task(s)","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"     * @return ArrayList\u003cTask\u003e list of Task(s)","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"     * @throws IOException if unable to read the file","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the format of a line in the file is wrong","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"    public ArrayList\u003cTask\u003e readSavedFile(Path path) throws IOException, DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"            Files.createFile(path);","lastModifiedDate":"2023-02-26"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"        } catch (FileAlreadyExistsException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"            ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"            List\u003cString\u003e savedList \u003d Files.readAllLines(path);","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"            for (String task : savedList) {","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"                try {","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"                    arr.add(readLineToTask(task));","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"                } catch (WrongTaskFormatException | ArrayIndexOutOfBoundsException wrongFormat) {","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"                    throw new DukeException(FILE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"                }","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"            return arr;","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"     * Reads the line taskDescription and formats it into the correct type of Task","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"     * @param taskDescription String description of the task","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"benedict733"},"content":"     * @return Task correct type of Task with information","lastModifiedDate":"2023-03-01"},{"lineNumber":89,"author":{"gitId":"benedict733"},"content":"     * @throws WrongTaskFormatException if the format of the taskDescription is wrong","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"benedict733"},"content":"    public Task readLineToTask(String taskDescription) throws WrongTaskFormatException {","lastModifiedDate":"2023-02-26"},{"lineNumber":92,"author":{"gitId":"benedict733"},"content":"        String[] items \u003d taskDescription.split(\" \\\\| \");","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"benedict733"},"content":"        boolean isDone \u003d getIsDone(items[1]);","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"benedict733"},"content":"        Task task \u003d new Task(taskDescription, isDone);","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"benedict733"},"content":"        switch(items[0]) {","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"benedict733"},"content":"            case \"T\":","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"benedict733"},"content":"                task \u003d new ToDo(items[2], isDone);","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"benedict733"},"content":"            case \"D\":","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"benedict733"},"content":"                task \u003d new Deadline(items[2], items[3], isDone);","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"benedict733"},"content":"            case \"E\":","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"benedict733"},"content":"                String[] timeOfEvent \u003d items[3].split(\"-\");","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"benedict733"},"content":"                task \u003d new Event(items[2], timeOfEvent[0], timeOfEvent[1], isDone);","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"benedict733"},"content":"                break;","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"benedict733"},"content":"            default:","lastModifiedDate":"2023-02-26"},{"lineNumber":107,"author":{"gitId":"benedict733"},"content":"                throw new WrongTaskFormatException(\"Invalid task.Task String Format\");","lastModifiedDate":"2023-02-26"},{"lineNumber":108,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":109,"author":{"gitId":"benedict733"},"content":"        return task;","lastModifiedDate":"2023-02-26"},{"lineNumber":110,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":111,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"benedict733"},"content":"     * Returns true if the doneString is 1 and false otherwise (0)","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"benedict733"},"content":"     * @param doneString String","lastModifiedDate":"2023-03-01"},{"lineNumber":116,"author":{"gitId":"benedict733"},"content":"     * @return boolean","lastModifiedDate":"2023-03-01"},{"lineNumber":117,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"benedict733"},"content":"    public boolean getIsDone(String doneString) {","lastModifiedDate":"2023-02-26"},{"lineNumber":119,"author":{"gitId":"benedict733"},"content":"        return doneString.equals(\"1\");","lastModifiedDate":"2023-02-26"},{"lineNumber":120,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":121,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":122,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":123,"author":{"gitId":"benedict733"},"content":"     * Saves the TaskList into the filePath","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":125,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList list of Tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":126,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":127,"author":{"gitId":"benedict733"},"content":"    public void saveList(TaskList tasks) {","lastModifiedDate":"2023-02-26"},{"lineNumber":128,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":129,"author":{"gitId":"benedict733"},"content":"            // no need to deleteIfExists as BufferedWriter automatically clears all prev input","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"benedict733"},"content":"            BufferedWriter fileWriter \u003d Files.newBufferedWriter(this.filePath);","lastModifiedDate":"2023-02-26"},{"lineNumber":131,"author":{"gitId":"benedict733"},"content":"            for (Task task : tasks.getTasks()) {","lastModifiedDate":"2023-02-26"},{"lineNumber":132,"author":{"gitId":"benedict733"},"content":"                fileWriter.write(task.saveString());","lastModifiedDate":"2023-02-26"},{"lineNumber":133,"author":{"gitId":"benedict733"},"content":"                fileWriter.newLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":134,"author":{"gitId":"benedict733"},"content":"            }","lastModifiedDate":"2023-02-26"},{"lineNumber":135,"author":{"gitId":"benedict733"},"content":"            fileWriter.close();","lastModifiedDate":"2023-02-26"},{"lineNumber":136,"author":{"gitId":"benedict733"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":137,"author":{"gitId":"benedict733"},"content":"            // unsure of what cases would throw IOException under write()","lastModifiedDate":"2023-03-01"},{"lineNumber":138,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":139,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":140,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":140}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":" * The Ui class that is used to interact with the user for input and output","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"public class Ui {","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"    private static final String LINE \u003d \"~~~~~~~~~~~~~~~~~~~~\";","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"     * Returns a Ui object with the input as the command line","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"    public Ui() {","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"     * Prints error if there is an issue with loading","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"        // error in reading the file","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"        print(\"error\");","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * Prints the String given","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * @param toBePrinted String","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"    public void print(String toBePrinted) {","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"        System.out.println(toBePrinted);","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"     * Prints the error message given in the format for errors","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"     * @param errorMessage String","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"        print(errorMsg(errorMessage));","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"     * Returns a String that formats the error message given","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"     * @param error String","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"     * @return String formatted error message","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"    public String errorMsg(String error) {","lastModifiedDate":"2023-02-26"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"        return String.format(\"☹ OOPS!!!\\n%s :-(\", error);","lastModifiedDate":"2023-02-26"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"     * Echoes the input, printing the command that was input","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"     * @param command String","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-26"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"    public void echo(String command) {","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"        System.out.println(command);","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"     * Returns a String of the name DUKE formatted","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"     * @return name String","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"    private String ownName() {","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"        String name \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"        return name;","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"     * Prints the greeting message for Duke","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"    public void greet() {","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"        print(String.format(\"Hello I am:\\n%sWhat can I do for you?\", ownName()));","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"     * Prints a line used to separate the inputs and outputs","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"    public void showLine() {","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"benedict733"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":91,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":92,"author":{"gitId":"benedict733"},"content":"     * Reads the command in the line and returns it as a String","lastModifiedDate":"2023-03-01"},{"lineNumber":93,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"benedict733"},"content":"     * @return String","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"benedict733"},"content":"    public String readCommand() {","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"benedict733"},"content":"        return this.sc.nextLine();","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":101,"author":{"gitId":"benedict733"},"content":"     * Closes the scanner as it is good practice","lastModifiedDate":"2023-03-01"},{"lineNumber":102,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":103,"author":{"gitId":"benedict733"},"content":"    public void closeUi() {","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"benedict733"},"content":"        this.sc.close();","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":106,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":106}},{"path":"src/main/java/duke/WrongTaskFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":" * Exception thrown if any of the Strings input to Tasks are in the wrong format","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"public class WrongTaskFormatException extends Exception {","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"     * Returns a WrongTaskFormatException with errorMessage stored","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"     * @param errorMessage String of the error message","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    public WrongTaskFormatException(String errorMessage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"benedict733":15}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"import duke.task.Event;","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":" * Represents the command to add the tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"    private final String typeOfTask;","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"     * Returns an AddTaskCommand with the command stored","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"     * @param command String of the command to be stored","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    public AddTaskCommand(String command) {","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"        super(command);","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"        this.typeOfTask \u003d command.split(\" \")[0];","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * Creates the correct type of task and adds the correct task to TaskList","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the new task created","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the task is in the wrong format","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"        try{","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"            Task task \u003d makeTask();","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"            tasks.add(task);","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"            ui.print(String.format(\"Got it. I\u0027ve added this task:\\n\\t%s\\nNow you have %d tasks in the list.\", task, tasks.size()));","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"        } catch (RuntimeException wrongFormat) {","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(\"Please enter the command in the correct format:\\n\" + correctFormat());","lastModifiedDate":"2023-02-26"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"        try{","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"            Task task \u003d makeTask();","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"            tasks.add(task);","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"            return String.format(\"Got it. I\u0027ve added this task:\\n\\t%s\\nNow you have %d tasks in the list.\", task, tasks.size());","lastModifiedDate":"2023-03-04"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"        } catch (RuntimeException wrongFormat) {","lastModifiedDate":"2023-03-04"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(\"Please enter the command in the correct format:\\n\" + correctFormat());","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"     * Returns the correct Task depending on the command that was entered","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"     * @return task Correct version of Task (ToDo, Event, Deadline)","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"     * @throws PatternSyntaxException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"     * @throws ArrayIndexOutOfBoundsException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"    private Task makeTask() throws PatternSyntaxException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-26"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"        Task task \u003d new Task(this.command);","lastModifiedDate":"2023-02-26"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"        String cmd \u003d this.command.replace(typeOfTask + \" \", \"\");","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"        switch (typeOfTask) {","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"            task \u003d new ToDo(cmd);","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"            break;","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"            task \u003d new Deadline(cmd);","lastModifiedDate":"2023-02-26"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"            break;","lastModifiedDate":"2023-02-26"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"        case \"event\":","lastModifiedDate":"2023-02-26"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"            task \u003d new Event(cmd);","lastModifiedDate":"2023-02-26"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"            break;","lastModifiedDate":"2023-02-26"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"        return task;","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"     * Returns the correct string format for the type of task that is stored in the AddTaskCommand","lastModifiedDate":"2023-02-28"},{"lineNumber":88,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":89,"author":{"gitId":"benedict733"},"content":"     * @return String format","lastModifiedDate":"2023-02-28"},{"lineNumber":90,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":91,"author":{"gitId":"benedict733"},"content":"    private String correctFormat() {","lastModifiedDate":"2023-02-28"},{"lineNumber":92,"author":{"gitId":"benedict733"},"content":"        String format \u003d \"THE TASK\";","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"benedict733"},"content":"        switch(this.typeOfTask) {","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"benedict733"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-26"},{"lineNumber":95,"author":{"gitId":"benedict733"},"content":"            format \u003d \"todo [TASK]\";","lastModifiedDate":"2023-02-26"},{"lineNumber":96,"author":{"gitId":"benedict733"},"content":"            break;","lastModifiedDate":"2023-02-26"},{"lineNumber":97,"author":{"gitId":"benedict733"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-26"},{"lineNumber":98,"author":{"gitId":"benedict733"},"content":"            format \u003d \"deadline [TASK] /by yyyy-mm-ddThh:mm:ss\";","lastModifiedDate":"2023-02-26"},{"lineNumber":99,"author":{"gitId":"benedict733"},"content":"            break;","lastModifiedDate":"2023-02-26"},{"lineNumber":100,"author":{"gitId":"benedict733"},"content":"        case \"event\":","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"benedict733"},"content":"            format \u003d \"event [TASK] /from TIME /to TIME\";","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"benedict733"},"content":"        return format;","lastModifiedDate":"2023-02-26"},{"lineNumber":104,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":105,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":105}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" * Represents the basic Command, from which all other commands inherit from","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"public class Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    protected static final String INVALID_NUMBER_MESSAGE \u003d \"Please enter a valid number\";","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"    protected static final String EMPTY_LIST_MESSAGE \u003d \"You do not have any items in your list!\";","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    protected final String command;","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * Returns a Command with empty String command","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    public Command() {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"        this(\"\");","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     * Returns a Command with the command stored","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     * @param command String of the command to be stored","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    public Command(String command) {","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"     * Executes the task of the command on TaskList","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if an issue arises","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"        // do the commands purpose for command line","lastModifiedDate":"2023-03-04"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"        return;","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"     * Returns the String of the output of the execution","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"     * @return String empty string","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"        // do the commands purpose and returns as String for GUi","lastModifiedDate":"2023-03-04"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"        return \"\";","lastModifiedDate":"2023-03-04"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"    protected String listString(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"        String lst \u003d String.format(\"1. %s\", tasks.get(1));","lastModifiedDate":"2023-03-04"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"        for (int i \u003d 2; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2023-03-04"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"            lst +\u003d String.format(\"\\n%d. %s\", i, tasks.get(i));","lastModifiedDate":"2023-03-04"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"        return lst;","lastModifiedDate":"2023-03-04"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"     * Returns a boolean: true if the command is an ExitCommand, false otherwise","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"     * @return boolean if the command is an ExitCommand","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-26"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"        return false;","lastModifiedDate":"2023-02-26"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":77}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" * Represents the command to delete a particular task","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    private final String index;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * Returns a DeleteCommand with the index stored","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * @param index Integer as String","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    public DeleteCommand(String index) {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"        super(\"delete\");","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     * Deletes the task at the target index from TaskList","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the old task that was deleted","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the String index is not an integer OR if index is not in range of size of TaskList","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"            String taskDescription \u003d tasks.delete(idx);","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"            ui.print(output(taskDescription, tasks.size()));","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"            String taskDescription \u003d tasks.delete(idx);","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"            return output(taskDescription, tasks.size());","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"    private String output(String taskDescription, int size) {","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"        return String.format(\"Noted, I\u0027ve removed this task: \\n\\t%s\\nNow you have %d tasks in this list.\",","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"                taskDescription, size);","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":60}},{"path":"src/main/java/duke/command/EchoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":" * Represents the command to echo the input of the user","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"    private final String input;","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     * Returns an EchoCommand with the input stored","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     * @param input","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"    public EchoCommand(String input) {","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"     * Prints the input of the user","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the input of the user","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-26"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"        ui.print(input);","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-03-04"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"        return input;","lastModifiedDate":"2023-03-04"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":37}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":" * Represents the command to exit the application","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"     * Close the Ui","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"        storage.saveList(tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"        ui.closeUi();","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-03-04"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"        storage.saveList(tasks);","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"        return \"Goodbye. See you again!! :)\";","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * Returns true as this is an ExitCommand","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"     * @return true","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"        return true;","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    public String toString() {","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"        return \"bye\";","lastModifiedDate":"2023-03-04"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":43}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" * Represents the command used to find tasks containing words or phrases","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"     * Returns a FindCommand","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * @param wordsToFind String for word(s) to store to search in TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"    public FindCommand(String wordsToFind) {","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"        super(wordsToFind);","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"     * Finds tasks in TaskList which contains the words stored","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the tasks found with the words","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the String index is not an integer OR if index is not in range of size of TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"        TaskList tasksWithWords \u003d tasks.find(this.command);","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"        if (tasksWithWords.isEmpty()) {","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(noItemsFoundMessage());","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"        ui.print(listString(tasksWithWords));","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"        TaskList tasksWithWords \u003d tasks.find(this.command);","lastModifiedDate":"2023-03-04"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"        if (tasksWithWords.isEmpty()) {","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(noItemsFoundMessage());","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"        return listString(tasksWithWords);","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"    private String noItemsFoundMessage() {","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"        return String.format(\"There are no tasks found with words:\\n%s\", this.command);","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"benedict733":52}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" * Represents the command to list out all the tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"     * Lists the tasks in TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the old task that was deleted","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the String index is not an integer OR if index is not in range of size of TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"        ui.print(listString(tasks));","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"        return listString(tasks);","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":30}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" * Represents the command to mark a task as done at the index","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    private final String index;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * Returns a MarkCommand with the index stored","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * @param index Integer as String","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    public MarkCommand(String index) {","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"        super(\"mark\");","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     * Marks the task as done at the target index from TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the updated marked task","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the String index is not an integer OR if index is not in range of size of TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-02-26"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"            tasks.get(idx).setDone();","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"            ui.print(output(tasks.get(idx).toString()));","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"            tasks.get(idx).setDone();","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"            return output(tasks.get(idx).toString());","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-03-04"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"    private String output(String taskString) {","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"        return String.format(\"Nice! I\u0027ve marked this task as done: \\n\\t%s\", taskString);","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":65}},{"path":"src/main/java/duke/command/SnoozeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":" * Represents the command to mark a task as done at the index","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"public class SnoozeCommand extends Command {","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"    private static final String NOT_DEADLINE_MESSAGE \u003d \"Please enter the index of a task which is a deadline\";","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    private final String index;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * Returns a MarkCommand with the index stored","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"     * @param index Integer as String","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    public SnoozeCommand(String index) {","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"        super(\"snooze\");","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     * Marks the task as done at the target index from TaskList","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the updated marked task","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the String index is not an integer OR if index is not in range of size of TaskList","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"            Task task \u003d tasks.get(idx);","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"            if (task.isDeadline()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"                task.snooze();","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"            } else {","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"                throw new DukeException(NOT_DEADLINE_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"            }","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"            ui.print(output(task));","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"            Task task \u003d tasks.get(idx);","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"            if (task.isDeadline()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"                task.snooze();","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"            } else {","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"                throw new DukeException(NOT_DEADLINE_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"            }","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"            return output(task);","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"    private String output(Task task) {","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"        return String.format(\"Nice! I\u0027ve snoozed this task: \\n\\t%s\", task.toString());","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"benedict733":77}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.command;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" * Represents the command to unmark a task as done at the index","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    private final String index;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     * Returns an UnmarkCommand with the index stored","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     * @param index Integer as String","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"    public UnmarkCommand(String index) {","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"        super(\"unmark\");","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"     * Unmarks the task as done at the target index from TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     * Display the output via Ui showing the updated unmarked task","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     * Saves the file via Storage","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     * @param tasks TaskList of all the tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * @param ui Ui the user interface to interact with the user","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     * @param storage Storage used to save the TaskList to be retrieved in the future","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if the String index is not an integer OR if index is not in range of size of TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"            tasks.get(idx).setNotDone();","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"            ui.print(output(tasks.get(idx).toString()));","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"            int idx \u003d Integer.parseInt(this.index);","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"            tasks.get(idx).setNotDone();","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"            storage.saveList(tasks);","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"            return output(tasks.get(idx).toString());","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"        } catch (NumberFormatException notANumber) {","lastModifiedDate":"2023-03-04"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(Command.INVALID_NUMBER_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"    private String output(String taskString) {","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"        return String.format(\"Nice! I\u0027ve unmarked this task as done: \\n\\t%s\", taskString);","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":64}},{"path":"src/main/java/duke/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"todo borrow book","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"mark 2","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"list","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"bye","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":6}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.task;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":" * Represents a Deadline task","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"    private static final long DEFAULT_SNOOZE_DAYS \u003d 1;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * Returns a Deadline stored as not done","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * @param cmd String with format deadline [TASK] /by yyyy-mm-ddThh:mm:ss","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     * @throws PatternSyntaxException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"     * @throws ArrayIndexOutOfBoundsException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"     * @throws DateTimeParseException if the deadline was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"    public Deadline(String cmd)","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"            throws PatternSyntaxException, ArrayIndexOutOfBoundsException, DateTimeParseException {","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"        this(cmd, Task.IS_DONE);","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * Returns a Deadline with task and isDone stored","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * @param cmd String with format deadline [TASK] /by yyyy-mm-ddThh:mm:ss","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     * @param isDone boolean of if the Deadline is done","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"     * @throws PatternSyntaxException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"     * @throws ArrayIndexOutOfBoundsException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"     * @throws DateTimeParseException if the deadline was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"    public Deadline(String cmd, boolean isDone)","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"            throws PatternSyntaxException, ArrayIndexOutOfBoundsException, DateTimeParseException {","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"        this(cmd.split(\" /by \")[0],","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"                cmd.split(\" /by \")[1],","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"                isDone);","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"     * Returns a Deadline with task, deadline and isDone stored","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"     * @param task String of Deadline description to be stored","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"     * @param deadlineString String of deadline in format yyyy-mm-ddThh:mm:ss","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"     * @param isDone boolean of if the Deadline is done","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"     * @throws PatternSyntaxException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"     * @throws ArrayIndexOutOfBoundsException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"     @throws DateTimeParseException if the deadline was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"    public Deadline(String task, String deadlineString, boolean isDone)","lastModifiedDate":"2023-02-24"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"            throws PatternSyntaxException, ArrayIndexOutOfBoundsException, DateTimeParseException {","lastModifiedDate":"2023-02-24"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"        super(task, isDone);","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"        this.deadline \u003d LocalDateTime.parse(deadlineString);","lastModifiedDate":"2023-02-24"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"    public void snooze() {","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"        deadline \u003d deadline.plusDays(DEFAULT_SNOOZE_DAYS);","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"    public boolean isDeadline() {","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"        return true;","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"     * Return the String of the Deadline formatted to be displayed","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"        return String.format(\"[D]%s (by:%s)\", super.toString(), deadline);","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"     * Return the String of the Deadline used to be saved","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"    public String saveString() {","lastModifiedDate":"2023-02-23"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"        int done \u003d isDone() ? 1 : 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"        return String.format(\"D | %d | %s | %s\", done, getTask(), deadline);","lastModifiedDate":"2023-02-23"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"benedict733":87}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.task;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":" * Represents an Event task","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"    private final String from;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"    private final String to;","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"     * Returns an Event with task stored as not done","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * @param cmd String with format event [TASK] /from [WHEN] /to [WHEN]","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     * @throws PatternSyntaxException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"     * @throws ArrayIndexOutOfBoundsException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    public Event(String cmd) throws PatternSyntaxException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"        this(cmd, Task.IS_DONE);","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     * Returns an Event with task and isDone stored","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     * @param cmd String with format event [TASK] /from [WHEN] /to [WHEN]","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"     * @param isDone boolean of if the Event is done","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * @throws PatternSyntaxException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     * @throws ArrayIndexOutOfBoundsException if the command was not formatted correctly","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"    public Event(String cmd, boolean isDone) throws PatternSyntaxException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"        this(cmd.split(\" /\")[0],","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"                cmd.split(\" /\")[1].replace(\"from \", \"\"),","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"                cmd.split(\" /\")[2].replace(\"to \", \"\"),","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"                isDone);","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"     * Returns an Event with the task, from, to and isDone stored immediately","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"     * @param task String of Event description to be stored","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"     * @param from String of when Event starts","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"     * @param to String of when Event ends","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"     * @param isDone boolean of if the Event is done","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"    public Event(String task, String from, String to, boolean isDone) {","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"        super(task, isDone);","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"     * Return the String of the Event formatted to be displayed","lastModifiedDate":"2023-03-01"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), from, to);","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"     * Return the String of the Event used to be saved","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"    public String saveString() {","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"        int done \u003d isDone() ? 1 : 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"        return String.format(\"E | %d | %s | %s-%s\", done, getTask(), from, to);","lastModifiedDate":"2023-02-23"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"benedict733":72}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.task;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":" * Represents a Task, from which all other tasks inherit from","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"public class Task {","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"    protected static final boolean IS_DONE \u003d false;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"    private final String task;","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"     * Returns a Task with task stored that is not done","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * @param task String of task to be stored","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"    public Task(String task) {","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"        this(task, IS_DONE);","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"     * Returns a Task with task and isDone stored","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     * @param task String of task to be stored","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     * @param isDone boolean of if the task is done","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"    public Task(String task, boolean isDone) {","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"        assert task.length() \u003e 0 : \"Task description should not be empty!\";","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"     * Returns true if the task is done and false otherwise","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"     * @return isDone boolean","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"        return this.isDone;","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"     * Sets task as done","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"    public void setDone() {","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"     * Sets task as not done","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"    public void setNotDone() {","lastModifiedDate":"2023-03-02"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-04"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"     * Returns a boolean: true if the task is a Deadline, false otherwise","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"     * @return boolean if the command is a Deadline","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"    public boolean isDeadline() { return false; }","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"    public void snooze() {","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"     * Returns the String task without any formatting","lastModifiedDate":"2023-03-01"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"     * @return task String","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"    protected String getTask() {","lastModifiedDate":"2023-02-23"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"        return this.task;","lastModifiedDate":"2023-02-23"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"     * Returns the String of the task formatted to be displayed","lastModifiedDate":"2023-03-01"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-04"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"    public String toString() {","lastModifiedDate":"2023-02-04"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"        String markedAsDone \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2023-02-04"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"        return String.format(\"[%s] %s\", markedAsDone, task);","lastModifiedDate":"2023-02-04"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"     * Returns the String of the task used to be saved","lastModifiedDate":"2023-03-01"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"    public String saveString() {","lastModifiedDate":"2023-02-23"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"        int done \u003d isDone() ? 1 : 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":88,"author":{"gitId":"benedict733"},"content":"        return String.format(\"Task | %d | %s\", done, task);","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":90,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"benedict733":90}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.task;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":" * Represents the TaskList that is used to store the tasks using 1-based indexing","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"public class TaskList {","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"    private static final String NO_ITEMS_MESSAGE \u003d \"You do not have any items in your list!\";","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"     * Returns a new TaskList without any tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"        this(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"     * Returns a new TaskList containing the Tasks in tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"     * @param tasks ArrayList of Task(s)","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-26"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"    private String getIndexOutOfBoundsMessage() {","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"        return String.format(\"Please enter a number from 1 to %d\", this.size());","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"     * Returns the Task at the index","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"     * @param index int used to get the Task at index","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"     * @return Task at the index","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if index is not in range of size of TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"    public Task get(int index) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"            return tasks.get(index - 1);","lastModifiedDate":"2023-02-26"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(getIndexOutOfBoundsMessage());","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"benedict733"},"content":"     * Returns the size of the list","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":51,"author":{"gitId":"benedict733"},"content":"     * @return size int size of list","lastModifiedDate":"2023-03-01"},{"lineNumber":52,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":53,"author":{"gitId":"benedict733"},"content":"    public int size() {","lastModifiedDate":"2023-02-26"},{"lineNumber":54,"author":{"gitId":"benedict733"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-26"},{"lineNumber":55,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":56,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"benedict733"},"content":"     * Returns true if the TaskList has no items and false otherwise","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"benedict733"},"content":"     * @return isEmpty boolean","lastModifiedDate":"2023-03-01"},{"lineNumber":61,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":62,"author":{"gitId":"benedict733"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"benedict733"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"benedict733"},"content":"     * Adds the task given into the TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"benedict733"},"content":"     * @param task Task to be added","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"benedict733"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-02-26"},{"lineNumber":72,"author":{"gitId":"benedict733"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-02-26"},{"lineNumber":73,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":74,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"benedict733"},"content":"     * Deletes the Task at the index","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"benedict733"},"content":"     * @param index int used to delete the Task at index","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"benedict733"},"content":"     * @return String of the deleted Task toString()","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"benedict733"},"content":"     * @throws DukeException if index is not in range of size of TaskList","lastModifiedDate":"2023-03-01"},{"lineNumber":81,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":82,"author":{"gitId":"benedict733"},"content":"    public String delete(int index) throws DukeException {","lastModifiedDate":"2023-02-26"},{"lineNumber":83,"author":{"gitId":"benedict733"},"content":"        if (size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-26"},{"lineNumber":84,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(NO_ITEMS_MESSAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":86,"author":{"gitId":"benedict733"},"content":"        try {","lastModifiedDate":"2023-02-26"},{"lineNumber":87,"author":{"gitId":"benedict733"},"content":"            String taskDescription \u003d this.get(index).toString();","lastModifiedDate":"2023-02-26"},{"lineNumber":88,"author":{"gitId":"benedict733"},"content":"            this.tasks.remove(index-1);","lastModifiedDate":"2023-02-26"},{"lineNumber":89,"author":{"gitId":"benedict733"},"content":"            return taskDescription;","lastModifiedDate":"2023-02-26"},{"lineNumber":90,"author":{"gitId":"benedict733"},"content":"        } catch (IndexOutOfBoundsException badNumber) {","lastModifiedDate":"2023-02-26"},{"lineNumber":91,"author":{"gitId":"benedict733"},"content":"            throw new DukeException(getIndexOutOfBoundsMessage());","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-26"},{"lineNumber":93,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":94,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":95,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":96,"author":{"gitId":"benedict733"},"content":"     * Returns the ArrayList which stores the tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":97,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":98,"author":{"gitId":"benedict733"},"content":"     * @return ArrayList of Tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":99,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":100,"author":{"gitId":"benedict733"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-02-26"},{"lineNumber":101,"author":{"gitId":"benedict733"},"content":"        return this.tasks;","lastModifiedDate":"2023-02-26"},{"lineNumber":102,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":103,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":104,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":105,"author":{"gitId":"benedict733"},"content":"     * Returns a new TaskList with Tasks that contains the words provided","lastModifiedDate":"2023-03-01"},{"lineNumber":106,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":107,"author":{"gitId":"benedict733"},"content":"     * @param words String words to be found in Tasks","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"benedict733"},"content":"     * @return TaskList with only Tasks that contain the words","lastModifiedDate":"2023-03-01"},{"lineNumber":109,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"benedict733"},"content":"    public TaskList find(String words) {","lastModifiedDate":"2023-02-28"},{"lineNumber":111,"author":{"gitId":"benedict733"},"content":"        ArrayList\u003cTask\u003e tasksWithWord \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-28"},{"lineNumber":112,"author":{"gitId":"benedict733"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-02-28"},{"lineNumber":113,"author":{"gitId":"benedict733"},"content":"            if (task.getTask().contains(words)) {","lastModifiedDate":"2023-02-28"},{"lineNumber":114,"author":{"gitId":"benedict733"},"content":"                tasksWithWord.add(task);","lastModifiedDate":"2023-02-28"},{"lineNumber":115,"author":{"gitId":"benedict733"},"content":"            }","lastModifiedDate":"2023-02-28"},{"lineNumber":116,"author":{"gitId":"benedict733"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":117,"author":{"gitId":"benedict733"},"content":"        return new TaskList(tasksWithWord);","lastModifiedDate":"2023-02-28"},{"lineNumber":118,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":119,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":119}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.task;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import java.util.regex.PatternSyntaxException;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":" * Represents a ToDo task","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"     * Returns a ToDo stored as not done","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"     * @param task String of ToDo to be stored","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    public ToDo(String task) {","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"        super(task);","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"     * Returns a ToDo with task and isDone stored","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"     * @param task String of ToDo to be stored","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"     * @param isDone boolean of if the ToDo is done","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    public ToDo(String task, boolean isDone) {","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"        super(task, isDone);","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"benedict733"},"content":"     * Return the String of the ToDo formatted to be displayed","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"benedict733"},"content":"    public String toString() {","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"benedict733"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"benedict733"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"benedict733"},"content":"     * Return the String of the ToDo used to be saved","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"benedict733"},"content":"     *","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"benedict733"},"content":"     * @return String formatted String","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"benedict733"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"benedict733"},"content":"    @Override","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"benedict733"},"content":"    public String saveString() {","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"benedict733"},"content":"        int done \u003d isDone() ? 1 : 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":45,"author":{"gitId":"benedict733"},"content":"        return String.format(\"T | %d | %s\", done, getTask());","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":47,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"benedict733":47}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"benedict733":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"benedict733":19}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.task;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"public class TaskTest {","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"    @Test","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"    public void getTask_alphabetsNumbers_success() {","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"        String input \u003d \"abcdefADCDEF123456\";","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"        Task task \u003d new Task(input);","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"        assertEquals(input, task.getTask());","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    @Test","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"    public void saveString_markAsDone_success() {","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"        Task task \u003d new Task(\"the task\");","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"        task.setDone();","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"        assertEquals(\"Task | 1 | the task\", task.saveString());","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":20}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"package duke.task;","lastModifiedDate":"2023-02-26"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-26"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"public class ToDoTest {","lastModifiedDate":"2023-02-26"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"    @Test","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"benedict733"},"content":"    public void testStringUnmarked() {","lastModifiedDate":"2023-02-26"},{"lineNumber":8,"author":{"gitId":"benedict733"},"content":"        ToDo task \u003d new ToDo(\"A123!@# task\");","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"benedict733"},"content":"        assertEquals(\"[T][ ] A123!@# task\", task.toString());","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"benedict733"},"content":"        assertEquals(\"T | 0 | A123!@# task\", task.saveString());","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":12,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":13,"author":{"gitId":"benedict733"},"content":"    @Test","lastModifiedDate":"2023-02-26"},{"lineNumber":14,"author":{"gitId":"benedict733"},"content":"    public void testStringMarked() {","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"benedict733"},"content":"        ToDo task1 \u003d new ToDo(\"A123!@# task\");","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"benedict733"},"content":"        task1.setDone();","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"benedict733"},"content":"        ToDo task2 \u003d new ToDo(\"A123!@# task\", true);","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"benedict733"},"content":"        assertEquals(\"[T][X] A123!@# task\", task1.toString());","lastModifiedDate":"2023-02-26"},{"lineNumber":20,"author":{"gitId":"benedict733"},"content":"        assertEquals(\"T | 1 | A123!@# task\", task1.saveString());","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"benedict733"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"benedict733"},"content":"        assertEquals(\"[T][X] A123!@# task\", task2.toString());","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"benedict733"},"content":"        assertEquals(\"T | 1 | A123!@# task\", task2.saveString());","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"benedict733"},"content":"    }","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"benedict733"},"content":"}","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"benedict733":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"benedict733"},"content":"todo borrow book","lastModifiedDate":"2023-02-06"},{"lineNumber":2,"author":{"gitId":"benedict733"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-02-06"},{"lineNumber":3,"author":{"gitId":"benedict733"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-02-06"},{"lineNumber":4,"author":{"gitId":"benedict733"},"content":"mark 1","lastModifiedDate":"2023-02-06"},{"lineNumber":5,"author":{"gitId":"benedict733"},"content":"list","lastModifiedDate":"2023-02-06"},{"lineNumber":6,"author":{"gitId":"benedict733"},"content":"bye","lastModifiedDate":"2023-02-06"}],"authorContributionMap":{"benedict733":6}}]
