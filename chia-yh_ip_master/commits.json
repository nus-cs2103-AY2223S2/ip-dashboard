{"authorDailyContributionsMap":{"chia-yh":[{"date":"2023-01-16","commitResults":[{"hash":"cc8d8bf6fb3f7dc35239e92734965c12d0a3fcef","messageTitle":"Update README.md Rename Duke.java to Book.java Update Book.java","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":10},"bat":{"insertions":1,"deletions":1},"md":{"insertions":2,"deletions":23}}},{"hash":"c846997d9db71bee40ef9e215fa107cb8b2d5905","messageTitle":"Add Echo, Exit","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":1}}},{"hash":"9b5d94e8b3ea7a59d227ce33863cf546fea15dd7","messageTitle":"Add Add, List","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":3}}},{"hash":"dc1b617e1bcbd47f932d7f4e354088701e542e25","messageTitle":"Add Task.java","messageBody":"","tags":["A-Classes"],"fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":0}}},{"hash":"627ba5a3d52c2ce4f3bb3a947f5d70bd3ed72b81","messageTitle":"Update Book.java to store tasks using the Task class","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":4}}},{"hash":"8a598b26378506ea0b996a519c502d0c8737cd7b","messageTitle":"Update Book.java, Task.java, add ToDo.java, Deadline,java, Event.java Modify Task.java into an abstract class Add ToDo.java, Deadline.java, Event.java extending from Task.java Modify Book.java to handle ToDo.java, Deadline.java, Event.java","messageBody":"","tags":["Level-4","A-Inheritance"],"fileTypesAndContributionMap":{"java":{"insertions":64,"deletions":9}}},{"hash":"c72c6a46b8e5d7e0b896542949aadf71b076bb77","messageTitle":"Update runtest.bat, input.txt, EXPECTED.TXT, Book.java, Event.java Add automated testing of text UIs with runtest.bat, input.txt, EXPECTED.TXT Fix print errors in Book.java, Event.java","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":11,"deletions":0},"java":{"insertions":3,"deletions":4},"bat":{"insertions":1,"deletions":1}}},{"hash":"7956f5bacb1957b81a2059711b225d672e07d794","messageTitle":"Add IncompleteInputException.java, InvalidInputException.java Add checked exceptions to handle invalid or incomplete inputs with IncompleteInputException.java and InvalidInputException.java Update Book.java to handle exceptions Update README.md to credit Kaomoji used","messageBody":"","tags":["Level-5","A-Exceptions"],"fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":9},"md":{"insertions":4,"deletions":1}}}]},{"date":"2023-01-17","commitResults":[{"hash":"1db8830752282462f207ab5e3e354ae3f4f2c739","messageTitle":"Update Book.java, README.md Add support for deleting tasks from the list in Book.java Removed Kaomoji due to display problems","messageBody":"","tags":["Level-6","A-Collections"],"fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":29},"md":{"insertions":8,"deletions":4}}}]},{"date":"2023-01-21","commitResults":[{"hash":"efb753fe09d9f9218bf12d4003c7374b9f3a6a6c","messageTitle":"Add Level-7 Save increment to save and load task list","messageBody":"Book task list is not saved on exit and is empty on startup.\n\nUsers lose all tracked tasks in task list on exit, ability to save and\nload tasks tracked in the task list allows users to access their tasks\nacross multiple sessions.\n\nLet\u0027s update Book to save tasks whenever task list changes and load\ntask list on startup using a file.\n\n* Update Book.java, Task.java, ToDo.java, Deadline.java, Event.java to\n  support function to save task list\n* Update EXPECTED.TXT for automated text UI testing\n* Update .gitignore to ignore save folder and file\n","fileTypesAndContributionMap":{"java":{"insertions":80,"deletions":4}}},{"hash":"3b86365135d3b36c8f1f599e97d3e12910c5771e","messageTitle":"Add Level-8 Dates and Times to parse String as LocalDateTime","messageBody":"Deadlines, Events store dates as String, allow for any text to be\nstored.\n\nDeadlines, Events treat any String as Date/Time, parsing String as\nLocalDateTime enforces storing of valid Date/Time, allows for formatting\nand meaningful use of stored value.\n\nLet\u0027s update Book to store Date/Time as LocalDateTime instead of\nString.\n\n* Update Book.java, Deadline.java, Event.java, Task.java to support\n  storage of Date/Time as LocalDateTime\n","fileTypesAndContributionMap":{"java":{"insertions":36,"deletions":19}}},{"hash":"1b8569d85fb69eeb2261936f2c7c093b1379819b","messageTitle":"Update Task.java, Deadline.java, Event.java * Fix issues with save and load with Date/Time from merging Level-7,   Level-8 to master * Update input.txt, EXPECTED.TXT for automated testing of text ui   with Date/Time * Update README.md formatting","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":2},"java":{"insertions":10,"deletions":7},"md":{"insertions":2,"deletions":0}}},{"hash":"1052ffc1c972a680ba5c51579fc53528e73fd4e0","messageTitle":"Extract Ui, Storage, Parse, TaskList classes Book class handles nearly all functionality.","messageBody":"With all functionality in a single class, code is harder to maintain and\ncomprehend. Extracting related code into different classes allows\nspecific functions to be confined within a single class, which is easier\nto maintain.\n\nLet\u0027s extract the following classes:\n* Ui: handle user interactions\n* Storage: handle loading tasks from file and saving tasks to file\n* Parser: handle interpretation of commands\n* TaskList: handle task list operations\n\nLet\u0027s extract the following Command classes to handle command execution:\n* Command: abstract class from which other Command classes inherit to\n  aid command execution\n* AddCommand: handle task list operation to add tasks\n* DeleteCommand: handle task list operation to delete tasks\n* MarkCommand: handle task list operation to mark tasks as complete\n* UnmarkCommand: handle task list operation to mark tasks as incomplete\n* ExitCommand: handle exit from Book\n\nReorganize exceptions into the following:\n* BookException: Exception class for Book from which other Book\n  exceptions inherit\n* IncompleteInputException\n* InvalidFormatException\n* InvalidInputException\n* LoadException\n* SaveException\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":329,"deletions":172}}}]},{"date":"2023-01-22","commitResults":[{"hash":"f025e3201e63ed43d02dd6e3734a397123edc1d2","messageTitle":"Organize classes into packages No organization of classes into packages.","messageBody":"Hard to manage classes with related functionality without packages.\n\nLet\u0027s divide related classes into packages,\n* book: general functionality for Book\n* book.command: handle execution of commands\n* book.exception: exceptions for Book\n* book.task: models for tasks\n\nPackages allow for easier management of related classes and prevents\nname conflicts.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":151,"deletions":18},"bat":{"insertions":2,"deletions":2},"md":{"insertions":1,"deletions":1}}},{"hash":"b0c5aba83663c3e1ec05bb55f3d9dd880a5562fe","messageTitle":"Add Gradle, Checkstyle No gradle, checkstyle support","messageBody":"No automation of tasks, checkstyle to enforce coding standard\n\nAdding gradle allows automation of some of the build tasks, adding\ncheckstyle plugin allows for detection of coding standard violation\n\nLet\u0027s set up gradle with the add-gradle-support branch and implement the\ncheckstyle plugin with checkstyle.xml, suppressions.xml from\ngithub.com/se-edu/addressbook-level3/tree/master/config/checkstyle to\nenforce the coding standard for the project\n\nUsing checkstyle is preferable to catch coding standard violations that\nmay be missed otherwise\n\nUpdate README.md to include credits for checkstyle.xml, suppressions.xml\nUpdate import statements to fulfill requirements of coding standard\n","tags":["A-Gradle","A-CheckStyle"],"fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0},"java":{"insertions":28,"deletions":51},"md":{"insertions":5,"deletions":1}}},{"hash":"b19425eb157cb070a961dcab098afe8b6e5afbec","messageTitle":"Add JUnit tests Text ui testing done with text-ui-test","messageBody":"Text ui testing tests expected output for given input, may not detect\nsome bugs\n\nAutomated testing with JUnit allows for unit testing to ensure\nindividual units function correctly\n\nLet\u0027s add unit tests for the public methods of several classes,\n* DeadlineTest: unit tests for Deadline class\n* EventTest: unit tests for Event class\n* ToDoTest: unit tests for ToDo class\n\nUnit tests are preferable as they allow testing of individual units to\ndetect bugs\n","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":130,"deletions":4}}},{"hash":"4ef3c4652bb36ab797effe5a2176a8eac978b9ef","messageTitle":"Set up function to package App as a JAR file Modify build.gradle to support ability to package Book as a JAR file for ease of distribution","messageBody":"Modify Ui.java to fix typo\n","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":2,"deletions":2},"java":{"insertions":5,"deletions":5}}},{"hash":"00f14a6f327914ca7ada0f3c5ec0bce9511fbd69","messageTitle":"Add JavaDoc comments No JavaDoc comments exist.","messageBody":"Lack of documentation hinders understanding of Book.\n\nAdding JavaDoc comments aids comprehension of Book by allowing for\ngeneration of explanatory tooltips and API documentation in HTML format.\n\nLet\u0027s add JavaDoc comments to non-private classes/methods, and\nnon-trivial private methods.\n","fileTypesAndContributionMap":{"java":{"insertions":404,"deletions":6}}}]},{"date":"2023-01-23","commitResults":[{"hash":"4970631e9c7575e7a76e96d432bb62b67f188b34","messageTitle":"Add Level-9 Find to search for tasks with a keyword Users of Book have no way of locating a particular task.","messageBody":"Function to locate tasks easily would improve usability of book.\n\nLet\u0027s update Book to allow users to search for tasks with a keyword,\n* FindCommand: implementation of a Command for listing Tasks which match\n  a keyword\n* Parser: update to parse input \"find \u003ckeyword\u003e\"\n* TaskList: update to return representation of all Tasks matching\n  keyword\n* Ui: update to print output from \"find \u003ckeyword\u003e\"\n* Task: update to provide keyword matching functionality\n","fileTypesAndContributionMap":{"java":{"insertions":43,"deletions":10}}},{"hash":"39b2a64c54463f9522eccc53527fb72d7813212d","messageTitle":"Add JavaDoc for new methods, update text-ui-test Add JavaDoc for FindCommand and related new methods Update text-ui-test with additional tests and updated format","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":5,"deletions":0},"java":{"insertions":40,"deletions":2},"bat":{"insertions":2,"deletions":2}}}]},{"date":"2023-01-28","commitResults":[{"hash":"af1e9cae9e433b298b1a1cbb723785cb4e55320e","messageTitle":"Add Level-10 GUI with JavaFX Book uses text-based UI.","messageBody":"Text-based UI is not really user-friendly, users could run into issues\nwith using Book.\n\nLet\u0027s add a GUI to Duke with JavaFX to improve usability,\n* Add Gui.java, DialogBox.java under book.gui to handle GUI for Book\n* Update Ui.java, book.command package to interact with Gui.java instead\n  of printing to System.out\n* Update Book.java to launch GUI instead\n* Modify book.task package, TaskList to fit GUI interaction better\n* Add Book_Icon.png, User_Icon.png for GUI\n* Update JavaDoc for relevant methods\n* Update build.gradle for JavaFX\n* Update tests for book.task package\n","fileTypesAndContributionMap":{"gradle":{"insertions":15,"deletions":0},"java":{"insertions":337,"deletions":114}}}]},{"date":"2023-02-03","commitResults":[{"hash":"888d7695961a53467f3007567c66e7446adc79db","messageTitle":"Add Assertions No use of assert to document important assumptions.","messageBody":"Lack of assert statements to verify assumptions about program state\nduring runtime, no mechanism to stop execution early due to possible\nbugs for safety.\n\nAdding assertions allow verification of assumptions about program state\nduring runtime to allow termination in the case of possible bugs for safety.\n\nLet\u0027s add assert statements to document important assumptions that\nshould hold,\n* Storage.java: assert that there is an associated save directory File and\n  save File on instantiation\n* Gui.java: assert that there is an associate Book on start()\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":0}}},{"hash":"182a55c396226c3984cfc57cc953c71ac333435a","messageTitle":"Improve Code Quality Code quality not examined recently.","messageBody":"Critically examining code quality and refactoring improves internal\nstructure, pays off technical debt accumulated.\n\nLet\u0027s critically examine the code and refactor to improve code quality\nwhere necessary.\n","fileTypesAndContributionMap":{"java":{"insertions":71,"deletions":7}}},{"hash":"eda22ec6e58b03f7a7a74e0c28ceccbfc3caa992","messageTitle":"Add assert statements to Gui.java Add assert statements to Gui.java to verify existence of image resources","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}}]}]},"authorFileTypeContributionMap":{"chia-yh":{"java":1437,"md":14,"fxml":0,"sh":0,"bat":2,"gradle":22,"txt":16}},"authorContributionVariance":{"chia-yh":52462.75},"authorDisplayNameMap":{"chia-yh":"CS2103T-T12-4 CHIA..HONG"}}
