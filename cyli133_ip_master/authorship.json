[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"# duke.duke project template","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"3. After that, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"cyli133":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"cyli133":17,"-":39}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"Duke is a desktop software built in Java that allows users to create, delete, update and view tasks of different types - Todos, Events and Deadlines. Users have access to the highly intuitive GUI which allows them to manage the tasks much more efficiently.","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"- [Features](#features)","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"  - [Adding a task : `todo | event | deadline`](#adding-a-task)","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"  - [Deleting a task : `delete`](#deleting-a-task)","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"  - [Listing all tasks : `list`](#listing-all-tasks)","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"  - [Searching a task : `search`](#searching-a-task)","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"  - [Updating task dates : `update`](#updating-task-dates)","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"  - [Exit application : `bye`](#exiting-application)","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"- [FAQ](#faq)","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"## Features","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"### Adding a task : `todo | event | deadline`","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Description of the feature.","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"### Deleting a task : `delete`","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Description of the feature.","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"### Listing all tasks : `list`","lastModifiedDate":"2023-02-16"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"Description of the feature.","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"### Searching a task : `search`","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"Description of the feature.","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"### Updating task dates : `update`","lastModifiedDate":"2023-02-16"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"Description of the feature.","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"### Exit application : `bye`","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"Description of the feature.","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"### `Keyword` - Describe action","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Describe the action and its outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"`keyword (optional arguments)`","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Description of the outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2021-07-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":53,"author":{"gitId":"cyli133"},"content":"## FAQ","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"cyli133":28,"-":25}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import java.util.concurrent.Executors;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":" * Defines the main logic of the Duke bot.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    public static boolean isBotOff \u003d false;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    private TaskList list;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    Duke() {","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"        this.storage \u003d new Storage(\"tasks.ser\");","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"        assert storage !\u003d null: \"New storage object was created\";","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"        this.list \u003d new TaskList(storage);","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    public String loadStorage() {","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        return storage.loadTasks(this.list);","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"     * Construct the response to user\u0027s command.","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"     * @param input The user\u0027s command.","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"     * @return The string representation of the response to user\u0027s command.","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    //@@author se-education.org","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    //Reused from https://se-education.org/guides/tutorials/javaFxPart3.html","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    //with minor modifications","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String output;","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            Parser.createCommand(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            output \u003d Parser.execute(this.list);","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            if(isBotOff) {","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                //@@author Paul S","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                //Reused from https://stackoverflow.com/questions/15747277/","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                //how-to-make-java-program-exit-after-a-couple-of-seconds","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                Executors.newSingleThreadScheduledExecutor().schedule(() -\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                        System.exit(0), 250, TimeUnit.MILLISECONDS);","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            output \u003d e.getMessage();","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return output;","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"cyli133":29,"-":22}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"//@@author se-education.org","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart3.html","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"//with minor modifications","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Launcher {","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"cyli133":6,"-":8}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.UI.MainWindow;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"//@@author se-education","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart3.html","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"//with minor modifications","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            stage.show();","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"cyli133":13,"-":21}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.command.*;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import duke.exception.InsufficientArguments;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import duke.exception.UnknownCommand;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":" * Implements the parsing of command line arguments.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":" * Then create and put the corresponding command with the parsed input as arguments.","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"public class Parser {","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    private static Command command;","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     * Parses the user\u0027s input and create the corresponding command with the user input.","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     * @param input The CLI input from the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"     * @throws DukeException","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    public static void createCommand (String input) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        switch (input) {","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        default: {","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"            parseLongCommand(input);","lastModifiedDate":"2023-02-13"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"        case \"list\": {","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"            Parser.command \u003d new List(input);","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"        case \"bye\": {","lastModifiedDate":"2023-02-13"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"            Parser.command \u003d new Bye();","lastModifiedDate":"2023-02-13"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"            break;","lastModifiedDate":"2023-02-13"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-13"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":39,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"cyli133"},"content":"     * Parses the long user input that contains arguments.","lastModifiedDate":"2023-02-13"},{"lineNumber":41,"author":{"gitId":"cyli133"},"content":"     * @param input User input that contains arguments.","lastModifiedDate":"2023-02-13"},{"lineNumber":42,"author":{"gitId":"cyli133"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-13"},{"lineNumber":43,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-02-13"},{"lineNumber":44,"author":{"gitId":"cyli133"},"content":"    private static void parseLongCommand(String input) throws DukeException {","lastModifiedDate":"2023-02-13"},{"lineNumber":45,"author":{"gitId":"cyli133"},"content":"        if (input.matches(\"mark+ [0-9]+\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"cyli133"},"content":"            Parser.command \u003d new Mark(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"cyli133"},"content":"        } else if (input.matches(\"unmark+ [0-9]+\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"cyli133"},"content":"            Parser.command \u003d new Unmark(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"cyli133"},"content":"        } else if (input.matches(\"delete+ [0-9]+\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"cyli133"},"content":"            Parser.command \u003d new Delete(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"cyli133"},"content":"        } else if (input.matches(\"find\\\\s.*$\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"cyli133"},"content":"            Parser.command \u003d new Find(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"cyli133"},"content":"        } else if (input.matches(\"update\\\\s.*$\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"cyli133"},"content":"            if (input.split(\" \").length \u003c 3) {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"cyli133"},"content":"                throw new InsufficientArguments(\"OOPS!!! The format of update must follow \" +","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"cyli133"},"content":"                        \"update [task_index] [d/MM/yyyy HHmm] [d/MM/yyyy HHmm]\");","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"cyli133"},"content":"            }","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"cyli133"},"content":"            Parser.command \u003d new Update(input);","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"cyli133"},"content":"        } else if (input.matches(\"^deadline\\\\s.*$\") || input.matches(\"^event\\\\s.*$\") ||","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"cyli133"},"content":"                input.matches(\"^todo\\\\s.*$\")) {","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"cyli133"},"content":"            if (input.split(\" \").length \u003c 2) {","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"cyli133"},"content":"                throw new InsufficientArguments(\"OOPS!!! The description of a \" +","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"cyli133"},"content":"                        input.split(\" \")[0] + \" cannot be empty.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"cyli133"},"content":"            } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"cyli133"},"content":"                Parser.command \u003d new TaskCreationCommands(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":66,"author":{"gitId":"cyli133"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"cyli133"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"cyli133"},"content":"            throw new UnknownCommand(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":71,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"cyli133"},"content":"    /***","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"cyli133"},"content":"     * Executes all commands waiting in the queue.","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"cyli133"},"content":"     * @param list The list of commands to execute.","lastModifiedDate":"2023-02-15"},{"lineNumber":75,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"cyli133"},"content":"    public static String execute (TaskList list){","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"cyli133"},"content":"        return Parser.command.execute(list);","lastModifiedDate":"2023-02-12"},{"lineNumber":78,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":79}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import java.io.*;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":" * Represents the local storage of task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"public class Storage {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    String fileName \u003d \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"     * Stores an ArrayList of Tasks in local hard disk.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"     * @param task The ArrayList of Tasks to store in the local hard disk.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    //@@author CHATGPT","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    //Reused from https://chat.openai.com/chat","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public String saveTasks(ArrayList\u003cTask\u003e task) {","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FileOutputStream file \u003d new FileOutputStream(this.fileName);","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            ObjectOutputStream output \u003d new ObjectOutputStream(file);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            output.writeObject(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            output.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return TextOutput.makeSucessSaveString();","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            return TextOutput.makeUnsuccessSaveString(e);","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Retrieves an ArrayList of Tasks from the local hard disk.","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return ArrayList of Tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    //@@author CHATGPT","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //Reused from https://chat.openai.com/chat","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String loadTasks(TaskList list) {","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            FileInputStream file \u003d new FileInputStream(this.fileName);","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            ObjectInputStream output \u003d new ObjectInputStream(file);","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            ArrayList\u003cTask\u003e task \u003d (ArrayList\u003cTask\u003e)output.readObject();","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            output.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            list.loadTasks(task);","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return TextOutput.makeSuccessLoadString();","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } catch (IOException | ClassNotFoundException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            list.loadTasks(newTaskList);","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return TextOutput.makeUnsuccessLoadString();","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"cyli133":23,"-":37}},{"path":"src/main/java/duke/UI/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.UI;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":" * Implements the custom control using FXML.","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"//@@author se-education.org","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart3.html","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private void flip() {","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        db.flip();","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return db;","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"cyli133":20,"-":41}},{"path":"src/main/java/duke/UI/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.UI;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"//@@author se-education.org","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart3.html","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"//with minor modifications","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                DialogBox.getDukeDialog(\"Hello, I am Duke, your personal task management bot! \\n\"","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                        + \"How can I be of your assistance today? \\n\", dukeImage)","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.duke \u003d d;","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(this.duke.loadStorage(), dukeImage)","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"cyli133":14,"-":49}},{"path":"src/main/java/duke/UI/TextOutput.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.UI;","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"import duke.task.*;","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":" * Displays the command line message.","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"public class TextOutput {","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    public static String makeDeleteString(Task deletedTask, int taskCount) {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + deletedTask +","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"                \"\\n\" + \"Now you have \" +  taskCount + \" tasks in the list.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    public static String makeAddString(String task, int number) {","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"        return \"Got it. I\u0027ve added this task: \\n\" + task","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"                + \"\\n\" + \"Now you have \" + number + \" tasks in the list.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"    public static String makeEchoString(String str){","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"        return str;","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"    public static String makeByeString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        return \"Hope to see you again soon!\";","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"    public static String makeTaskFoundString(TaskList taskList) {","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"        return \"Here are the matching tasks in your list: \\n\"","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"                + taskList.listTasks();","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"    public static String makeTaskNotFoundString() {","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"        return \"Sorry, there is no such tasks.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"    public static String makeListTaskString(TaskList taskList) {","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"        return \"Here are the tasks in your list: \\n\"","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"                + taskList.listTasks();","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"cyli133"},"content":"    public static String makeMarkDoneString(TaskList taskList, int taskNumber) {","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"cyli133"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"[\" + taskList.getTaskIcon(taskNumber)","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"cyli133"},"content":"                + \"] \" + taskList.getTaskContent(taskNumber);","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"cyli133"},"content":"    public static String makeMarkUndoneString(TaskList taskList, int taskNumber) {","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"cyli133"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\" + \"[\" + taskList.getTaskIcon(taskNumber)","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"cyli133"},"content":"                + \"] \" + taskList.getTaskContent(taskNumber);","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"cyli133"},"content":"    public static String makeSuccessLoadString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"cyli133"},"content":"        return \"Successfully retrieved past task list.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"cyli133"},"content":"    public static String makeUnsuccessLoadString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"cyli133"},"content":"        return \"No past task list found, created new task list.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"cyli133"},"content":"    public static String makeSucessSaveString() {","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"cyli133"},"content":"        return \"Successfully saved your current tasks.\";","lastModifiedDate":"2023-02-12"},{"lineNumber":61,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":63,"author":{"gitId":"cyli133"},"content":"    public static String makePostponeString(Task task) {","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"cyli133"},"content":"        return \"Successfully updated your task time to the following: \\n\"","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"cyli133"},"content":"                + task.toString();","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"cyli133"},"content":"    public static String makeDisplayFailString() {","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"cyli133"},"content":"        return \"Sorry, the indicated task type cannot be postponed. \\n\";","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":72,"author":{"gitId":"cyli133"},"content":"    public static String makeUnsuccessSaveString(Exception e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":73,"author":{"gitId":"cyli133"},"content":"        return \"Sorry, unable to save your current tasks due to \" + e.getMessage();","lastModifiedDate":"2023-02-12"},{"lineNumber":74,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":75,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"cyli133"},"content":"    public static String makeInvalidUpdateString() {","lastModifiedDate":"2023-02-15"},{"lineNumber":77,"author":{"gitId":"cyli133"},"content":"        return \"Sorry, your update command is not supported \\n\"","lastModifiedDate":"2023-02-15"},{"lineNumber":78,"author":{"gitId":"cyli133"},"content":"                + \"Please be reminded that the date format: \\n\"","lastModifiedDate":"2023-02-15"},{"lineNumber":79,"author":{"gitId":"cyli133"},"content":"                + \"update [task_index] [d/MM/yyyy HHmm] [d/MM/yyyy HHmm] for events \\n\"","lastModifiedDate":"2023-02-15"},{"lineNumber":80,"author":{"gitId":"cyli133"},"content":"                + \"or update [task_index] [d/MM/yyyy HHmm] for todos\";","lastModifiedDate":"2023-02-15"},{"lineNumber":81,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":82,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":83,"author":{"gitId":"cyli133"},"content":"    public static String makeErrorString() {","lastModifiedDate":"2023-02-15"},{"lineNumber":84,"author":{"gitId":"cyli133"},"content":"        return \"There seems to be an unknown error with your command, please rephrase and try again. \\n\";","lastModifiedDate":"2023-02-15"},{"lineNumber":85,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":86,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"cyli133":86}},{"path":"src/main/java/duke/command/Bye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.Duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":" * Implements the exit of the bot.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"public class Bye extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"     * Sets the isOffbot indicator to be true and print the exit message.","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"     * @param list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList list) {","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"        Duke.isBotOff \u003d true;","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeByeString();","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":22}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":" * Defines the common methods and variables for the commands.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    private String commandStorage;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"    public void setCommandStorage(String input) {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"        this.commandStorage \u003d input;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    };","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    public String getCommandStorage() {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"        return this.commandStorage;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    };","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    public abstract String execute(TaskList list);","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":17}},{"path":"src/main/java/duke/command/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":" * Implements the delete command.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"public class Delete extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"    public Delete(String str) {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     * Removes the selected task from the task list, and decrement the task count by 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     * Print the message to show the user the task deleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     * @param list The list of tasks from which task needs to be deleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList list) {","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        String content \u003d this.getCommandStorage();","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        assert content !\u003d \"\" : \"Content must not be empty\";","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        int taskNumber \u003d Character.getNumericValue(content.charAt(content.length() - 1));","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        assert taskNumber \u003e\u003d 0: \"Command argument must contain a task number\";","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"        taskNumber -\u003d 1; //to get to the correct index in array","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"        Task deletedTask \u003d list.deleteTask(taskNumber);","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeDeleteString(deletedTask, list.getTaskCount());","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":31}},{"path":"src/main/java/duke/command/Echo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":" * Implements echo functionality, which repeat the command that user gave.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"public class Echo extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    public Echo(String str) {","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"     * Prints the content of the user input stored in the command.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"     * @param tasks List of tasks relevant to this command.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeEchoString(tasks.toString());","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":21}},{"path":"src/main/java/duke/command/Find.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":" * Implements the find task functionality.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"public class Find extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"    public Find(String str) {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"     * Implements the find task functionality.","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"     * If found, then prints out the list of tasks found; alert user otherwise.","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     * @param tasks The list of tasks to search.","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"        String content \u003d this.getCommandStorage();","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"        assert content !\u003d \"\": \"Must provide task content to find tasks\";","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        String[] substrings \u003d content.split(\"find \");","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        assert substrings.length \u003e 0: \"Must specify the task contents to find\";","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        String item \u003d substrings[1];","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        TaskList foundTasks \u003d tasks.findTask(item);","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"        if (foundTasks.getTaskCount() \u003d\u003d 0) {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"            return TextOutput.makeTaskNotFoundString();","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"            return TextOutput.makeTaskFoundString(foundTasks);","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"cyli133":33}},{"path":"src/main/java/duke/command/List.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":" * Displays the tasks in the current task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"public class List extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"    public List(String str) {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeListTaskString(tasks);","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":18}},{"path":"src/main/java/duke/command/Mark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":" * Marks a particular task in the task list as done.","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"public class Mark extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"    public Mark(String str) {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"     * Mark a specified task in the task list as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"     * Then decrements the task count.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     * @param tasks the list of tasks to execute the command on.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"        String content \u003d this.getCommandStorage();","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        int taskNumber \u003d Character.getNumericValue(content.charAt(content.length() - 1));","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        assert taskNumber !\u003d -1: \"Content must contain numeric number\";","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        taskNumber -\u003d 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        tasks.markTask(taskNumber, true);","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeMarkDoneString(tasks, taskNumber);","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":29}},{"path":"src/main/java/duke/command/TaskCreationCommands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":" * Executes the task creation commands stored in the command queue, by parsing the user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"public class TaskCreationCommands extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    public TaskCreationCommands(String str) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     * Executes the task creation commands stored in the command queue, by parsing the user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"     * @param list the list of tasks to execute the commands on.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList list){","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        String content \u003d this.getCommandStorage();","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        Task task;","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        if (content.matches(\"^deadline\\\\s.*$\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"            String back \u003d content.substring(9);","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"            String[] substrings \u003d back.split(\" /by \");","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"            String date \u003d substrings[1];","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"            task \u003d new Deadline(substrings[0], date, false);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"        } else if (content.matches(\"^event\\\\s.*$\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"            String back \u003d content.substring(6);","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"            String[] substrings \u003d back.split(\" /from \");","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"            String[] dates \u003d substrings[1].split(\" /to \");","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"            String from \u003d dates[0];","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"            String to \u003d dates[1];","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"            task \u003d new Event(substrings[0], false, from, to);","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"        } else if (content.matches(\"^todo\\\\s.*$\")) {","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"cyli133"},"content":"            String desc \u003d content.substring(5);","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"cyli133"},"content":"            task \u003d new Todo(desc, false);","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"cyli133"},"content":"        } else {","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"cyli133"},"content":"            return TextOutput.makeErrorString();","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"cyli133"},"content":"        list.addTask(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeAddString(task.toString(), list.getTaskCount());","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":47}},{"path":"src/main/java/duke/command/Unmark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":" * Marks a particular task in the task list as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"public class Unmark extends Command {","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"    public Unmark(String str) {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"     * Marks a specified task in the task list as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"     * Then increments the task count.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     * @param tasks the task list to execute the command on.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"        String content \u003d this.getCommandStorage();","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        int taskNumber \u003d Character.getNumericValue(content.charAt(content.length() - 1));","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        taskNumber -\u003d 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        tasks.markTask(taskNumber, false);","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeMarkUndoneString(tasks,taskNumber);","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":28}},{"path":"src/main/java/duke/command/Update.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"public class Update extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    public Update(String str) {","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"        this.setCommandStorage(str);","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"     * Implements the find task functionality.","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     * If found, then prints out the list of tasks found; alert user otherwise.","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"     * @param tasks the list of tasks to search.","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"    public String execute(TaskList tasks){","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"        String content \u003d this.getCommandStorage();","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"        assert content !\u003d \"\": \"Must provide arguments to snooze a task\";","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"        String[] substrings \u003d content.split(\" \");","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        String taskId \u003d substrings[1];","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        String[] dates \u003d new String[substrings.length - 2];","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        System.arraycopy(substrings, 2, dates, 0, substrings.length - 2);","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"            return tasks.updateTaskTime(Integer.parseInt(taskId), dates);","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"        } catch (DukeException | NumberFormatException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"            return TextOutput.makeInvalidUpdateString();","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"cyli133":32}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.exception;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":" * Defines general duke exception parent class.","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":10}},{"path":"src/main/java/duke/exception/InsufficientArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.exception;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":" * Defines the exception in which insufficient arguments are supplied to a command in CLI.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"public class InsufficientArguments extends DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"    public InsufficientArguments(String message) {","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"cyli133":11}},{"path":"src/main/java/duke/exception/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.exception;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":" * Defines the exception in which the command input in the CLI is not known.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"public class UnknownCommand extends DukeException{","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"    public UnknownCommand(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":10}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"import java.util.Locale;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":" * Represents task of the type \u0027deadline\u0027.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    private LocalDateTime time;","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"     * Constructs a new Deadline instance with the given content, date and isDone state.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     * It also stores the string data as a LocalDateTime object.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"     * @param content content of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"     * @param date deadline of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"     * @param isDone whether the task is done.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"    public Deadline(String content, String date, boolean isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        super(content, isDone);","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"        format.withLocale(Locale.ENGLISH);","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"        this.time \u003d LocalDateTime.parse(date, format);","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"        this.taskType \u003d this.taskType.D;","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"     * Constructs the string representation of the Deadline object.","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"     * @return String representation of the Deadline object.","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MMM-dd HH:mm\");","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"cyli133"},"content":"        String time \u003d this.time.format(format);","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"cyli133"},"content":"        return \"[\" + this.getTypeIcon() + \"]\"","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"cyli133"},"content":"                + \"[\" + this.getStatusIcon() + \"] \" + this.getTaskContent() + \" (by: \" + time + \")\";","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"cyli133"},"content":"     * Implements the update task time functionality.","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"cyli133"},"content":"     * @param dates The new dates.","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"cyli133"},"content":"     * @return The updated task string representation or error notifications.","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"cyli133"},"content":"     * @throws DukeException","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"cyli133"},"content":"    public String updateTaskTime(String ... dates) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"cyli133"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"cyli133"},"content":"        format.withLocale(Locale.ENGLISH);","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"cyli133"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"cyli133"},"content":"            this.time \u003d LocalDateTime.parse(dates[0] + \" \" + dates[1], format);","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"cyli133"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"cyli133"},"content":"            throw new DukeException(\"Invalid date format.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makePostponeString(this);","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"cyli133":62}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":" * Represents task of the type \u0027Event\u0027.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"     * Constructs a new Event instance with the given content, from_date and isDone state and","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"     * stores the string data as a LocalDateTime object.","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"     * @param content The content of the event.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"     * @param isDone Whether the task is completed.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"     * @param from The starting time of the event.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"     * @param to The ending time of the event.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"    public Event(String content, boolean isDone, String from, String to) {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        super(content, isDone);","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"        this.from \u003d LocalDateTime.parse(from, format);","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"        this.to \u003d LocalDateTime.parse(to, format);","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"        this.taskType \u003d taskType.E;","lastModifiedDate":"2023-02-13"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"        this.time \u003d this.to;","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"     * Constructs the string representation of the Event object.","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"     * @return String The string representation of the Event object.","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MMM-dd HH:mm\");","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"cyli133"},"content":"        String from \u003d this.from.format(format);","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"cyli133"},"content":"        String to \u003d this.to.format(format);","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"cyli133"},"content":"        return \"[\" + this.getTypeIcon() + \"]\"","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"cyli133"},"content":"                + \"[\" + this.getStatusIcon() + \"] \" + this.getTaskContent() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"cyli133"},"content":"     * Implements the update task time functionality.","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"cyli133"},"content":"     * @param dates The new dates.","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"cyli133"},"content":"     * @return The updated task string representation or error notifications.","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"cyli133"},"content":"    public String updateTaskTime(String ... dates) {","lastModifiedDate":"2023-02-15"},{"lineNumber":52,"author":{"gitId":"cyli133"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"cyli133"},"content":"        this.from \u003d LocalDateTime.parse(dates[0], format);","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"cyli133"},"content":"        this.to \u003d LocalDateTime.parse(dates[1], format);","lastModifiedDate":"2023-02-15"},{"lineNumber":55,"author":{"gitId":"cyli133"},"content":"        this.time \u003d this.to;","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makePostponeString(this);","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":58}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":" * Represents the abstract concept of a task. It implements Serializable such that it can be","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":" * stored in local storage with ease.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"abstract public class Task implements Serializable {","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    protected enum type {","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"        T, //Todo","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"        D, //Deadline","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"        E; //Event","lastModifiedDate":"2023-02-13"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"    protected LocalDateTime time \u003d null;","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    private String taskContent;","lastModifiedDate":"2023-02-13"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"    private Boolean isDone;","lastModifiedDate":"2023-02-13"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    protected type taskType;","lastModifiedDate":"2023-02-13"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    abstract public String updateTaskTime(String ... dates) throws DukeException;","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"     * Constructs an instance of Task with the given content and state of whether it is done.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"     * @param content the content of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"     * @param whetherDone whether the task is done.","lastModifiedDate":"2023-02-13"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"    public Task(String content, boolean whetherDone) {","lastModifiedDate":"2023-02-13"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"        this.taskContent \u003d content;","lastModifiedDate":"2023-02-13"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"        this.isDone \u003d whetherDone;","lastModifiedDate":"2023-02-13"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"    public String getTaskContent() {","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"        return taskContent;","lastModifiedDate":"2023-02-13"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"    public void markTask(boolean Done) {","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"cyli133"},"content":"        this.isDone \u003d Done;","lastModifiedDate":"2023-02-13"},{"lineNumber":40,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"cyli133"},"content":"     * Returns the string representation of whether a task is done.","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"cyli133"},"content":"     * @return String representation of the task status.","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //@@author 2103t Teaching Team","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //Reused from https://nus-cs2103-ay2223s2.github.io/website/schedule/week2/project.html","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-02-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public type getTypeIcon() {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return this.taskType;","lastModifiedDate":"2023-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":45,"-":10}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":" * Represents the list of tasks submitted by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"public class TaskList {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    private int taskCount \u003d 0;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    public TaskList(Storage store) {","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"        this.storage \u003d store;","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    public void loadTasks (ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        this.taskCount \u003d this.tasks.size();","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"     * Adds a new task in to the task list, and increments the task count by 1.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"        this.taskCount +\u003d 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"        this.storage.saveTasks(this.tasks);","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"     * Print out the list of tasks in the TaskList object.","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"cyli133"},"content":"     * @return String The string representation of the tasks in the list.","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"cyli133"},"content":"    //Credits: adapted from CHATGPT","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"cyli133"},"content":"    public String listTasks() {","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"cyli133"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"cyli133"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"cyli133"},"content":"        for (Task tasks : tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"cyli133"},"content":"            result +\u003d (i + \".\" + tasks + \"\\n\");","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"cyli133"},"content":"            i++;","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"cyli133"},"content":"        return result;","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"cyli133"},"content":"     * Returns the current task count.","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"cyli133"},"content":"     * @return int the current task count.","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"cyli133"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"cyli133"},"content":"        return taskCount;","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"cyli133"},"content":"     * Marks the task at the indicated index in the task list as the indicated state \u0027done\u0027.","lastModifiedDate":"2023-02-12"},{"lineNumber":62,"author":{"gitId":"cyli133"},"content":"     * @param index The index of the task to be marked.","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"cyli133"},"content":"     * @param done  The state that the task needs to be marked as.","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"cyli133"},"content":"    public void markTask(int index, boolean done){","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"cyli133"},"content":"        this.tasks.get(index).markTask(done);","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"cyli133"},"content":"        this.storage.saveTasks(this.tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"cyli133"},"content":"     * Deletes the task at the indicated index in the task list, and decrement the task count.","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"cyli133"},"content":"     * @param index the index of the task to be deleted.","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"cyli133"},"content":"     * @return Message indicating the number of tasks left.","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"cyli133"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2023-02-12"},{"lineNumber":76,"author":{"gitId":"cyli133"},"content":"        Task deletedTask \u003d this.tasks.get(index);","lastModifiedDate":"2023-02-12"},{"lineNumber":77,"author":{"gitId":"cyli133"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"cyli133"},"content":"        this.taskCount -\u003d 1;","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"cyli133"},"content":"        this.storage.saveTasks(this.tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"cyli133"},"content":"        return deletedTask;","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"cyli133"},"content":"     * Finds the tasks with content same as the input string, and return a new task list containing found tasks.","lastModifiedDate":"2023-02-12"},{"lineNumber":85,"author":{"gitId":"cyli133"},"content":"     * @param taskContent The content of the task to search for.","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"cyli133"},"content":"     * @return New TaskList object containing the found tasks","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"cyli133"},"content":"    public TaskList findTask(String taskContent) {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"cyli133"},"content":"        Storage temp \u003d new Storage(\"temp.ser\");","lastModifiedDate":"2023-02-12"},{"lineNumber":90,"author":{"gitId":"cyli133"},"content":"        TaskList foundTasks \u003d new TaskList(temp);","lastModifiedDate":"2023-02-12"},{"lineNumber":91,"author":{"gitId":"cyli133"},"content":"        addTask(taskContent, foundTasks);","lastModifiedDate":"2023-02-13"},{"lineNumber":92,"author":{"gitId":"cyli133"},"content":"        return foundTasks;","lastModifiedDate":"2023-02-13"},{"lineNumber":93,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-13"},{"lineNumber":94,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":95,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":96,"author":{"gitId":"cyli133"},"content":"     * Add the task containing the task with given taskContent to the given TaskList.","lastModifiedDate":"2023-02-15"},{"lineNumber":97,"author":{"gitId":"cyli133"},"content":"     * @param taskContent The content of the new task to be added.","lastModifiedDate":"2023-02-15"},{"lineNumber":98,"author":{"gitId":"cyli133"},"content":"     * @param foundTasks The taskList containing the task added.","lastModifiedDate":"2023-02-15"},{"lineNumber":99,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"cyli133"},"content":"    private void addTask(String taskContent, TaskList foundTasks) {","lastModifiedDate":"2023-02-13"},{"lineNumber":101,"author":{"gitId":"cyli133"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"cyli133"},"content":"            if (this.getTaskContent(i).contains(taskContent)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"cyli133"},"content":"                foundTasks.addTask(this.tasks.get(i));","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"cyli133"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":109,"author":{"gitId":"cyli133"},"content":"     * Updates the dates of the task with the given numerical id to the given dates.","lastModifiedDate":"2023-02-15"},{"lineNumber":110,"author":{"gitId":"cyli133"},"content":"     * @param id The numerical id of the task whose dates are to be updated.","lastModifiedDate":"2023-02-15"},{"lineNumber":111,"author":{"gitId":"cyli133"},"content":"     * @param dates The new dates.","lastModifiedDate":"2023-02-15"},{"lineNumber":112,"author":{"gitId":"cyli133"},"content":"     * @return The string representation of the update task.","lastModifiedDate":"2023-02-15"},{"lineNumber":113,"author":{"gitId":"cyli133"},"content":"     * @throws DukeException If the date format is invalid.","lastModifiedDate":"2023-02-15"},{"lineNumber":114,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":115,"author":{"gitId":"cyli133"},"content":"    public String updateTaskTime(int id, String ... dates) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":116,"author":{"gitId":"cyli133"},"content":"        if (this.tasks.size() \u003c id) {","lastModifiedDate":"2023-02-15"},{"lineNumber":117,"author":{"gitId":"cyli133"},"content":"            return TextOutput.makeTaskNotFoundString();","lastModifiedDate":"2023-02-15"},{"lineNumber":118,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":119,"author":{"gitId":"cyli133"},"content":"        try {","lastModifiedDate":"2023-02-15"},{"lineNumber":120,"author":{"gitId":"cyli133"},"content":"            return this.tasks.get(id - 1).updateTaskTime(dates);","lastModifiedDate":"2023-02-15"},{"lineNumber":121,"author":{"gitId":"cyli133"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-15"},{"lineNumber":122,"author":{"gitId":"cyli133"},"content":"            throw new DukeException(\"Invalid date format.\");","lastModifiedDate":"2023-02-15"},{"lineNumber":123,"author":{"gitId":"cyli133"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":124,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":125,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":126,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"cyli133"},"content":"     * Prints out the string representation of the task state, whether done or not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"cyli133"},"content":"     * @param index The index of the task to get state icon from.","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"cyli133"},"content":"     * @return The string representation of the task status.","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"cyli133"},"content":"    public String getTaskIcon(int index) {","lastModifiedDate":"2023-01-19"},{"lineNumber":132,"author":{"gitId":"cyli133"},"content":"        return this.tasks.get(index).getStatusIcon();","lastModifiedDate":"2023-01-19"},{"lineNumber":133,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":134,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":135,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"cyli133"},"content":"     * Returns the content of the task at the given index in the task list.","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"cyli133"},"content":"     * @param index The index of the task to retrieve the content from.","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"cyli133"},"content":"     * @return The content of the task at the given index.","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"cyli133"},"content":"    public String getTaskContent(int index) {","lastModifiedDate":"2023-01-19"},{"lineNumber":141,"author":{"gitId":"cyli133"},"content":"        return this.tasks.get(index).getTaskContent();","lastModifiedDate":"2023-02-03"},{"lineNumber":142,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":143,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":143}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke.task;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.UI.TextOutput;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":" * Represents task of the type \u0027Todo\u0027.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"     * Constructs a new Todo objcet with the given content and state.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"     * @param content The content of the Todo object.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"     * @param isDone The state of the Todo object.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    public Todo(String content, boolean isDone) {","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"        super(content, isDone);","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"        this.taskType \u003d taskType.T;","lastModifiedDate":"2023-02-13"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"        this.time \u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"     * Returns the string representation of Todo object.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"     * @return String representation of Todo object.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"        return \"[\" + this.getTypeIcon() + \"]\"","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"                + \"[\" + this.getStatusIcon() + \"] \" + this.getTaskContent();","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"    public String updateTaskTime(String ... dates) {","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"        return TextOutput.makeDisplayFailString();","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":35}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"cyli133":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.UI.MainWindow\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"cyli133":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"import duke.command.Echo;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"cyli133"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"cyli133"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"cyli133"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"cyli133"},"content":"import java.util.Locale;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"cyli133"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"cyli133"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"cyli133"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"cyli133"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"cyli133"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"cyli133"},"content":"    public void deadlineTest(){","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"cyli133"},"content":"        Locale.setDefault(Locale.ENGLISH);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"cyli133"},"content":"        Deadline deadline \u003d new Deadline(\"test1\",\"15/02/2023 1600\", true);","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"        assertEquals(\"[D][X] test1 (by: 2023-Feb-15 16:00)\", deadline.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"cyli133"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"cyli133"},"content":"    public void todoTest(){","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"cyli133"},"content":"        Locale.setDefault(Locale.ENGLISH);","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"cyli133"},"content":"        Todo todo \u003d new Todo(\"test2\", false);","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"cyli133"},"content":"        assertEquals(\"[T][ ] test2\", todo.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"cyli133"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"cyli133"},"content":"    public void echoTest(){","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"cyli133"},"content":"        Locale.setDefault(Locale.ENGLISH);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"cyli133"},"content":"        Echo echo \u003d new Echo(\"helloworld\");","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"cyli133"},"content":"        ByteArrayOutputStream functionPrint \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"cyli133"},"content":"        System.setOut(new PrintStream(functionPrint));","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"cyli133"},"content":"        echo.execute(null);","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"cyli133"},"content":"        assertEquals(\"helloworld\\n\".trim(), functionPrint.toString().trim());","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"cyli133"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"cyli133"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"cyli133"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"cyli133":38}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"cyli133"},"content":"todo borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"cyli133"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"cyli133"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"cyli133"},"content":"list","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"cyli133":4}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"cyli133"},"content":"java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"cyli133":1,"-":20}}]
