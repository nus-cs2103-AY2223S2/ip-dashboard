[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"daniellingzy"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"daniellingzy"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"daniellingzy"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"daniellingzy"},"content":"        super(description);","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"daniellingzy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"daniellingzy"},"content":"        this.deadline \u003d LocalDateTime.parse(deadline, formatter);","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"daniellingzy"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"daniellingzy"},"content":"    public String toString() {","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"daniellingzy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"daniellingzy"},"content":"        return \"[D] \" + \"[\" + this.getStatusIcon() + \"] \" + this.description + \" By: \" + this.deadline.format(formatter);","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"daniellingzy"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"daniellingzy":22}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"import java.io.*;","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"daniellingzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"daniellingzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"daniellingzy"},"content":"        /**","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"daniellingzy"},"content":"         **/","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"daniellingzy"},"content":"        ArrayList\u003cTask\u003e storage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"daniellingzy"},"content":"        // Level-7 feature: load existing data.txt file if it exists, else create new file","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"daniellingzy"},"content":"        File hardDisk \u003d new File(\"data.txt\");","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"daniellingzy"},"content":"        try {","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"daniellingzy"},"content":"            boolean created \u003d hardDisk.createNewFile();","lastModifiedDate":"2023-02-25"},{"lineNumber":25,"author":{"gitId":"daniellingzy"},"content":"            // load existing data.txt file","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"daniellingzy"},"content":"            if (!created) {","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"daniellingzy"},"content":"                Scanner scanner \u003d new Scanner(hardDisk);","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"daniellingzy"},"content":"                if (!scanner.hasNextLine()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"No Existing Tasks my brother!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"daniellingzy"},"content":"                } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"Existing Tasks my brother!\");","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"daniellingzy"},"content":"                }","lastModifiedDate":"2023-02-25"},{"lineNumber":33,"author":{"gitId":"daniellingzy"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"daniellingzy"},"content":"                    String input \u003d scanner.nextLine();","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"daniellingzy"},"content":"                    boolean isDone \u003d Character.isLetter(input.charAt(8));","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"daniellingzy"},"content":"                    Task x;","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"daniellingzy"},"content":"                    if (input.contains(\"From:\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"daniellingzy"},"content":"                        int endDescription \u003d input.indexOf(\"From:\") - 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":39,"author":{"gitId":"daniellingzy"},"content":"                        int endStart \u003d input.indexOf(\"To:\") - 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"daniellingzy"},"content":"                        x \u003d new Event(input.substring(11, endDescription), input.substring(endDescription + 7, endStart), input.substring(endStart + 5));","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"daniellingzy"},"content":"                    } else if (input.contains(\"By:\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":42,"author":{"gitId":"daniellingzy"},"content":"                        int endDescription \u003d input.indexOf(\"By:\") - 1;","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"daniellingzy"},"content":"                        x \u003d new Deadline(input.substring(11, endDescription), input.substring(endDescription + 5));","lastModifiedDate":"2023-02-25"},{"lineNumber":44,"author":{"gitId":"daniellingzy"},"content":"                    } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":45,"author":{"gitId":"daniellingzy"},"content":"                        x \u003d new Todo(input.substring(11));","lastModifiedDate":"2023-02-25"},{"lineNumber":46,"author":{"gitId":"daniellingzy"},"content":"                    }","lastModifiedDate":"2023-02-25"},{"lineNumber":47,"author":{"gitId":"daniellingzy"},"content":"                    if (isDone) {","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"daniellingzy"},"content":"                        x.markAsDone();","lastModifiedDate":"2023-02-25"},{"lineNumber":49,"author":{"gitId":"daniellingzy"},"content":"                    }","lastModifiedDate":"2023-02-25"},{"lineNumber":50,"author":{"gitId":"daniellingzy"},"content":"                    storage.add(x);","lastModifiedDate":"2023-02-25"},{"lineNumber":51,"author":{"gitId":"daniellingzy"},"content":"                }","lastModifiedDate":"2023-02-25"},{"lineNumber":52,"author":{"gitId":"daniellingzy"},"content":"                // Printout existing storage database","lastModifiedDate":"2023-02-25"},{"lineNumber":53,"author":{"gitId":"daniellingzy"},"content":"                int i \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":54,"author":{"gitId":"daniellingzy"},"content":"                for(Task task: storage) {","lastModifiedDate":"2023-02-25"},{"lineNumber":55,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println((i + 1) + \". \" + task.toString());","lastModifiedDate":"2023-02-25"},{"lineNumber":56,"author":{"gitId":"daniellingzy"},"content":"                    i++;","lastModifiedDate":"2023-02-25"},{"lineNumber":57,"author":{"gitId":"daniellingzy"},"content":"                }","lastModifiedDate":"2023-02-25"},{"lineNumber":58,"author":{"gitId":"daniellingzy"},"content":"                scanner.close();","lastModifiedDate":"2023-02-25"},{"lineNumber":59,"author":{"gitId":"daniellingzy"},"content":"            } else {","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"daniellingzy"},"content":"                System.out.println(\"New file created: data.txt\");","lastModifiedDate":"2023-02-25"},{"lineNumber":61,"author":{"gitId":"daniellingzy"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"daniellingzy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":63,"author":{"gitId":"daniellingzy"},"content":"            System.out.println(\"An error occurred while creating the new file: data.txt\");","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"daniellingzy"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":65,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":66,"author":{"gitId":"daniellingzy"},"content":"        System.out.println(\"Hello Brother\\nWelcome to Brother Bot\\nWhats up what can I do for you mi amigo\");","lastModifiedDate":"2023-02-21"},{"lineNumber":67,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":68,"author":{"gitId":"daniellingzy"},"content":"        Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-17"},{"lineNumber":69,"author":{"gitId":"daniellingzy"},"content":"        String input;","lastModifiedDate":"2023-02-17"},{"lineNumber":70,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":71,"author":{"gitId":"daniellingzy"},"content":"        while(true) {","lastModifiedDate":"2023-02-17"},{"lineNumber":72,"author":{"gitId":"daniellingzy"},"content":"            if (inputScanner.hasNextLine()) {","lastModifiedDate":"2023-02-21"},{"lineNumber":73,"author":{"gitId":"daniellingzy"},"content":"                input \u003d inputScanner.nextLine();","lastModifiedDate":"2023-02-17"},{"lineNumber":74,"author":{"gitId":"daniellingzy"},"content":"                try {","lastModifiedDate":"2023-02-23"},{"lineNumber":75,"author":{"gitId":"daniellingzy"},"content":"                    validateInput(input, storage);","lastModifiedDate":"2023-02-23"},{"lineNumber":76,"author":{"gitId":"daniellingzy"},"content":"                } catch(DukeException x) {","lastModifiedDate":"2023-02-23"},{"lineNumber":77,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(x.getMessage());","lastModifiedDate":"2023-02-23"},{"lineNumber":78,"author":{"gitId":"daniellingzy"},"content":"                    continue;","lastModifiedDate":"2023-02-23"},{"lineNumber":79,"author":{"gitId":"daniellingzy"},"content":"                }","lastModifiedDate":"2023-02-23"},{"lineNumber":80,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":81,"author":{"gitId":"daniellingzy"},"content":"                // level-1 feature: exit when user types \"bye\"","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"daniellingzy"},"content":"                if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-02-17"},{"lineNumber":83,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"ok see you brother all love no cringe!\");","lastModifiedDate":"2023-02-18"},{"lineNumber":84,"author":{"gitId":"daniellingzy"},"content":"                    break;","lastModifiedDate":"2023-02-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":87,"author":{"gitId":"daniellingzy"},"content":"                // level-3 feature: use input to construct Task object and add to array + display array when required + mark Task as done","lastModifiedDate":"2023-02-20"},{"lineNumber":88,"author":{"gitId":"daniellingzy"},"content":"                if (input.equalsIgnoreCase(\"display\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":89,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"Here you go my brother!\" );","lastModifiedDate":"2023-02-18"},{"lineNumber":90,"author":{"gitId":"daniellingzy"},"content":"                    int i \u003d 0;","lastModifiedDate":"2023-02-23"},{"lineNumber":91,"author":{"gitId":"daniellingzy"},"content":"                    for(Task task: storage) {","lastModifiedDate":"2023-02-23"},{"lineNumber":92,"author":{"gitId":"daniellingzy"},"content":"                        System.out.println((i + 1) + \". \" + task.toString());","lastModifiedDate":"2023-02-23"},{"lineNumber":93,"author":{"gitId":"daniellingzy"},"content":"                        i++;","lastModifiedDate":"2023-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    }","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"Anything else I can do for you top G\" );","lastModifiedDate":"2023-02-18"},{"lineNumber":96,"author":{"gitId":"daniellingzy"},"content":"                } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.substring(0,4).equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2023-02-18"},{"lineNumber":97,"author":{"gitId":"daniellingzy"},"content":"                    int i \u003d Integer.parseInt(input.substring(5)) - 1;","lastModifiedDate":"2023-02-18"},{"lineNumber":98,"author":{"gitId":"daniellingzy"},"content":"                    storage.get(i).markAsDone();","lastModifiedDate":"2023-02-23"},{"lineNumber":99,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"Marked as you wish my brother:\");","lastModifiedDate":"2023-02-18"},{"lineNumber":100,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println((i + 1) + \". \" + storage.get(i).toString());","lastModifiedDate":"2023-02-23"},{"lineNumber":101,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\" Whats next?\");","lastModifiedDate":"2023-02-18"},{"lineNumber":102,"author":{"gitId":"daniellingzy"},"content":"                } else if (input.length() \u003e 7 \u0026\u0026 input.substring(0,6).equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":103,"author":{"gitId":"daniellingzy"},"content":"                    int i \u003d Integer.parseInt(input.substring(7)) - 1;","lastModifiedDate":"2023-02-23"},{"lineNumber":104,"author":{"gitId":"daniellingzy"},"content":"                    Task removed \u003d storage.get(i);","lastModifiedDate":"2023-02-23"},{"lineNumber":105,"author":{"gitId":"daniellingzy"},"content":"                    storage.remove(i);","lastModifiedDate":"2023-02-23"},{"lineNumber":106,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"Deleted this task for you my brother:\\n\" + removed.toString());","lastModifiedDate":"2023-02-23"},{"lineNumber":107,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"Now you have \" + storage.size() + \" tasks left\");","lastModifiedDate":"2023-02-23"},{"lineNumber":108,"author":{"gitId":"daniellingzy"},"content":"                } else {","lastModifiedDate":"2023-02-18"},{"lineNumber":109,"author":{"gitId":"daniellingzy"},"content":"                    // Level-4 feature: Todo, Deadline, Event","lastModifiedDate":"2023-02-20"},{"lineNumber":110,"author":{"gitId":"daniellingzy"},"content":"                    // note existing exception: indexOf() is case sensitive so /by etc must be in right caps","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"daniellingzy"},"content":"                    if (input.substring(0, 4).equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":112,"author":{"gitId":"daniellingzy"},"content":"                        storage.add(new Todo(input.substring(5)));","lastModifiedDate":"2023-02-25"},{"lineNumber":113,"author":{"gitId":"daniellingzy"},"content":"                    } else if (input.substring(0, 5).equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"daniellingzy"},"content":"                        int startIndex \u003d input.indexOf(\"/from \");","lastModifiedDate":"2023-02-21"},{"lineNumber":115,"author":{"gitId":"daniellingzy"},"content":"                        int x \u003d input.indexOf(\"/to \");","lastModifiedDate":"2023-02-20"},{"lineNumber":116,"author":{"gitId":"daniellingzy"},"content":"                        int endIndex \u003d x + 4;","lastModifiedDate":"2023-02-20"},{"lineNumber":117,"author":{"gitId":"daniellingzy"},"content":"                        String description \u003d input.substring(6, startIndex - 1);","lastModifiedDate":"2023-02-25"},{"lineNumber":118,"author":{"gitId":"daniellingzy"},"content":"                        String start \u003d input.substring(startIndex + 6, x - 1);","lastModifiedDate":"2023-02-25"},{"lineNumber":119,"author":{"gitId":"daniellingzy"},"content":"                        String end \u003d input.substring(endIndex);","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"daniellingzy"},"content":"                        try {","lastModifiedDate":"2023-02-27"},{"lineNumber":121,"author":{"gitId":"daniellingzy"},"content":"                            storage.add(new Event(description, start, end));","lastModifiedDate":"2023-02-23"},{"lineNumber":122,"author":{"gitId":"daniellingzy"},"content":"                        } catch (DateTimeException e) {","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"daniellingzy"},"content":"                            System.out.println(\"Invalid Date and Time input brother. Here\u0027s the correct format:\\ndd/MM/yyyy HHmm\");","lastModifiedDate":"2023-02-27"},{"lineNumber":124,"author":{"gitId":"daniellingzy"},"content":"                            continue;","lastModifiedDate":"2023-02-27"},{"lineNumber":125,"author":{"gitId":"daniellingzy"},"content":"                        }","lastModifiedDate":"2023-02-27"},{"lineNumber":126,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":127,"author":{"gitId":"daniellingzy"},"content":"                    } else if (input.substring(0, 8).equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-02-20"},{"lineNumber":128,"author":{"gitId":"daniellingzy"},"content":"                        int startIndex \u003d input.indexOf(\"/by \"); // exception","lastModifiedDate":"2023-02-21"},{"lineNumber":129,"author":{"gitId":"daniellingzy"},"content":"                        String description \u003d input.substring(9, startIndex - 1);","lastModifiedDate":"2023-02-25"},{"lineNumber":130,"author":{"gitId":"daniellingzy"},"content":"                        String deadline \u003d input.substring(startIndex + 4);","lastModifiedDate":"2023-02-21"},{"lineNumber":131,"author":{"gitId":"daniellingzy"},"content":"                        try {","lastModifiedDate":"2023-02-27"},{"lineNumber":132,"author":{"gitId":"daniellingzy"},"content":"                            storage.add(new Deadline(description, deadline));","lastModifiedDate":"2023-02-23"},{"lineNumber":133,"author":{"gitId":"daniellingzy"},"content":"                        } catch (DateTimeException e) {","lastModifiedDate":"2023-02-27"},{"lineNumber":134,"author":{"gitId":"daniellingzy"},"content":"                            System.out.println(\"Invalid Date and Time input brother. Here\u0027s the correct format:\\ndd/MM/yyyy HHmm\");","lastModifiedDate":"2023-02-27"},{"lineNumber":135,"author":{"gitId":"daniellingzy"},"content":"                            continue;","lastModifiedDate":"2023-02-27"},{"lineNumber":136,"author":{"gitId":"daniellingzy"},"content":"                        }","lastModifiedDate":"2023-02-27"},{"lineNumber":137,"author":{"gitId":"daniellingzy"},"content":"                    } else {","lastModifiedDate":"2023-02-20"},{"lineNumber":138,"author":{"gitId":"daniellingzy"},"content":"                        storage.add(new Task(input));","lastModifiedDate":"2023-02-23"},{"lineNumber":139,"author":{"gitId":"daniellingzy"},"content":"                    }","lastModifiedDate":"2023-02-20"},{"lineNumber":140,"author":{"gitId":"daniellingzy"},"content":"                    int x \u003d storage.size();","lastModifiedDate":"2023-02-23"},{"lineNumber":141,"author":{"gitId":"daniellingzy"},"content":"                    System.out.println(\"added to list my brother: \\n\" + x + \".\" + storage.get(x - 1).toString() + \"\\nNow you have \" + x + \" tasks!\");","lastModifiedDate":"2023-02-23"},{"lineNumber":142,"author":{"gitId":"daniellingzy"},"content":"                }","lastModifiedDate":"2023-02-18"},{"lineNumber":143,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-21"},{"lineNumber":144,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":145,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":146,"author":{"gitId":"daniellingzy"},"content":"                // if changes made to task list, rewrite task list in data.txt","lastModifiedDate":"2023-02-25"},{"lineNumber":147,"author":{"gitId":"daniellingzy"},"content":"                if (!input.contains(\"display\") \u0026\u0026 !input.contains(\"bye\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":148,"author":{"gitId":"daniellingzy"},"content":"                    try {","lastModifiedDate":"2023-02-25"},{"lineNumber":149,"author":{"gitId":"daniellingzy"},"content":"                        FileWriter writer \u003d new FileWriter(hardDisk, false);","lastModifiedDate":"2023-02-25"},{"lineNumber":150,"author":{"gitId":"daniellingzy"},"content":"                        PrintWriter printWriter \u003d new PrintWriter(writer);","lastModifiedDate":"2023-02-25"},{"lineNumber":151,"author":{"gitId":"daniellingzy"},"content":"                        int i \u003d 0;","lastModifiedDate":"2023-02-25"},{"lineNumber":152,"author":{"gitId":"daniellingzy"},"content":"                        for(Task task: storage) {","lastModifiedDate":"2023-02-25"},{"lineNumber":153,"author":{"gitId":"daniellingzy"},"content":"                            printWriter.println((i + 1) + \". \" + task.toString());","lastModifiedDate":"2023-02-25"},{"lineNumber":154,"author":{"gitId":"daniellingzy"},"content":"                            i++;","lastModifiedDate":"2023-02-25"},{"lineNumber":155,"author":{"gitId":"daniellingzy"},"content":"                        }","lastModifiedDate":"2023-02-25"},{"lineNumber":156,"author":{"gitId":"daniellingzy"},"content":"                        printWriter.close();","lastModifiedDate":"2023-02-25"},{"lineNumber":157,"author":{"gitId":"daniellingzy"},"content":"                    } catch (IOException e) {","lastModifiedDate":"2023-02-25"},{"lineNumber":158,"author":{"gitId":"daniellingzy"},"content":"                        e.printStackTrace();","lastModifiedDate":"2023-02-25"},{"lineNumber":159,"author":{"gitId":"daniellingzy"},"content":"                    }","lastModifiedDate":"2023-02-25"},{"lineNumber":160,"author":{"gitId":"daniellingzy"},"content":"                }","lastModifiedDate":"2023-02-25"},{"lineNumber":161,"author":{"gitId":"daniellingzy"},"content":"            }","lastModifiedDate":"2023-02-25"},{"lineNumber":162,"author":{"gitId":"daniellingzy"},"content":"        }","lastModifiedDate":"2023-02-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":164,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":165,"author":{"gitId":"daniellingzy"},"content":"    public static void validateInput(String input, ArrayList\u003cTask\u003e storage) throws DukeException {","lastModifiedDate":"2023-02-23"},{"lineNumber":166,"author":{"gitId":"daniellingzy"},"content":"        if (!input.contains(\"todo\") \u0026\u0026 !input.contains(\"event\") \u0026\u0026 !input.contains(\"display\") \u0026\u0026 !input.contains(\"deadline\") \u0026\u0026 !input.contains(\"mark\") \u0026\u0026 !input.contains(\"bye\") \u0026\u0026 !input.contains(\"delete\")) {","lastModifiedDate":"2023-02-25"},{"lineNumber":167,"author":{"gitId":"daniellingzy"},"content":"            throw new DukeException(\"OOPS! invalid command la bro\");","lastModifiedDate":"2023-02-23"},{"lineNumber":168,"author":{"gitId":"daniellingzy"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":169,"author":{"gitId":"daniellingzy"},"content":"        if (input.length() \u003e 4 \u0026\u0026 input.substring(0, 4).equalsIgnoreCase(\"todo\") \u0026\u0026 input.length() \u003c\u003d 5) {","lastModifiedDate":"2023-02-23"},{"lineNumber":170,"author":{"gitId":"daniellingzy"},"content":"            throw new DukeException(\"OOPS wrong format my brother! consider this format: \\ntodo xxx\");","lastModifiedDate":"2023-02-23"},{"lineNumber":171,"author":{"gitId":"daniellingzy"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":172,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":173,"author":{"gitId":"daniellingzy"},"content":"        if (input.length() \u003e 5 \u0026\u0026 input.substring(0, 5).equalsIgnoreCase(\"event\") \u0026\u0026 (!input.contains(\"/from\") || input.indexOf(\"/from\") \u003d\u003d 6 || !input.contains(\"/to\") || input.indexOf(\"/from\") \u003e input.indexOf(\"/to\"))) {","lastModifiedDate":"2023-02-27"},{"lineNumber":174,"author":{"gitId":"daniellingzy"},"content":"            throw new DukeException(\"OOPS wrong format my brother! consider this format: \\nevent xxxx /from xxx /to xxx\");","lastModifiedDate":"2023-02-23"},{"lineNumber":175,"author":{"gitId":"daniellingzy"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":176,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":177,"author":{"gitId":"daniellingzy"},"content":"        if (input.length() \u003e 6 \u0026\u0026 input.substring(0, 6).equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-02-23"},{"lineNumber":178,"author":{"gitId":"daniellingzy"},"content":"            try {","lastModifiedDate":"2023-02-23"},{"lineNumber":179,"author":{"gitId":"daniellingzy"},"content":"                Integer.parseInt(input.substring(7));","lastModifiedDate":"2023-02-23"},{"lineNumber":180,"author":{"gitId":"daniellingzy"},"content":"            } catch(NumberFormatException e) {","lastModifiedDate":"2023-02-23"},{"lineNumber":181,"author":{"gitId":"daniellingzy"},"content":"                throw new DukeException(\"OOPS wrong format my brother! consider this format: \\ndelete INSERT_NUMBER\");","lastModifiedDate":"2023-02-23"},{"lineNumber":182,"author":{"gitId":"daniellingzy"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":183,"author":{"gitId":"daniellingzy"},"content":"            if (Integer.parseInt(input.substring(7)) \u003e storage.size()) {","lastModifiedDate":"2023-02-23"},{"lineNumber":184,"author":{"gitId":"daniellingzy"},"content":"                throw new DukeException(\"OOPS inserted number is invalid\");","lastModifiedDate":"2023-02-23"},{"lineNumber":185,"author":{"gitId":"daniellingzy"},"content":"            }","lastModifiedDate":"2023-02-23"},{"lineNumber":186,"author":{"gitId":"daniellingzy"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":187,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":188,"author":{"gitId":"daniellingzy"},"content":"        if (input.length() \u003e 8 \u0026\u0026 input.substring(0, 8).equalsIgnoreCase(\"deadline\") \u0026\u0026 (!input.contains(\"/by\") || input.indexOf(\"/by\") \u003d\u003d 9)) {","lastModifiedDate":"2023-02-27"},{"lineNumber":189,"author":{"gitId":"daniellingzy"},"content":"            throw new DukeException(\"OOPS wrong format my brother! consider this format: \\nevent xxxx /from xxx /to xxx\");","lastModifiedDate":"2023-02-23"},{"lineNumber":190,"author":{"gitId":"daniellingzy"},"content":"        }","lastModifiedDate":"2023-02-23"},{"lineNumber":191,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":192,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":193,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":194,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":195,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":196,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":197,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-02-17"},{"lineNumber":199,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"-":11,"daniellingzy":188}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"        super(message);","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"}","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"daniellingzy":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"import java.util.Date;","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"daniellingzy"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"daniellingzy"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"daniellingzy"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"daniellingzy"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"daniellingzy"},"content":"        super(description);","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"daniellingzy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"daniellingzy"},"content":"        this.start \u003d LocalDateTime.parse(start, formatter);","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"daniellingzy"},"content":"        this.end \u003d LocalDateTime.parse(end, formatter);","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"daniellingzy"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"daniellingzy"},"content":"    public String toString() {","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"daniellingzy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"daniellingzy"},"content":"        return \"[E] \" + \"[\" + this.getStatusIcon() + \"] \" + this.description + \" From: \" + this.start.format(formatter) + \" To: \" + this.end.format(formatter);","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"daniellingzy"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"daniellingzy":24}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"public class Task {","lastModifiedDate":"2023-02-18"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"    protected String description;","lastModifiedDate":"2023-02-18"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-02-18"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"    public Task(String description) {","lastModifiedDate":"2023-02-18"},{"lineNumber":6,"author":{"gitId":"daniellingzy"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-18"},{"lineNumber":7,"author":{"gitId":"daniellingzy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-18"},{"lineNumber":8,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":9,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":10,"author":{"gitId":"daniellingzy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-02-18"},{"lineNumber":11,"author":{"gitId":"daniellingzy"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-02-18"},{"lineNumber":12,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":13,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":14,"author":{"gitId":"daniellingzy"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-02-18"},{"lineNumber":15,"author":{"gitId":"daniellingzy"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-18"},{"lineNumber":16,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":17,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":18,"author":{"gitId":"daniellingzy"},"content":"    @Override","lastModifiedDate":"2023-02-18"},{"lineNumber":19,"author":{"gitId":"daniellingzy"},"content":"    public String toString() {","lastModifiedDate":"2023-02-18"},{"lineNumber":20,"author":{"gitId":"daniellingzy"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-02-18"},{"lineNumber":21,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-18"},{"lineNumber":22,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"},{"lineNumber":23,"author":{"gitId":"daniellingzy"},"content":"}","lastModifiedDate":"2023-02-18"},{"lineNumber":24,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-18"}],"authorContributionMap":{"daniellingzy":24}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"        super(description);","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"daniellingzy"},"content":"    @Override","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"daniellingzy"},"content":"    public String toString() {","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"daniellingzy"},"content":"        return \"[T] \" + \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"daniellingzy"},"content":"    }","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"daniellingzy"},"content":"}","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"daniellingzy":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"deadline bball /by today","lastModifiedDate":"2023-02-21"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"event bball /from today /to tmr","lastModifiedDate":"2023-02-21"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"display","lastModifiedDate":"2023-02-21"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"mark 1","lastModifiedDate":"2023-02-21"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"display","lastModifiedDate":"2023-02-21"}],"authorContributionMap":{"daniellingzy":5}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"daniellingzy"},"content":"if ! javac -cp /Users/danielling/Desktop/CS2103T/ip/src/main/java -Xlint:none -d ../bin /Users/danielling/Desktop/CS2103T/ip/src/main/java/*.java","lastModifiedDate":"2023-02-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"daniellingzy"},"content":"# shellcheck disable\u003dSC2181","lastModifiedDate":"2023-02-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"daniellingzy":2}}]
