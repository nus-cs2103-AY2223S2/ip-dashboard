[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"    mainClassName \u003d \"tunabot.TunaBot\"","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"checkstyle {","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"    archiveBaseName \u003d \"tunabot\"","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"dillongoh":25}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"### Store your tasks!","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"Keep track of your tasks, deadlines and upcoming events!","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"## Commands","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"- Create new Task: ","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"`todo \u003cname\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"- Create new Deadline:","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"`deadline \u003cname\u003e /by \u003cDD/MM/YY-HHmm\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"- Create new Event:","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"`event \u003cname\u003e /from \u003cDD/MM/YY-HHmm\u003e /to \u003cDD/MM/YY-HHmm\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"- List existing tasks:","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"`list`","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"- Mark Tasks as done:","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"`mark \u003cindex\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"- Unmark Tasks as done:","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"`unmark \u003cindex\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"- Delete Task:","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"`delete \u003cindex\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"- Search tasks:","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"`find \u003csearch\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"- Update existing normal Task:","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"`update \u003cindex\u003e /name \u003cnew name\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"- Update existing Event:","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"`update \u003cindex\u003e /name \u003cnew name\u003e /from \u003cnew DD/MM/YY-HHmm\u003e /to \u003cnew DD/MM/YY-HHmm\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"- Update existing Deadline:","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"  `update \u003cindex\u003e /name \u003cnew name\u003e /by \u003cnew DD/MM/YY-HHmm\u003e`","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"- Save and exit TunaBot:","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"`bye`","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"-":4,"dillongoh":32}},{"path":"src/main/java/tunabot/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import tunabot.exceptions.InputException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Deadline;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Event;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":" * Class handling the parsing of commands","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"public class Parser {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"     * Returns boolean to determine whether to continue receiving input","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"     * If input \"bye\" is received return true else return false","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"     * @param input command","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"     * @param tasks TaskList","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"     * @return true If input is \"bye\" else false","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"     * @throws InputException If the command does not fit required format","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"    public static String parse(String input, TaskList tasks) throws InputException {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"        assert tasks !\u003d null : \"Task list should exist at this point\";","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"        String[] command \u003d input.split(\" \", 2);","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"        switch (command[0]) {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"        case \"list\":","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"            return Ui.list(tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"            return \"    Bye! Blub blub!\";","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"            return mark(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-04"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"            return unmark(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"            return delete(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"            return newTask(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"        case \"event\":","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"            return newEvent(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-04"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"            return newDeadline(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"        case \"find\":","lastModifiedDate":"2023-02-04"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"            return find(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"        case\"update\":","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"            return update(tasks, command);","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"        default:","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"            return \"BLUB OH! INVALID COMMAND!\";","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"    private static String update(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-02-04"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Needs more info to update!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"        String[] details \u003d command[1].split(\" /name | /from | /by | /to \");","lastModifiedDate":"2023-02-04"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"            int index \u003d Integer.parseInt(details[0]) - 1;","lastModifiedDate":"2023-02-04"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"            Task updateTask \u003d tasks.get(index);","lastModifiedDate":"2023-02-04"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"            if (updateTask instanceof Event) {","lastModifiedDate":"2023-02-04"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"                eventUpdate(details, (Event) updateTask);","lastModifiedDate":"2023-02-14"},{"lineNumber":59,"author":{"gitId":"dillongoh"},"content":"            } else if (updateTask instanceof Deadline) {","lastModifiedDate":"2023-02-04"},{"lineNumber":60,"author":{"gitId":"dillongoh"},"content":"                deadlineUpdate(command, details, (Deadline) updateTask);","lastModifiedDate":"2023-02-14"},{"lineNumber":61,"author":{"gitId":"dillongoh"},"content":"            } else {","lastModifiedDate":"2023-02-04"},{"lineNumber":62,"author":{"gitId":"dillongoh"},"content":"                updateTask(details, updateTask);","lastModifiedDate":"2023-02-14"},{"lineNumber":63,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-02-04"},{"lineNumber":64,"author":{"gitId":"dillongoh"},"content":"            return \"Task has been updated!\\n\" + Ui.list(tasks);","lastModifiedDate":"2023-02-04"},{"lineNumber":65,"author":{"gitId":"dillongoh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":66,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Index chosen isn\u0027t a number!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":67,"author":{"gitId":"dillongoh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":68,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Task chosen isn\u0027t on the list!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":69,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":70,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":71,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":72,"author":{"gitId":"dillongoh"},"content":"    private static void updateTask(String[] details, Task updateTask) throws InputException {","lastModifiedDate":"2023-02-14"},{"lineNumber":73,"author":{"gitId":"dillongoh"},"content":"        if (details.length \u003c 2) {","lastModifiedDate":"2023-02-14"},{"lineNumber":74,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Updating a Task needs a new name!\");","lastModifiedDate":"2023-02-14"},{"lineNumber":75,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":76,"author":{"gitId":"dillongoh"},"content":"        updateTask.setName(details[1]);","lastModifiedDate":"2023-02-14"},{"lineNumber":77,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":78,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":79,"author":{"gitId":"dillongoh"},"content":"    private static void deadlineUpdate(String[] command, String[] details, Deadline updateTask) throws InputException {","lastModifiedDate":"2023-02-14"},{"lineNumber":80,"author":{"gitId":"dillongoh"},"content":"        Deadline updateDeadline \u003d updateTask;","lastModifiedDate":"2023-02-14"},{"lineNumber":81,"author":{"gitId":"dillongoh"},"content":"        if (details.length \u003c 3) {","lastModifiedDate":"2023-02-14"},{"lineNumber":82,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Updating a Deadline needs a new name and new deadline!\");","lastModifiedDate":"2023-02-14"},{"lineNumber":83,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":84,"author":{"gitId":"dillongoh"},"content":"        updateDeadline.setName(details[1]);","lastModifiedDate":"2023-02-14"},{"lineNumber":85,"author":{"gitId":"dillongoh"},"content":"        updateDeadline.setDeadline(command[2]);","lastModifiedDate":"2023-02-14"},{"lineNumber":86,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":87,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":88,"author":{"gitId":"dillongoh"},"content":"    private static void eventUpdate(String[] details, Event updateTask) throws InputException {","lastModifiedDate":"2023-02-14"},{"lineNumber":89,"author":{"gitId":"dillongoh"},"content":"        Event updateEvent \u003d updateTask;","lastModifiedDate":"2023-02-14"},{"lineNumber":90,"author":{"gitId":"dillongoh"},"content":"        if (details.length \u003c 4) {","lastModifiedDate":"2023-02-14"},{"lineNumber":91,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Updating an Event needs a new name,\"","lastModifiedDate":"2023-02-14"},{"lineNumber":92,"author":{"gitId":"dillongoh"},"content":"                + \" new start date and new end date!\");","lastModifiedDate":"2023-02-14"},{"lineNumber":93,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-14"},{"lineNumber":94,"author":{"gitId":"dillongoh"},"content":"        updateEvent.setName(details[1]);","lastModifiedDate":"2023-02-14"},{"lineNumber":95,"author":{"gitId":"dillongoh"},"content":"        updateEvent.setStart(details[2]);","lastModifiedDate":"2023-02-14"},{"lineNumber":96,"author":{"gitId":"dillongoh"},"content":"        updateEvent.setEnd(details[3]);","lastModifiedDate":"2023-02-14"},{"lineNumber":97,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-14"},{"lineNumber":98,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":99,"author":{"gitId":"dillongoh"},"content":"    private static String find(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":100,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-02-04"},{"lineNumber":101,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! find needs a search target!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":102,"author":{"gitId":"dillongoh"},"content":"        } else {","lastModifiedDate":"2023-02-04"},{"lineNumber":103,"author":{"gitId":"dillongoh"},"content":"            String target \u003d command[1];","lastModifiedDate":"2023-02-04"},{"lineNumber":104,"author":{"gitId":"dillongoh"},"content":"            TaskList targetList \u003d tasks.find(target);","lastModifiedDate":"2023-02-04"},{"lineNumber":105,"author":{"gitId":"dillongoh"},"content":"            if (targetList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-04"},{"lineNumber":106,"author":{"gitId":"dillongoh"},"content":"                return \"BLUB! No matching tasks!\";","lastModifiedDate":"2023-02-04"},{"lineNumber":107,"author":{"gitId":"dillongoh"},"content":"            } else {","lastModifiedDate":"2023-02-04"},{"lineNumber":108,"author":{"gitId":"dillongoh"},"content":"                String found \u003d \"BLUB! Here are your matching task(s)!\\n\";","lastModifiedDate":"2023-02-04"},{"lineNumber":109,"author":{"gitId":"dillongoh"},"content":"                found +\u003d Ui.list(targetList);","lastModifiedDate":"2023-02-04"},{"lineNumber":110,"author":{"gitId":"dillongoh"},"content":"                return found;","lastModifiedDate":"2023-02-04"},{"lineNumber":111,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-02-04"},{"lineNumber":112,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":113,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":114,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":115,"author":{"gitId":"dillongoh"},"content":"    private static String newEvent(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":116,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-02-04"},{"lineNumber":117,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Event needs a name, \"","lastModifiedDate":"2023-02-04"},{"lineNumber":118,"author":{"gitId":"dillongoh"},"content":"                + \"a start time and end time!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":119,"author":{"gitId":"dillongoh"},"content":"        } else {","lastModifiedDate":"2023-02-04"},{"lineNumber":120,"author":{"gitId":"dillongoh"},"content":"            String[] details \u003d command[1].split(\" /from | /to \", 3);","lastModifiedDate":"2023-02-04"},{"lineNumber":121,"author":{"gitId":"dillongoh"},"content":"            if (details.length \u003c 3) {","lastModifiedDate":"2023-02-04"},{"lineNumber":122,"author":{"gitId":"dillongoh"},"content":"                throw new InputException(\"BLUB! Event is missing info!\"","lastModifiedDate":"2023-02-04"},{"lineNumber":123,"author":{"gitId":"dillongoh"},"content":"                    + \" Please check input. BLUB!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":124,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-02-04"},{"lineNumber":125,"author":{"gitId":"dillongoh"},"content":"            Event newEvent \u003d new Event(details[0], details[1], details[2]);","lastModifiedDate":"2023-02-04"},{"lineNumber":126,"author":{"gitId":"dillongoh"},"content":"            tasks.add(newEvent);","lastModifiedDate":"2023-02-04"},{"lineNumber":127,"author":{"gitId":"dillongoh"},"content":"            return Ui.add(newEvent, tasks.size());","lastModifiedDate":"2023-02-04"},{"lineNumber":128,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":129,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":130,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":131,"author":{"gitId":"dillongoh"},"content":"    private static String newTask(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":132,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-02-04"},{"lineNumber":133,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Task needs a name!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":134,"author":{"gitId":"dillongoh"},"content":"        } else {","lastModifiedDate":"2023-02-04"},{"lineNumber":135,"author":{"gitId":"dillongoh"},"content":"            Task newTask \u003d new Task(command[1]);","lastModifiedDate":"2023-02-04"},{"lineNumber":136,"author":{"gitId":"dillongoh"},"content":"            tasks.add(newTask);","lastModifiedDate":"2023-02-04"},{"lineNumber":137,"author":{"gitId":"dillongoh"},"content":"            return Ui.add(newTask, tasks.size());","lastModifiedDate":"2023-02-04"},{"lineNumber":138,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":139,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":140,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":141,"author":{"gitId":"dillongoh"},"content":"    private static String delete(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":142,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":143,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! No task chosen!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":144,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":145,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":146,"author":{"gitId":"dillongoh"},"content":"            int index \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2023-01-26"},{"lineNumber":147,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":148,"author":{"gitId":"dillongoh"},"content":"            String delete \u003d Ui.delete(tasks.get((index - 1)), tasks.size() - 1);","lastModifiedDate":"2023-02-04"},{"lineNumber":149,"author":{"gitId":"dillongoh"},"content":"            tasks.remove(index - 1);","lastModifiedDate":"2023-02-04"},{"lineNumber":150,"author":{"gitId":"dillongoh"},"content":"            return delete;","lastModifiedDate":"2023-02-04"},{"lineNumber":151,"author":{"gitId":"dillongoh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":152,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Index chosen isn\u0027t a number!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":153,"author":{"gitId":"dillongoh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":154,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Task chosen isn\u0027t on the list!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":155,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":156,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":157,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":158,"author":{"gitId":"dillongoh"},"content":"    private static String unmark(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":159,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":160,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! No task chosen!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":161,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":162,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":163,"author":{"gitId":"dillongoh"},"content":"            int index \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2023-01-26"},{"lineNumber":164,"author":{"gitId":"dillongoh"},"content":"            tasks.get(index - 1).unmarkDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":165,"author":{"gitId":"dillongoh"},"content":"            return Ui.unmark(tasks.get(index - 1));","lastModifiedDate":"2023-01-30"},{"lineNumber":166,"author":{"gitId":"dillongoh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":167,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Index chosen isn\u0027t a number!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":168,"author":{"gitId":"dillongoh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":169,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Task chosen isn\u0027t on the list!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":170,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":171,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":172,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":173,"author":{"gitId":"dillongoh"},"content":"    private static String mark(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":174,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":175,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! No task chosen!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":176,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":177,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":178,"author":{"gitId":"dillongoh"},"content":"            int index \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2023-01-26"},{"lineNumber":179,"author":{"gitId":"dillongoh"},"content":"            tasks.get(index - 1).markDone();","lastModifiedDate":"2023-02-04"},{"lineNumber":180,"author":{"gitId":"dillongoh"},"content":"            return Ui.mark(tasks.get(index - 1));","lastModifiedDate":"2023-02-04"},{"lineNumber":181,"author":{"gitId":"dillongoh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":182,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Index chosen isn\u0027t a number!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":183,"author":{"gitId":"dillongoh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":184,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Task chosen isn\u0027t on the list!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":185,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":186,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":187,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":188,"author":{"gitId":"dillongoh"},"content":"    private static String newDeadline(TaskList tasks, String[] command) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":189,"author":{"gitId":"dillongoh"},"content":"        if (command.length \u003c 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":190,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Deadline needs a name and due date!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":191,"author":{"gitId":"dillongoh"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":192,"author":{"gitId":"dillongoh"},"content":"            String[] details \u003d command[1].split(\" /by \", 2);","lastModifiedDate":"2023-01-26"},{"lineNumber":193,"author":{"gitId":"dillongoh"},"content":"            if (details.length \u003c 2) {","lastModifiedDate":"2023-01-26"},{"lineNumber":194,"author":{"gitId":"dillongoh"},"content":"                throw new InputException(\"BLUB! Deadline is missing info!\"","lastModifiedDate":"2023-01-30"},{"lineNumber":195,"author":{"gitId":"dillongoh"},"content":"                    + \" PLease check input. BLUB!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":196,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":197,"author":{"gitId":"dillongoh"},"content":"            Deadline newDeadline \u003d new Deadline(details[0], details[1]);","lastModifiedDate":"2023-01-26"},{"lineNumber":198,"author":{"gitId":"dillongoh"},"content":"            tasks.add(newDeadline);","lastModifiedDate":"2023-01-26"},{"lineNumber":199,"author":{"gitId":"dillongoh"},"content":"            return Ui.add(newDeadline, tasks.size());","lastModifiedDate":"2023-01-30"},{"lineNumber":200,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":201,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":202,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"dillongoh":202}},{"path":"src/main/java/tunabot/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import java.io.File;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"import tunabot.exceptions.InputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Deadline;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Event;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":" * Class to handle Storage of TunaBot","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"public class Storage {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"    private static Path filePath;","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"        Storage.filePath \u003d filePath;","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"     * Creates a save file and save folder if it doesn\u0027t already exist","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"     * @return TaskList generated by loadSave()","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"     * @throws IOException if an I/O Exception occurs when creating a new file.","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"    public TaskList load() throws IOException {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"        File saveFile \u003d getSaveFile();","lastModifiedDate":"2023-02-04"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"        return loadSave(saveFile);","lastModifiedDate":"2023-02-04"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"    private File getSaveFile() throws IOException {","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"        File saveFile \u003d filePath.toFile();","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"        Path parentPath \u003d filePath.getParent();","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"        File parentFolder \u003d parentPath.toFile();","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"        if (!parentFolder.exists()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"            parentFolder.mkdir();","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"        if (!saveFile.exists()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"            saveFile.createNewFile();","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"        return saveFile;","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"    private static TaskList loadSave(File saveFile) {","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"            Scanner saveReader \u003d new Scanner(saveFile);","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"            while (saveReader.hasNextLine()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"                String [] taskInfo \u003d saveReader.nextLine().split(\";\");","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"                switch (taskInfo[0]) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"                case \"T\":","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"                    tasks.add(new Task(taskInfo[1], taskInfo[2]));","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"                    break;","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"dillongoh"},"content":"                case \"D\":","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"dillongoh"},"content":"                    tasks.add(new Deadline(taskInfo[1], taskInfo[2], taskInfo[3]));","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"dillongoh"},"content":"                    break;","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"dillongoh"},"content":"                case \"E\":","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"dillongoh"},"content":"                    tasks.add(new Event(taskInfo[1], taskInfo[2], taskInfo[3], taskInfo[4]));","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"dillongoh"},"content":"                    break;","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"dillongoh"},"content":"                default:","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"dillongoh"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"dillongoh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"dillongoh"},"content":"            System.out.println(\"BLUB! Couldn\u0027t find save file!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"dillongoh"},"content":"        } catch (InputException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":71,"author":{"gitId":"dillongoh"},"content":"            System.out.println(\"BLUB! Format error!\");","lastModifiedDate":"2023-02-04"},{"lineNumber":72,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"dillongoh"},"content":"        return tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"dillongoh"},"content":"     * Saves TaskList to the save file.","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"dillongoh"},"content":"     * @param tasks TaskList of current tasks.","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"dillongoh"},"content":"    public static void save(TaskList tasks) {","lastModifiedDate":"2023-02-12"},{"lineNumber":81,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"dillongoh"},"content":"            File saveFile \u003d filePath.toFile();","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"dillongoh"},"content":"            FileWriter writer \u003d new FileWriter(saveFile);","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"dillongoh"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"dillongoh"},"content":"                writer.write(tasks.get(i).saveFormat() + \"\\n\");","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"dillongoh"},"content":"            writer.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"dillongoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"dillongoh"},"content":"            System.out.println(\"BLUB! Couldn\u0027t save tasks!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"dillongoh":92}},{"path":"src/main/java/tunabot/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":" * Class to handle TaskList","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"public class TaskList {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"        tasks.add(t);","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"    public int size() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"    public Task get(int i) {","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"        return tasks.get(i);","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"    public void remove(int i) {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"        tasks.remove(i);","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"     * Returns a TaskList containing tasks that contain the given target String","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"     * @param target Target string to search for","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"     * @return targetList TaskList containing matching tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"    public TaskList find(String target) {","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"        TaskList targetList \u003d new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"            if (task.getName().contains(target)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"                targetList.add(task);","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"        return targetList;","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"    public void set(int index, Task updateTask) {","lastModifiedDate":"2023-02-04"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"        tasks.set(index, updateTask);","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"dillongoh":48}},{"path":"src/main/java/tunabot/TunaBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"import tunabot.exceptions.InputException;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"import tunabot.gui.Gui;","lastModifiedDate":"2023-02-14"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":" * Main class for TunaBot","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"public class TunaBot {","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"    private static final Scanner s \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"    private static TaskList tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"    private final Ui ui;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"     * Initializes a TunaBot with the given save path.","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"    public TunaBot() {","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"        Path savePath \u003d Paths.get(\"data\", \"save.txt\");","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"        Storage storage \u003d new Storage(savePath);","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"            tasks \u003d storage.load();","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"            ui.saveFileProblem();","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"        assert tasks !\u003d null : \"Storage should have loaded either an existing \"","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"            + \"task list from save file or initialised a new task list\";","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"        Application.launch(Gui.class, args);","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-14"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"            String output \u003d Parser.parse(input, tasks);","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"            if (input.equals(\"bye\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"                Storage.save(tasks);","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"                Platform.exit();","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"            return output;","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"        } catch (InputException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"            return e.getMessage();","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"dillongoh":54}},{"path":"src/main/java/tunabot/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import tunabot.task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":" * Class to handle User Interface","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"public class Ui {","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"    private static final String LINE \u003d \"------------------------------\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"    public Ui() {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"     * Returns list of given TaskList","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"     * @param tasks given TaskList","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"     * @return list of tasks","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"    public static String list(TaskList tasks) {","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"        StringBuilder list \u003d new StringBuilder(\"BLUB! There are \" + tasks.size() + \" task(s)!\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"            list.append(\"    \").append(i).append(\". \").append(tasks.get(i - 1)).append(\"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"        return list.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"    public static String mark(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"        return \"    Blub! i have marked this as done!\\n\" + task;","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"    public static String unmark(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"        return \"    Blub! i have marked this as not done!\\n\" + task;","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"     * Returns number of tasks and deleted given task","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"     * @param task Task to be deleted","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"     * @param size Number of tasks after deletion","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"     * @return String output","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"    public static String delete(Task task, int size) {","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"        String delete \u003d \"    Blub! i have deleted this task!\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"        delete +\u003d \"    Blub! You have \" + size + \" tasks now!\";","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"        return delete;","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"     * Returns number of tasks and added given task","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"     * @param newTask Task to add","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"     * @param size Number of tasks after add","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"     * @return String output","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"    public static String add(Task newTask, int size) {","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"        String add \u003d \"    Blub! added: \\n\" + newTask + \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"        add +\u003d \"    Blub! You have \" + size + \" tasks now!\";","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"        return add;","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"dillongoh"},"content":"    public void saveFileProblem() {","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"dillongoh"},"content":"        System.out.println(\"BLUB! Problem with save file!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"dillongoh"},"content":"     * Prints error when date time format is wrong.","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"dillongoh"},"content":"    public void printDateTimeFormatError() {","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"dillongoh"},"content":"        System.out.println(\"BLUB! Please use the format dd/mm/yy-hhmm \"","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"dillongoh"},"content":"                + \"with time in 24H format! eg. 29/12/23-1854\");","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"dillongoh":70}},{"path":"src/main/java/tunabot/exceptions/InputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.exceptions;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":" * Class for InputException","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"public class InputException extends Exception {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"    public InputException(String error) {","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"        super(error);","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"dillongoh":10}},{"path":"src/main/java/tunabot/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.gui;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"    private void flip() {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"     * Returns the dialog box for the user with given text and image","lastModifiedDate":"2023-02-14"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"     * @param text String entered by user","lastModifiedDate":"2023-02-14"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"     * @param img User picture","lastModifiedDate":"2023-02-14"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"     * @return Dialog box for the user","lastModifiedDate":"2023-02-14"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":59,"author":{"gitId":"dillongoh"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-12"},{"lineNumber":60,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":63,"author":{"gitId":"dillongoh"},"content":"     * Retyrns the dialog box for TunaBot","lastModifiedDate":"2023-02-14"},{"lineNumber":64,"author":{"gitId":"dillongoh"},"content":"     * @param text String returned by the parser","lastModifiedDate":"2023-02-14"},{"lineNumber":65,"author":{"gitId":"dillongoh"},"content":"     * @param img TunaBot picture","lastModifiedDate":"2023-02-14"},{"lineNumber":66,"author":{"gitId":"dillongoh"},"content":"     * @return Dialog box for TunaBot","lastModifiedDate":"2023-02-14"},{"lineNumber":67,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":68,"author":{"gitId":"dillongoh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-12"},{"lineNumber":69,"author":{"gitId":"dillongoh"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-12"},{"lineNumber":70,"author":{"gitId":"dillongoh"},"content":"        db.flip();","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"dillongoh"},"content":"        return db;","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"dillongoh":73}},{"path":"src/main/java/tunabot/gui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.gui;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"import tunabot.TunaBot;","lastModifiedDate":"2023-02-14"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":" * Class that handles the GUI for user interaction.","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"public class Gui extends Application {","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"    private TunaBot tunaBot;","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"     * Constructor that initializes a GUI.","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"    public Gui() {","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"        this.tunaBot \u003d new TunaBot();","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"     * Overrides the start method for JavaFx.","lastModifiedDate":"2023-02-14"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"     * @param stage the primary stage for this application, onto which the application scene can be","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"     *         set.","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"    @Override","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"            stage.setTitle(\"TunaBot\");","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"            stage.setResizable(false);","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(tunaBot);","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"            stage.show();","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"            exception.printStackTrace();","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"dillongoh":45}},{"path":"src/main/java/tunabot/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.gui;","lastModifiedDate":"2023-02-14"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"import tunabot.TunaBot;","lastModifiedDate":"2023-02-14"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"    private static final String GREETING \u003d \"    Hello! I\u0027m TunaBot\\n\"","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"        + \"    What can I do for you?\\n\";","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-12"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-12"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-12"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-12"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"    private TunaBot tunaBot;","lastModifiedDate":"2023-02-12"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/fish.png\"));","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"     * Initializes main window","lastModifiedDate":"2023-02-12"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-12"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-12"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"        this.dialogContainer.getChildren().add(DialogBox.getDukeDialog(GREETING, dukeImage));","lastModifiedDate":"2023-02-12"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"    public void setDuke(TunaBot t) {","lastModifiedDate":"2023-02-12"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"        tunaBot \u003d t;","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"    @FXML","lastModifiedDate":"2023-02-12"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-12"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-12"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-12"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"            DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-12"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"            DialogBox.getDukeDialog(tunaBot.getResponse(input), dukeImage)","lastModifiedDate":"2023-02-12"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"        );","lastModifiedDate":"2023-02-12"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-12"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-12"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"dillongoh":58}},{"path":"src/main/java/tunabot/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import tunabot.exceptions.InputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":" * Class to handle Deadline objects","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"     * Initializes new Deadline with the given name and deadline","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"     * @param name Name of Deadline","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"     * @param deadline Deadline of Deadline","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"    public Deadline(String name, String deadline) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"        super(name);","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"            this.deadline \u003d LocalDateTime.parse(deadline, formatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Date format is invalid! It should be dd/mm/yy-hhmm.\");","lastModifiedDate":"2023-02-04"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"     * Initializes new Deadline with the given name, status and deadline","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"     * @param name Name of Deadline","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"     * @param isDone Status of Deadline","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"     * @param deadline Date of Deadline","lastModifiedDate":"2023-02-14"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"    public Deadline(String name, String isDone, String deadline) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-04"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"            this.deadline \u003d LocalDateTime.parse(deadline, formatter);","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Date format is invalid! It should be dd/mm/yy-hhmm.\");","lastModifiedDate":"2023-02-04"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"    public void setDeadline(String deadline) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-02-04"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"            this.deadline \u003d LocalDateTime.parse(deadline, formatter);","lastModifiedDate":"2023-02-04"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Date format is invalid! It should be dd/mm/yy-hhmm.\");","lastModifiedDate":"2023-02-04"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"    public String getDeadline() {","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-01-25"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"        return deadline.format(formatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":59,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":60,"author":{"gitId":"dillongoh"},"content":"     * Returns a string representation of the deadline that matches the format used in the save file","lastModifiedDate":"2023-02-14"},{"lineNumber":61,"author":{"gitId":"dillongoh"},"content":"     * @return save file friendly format","lastModifiedDate":"2023-02-14"},{"lineNumber":62,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":63,"author":{"gitId":"dillongoh"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":64,"author":{"gitId":"dillongoh"},"content":"    public String saveFormat() {","lastModifiedDate":"2023-01-25"},{"lineNumber":65,"author":{"gitId":"dillongoh"},"content":"        return \"T;\" + this.getName() + \";\" + this.getDone() + \";\" + this.getDeadline();","lastModifiedDate":"2023-02-04"},{"lineNumber":66,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":67,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":68,"author":{"gitId":"dillongoh"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"dillongoh"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":70,"author":{"gitId":"dillongoh"},"content":"        String box;","lastModifiedDate":"2023-01-16"},{"lineNumber":71,"author":{"gitId":"dillongoh"},"content":"        if (this.getDone()) {","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"dillongoh"},"content":"            box \u003d \"[X] \";","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"dillongoh"},"content":"        } else {","lastModifiedDate":"2023-01-16"},{"lineNumber":74,"author":{"gitId":"dillongoh"},"content":"            box \u003d \"[ ] \";","lastModifiedDate":"2023-01-16"},{"lineNumber":75,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"dillongoh"},"content":"        return \"[D]\" + box + this.getName() + \" (by \" + this.getDeadline() + \")\";","lastModifiedDate":"2023-01-16"},{"lineNumber":77,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":78,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"dillongoh":78}},{"path":"src/main/java/tunabot/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import tunabot.exceptions.InputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":" * Class to handle Events","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-01-25"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"     * Initializes new Event with given name, start date and end date","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"     * @param name Name of Event","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"     * @param start Start date of Event","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"     * @param end End date of Event","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"    public Event(String name, String start, String end) throws InputException {","lastModifiedDate":"2023-02-12"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"        super(name);","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"            this.start \u003d LocalDateTime.parse(start, format);","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"            this.end \u003d LocalDateTime.parse(end, format);","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Date format is invalid! It should be dd/mm/yy-hhmm.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"     * Initializes new Event with given name, status, start date and end date","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"     * @param name Name of Event","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"     * @param isDone Status of Event","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"     * @param start Start date of Event","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"     * @param end End date of Event","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"    public Event(String name, String isDone, String start, String end) throws InputException {","lastModifiedDate":"2023-02-12"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-12"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-02-12"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"            this.start \u003d LocalDateTime.parse(start, format);","lastModifiedDate":"2023-02-12"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"            this.end \u003d LocalDateTime.parse(end, format);","lastModifiedDate":"2023-02-12"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-12"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Date format is invalid! It should be dd/mm/yy-hhmm.\");","lastModifiedDate":"2023-02-12"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-12"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"    public void setEnd(String end) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-02-04"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-04"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"            this.end \u003d LocalDateTime.parse(end, formatter);","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Date format is invalid! It should be dd/mm/yy-hhmm.\");","lastModifiedDate":"2023-02-04"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":59,"author":{"gitId":"dillongoh"},"content":"    public String getEnd() {","lastModifiedDate":"2023-01-16"},{"lineNumber":60,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"dillongoh"},"content":"        return end.format(formatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":62,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"dillongoh"},"content":"    public void setStart(String start) throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":64,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-02-04"},{"lineNumber":65,"author":{"gitId":"dillongoh"},"content":"        try {","lastModifiedDate":"2023-02-04"},{"lineNumber":66,"author":{"gitId":"dillongoh"},"content":"            this.start \u003d LocalDateTime.parse(start, formatter);","lastModifiedDate":"2023-02-04"},{"lineNumber":67,"author":{"gitId":"dillongoh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-04"},{"lineNumber":68,"author":{"gitId":"dillongoh"},"content":"            throw new InputException(\"BLUB! Date format is invalid! It should be dd/mm/yy-hhmm.\");","lastModifiedDate":"2023-02-04"},{"lineNumber":69,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-02-04"},{"lineNumber":70,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":71,"author":{"gitId":"dillongoh"},"content":"    public String getStart() {","lastModifiedDate":"2023-01-16"},{"lineNumber":72,"author":{"gitId":"dillongoh"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy-HHmm\");","lastModifiedDate":"2023-01-25"},{"lineNumber":73,"author":{"gitId":"dillongoh"},"content":"        return start.format(formatter);","lastModifiedDate":"2023-01-25"},{"lineNumber":74,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":75,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":76,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":77,"author":{"gitId":"dillongoh"},"content":"     * Returns a string representation of the event that matches the format used in the save file","lastModifiedDate":"2023-02-14"},{"lineNumber":78,"author":{"gitId":"dillongoh"},"content":"     * @return save file friendly format","lastModifiedDate":"2023-02-14"},{"lineNumber":79,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":80,"author":{"gitId":"dillongoh"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":81,"author":{"gitId":"dillongoh"},"content":"    public String saveFormat() {","lastModifiedDate":"2023-01-25"},{"lineNumber":82,"author":{"gitId":"dillongoh"},"content":"        return \"E;\" + this.getName() + \";\" + this.getDone() + \";\" + this.getStart() + \";\" + this.getEnd();","lastModifiedDate":"2023-02-04"},{"lineNumber":83,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"dillongoh"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":86,"author":{"gitId":"dillongoh"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":87,"author":{"gitId":"dillongoh"},"content":"        String box;","lastModifiedDate":"2023-01-16"},{"lineNumber":88,"author":{"gitId":"dillongoh"},"content":"        if (this.getDone()) {","lastModifiedDate":"2023-01-16"},{"lineNumber":89,"author":{"gitId":"dillongoh"},"content":"            box \u003d \"[X] \";","lastModifiedDate":"2023-01-16"},{"lineNumber":90,"author":{"gitId":"dillongoh"},"content":"        } else {","lastModifiedDate":"2023-01-16"},{"lineNumber":91,"author":{"gitId":"dillongoh"},"content":"            box \u003d \"[ ] \";","lastModifiedDate":"2023-01-16"},{"lineNumber":92,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":93,"author":{"gitId":"dillongoh"},"content":"        return \"[E]\" + box + this.getName() + \" (from: \" + this.getStart() + \" to \" + this.getEnd() + \")\";","lastModifiedDate":"2023-01-16"},{"lineNumber":94,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":95,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"dillongoh":95}},{"path":"src/main/java/tunabot/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":" * Class to handle Tasks","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"public class Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"    private String name;","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"     * Initializes new Task with given name","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"     * @param name Name of Task","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"    public Task(String name) {","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"     * Initializes new Task with given name and status","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"     * @param name Name of Task","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"     * @param isDone Status of Task","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"    public Task(String name, String isDone) {","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"        this.isDone \u003d isDone.equals(\"true\");","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"    public String getName() {","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"        return name;","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"    public boolean getDone() {","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"        return isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"dillongoh"},"content":"    public void setName(String name) {","lastModifiedDate":"2023-02-04"},{"lineNumber":36,"author":{"gitId":"dillongoh"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-04"},{"lineNumber":37,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":38,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"dillongoh"},"content":"     * Marks task as done","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"dillongoh"},"content":"    public void markDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"dillongoh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"dillongoh"},"content":"     * Marks task as undone","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"dillongoh"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"dillongoh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-16"},{"lineNumber":51,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":52,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-14"},{"lineNumber":53,"author":{"gitId":"dillongoh"},"content":"    /**","lastModifiedDate":"2023-02-14"},{"lineNumber":54,"author":{"gitId":"dillongoh"},"content":"     * Returns a string representation of the task that matches the format used in the save file","lastModifiedDate":"2023-02-14"},{"lineNumber":55,"author":{"gitId":"dillongoh"},"content":"     * @return save file friendly format","lastModifiedDate":"2023-02-14"},{"lineNumber":56,"author":{"gitId":"dillongoh"},"content":"     */","lastModifiedDate":"2023-02-14"},{"lineNumber":57,"author":{"gitId":"dillongoh"},"content":"    public String saveFormat() {","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"dillongoh"},"content":"        return \"T;\" + this.name + \";\" + this.isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"dillongoh"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":61,"author":{"gitId":"dillongoh"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"dillongoh"},"content":"        String box;","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"dillongoh"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-16"},{"lineNumber":64,"author":{"gitId":"dillongoh"},"content":"            box \u003d \"[X] \";","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"dillongoh"},"content":"        } else {","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"dillongoh"},"content":"            box \u003d \"[ ] \";","lastModifiedDate":"2023-01-16"},{"lineNumber":67,"author":{"gitId":"dillongoh"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":68,"author":{"gitId":"dillongoh"},"content":"        return \"[T]\" + box + this.getName();","lastModifiedDate":"2023-01-16"},{"lineNumber":69,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":70,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"dillongoh":70}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"285\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"dillongoh":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-12"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"tunabot.gui.MainWindow\"\u003e","lastModifiedDate":"2023-02-14"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-12"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-12"}],"authorContributionMap":{"dillongoh":19}},{"path":"src/test/java/tunabot/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"import tunabot.exceptions.InputException;","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"    public void instanceTest() throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"        Deadline task \u003d new Deadline(\"Test Task\", \"01/01/23-1800\");","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"        assertEquals(\"[D][ ] Test Task (by 01/01/23-1800)\", task.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"    public void markTest() throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"        Deadline markTask \u003d new Deadline(\"Mark Task\", \"01/01/23-1800\");","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"        markTask.markDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"        assertTrue(markTask.getDone());","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"    public void unmarkTest() throws InputException {","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"        Deadline unmarkTask \u003d new Deadline(\"Unmark Task\", \"01/01/23-1800\");","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"        unmarkTask.markDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"        unmarkTask.unmarkDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"        assertFalse(unmarkTask.getDone());","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"dillongoh":33}},{"path":"src/test/java/tunabot/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"package tunabot.task;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"public class TaskTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"    public void instanceTest() {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"        Task task \u003d new Task(\"Test Task\");","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"        assertEquals(\"[T][ ] Test Task\", task.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"    public void markTest() {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"        Task markTask \u003d new Task(\"Mark Task\");","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"        markTask.markDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"        assertTrue(markTask.getDone());","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"    public void unmarkTest() {","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"        Task unmarkTask \u003d new Task(\"Unmark Task\");","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"        unmarkTask.markDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"        unmarkTask.unmarkDone();","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"        assertFalse(unmarkTask.getDone());","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"dillongoh":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"dillongoh"},"content":"todo","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"dillongoh"},"content":"todo read book","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"dillongoh"},"content":"event","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"dillongoh"},"content":"event bookfest","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"dillongoh"},"content":"event bookfest /from 25/01/23-1800","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"dillongoh"},"content":"event bookfest /from 25/01/23-1800 /to 26/01/23-1800","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"dillongoh"},"content":"deadline","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"dillongoh"},"content":"deadline return book","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"dillongoh"},"content":"deadline return book /by 28/01/23-1800","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"dillongoh"},"content":"mark 1","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"dillongoh"},"content":"mark 2","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"dillongoh"},"content":"unmark 2","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"mark 3","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"dillongoh"},"content":"unmark task","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"dillongoh"},"content":"unmark 1","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"dillongoh"},"content":"delete 2","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"dillongoh"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"dillongoh"},"content":"banana","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"dillongoh"},"content":"baaaanan","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"dillongoh"},"content":"bye","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"dillongoh":31}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"dillongoh"},"content":"java -classpath ..\\bin tunabot.TunaBot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"dillongoh":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"dillongoh"},"content":"java -classpath ../bin TunaBot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"dillongoh":1}}]
