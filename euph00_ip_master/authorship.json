[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"euph00":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":" * The main driver class for Duke chatbot. This bot handles high level logic for the bot including startup and","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" * shutdown.","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    private final Ui ui;","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    private final TaskList taskList;","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    private final Parser parser;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"     * Primary constructor for an instance of the chatbot. This initialises the Ui, taskList, storage and parser","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"     * instances used by the bot, which are not to be modified throughout the lifecycle of the bot.","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"     * @param dataStoragePath A string representing the path which the bot\u0027s data should be stored on disk","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    Duke(String dataStoragePath) {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"        this.storage \u003d new Storage(dataStoragePath, this.taskList);","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"     * Terminates the current instance of the chatbot by exiting the program.","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    void exit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        storage.updateData(this.taskList);","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        ui.displayMessage(\"Bye. Hope to see you again soon!\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        System.exit(0);","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     * Starts an instance of the chatbot by displaying welcome message and beginning to listen for user input.","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    void run() {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        ui.welcomeMessage();","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        while (true) {","lastModifiedDate":"2023-01-15"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"            String[] tokens \u003d parser.parseUserInput();","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"            if (tokens.length \u003d\u003d 1 \u0026\u0026 tokens[0].equals(\"bye\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"                exit();","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"                break;","lastModifiedDate":"2023-01-15"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"            } else if (tokens.length \u003d\u003d 1 \u0026\u0026 tokens[0].equals(\"list\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"                ui.displayItemList(taskList);","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"            } else if (tokens[0].equals(\"mark\")) {","lastModifiedDate":"2023-01-15"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"                taskList.markListItem(tokens, ui);","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"            } else if (tokens[0].equals(\"unmark\")) {","lastModifiedDate":"2023-01-15"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"                taskList.unmarkListItem(tokens, ui);","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"            } else if (tokens[0].equals(\"todo\")) {","lastModifiedDate":"2023-01-15"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"                try {","lastModifiedDate":"2023-01-15"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"                    taskList.addToDo(tokens, ui);","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"                    ui.displayMessage(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"                }","lastModifiedDate":"2023-01-15"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"            } else if (tokens[0].equals(\"deadline\")) {","lastModifiedDate":"2023-01-15"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"                try {","lastModifiedDate":"2023-01-15"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"                    taskList.addDeadline(tokens, ui);","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"                    ui.displayMessage(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"                }","lastModifiedDate":"2023-01-15"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"            } else if (tokens[0].equals(\"event\")) {","lastModifiedDate":"2023-01-15"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"                try {","lastModifiedDate":"2023-01-15"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"                    taskList.addEvent(tokens, ui);","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"                    ui.displayMessage(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"                }","lastModifiedDate":"2023-01-15"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"            } else if (tokens[0].equals(\"delete\")) {","lastModifiedDate":"2023-01-15"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"                try {","lastModifiedDate":"2023-01-15"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"                    taskList.deleteItem(tokens, ui);","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"                    ui.displayMessage(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"                }","lastModifiedDate":"2023-01-15"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"            } else if (tokens[0].equals(\"find\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"                try {","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"                    taskList.findItemInList(tokens, ui);","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"                    ui.displayMessage(e.getMessage());","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"            } else {","lastModifiedDate":"2023-01-15"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"                ui.displayMessage(\"unknown command\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"        new Duke(\"src/data/duke.txt\").run();","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"euph00":88,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":" * This class handles the parsing of user input by breaking input strings into tokens.","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"public class Parser {","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"     * Standard constructor for an instance of Parser. This sets scanner input as \u003ccode\u003eSystem.in\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    Parser() {","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"     * Reads the next line, and breaks the result into tokens.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"     * @return A \u003ccode\u003eString[]\u003c/code\u003e containing strings from input, with each token delimited in the input","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"     * by a whitespace.","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    String[] parseUserInput() {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        return input.split(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"euph00":27}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":" * This class handles the reading from and writing to of hard disk storage for the chatbot. This class is responsible","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":" * for creating a directory path and file location to write the data stored by the bot should it not exist on startup.","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"public class Storage {","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    private final String PATHNAME;","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"     * Standard constructor for an instance of Storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"     * @param path A string path indicating the directory to create the data file at.","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"     * @param taskList An instance of \u003ccode\u003eTaskList\u003c/code\u003e associated with the instance of \u003ccode\u003eDuke\u003c/code\u003e that","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"     *                 will be using this instance of Storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    Storage(String path, TaskList taskList) {","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        PATHNAME \u003d path;","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            Scanner sc \u003d new Scanner(new File(PATHNAME));","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"                String[] tokens \u003d sc.nextLine().split(\",\");","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"                taskList.parseEventFromFile(tokens);","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        } catch (FileNotFoundException ignored) {}","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"     * Method called to write the current data in \u003ccode\u003etaskList\u003c/code\u003e instance to the file specified in PATHNAME.","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     * This method overwrites all content in the destination file.","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"     * @param tasks An instance of \u003ccode\u003eTaskList\u003c/code\u003e that is associated with the instance of \u003ccode\u003eDuke\u003c/code\u003e","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"     *              calling this method.","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    void updateData(TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"        File file \u003d new File(PATHNAME);","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"                sb.append(task.asTokens()).append(\u0027\\n\u0027);","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"            fw.write(sb.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"            fw.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"euph00":57}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":" * This class handles the tracking of added \u003ccode\u003eTask\u003c/code\u003es while the bot is running. This is an abstraction of","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" * a list of tasks to be used by the bot.","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"public class TaskList {","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    final List\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"     * Standard constructor for an instance of TaskList.","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    TaskList() {","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"     * Method to accept tokens that were parsed by \u003ccode\u003eParser\u003c/code\u003e which read existing data from stored file on disk","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"     * and adds the contents into the current session.","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of tokens as read from the data file by \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    void parseEventFromFile(String[] tokens) {","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        String taskType \u003d tokens[0];","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        if (Objects.equals(taskType, \"T\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"            tasks.add(new ToDo(tokens[2], tokens[1]));","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        } else if (Objects.equals(taskType, \"D\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"            tasks.add(new Deadline(tokens[2], tokens[3], tokens[1]));","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        } else if (Objects.equals(taskType, \"E\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"            tasks.add(new Event(tokens[2], tokens[3], tokens[4], tokens[1]));","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"     * Method to handle adding a task to the underlying list, and trigger corresponding \u003ccode\u003eUi\u003c/code\u003e event.","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"     * @param task Target \u003ccode\u003eTask\u003c/code\u003e to be added to list.","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    void addTaskToList(Task task, Ui ui) {","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"        ui.displayMessage(\"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"                task.toString() +","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"                \"\\nNow you have \" +","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"                tasks.size() +","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"                \" tasks in the list\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"     * Method to check the validity of the format of a \u003ccode\u003eToDo\u003c/code\u003e task, and adds it to the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the name of the task is not specified.","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    void addToDo(String[] tokens, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"        if (tokens.length \u003c 2) {","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"The description of a todo cannot be empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"            sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        sb.deleteCharAt(sb.length()-1);","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        ToDo td \u003d new ToDo(sb.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        addTaskToList(td, ui);","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"     * Method to check the validity of the format of a \u003ccode\u003eDeadLine\u003c/code\u003e task, and adds it to the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the name of the task is not specified, or the deadline is not specified","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"     * in the correct format with \u003ccode\u003e/by\u003c/code\u003e tag.","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"    void addDeadline(String[] tokens, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"        int idxDelimiter \u003d Arrays.asList(tokens).indexOf(\"/by\");","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"        if (idxDelimiter \u003d\u003d -1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"deadline tasks must be specified by /by [deadline] format\");","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"        } else if (idxDelimiter \u003d\u003d tokens.length - 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify a deadline after the /by tag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"        } else if (idxDelimiter \u003d\u003d 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"            for (int i \u003d 1; i \u003c idxDelimiter; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"                sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"            String taskName \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"            sb.delete(0, sb.length());","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"            for (int i \u003d idxDelimiter + 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"                sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"            String dueDate \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"                Task task \u003d new Deadline(taskName, dueDate);","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"                addTaskToList(task, ui);","lastModifiedDate":"2023-01-26"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"                ui.displayMessage(\"Please enter a valid date in the format YYYY-MM-DD/HH:mm\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"     * Method to check the validity of the format of a \u003ccode\u003eDeadLine\u003c/code\u003e task, and adds it to the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the name of the task is not specified, or the from and to date times are","lastModifiedDate":"2023-01-26"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"     * not specified in the correct format with \u003ccode\u003e/from\u003c/code\u003e and \u003ccode\u003e/to\u003c/code\u003e tags.","lastModifiedDate":"2023-01-26"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"    void addEvent(String[] tokens, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"        int idxFrom \u003d Arrays.asList(tokens).indexOf(\"/from\");","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"        int idxTo \u003d Arrays.asList(tokens).indexOf(\"/to\");","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"        if (idxFrom \u003d\u003d -1 || idxTo \u003d\u003d -1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"event tasks must be specified by a /from [start] /to [end] format\");","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"        } else if (idxFrom \u003e idxTo) {","lastModifiedDate":"2023-01-24"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"/to flag must come after /from flag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"        } else if (idxFrom \u003d\u003d 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"The description of a event task cannot be empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"        } else if (idxTo - idxFrom \u003d\u003d 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify a start datetime after /from flag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"        } else if (tokens.length - 1 \u003d\u003d idxTo) {","lastModifiedDate":"2023-01-24"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify an end datetime after /to flag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"            for (int i \u003d 1; i \u003c idxFrom; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"                sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"            String taskName \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"            sb.delete(0, sb.length());","lastModifiedDate":"2023-01-24"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"            for (int i \u003d idxFrom + 1; i \u003c idxTo; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"                sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"            String taskFrom \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"            sb.delete(0, sb.length());","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"            for (int i \u003d idxTo + 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"                sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"            String taskTo \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"                Task task \u003d new Event(taskName, taskFrom, taskTo);","lastModifiedDate":"2023-01-24"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"                addTaskToList(task, ui);","lastModifiedDate":"2023-01-26"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"                ui.displayMessage(\"Please enter valid dates in the format YYYY-MM-DD/HH:mm\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"     * Method to mark a list item and trigger corresponding \u003ccode\u003eUi\u003c/code\u003e event.","lastModifiedDate":"2023-01-26"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e, specifying the index to mark.","lastModifiedDate":"2023-01-26"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"    void markListItem(String[] tokens, Ui ui) {","lastModifiedDate":"2023-01-24"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"            int listIndex \u003d Integer.parseInt(tokens[1])-1;","lastModifiedDate":"2023-01-24"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"            tasks.get(listIndex).setStatus(\"X\");","lastModifiedDate":"2023-01-24"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"Nice! I\u0027ve marked this task as done:\\n\" +","lastModifiedDate":"2023-01-24"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"                    tasks.get(listIndex).toString() + \"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"Please specify a numerical task index to mark\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"Please specify a valid index to mark\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":176,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"     * Method to unmark a list item and trigger corresponding \u003ccode\u003eUi\u003c/code\u003e event.","lastModifiedDate":"2023-01-26"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e, specifying the index to unmark.","lastModifiedDate":"2023-01-26"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"    void unmarkListItem(String[] tokens, Ui ui) {","lastModifiedDate":"2023-01-24"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":186,"author":{"gitId":"euph00"},"content":"            int listIndex \u003d Integer.parseInt(tokens[1]) - 1;","lastModifiedDate":"2023-01-24"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"            tasks.get(listIndex).setStatus(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"OK, I\u0027ve marked this task as not done yet:\\n\" +","lastModifiedDate":"2023-01-24"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"                    tasks.get(listIndex).toString() + \"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"Please specify a numerical task index to unmark\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"Please specify a valid index to unmark\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":198,"author":{"gitId":"euph00"},"content":"     * Method to delete an item from the list and trigger corresponding \u003ccode\u003eUi\u003c/code\u003e event.","lastModifiedDate":"2023-01-26"},{"lineNumber":199,"author":{"gitId":"euph00"},"content":"     * @param tokens tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e, specifying the index to delete.","lastModifiedDate":"2023-01-26"},{"lineNumber":200,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":201,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the specified list index is out of bounds, or the argument corresponding","lastModifiedDate":"2023-01-26"},{"lineNumber":202,"author":{"gitId":"euph00"},"content":"     * to the deletion index is not an integer.","lastModifiedDate":"2023-01-26"},{"lineNumber":203,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":204,"author":{"gitId":"euph00"},"content":"    void deleteItem(String[] tokens, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":205,"author":{"gitId":"euph00"},"content":"        if (tokens.length !\u003d 2) {","lastModifiedDate":"2023-01-24"},{"lineNumber":206,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify delete command as delete [list index]\");","lastModifiedDate":"2023-01-24"},{"lineNumber":207,"author":{"gitId":"euph00"},"content":"        } else if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":208,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Task list is empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":209,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":210,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":211,"author":{"gitId":"euph00"},"content":"            int listIndex \u003d Integer.parseInt(tokens[1]) - 1;","lastModifiedDate":"2023-01-24"},{"lineNumber":212,"author":{"gitId":"euph00"},"content":"            Task removed \u003d tasks.remove(listIndex);","lastModifiedDate":"2023-01-24"},{"lineNumber":213,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"Noted. I\u0027ve removed this task:\\n\" +","lastModifiedDate":"2023-01-24"},{"lineNumber":214,"author":{"gitId":"euph00"},"content":"                    removed.toString() +","lastModifiedDate":"2023-01-24"},{"lineNumber":215,"author":{"gitId":"euph00"},"content":"                    \"\\nNow you have \" + tasks.size() + \" tasks in the list\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":216,"author":{"gitId":"euph00"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":217,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"please specify a valid number to delete entry\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":218,"author":{"gitId":"euph00"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":219,"author":{"gitId":"euph00"},"content":"            ui.displayMessage(\"please specify a valid index to delete\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":220,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":221,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":222,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":223,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":224,"author":{"gitId":"euph00"},"content":"     * Method to find all items containing keyword in the list, and invokes the associated Ui event to","lastModifiedDate":"2023-01-26"},{"lineNumber":225,"author":{"gitId":"euph00"},"content":"     * display matching items","lastModifiedDate":"2023-01-26"},{"lineNumber":226,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e provided by \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":227,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e belonging to the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":228,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that no keyword is specified.","lastModifiedDate":"2023-01-26"},{"lineNumber":229,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":230,"author":{"gitId":"euph00"},"content":"    void findItemInList(String[] tokens, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-26"},{"lineNumber":231,"author":{"gitId":"euph00"},"content":"        if (tokens.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":232,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please provide a keyword or keywords to search for\");","lastModifiedDate":"2023-01-26"},{"lineNumber":233,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":234,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-26"},{"lineNumber":235,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":236,"author":{"gitId":"euph00"},"content":"            sb.append(tokens[i]).append(\u0027 \u0027);","lastModifiedDate":"2023-01-26"},{"lineNumber":237,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":238,"author":{"gitId":"euph00"},"content":"        sb.deleteCharAt(sb.length()-1);","lastModifiedDate":"2023-01-26"},{"lineNumber":239,"author":{"gitId":"euph00"},"content":"        List\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":240,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":241,"author":{"gitId":"euph00"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2023-01-26"},{"lineNumber":242,"author":{"gitId":"euph00"},"content":"            if (task.getName().matches(\".*\" + sb + \".*\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":243,"author":{"gitId":"euph00"},"content":"                indices.add(i);","lastModifiedDate":"2023-01-26"},{"lineNumber":244,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":245,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":246,"author":{"gitId":"euph00"},"content":"        ui.displayItemsAtIndices(this, indices);","lastModifiedDate":"2023-01-26"},{"lineNumber":247,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":248,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":249,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":250,"author":{"gitId":"euph00"},"content":"     * Returns number of elements in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":251,"author":{"gitId":"euph00"},"content":"     * @return \u003ccode\u003eint\u003c/code\u003e representing number of elements in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":252,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":253,"author":{"gitId":"euph00"},"content":"    public int size() {","lastModifiedDate":"2023-01-24"},{"lineNumber":254,"author":{"gitId":"euph00"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-24"},{"lineNumber":255,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":256,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":257,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":258,"author":{"gitId":"euph00"},"content":"     * Returns the item at specified index in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":259,"author":{"gitId":"euph00"},"content":"     * @param idx Index of desired item.","lastModifiedDate":"2023-01-26"},{"lineNumber":260,"author":{"gitId":"euph00"},"content":"     * @return \u003ccode\u003eTask\u003c/code\u003e object that is at the index specified.","lastModifiedDate":"2023-01-26"},{"lineNumber":261,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":262,"author":{"gitId":"euph00"},"content":"    public Task get(int idx) {","lastModifiedDate":"2023-01-24"},{"lineNumber":263,"author":{"gitId":"euph00"},"content":"        return tasks.get(idx);","lastModifiedDate":"2023-01-24"},{"lineNumber":264,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":265,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"euph00":265}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":" * This class handles the formatting and outputting of text based UI to the user.","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"public class Ui {","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"     * Method to format and print the desired message to stdout.","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"     * @param message \u003ccode\u003eString\u003c/code\u003e of message to be displayed. Include newline character at end of message.","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    void displayMessage(String message) {","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"        System.out.println(","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"                \"-----------------------------------------------------------\\n\" +","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"                message +","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"                \"-----------------------------------------------------------\\n\"","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        );","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     * Method to display standard welcome message to user.","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    void welcomeMessage() {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        displayMessage(\"\"\"","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"                Hello! I\u0027m Bob","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"                What can I do for you?","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"                \"\"\");","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"     * Method to format and display all current tasks in the \u003ccode\u003eTaskList\u003c/code\u003e to the user.","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e instance belonging to the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    void displayItemList(TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        sb.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"            sb","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"                    .append(i+1)","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"                    .append(\".\")","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"                    .append(tasks.get(i).toString())","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        displayMessage(sb.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"     * Method to display the \u003ccode\u003eTask\u003c/code\u003e items at the indices specified.","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"     * @param tasks Instance of \u003ccode\u003eTaskList\u003c/code\u003e belonging to the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"     * @param indices \u003ccode\u003eList\u003cInteger\u003e\u003c/code\u003e containing desired indices to be displayed","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    void displayItemsAtIndices(TaskList tasks, List\u003cInteger\u003e indices) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        sb.append(\"Here are the wanted tasks in your list:\\n\");","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        for (int i : indices) {","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"            sb","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"                    .append(i+1)","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"                    .append(\".\")","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"                    .append(tasks.get(i).toString())","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"        displayMessage(sb.toString());","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"euph00":67}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    //formatting","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    public String getMessage() {","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"        return super.getMessage() + \"\\n\";","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":13}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    private LocalDateTime dl;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    public Deadline(String name, String deadline) throws DateTimeParseException {","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"        super(name);","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"        this.dl \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    public Deadline(String name, String deadline, String status) {","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"        super(name, status);","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"            this.dl \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"            this.dl \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        return String.format(\"[D]%s (by: %s %d %d %02d:%02d, %s)\",","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"                super.toString(), dl.getMonth(), dl.getDayOfMonth(),","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"                dl.getYear(), dl.getHour(), dl.getMinute(), dl.getDayOfWeek());","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        return \"D,\" + super.asTokens() + \u0027,\u0027 + this.dl;","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":35}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    public Event(String name, String from, String to) {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"        super(name);","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        this.from \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        this.to \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    public Event(String name, String from, String to, String status) {","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        super(name, status);","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"            this.from \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"            this.to \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"            this.from \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"            this.to \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        return String.format(\"[E]%s (from: %s %d %d %d:%02d, to: %s %d %d %d:%02d)\",","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"                super.toString(), from.getMonth(), from.getDayOfMonth(), from.getYear(),","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"                from.getHour(), from.getMinute(), to.getMonth(), to.getDayOfMonth(),","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"                to.getYear(), to.getHour(), to.getMinute());","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        return \"E,\" + super.asTokens() +","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"                \u0027,\u0027 + this.from +","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"                \u0027,\u0027 + this.to;","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"public class Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"    private final String name;","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"    private String status;","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"    protected Task(String name) {","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"        this.status \u003d \" \";","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    protected Task(String name, String status) {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    public String getStatus() {","lastModifiedDate":"2023-01-15"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        return status;","lastModifiedDate":"2023-01-15"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    public String getName() {","lastModifiedDate":"2023-01-15"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        return name;","lastModifiedDate":"2023-01-15"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public void setStatus(String status) {","lastModifiedDate":"2023-01-15"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-01-15"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        return \"[\" + this.status + \"] \" + this.name;","lastModifiedDate":"2023-01-15"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        return this.status + \u0027,\u0027 + this.name;","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":37}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"        super(name);","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    public ToDo(String name, String status) {","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"        super(name, status);","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-15"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        return \"T,\" + super.asTokens();","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":21}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    public void initExitTest() {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        ByteArrayOutputStream printedString \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        System.setOut(new PrintStream(printedString));","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"        ByteArrayInputStream inputString \u003d new ByteArrayInputStream((\"bye\\n\").getBytes());","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        System.setIn(inputString);","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        Duke duke \u003d new Duke(\"src/data/duke.txt\");","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        duke.run();","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        assertEquals(\"-----------------------------------------------------------\" +","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"                        \"Hello! I\u0027m BobWhat can I do for you?\" +","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"                        \"----------------------------------------------------------------\" +","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"                        \"------------------------------------------------------\" +","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"                        \"Bye. Hope to see you again soon!\" +","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"                        \"-----------------------------------------------------------\",","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"                printedString.toString()","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"                        .replace(\"\\n\", \"\")","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"                        .replace(\"\\r\", \"\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"euph00":31}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    public void parseEventFromFileTest() {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        TaskList lst \u003d new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        String[] input \u003d new String[]{\"T\", \"X\", \"this is a test task\"};","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        lst.parseEventFromFile(input);","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        assertEquals(lst.tasks.get(0).getName(), \"this is a test task\");","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        assertEquals(\"X\", lst.tasks.get(0).getStatus());","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        assertTrue(lst.tasks.get(0) instanceof ToDo);","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    public void addTaskToListTest() {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        ByteArrayOutputStream printedString \u003d new ByteArrayOutputStream(); //buf to capture stdout","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        PrintStream console \u003d System.out; //saving console buffer","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        System.setOut(new PrintStream(printedString));","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        TaskList lst \u003d new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"        Task task \u003d new ToDo(\"this is a test task\");","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        lst.addTaskToList(task, ui);","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        assertEquals(1, lst.size());","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        assertTrue(lst.tasks.get(0) instanceof ToDo);","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        assertEquals(lst.tasks.get(0).getName(), \"this is a test task\");","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        System.setOut(console); //restoring stdout to console","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"euph00":40}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"todo borrow book","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"mark 1","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"unmark 1","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"deadline return book /by 2022-11-11/11:00","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"mark 2","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"unmark 2","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"event project meeting /from 2022-10-11/11:00 /to 2022-10-11/12:00","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"mark 3","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"unmark 3","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"list","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"todo","lastModifiedDate":"2023-01-15"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"deadline","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"deadline return book","lastModifiedDate":"2023-01-15"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"deadline return book /by","lastModifiedDate":"2023-01-15"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"deadline /by sunday","lastModifiedDate":"2023-01-15"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"deadline /by","lastModifiedDate":"2023-01-15"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"deadline /by 2020-11-12-1000/11:00","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"event","lastModifiedDate":"2023-01-15"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"event /from /to","lastModifiedDate":"2023-01-15"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"event meeting /from sunday","lastModifiedDate":"2023-01-15"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"event meeting /from /to","lastModifiedDate":"2023-01-15"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"event /from","lastModifiedDate":"2023-01-15"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"event /to","lastModifiedDate":"2023-01-15"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"event meeting /from /to sunday","lastModifiedDate":"2023-01-15"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"event meeting /from 2022-11-11-1000/11:00 /to 2022-11-11-1100/12:00","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"delete","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"delete 1","lastModifiedDate":"2023-01-15"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"delete 1","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"delete 1","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"delete 1","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"delete 1","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"delete 1","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"delete k","lastModifiedDate":"2023-01-15"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"delete 22222","lastModifiedDate":"2023-01-15"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"bye??","lastModifiedDate":"2023-01-15"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"bye","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":39}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"euph00":1,"-":20}}]
