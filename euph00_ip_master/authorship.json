[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"euph00":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"euph00":20,"-":36}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import duke.ui.UiController;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":" * The main driver class for Duke chatbot. This bot handles high level logic for the bot including startup and","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":" * shutdown.","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    private final UiController ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    private final TaskList taskList;","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    private final Parser parser;","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"     * Primary constructor for an instance of the chatbot. This initialises the Ui, taskList, storage and parser","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     * instances used by the bot, which are not to be modified throughout the lifecycle of the bot.","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    public Duke() {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        this.ui \u003d new UiController(this);","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        this.storage \u003d new Storage(\"src/data/duke.txt\", this.taskList);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"     * Terminates the current instance of the chatbot by exiting the program after displaying exit message.","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    void exit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        storage.updateData(this.taskList);","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        ui.displayGoodbyeMessage();","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        System.exit(0);","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    private String taskAddedMessage(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"                task.toString() +","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"                \"\\nNow you have \" +","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"                taskList.size() +","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"                \" tasks in the list\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    private String taskTaggedMessage(Task task) {","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        return \"Got it. I\u0027ve tagged this task:\\n\" +","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"                task.toString() + \"\\n\";","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"    private Message handleDisplayCommand(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        assert(tokens[0].equals(\"list\") || tokens[0].equals(\"find\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        switch(tokens[0]) {","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        case \"list\":","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"            if (tokens.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"                return new Message(taskList.getItemListAsResponseString());","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"            } else throw new DukeException(\"command \\\"list\\\" takes no arguments\");","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"        case \"find\":","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"            List\u003cInteger\u003e indexList \u003d taskList.getMatchingItemsIndices(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"            return new Message(taskList.getItemListAsResponseString(indexList));","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"        default:","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"broken display command\");","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"    private Message handleEditCommand(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"        assert(tokens[0].equals(\"mark\") || tokens[0].equals(\"unmark\") || tokens[0].equals(\"tag\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"        switch(tokens[0]) {","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-08"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"            Task updatedTask \u003d taskList.markListItem(tokens);","lastModifiedDate":"2023-02-08"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"            return new Message(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"                    + updatedTask.toString() + \"\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-08"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"            Task unmarkedTask \u003d taskList.unmarkListItem(tokens);","lastModifiedDate":"2023-02-08"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"            return new Message(\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"                    + unmarkedTask.toString() + \"\\n\");","lastModifiedDate":"2023-02-08"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"        case \"tag\":","lastModifiedDate":"2023-02-11"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"            Task taggedTask \u003d taskList.addTag(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"            return new Message(taskTaggedMessage(taggedTask));","lastModifiedDate":"2023-02-11"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"        default:","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"broken edit command\");","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"    private Message handleAddCommand(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"        assert(tokens[0].equals(\"todo\") || tokens[0].equals(\"deadline\") || tokens[0].equals(\"event\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"        switch(tokens[0]) {","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-08"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"            Task addedTodoTask \u003d taskList.addToDo(tokens);","lastModifiedDate":"2023-02-08"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"            return new Message(taskAddedMessage(addedTodoTask));","lastModifiedDate":"2023-02-08"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-08"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"            Task addedDeadlineTask \u003d taskList.addDeadline(tokens);","lastModifiedDate":"2023-02-08"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"            return new Message(taskAddedMessage(addedDeadlineTask));","lastModifiedDate":"2023-02-08"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"        case \"event\":","lastModifiedDate":"2023-02-08"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"            Task addedEventTask \u003d taskList.addEvent(tokens);","lastModifiedDate":"2023-02-08"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"            return new Message(taskAddedMessage(addedEventTask));","lastModifiedDate":"2023-02-08"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"        default:","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"broken add command\");","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"    private Message handleDeleteCommand(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"        switch(tokens[0]) {","lastModifiedDate":"2023-02-11"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-08"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"            Task removedTask \u003d taskList.deleteItem(tokens, ui);","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"            return new Message(\"Noted. I\u0027ve removed this task:\\n\" +","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"                    removedTask +","lastModifiedDate":"2023-01-30"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"                    \"\\nNow you have \" + taskList.size() + \" tasks in the list\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"        default:","lastModifiedDate":"2023-02-08"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"broken delete command\");","lastModifiedDate":"2023-02-11"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"    private Message handleUnknownCommand(String[] tokens) {","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"        return new Message(\"unknown command\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"     * Returns a \u003ccode\u003eMessage\u003c/code\u003e that represents the response of the chatbot when prompted by an input by user.","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"     * @param msg A \u003ccode\u003eMessage\u003c/code\u003e object representing the user\u0027s request","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"     * @return A \u003ccode\u003eMessage\u003c/code\u003e object containing the response of the bot to the user\u0027s request","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"    public Message respondToMessage(Message msg) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"        assert(msg !\u003d null);","lastModifiedDate":"2023-02-11"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"        String input \u003d msg.getMessage();","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"        String[] tokens \u003d parser.parseUserInput(input);","lastModifiedDate":"2023-02-11"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"        if (tokens.length \u003d\u003d 1 \u0026\u0026 tokens[0].equals(\"bye\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"            exit();","lastModifiedDate":"2023-02-11"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"            return new Message(\"This message should never show up\");","lastModifiedDate":"2023-02-11"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"        String command \u003d tokens[0];","lastModifiedDate":"2023-02-11"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"        return switch (command) {","lastModifiedDate":"2023-02-11"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"            case \"list\", \"find\" -\u003e handleDisplayCommand(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"            case \"mark\", \"unmark\", \"tag\" -\u003e handleEditCommand(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"            case \"todo\", \"deadline\", \"event\" -\u003e handleAddCommand(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"            case \"delete\" -\u003e handleDeleteCommand(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"            default -\u003e handleUnknownCommand(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"        };","lastModifiedDate":"2023-02-11"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-31"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"     * @param stage","lastModifiedDate":"2023-01-31"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"        ui.initUiElems(stage);","lastModifiedDate":"2023-01-31"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"        ui.displayWelcomeMessage();","lastModifiedDate":"2023-01-30"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"euph00":165,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":" * Entry point for the chatbot to circumvent JavaFX dependency issues.","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"public class Launcher {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"euph00":12}},{"path":"src/main/java/duke/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":" * POJO representing the messages passed between user and the chatbot within internal systems.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"public class Message {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    private final String message;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"     * Constructs a \u003ccode\u003eMessage\u003c/code\u003e with given contents.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"     * @param message message to be passed","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    public Message(String message) {","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"     * Returns the \u003ccode\u003eString\u003c/code\u003e message contained in the object","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"     * @return \u003ccode\u003eString\u003c/code\u003e passed message","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    public String getMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"        return message;","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"euph00":25}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":" * This class handles the parsing of user input by breaking input strings into tokens.","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"public class Parser {","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"     * Reads the next line, and breaks the result into tokens.","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"     * @return A \u003ccode\u003eString[]\u003c/code\u003e containing strings from input, with each token delimited in the input","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"     * by a whitespace.","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    String[] parseUserInput(String input) {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        return input.split(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"euph00":16}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.io.File;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":" * This class handles the reading from and writing to of hard disk storage for the chatbot. This class is responsible","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":" * for creating a directory path and file location to write the data stored by the bot should it not exist on startup.","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"public class Storage {","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"    private final String PATHNAME;","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"     * Standard constructor for an instance of Storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"     * @param path A string path indicating the directory to create the data file at.","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"     * @param taskList An instance of \u003ccode\u003eTaskList\u003c/code\u003e associated with the instance of \u003ccode\u003eDuke\u003c/code\u003e that","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"     *                 will be using this instance of Storage.","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    Storage(String path, TaskList taskList) {","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        PATHNAME \u003d path;","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            Scanner sc \u003d new Scanner(new File(PATHNAME));","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"                String[] tokens \u003d sc.nextLine().split(\",\");","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"                taskList.parseEventFromFile(tokens);","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"        } catch (FileNotFoundException ignored) {}","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"     * Writes the current data in \u003ccode\u003etaskList\u003c/code\u003e instance to the file specified in PATHNAME.","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     * This method overwrites all content in the destination file.","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"     * @param tasks An instance of \u003ccode\u003eTaskList\u003c/code\u003e that is associated with the instance of \u003ccode\u003eDuke\u003c/code\u003e","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"     *              calling this method.","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    void updateData(TaskList tasks) {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"        assert(tasks !\u003d null);","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        File file \u003d new File(PATHNAME);","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"                sb.append(task.asTokens()).append(\u0027\\n\u0027);","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"            fw.write(sb.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"            fw.close();","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"euph00":58}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import duke.ui.UiController;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import java.util.List;","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import java.util.Objects;","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":" * This class handles the tracking of added \u003ccode\u003eTask\u003c/code\u003es while the bot is running. This is an abstraction of","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" * a list of tasks to be used by the bot.","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"public class TaskList {","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    final List\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"     * Standard constructor for an instance of TaskList.","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    TaskList() {","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"     * Accepts tokens that were parsed by \u003ccode\u003eParser\u003c/code\u003e which read existing data from stored file on disk","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"     * and adds the contents into the current session.","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of tokens as read from the data file by \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    void parseEventFromFile(String[] tokens) {","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        String taskType \u003d tokens[0];","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"        if (Objects.equals(taskType, \"T\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"            tasks.add(new ToDo(tokens[3], tokens[1], tokens[2]));","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        } else if (Objects.equals(taskType, \"D\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"            tasks.add(new Deadline(tokens[3], tokens[4], tokens[1], tokens[2]));","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        } else if (Objects.equals(taskType, \"E\")) {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"            tasks.add(new Event(tokens[3], tokens[4], tokens[5], tokens[1], tokens[2]));","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"     * @param task Target \u003ccode\u003eTask\u003c/code\u003e to be added to list.","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    void addTaskToList(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"     * Checks the validity of the format of a \u003ccode\u003eToDo\u003c/code\u003e task, and adds it to the list.","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the name of the task is not specified.","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"     * @return The added \u003ccode\u003eToDo\u003c/code\u003e.","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    ToDo addToDo(String[] tokens) throws DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"        assert(tokens[0].equals(\"todo\"));","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"        if (tokens.length \u003c 2) {","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"The description of a todo cannot be empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"            sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"        sb.deleteCharAt(sb.length()-1);","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"        ToDo td \u003d new ToDo(sb.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        addTaskToList(td);","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"        return td;","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"euph00"},"content":"     * Checks the validity of the format of a \u003ccode\u003eDeadLine\u003c/code\u003e task, and adds it to the list.","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the name of the task is not specified, or the deadline is not specified","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"euph00"},"content":"     * in the correct format with \u003ccode\u003e/by\u003c/code\u003e tag.","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"euph00"},"content":"     * @return The added \u003ccode\u003eDeadline\u003c/code\u003e.","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"euph00"},"content":"    Deadline addDeadline(String[] tokens) throws DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"euph00"},"content":"        assert(tokens[0].equals(\"Deadline\"));","lastModifiedDate":"2023-02-08"},{"lineNumber":84,"author":{"gitId":"euph00"},"content":"        assert(tokens.length \u003e\u003d 4);","lastModifiedDate":"2023-02-08"},{"lineNumber":85,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"euph00"},"content":"        int idxDelimiter \u003d Arrays.asList(tokens).indexOf(\"/by\");","lastModifiedDate":"2023-01-24"},{"lineNumber":87,"author":{"gitId":"euph00"},"content":"        if (idxDelimiter \u003d\u003d -1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":88,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"deadline tasks must be specified by /by [deadline] format\");","lastModifiedDate":"2023-01-24"},{"lineNumber":89,"author":{"gitId":"euph00"},"content":"        } else if (idxDelimiter \u003d\u003d tokens.length - 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":90,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify a deadline after the /by tag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":91,"author":{"gitId":"euph00"},"content":"        } else if (idxDelimiter \u003d\u003d 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":92,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"euph00"},"content":"        } else {","lastModifiedDate":"2023-01-24"},{"lineNumber":94,"author":{"gitId":"euph00"},"content":"            for (int i \u003d 1; i \u003c idxDelimiter; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"euph00"},"content":"                sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":97,"author":{"gitId":"euph00"},"content":"            String taskName \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":98,"author":{"gitId":"euph00"},"content":"            sb.delete(0, sb.length());","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"euph00"},"content":"            for (int i \u003d idxDelimiter + 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"euph00"},"content":"                sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"euph00"},"content":"            String dueDate \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"euph00"},"content":"            try {","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"euph00"},"content":"                Deadline task \u003d new Deadline(taskName, dueDate);","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"euph00"},"content":"                addTaskToList(task);","lastModifiedDate":"2023-01-30"},{"lineNumber":106,"author":{"gitId":"euph00"},"content":"                return task;","lastModifiedDate":"2023-01-30"},{"lineNumber":107,"author":{"gitId":"euph00"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"euph00"},"content":"                throw new DukeException(\"Please enter a valid date in the format YYYY-MM-DD/HH:mm\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-24"},{"lineNumber":110,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"euph00"},"content":"    private int[] checkEventFormattingAndDelimit(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"euph00"},"content":"        int idxFrom \u003d Arrays.asList(tokens).indexOf(\"/from\");","lastModifiedDate":"2023-01-24"},{"lineNumber":115,"author":{"gitId":"euph00"},"content":"        int idxTo \u003d Arrays.asList(tokens).indexOf(\"/to\");","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"euph00"},"content":"        if (idxFrom \u003d\u003d -1 || idxTo \u003d\u003d -1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"event tasks must be specified by a /from [start] /to [end] format\");","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"euph00"},"content":"        } else if (idxFrom \u003e idxTo) {","lastModifiedDate":"2023-01-24"},{"lineNumber":119,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"/to flag must come after /from flag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":120,"author":{"gitId":"euph00"},"content":"        } else if (idxFrom \u003d\u003d 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":121,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"The description of a event task cannot be empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":122,"author":{"gitId":"euph00"},"content":"        } else if (idxTo - idxFrom \u003d\u003d 1) {","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify a start datetime after /from flag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"euph00"},"content":"        } else if (tokens.length - 1 \u003d\u003d idxTo) {","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify an end datetime after /to flag\");","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"euph00"},"content":"        return new int[]{idxFrom, idxTo};","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":130,"author":{"gitId":"euph00"},"content":"    private Event buildEvent(String[] tokens, int[] delimiters) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":131,"author":{"gitId":"euph00"},"content":"        int idxFrom \u003d delimiters[0];","lastModifiedDate":"2023-02-11"},{"lineNumber":132,"author":{"gitId":"euph00"},"content":"        int idxTo \u003d delimiters[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 1; i \u003c idxFrom; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":135,"author":{"gitId":"euph00"},"content":"            sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":136,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":137,"author":{"gitId":"euph00"},"content":"        String taskName \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":138,"author":{"gitId":"euph00"},"content":"        sb.delete(0, sb.length());","lastModifiedDate":"2023-01-24"},{"lineNumber":139,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":140,"author":{"gitId":"euph00"},"content":"        for (int i \u003d idxFrom + 1; i \u003c idxTo; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":141,"author":{"gitId":"euph00"},"content":"            sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":142,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":143,"author":{"gitId":"euph00"},"content":"        String taskFrom \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":144,"author":{"gitId":"euph00"},"content":"        sb.delete(0, sb.length());","lastModifiedDate":"2023-01-24"},{"lineNumber":145,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":146,"author":{"gitId":"euph00"},"content":"        for (int i \u003d idxTo + 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-24"},{"lineNumber":147,"author":{"gitId":"euph00"},"content":"            sb.append(tokens[i]).append(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":148,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"euph00"},"content":"        String taskTo \u003d sb.deleteCharAt(sb.length()-1).toString();","lastModifiedDate":"2023-01-24"},{"lineNumber":150,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":151,"author":{"gitId":"euph00"},"content":"            Event task \u003d new Event(taskName, taskFrom, taskTo);","lastModifiedDate":"2023-01-31"},{"lineNumber":152,"author":{"gitId":"euph00"},"content":"            addTaskToList(task);","lastModifiedDate":"2023-01-30"},{"lineNumber":153,"author":{"gitId":"euph00"},"content":"            return task;","lastModifiedDate":"2023-01-30"},{"lineNumber":154,"author":{"gitId":"euph00"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":155,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Please enter valid dates in the format YYYY-MM-DD/HH:mm\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":156,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":157,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":158,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":159,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":160,"author":{"gitId":"euph00"},"content":"     * Checks the validity of the format of a \u003ccode\u003eDeadLine\u003c/code\u003e task, and adds it to the list.","lastModifiedDate":"2023-02-11"},{"lineNumber":161,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-02-11"},{"lineNumber":162,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the name of the task is not specified, or the from and to date times are","lastModifiedDate":"2023-02-11"},{"lineNumber":163,"author":{"gitId":"euph00"},"content":"     * not specified in the correct format with \u003ccode\u003e/from\u003c/code\u003e and \u003ccode\u003e/to\u003c/code\u003e tags.","lastModifiedDate":"2023-02-11"},{"lineNumber":164,"author":{"gitId":"euph00"},"content":"     * @return The added \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2023-02-11"},{"lineNumber":165,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":166,"author":{"gitId":"euph00"},"content":"    Event addEvent(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-11"},{"lineNumber":167,"author":{"gitId":"euph00"},"content":"        assert(tokens[0].equals(\"event\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":168,"author":{"gitId":"euph00"},"content":"        int[] delimiters \u003d checkEventFormattingAndDelimit(tokens);","lastModifiedDate":"2023-02-11"},{"lineNumber":169,"author":{"gitId":"euph00"},"content":"        return buildEvent(tokens, delimiters);","lastModifiedDate":"2023-02-11"},{"lineNumber":170,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":171,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":172,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":173,"author":{"gitId":"euph00"},"content":"     * Marks specified \u003ccode\u003eTask\u003c/code\u003e in the list.","lastModifiedDate":"2023-01-31"},{"lineNumber":174,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e, specifying the index to mark.","lastModifiedDate":"2023-01-26"},{"lineNumber":175,"author":{"gitId":"euph00"},"content":"     * @return The marked \u003ccode\u003eTask\u003c/code\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":176,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":177,"author":{"gitId":"euph00"},"content":"    Task markListItem(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":178,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":179,"author":{"gitId":"euph00"},"content":"            int listIndex \u003d Integer.parseInt(tokens[1])-1;","lastModifiedDate":"2023-01-24"},{"lineNumber":180,"author":{"gitId":"euph00"},"content":"            tasks.get(listIndex).setStatus(\"X\");","lastModifiedDate":"2023-01-24"},{"lineNumber":181,"author":{"gitId":"euph00"},"content":"            return tasks.get(listIndex);","lastModifiedDate":"2023-01-30"},{"lineNumber":182,"author":{"gitId":"euph00"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":183,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Please specify a numerical task index to mark\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":184,"author":{"gitId":"euph00"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":185,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Please specify a valid index to mark\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":186,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":187,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":188,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":189,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":190,"author":{"gitId":"euph00"},"content":"     * Unmarks specified \u003ccode\u003eTask\u003c/code\u003e in list.","lastModifiedDate":"2023-01-31"},{"lineNumber":191,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e, specifying the index to unmark.","lastModifiedDate":"2023-01-26"},{"lineNumber":192,"author":{"gitId":"euph00"},"content":"     * @return The unmarked \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2023-01-31"},{"lineNumber":193,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":194,"author":{"gitId":"euph00"},"content":"    Task unmarkListItem(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":195,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":196,"author":{"gitId":"euph00"},"content":"            int listIndex \u003d Integer.parseInt(tokens[1]) - 1;","lastModifiedDate":"2023-01-24"},{"lineNumber":197,"author":{"gitId":"euph00"},"content":"            tasks.get(listIndex).setStatus(\" \");","lastModifiedDate":"2023-01-24"},{"lineNumber":198,"author":{"gitId":"euph00"},"content":"            return tasks.get(listIndex);","lastModifiedDate":"2023-01-30"},{"lineNumber":199,"author":{"gitId":"euph00"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":200,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Please specify a numerical task index to unmark\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":201,"author":{"gitId":"euph00"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":202,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Please specify a valid index to unmark\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":203,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":204,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":205,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":206,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":207,"author":{"gitId":"euph00"},"content":"     * Deletes specified \u003ccode\u003eTask\u003c/code\u003e from list.","lastModifiedDate":"2023-01-31"},{"lineNumber":208,"author":{"gitId":"euph00"},"content":"     * @param tokens tokens \u003ccode\u003eString[]\u003c/code\u003e of arguments from \u003ccode\u003eParser\u003c/code\u003e, specifying the index to delete.","lastModifiedDate":"2023-01-26"},{"lineNumber":209,"author":{"gitId":"euph00"},"content":"     * @param ui Instance of \u003ccode\u003eUi\u003c/code\u003e associated with the calling instance of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":210,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that the specified list index is out of bounds, or the argument corresponding","lastModifiedDate":"2023-01-26"},{"lineNumber":211,"author":{"gitId":"euph00"},"content":"     * to the deletion index is not an integer.","lastModifiedDate":"2023-01-26"},{"lineNumber":212,"author":{"gitId":"euph00"},"content":"     * @return The deleted \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2023-01-31"},{"lineNumber":213,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":214,"author":{"gitId":"euph00"},"content":"    Task deleteItem(String[] tokens, UiController ui) throws DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":215,"author":{"gitId":"euph00"},"content":"        if (tokens.length !\u003d 2) {","lastModifiedDate":"2023-01-24"},{"lineNumber":216,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify delete command as delete [list index]\");","lastModifiedDate":"2023-01-24"},{"lineNumber":217,"author":{"gitId":"euph00"},"content":"        } else if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-24"},{"lineNumber":218,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Task list is empty\");","lastModifiedDate":"2023-01-24"},{"lineNumber":219,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":220,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":221,"author":{"gitId":"euph00"},"content":"            int listIndex \u003d Integer.parseInt(tokens[1]) - 1;","lastModifiedDate":"2023-01-24"},{"lineNumber":222,"author":{"gitId":"euph00"},"content":"            return tasks.remove(listIndex);","lastModifiedDate":"2023-01-30"},{"lineNumber":223,"author":{"gitId":"euph00"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":224,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify a valid number to delete entry\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":225,"author":{"gitId":"euph00"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":226,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please specify a valid index to delete\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":227,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":228,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":229,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":230,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":231,"author":{"gitId":"euph00"},"content":"     * Finds all instances of \u003ccode\u003eTasks\u003c/code\u003e with names that match pattern specified.","lastModifiedDate":"2023-01-31"},{"lineNumber":232,"author":{"gitId":"euph00"},"content":"     * @param tokens \u003ccode\u003eString[]\u003c/code\u003e provided by \u003ccode\u003eParser\u003c/code\u003e.","lastModifiedDate":"2023-01-26"},{"lineNumber":233,"author":{"gitId":"euph00"},"content":"     * @throws DukeException In the event that no keyword is specified.","lastModifiedDate":"2023-01-26"},{"lineNumber":234,"author":{"gitId":"euph00"},"content":"     * @return A \u003ccode\u003eList\u003cInteger\u003e\u003c/code\u003e containing indices that represent the indices of wanted items in the","lastModifiedDate":"2023-01-31"},{"lineNumber":235,"author":{"gitId":"euph00"},"content":"     * \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2023-01-31"},{"lineNumber":236,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":237,"author":{"gitId":"euph00"},"content":"    List\u003cInteger\u003e getMatchingItemsIndices(String[] tokens) throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":238,"author":{"gitId":"euph00"},"content":"        assert(tokens !\u003d null);","lastModifiedDate":"2023-02-08"},{"lineNumber":239,"author":{"gitId":"euph00"},"content":"        if (tokens.length \u003d\u003d 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":240,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"please provide a keyword or keywords to search for\");","lastModifiedDate":"2023-01-26"},{"lineNumber":241,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":242,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-26"},{"lineNumber":243,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 1; i \u003c tokens.length; i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":244,"author":{"gitId":"euph00"},"content":"            sb.append(tokens[i]).append(\u0027 \u0027);","lastModifiedDate":"2023-01-26"},{"lineNumber":245,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":246,"author":{"gitId":"euph00"},"content":"        sb.deleteCharAt(sb.length()-1);","lastModifiedDate":"2023-01-26"},{"lineNumber":247,"author":{"gitId":"euph00"},"content":"        List\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":248,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":249,"author":{"gitId":"euph00"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2023-01-26"},{"lineNumber":250,"author":{"gitId":"euph00"},"content":"            if (task.getName().matches(\".*\" + sb + \".*\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":251,"author":{"gitId":"euph00"},"content":"                indices.add(i);","lastModifiedDate":"2023-01-26"},{"lineNumber":252,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":253,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":254,"author":{"gitId":"euph00"},"content":"        return indices;","lastModifiedDate":"2023-01-30"},{"lineNumber":255,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":256,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":257,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":258,"author":{"gitId":"euph00"},"content":"     * Formats and gets all current tasks in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2023-02-11"},{"lineNumber":259,"author":{"gitId":"euph00"},"content":"     * @return Formatted \u003ccode\u003eString\u003c/code\u003e representation of all lists in list.","lastModifiedDate":"2023-01-31"},{"lineNumber":260,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":261,"author":{"gitId":"euph00"},"content":"    public String getItemListAsResponseString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":262,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":263,"author":{"gitId":"euph00"},"content":"        sb.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":264,"author":{"gitId":"euph00"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":265,"author":{"gitId":"euph00"},"content":"            sb","lastModifiedDate":"2023-01-30"},{"lineNumber":266,"author":{"gitId":"euph00"},"content":"                    .append(i+1)","lastModifiedDate":"2023-01-30"},{"lineNumber":267,"author":{"gitId":"euph00"},"content":"                    .append(\".\")","lastModifiedDate":"2023-01-30"},{"lineNumber":268,"author":{"gitId":"euph00"},"content":"                    .append(tasks.get(i).toString())","lastModifiedDate":"2023-01-30"},{"lineNumber":269,"author":{"gitId":"euph00"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":270,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":271,"author":{"gitId":"euph00"},"content":"        return sb.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":272,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":273,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":274,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":275,"author":{"gitId":"euph00"},"content":"     * Formats and gets the \u003ccode\u003eTask\u003c/code\u003e items at the indices specified.","lastModifiedDate":"2023-02-11"},{"lineNumber":276,"author":{"gitId":"euph00"},"content":"     * @param indices \u003ccode\u003eList\u003cInteger\u003e\u003c/code\u003e containing desired indices to be obtained.","lastModifiedDate":"2023-01-31"},{"lineNumber":277,"author":{"gitId":"euph00"},"content":"     * @return Formatted \u003ccode\u003eString\u003c/code\u003e representation of the desired items in list.","lastModifiedDate":"2023-01-31"},{"lineNumber":278,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":279,"author":{"gitId":"euph00"},"content":"    public String getItemListAsResponseString(List\u003cInteger\u003e indices) {","lastModifiedDate":"2023-01-30"},{"lineNumber":280,"author":{"gitId":"euph00"},"content":"        assert(indices !\u003d null);","lastModifiedDate":"2023-02-08"},{"lineNumber":281,"author":{"gitId":"euph00"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":282,"author":{"gitId":"euph00"},"content":"        sb.append(\"Here are the wanted tasks in your list:\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":283,"author":{"gitId":"euph00"},"content":"        for (int i : indices) {","lastModifiedDate":"2023-01-30"},{"lineNumber":284,"author":{"gitId":"euph00"},"content":"            sb","lastModifiedDate":"2023-01-30"},{"lineNumber":285,"author":{"gitId":"euph00"},"content":"                    .append(i+1)","lastModifiedDate":"2023-01-30"},{"lineNumber":286,"author":{"gitId":"euph00"},"content":"                    .append(\".\")","lastModifiedDate":"2023-01-30"},{"lineNumber":287,"author":{"gitId":"euph00"},"content":"                    .append(tasks.get(i).toString())","lastModifiedDate":"2023-01-30"},{"lineNumber":288,"author":{"gitId":"euph00"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":289,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":290,"author":{"gitId":"euph00"},"content":"        return sb.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":291,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":292,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":293,"author":{"gitId":"euph00"},"content":"    public Task addTag(String[] tokens) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":294,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":295,"author":{"gitId":"euph00"},"content":"            int index \u003d Integer.parseInt(tokens[1]) - 1;","lastModifiedDate":"2023-02-08"},{"lineNumber":296,"author":{"gitId":"euph00"},"content":"            String tag \u003d tokens[2];","lastModifiedDate":"2023-02-08"},{"lineNumber":297,"author":{"gitId":"euph00"},"content":"            if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-02-08"},{"lineNumber":298,"author":{"gitId":"euph00"},"content":"                throw new DukeException(\"Please specify a valid index\");","lastModifiedDate":"2023-02-08"},{"lineNumber":299,"author":{"gitId":"euph00"},"content":"            }","lastModifiedDate":"2023-02-08"},{"lineNumber":300,"author":{"gitId":"euph00"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2023-02-08"},{"lineNumber":301,"author":{"gitId":"euph00"},"content":"            task.setTag(tag);","lastModifiedDate":"2023-02-08"},{"lineNumber":302,"author":{"gitId":"euph00"},"content":"            return task;","lastModifiedDate":"2023-02-08"},{"lineNumber":303,"author":{"gitId":"euph00"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":304,"author":{"gitId":"euph00"},"content":"            throw new DukeException(\"Please specify a valid index to tag\");","lastModifiedDate":"2023-02-08"},{"lineNumber":305,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":306,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":307,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":308,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":309,"author":{"gitId":"euph00"},"content":"     * Returns number of elements in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":310,"author":{"gitId":"euph00"},"content":"     * @return \u003ccode\u003eint\u003c/code\u003e representing number of elements in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":311,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":312,"author":{"gitId":"euph00"},"content":"    public int size() {","lastModifiedDate":"2023-01-24"},{"lineNumber":313,"author":{"gitId":"euph00"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-24"},{"lineNumber":314,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":315,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":316,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-26"},{"lineNumber":317,"author":{"gitId":"euph00"},"content":"     * Returns the item at specified index in the list.","lastModifiedDate":"2023-01-26"},{"lineNumber":318,"author":{"gitId":"euph00"},"content":"     * @param idx Index of desired item.","lastModifiedDate":"2023-01-26"},{"lineNumber":319,"author":{"gitId":"euph00"},"content":"     * @return \u003ccode\u003eTask\u003c/code\u003e object that is at the index specified.","lastModifiedDate":"2023-01-26"},{"lineNumber":320,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-26"},{"lineNumber":321,"author":{"gitId":"euph00"},"content":"    public Task get(int idx) {","lastModifiedDate":"2023-01-24"},{"lineNumber":322,"author":{"gitId":"euph00"},"content":"        return tasks.get(idx);","lastModifiedDate":"2023-01-24"},{"lineNumber":323,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":324,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"euph00":324}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"        super(errorMessage);","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    //formatting","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    public String getMessage() {","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"        return super.getMessage() + \"\\n\";","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":13}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    private LocalDateTime dl;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    public Deadline(String name, String deadline) throws DateTimeParseException {","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"        super(name);","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"        this.dl \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    public Deadline(String name, String deadline, String status, String tag) {","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"        super(name, status, tag);","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"            this.dl \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"            this.dl \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        return String.format(\"[D]%s (by: %s %d %d %02d:%02d, %s)\",","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"                super.toString(), dl.getMonth(), dl.getDayOfMonth(),","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"                dl.getYear(), dl.getHour(), dl.getMinute(), dl.getDayOfWeek());","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        return \"D,\" + super.asTokens() + \u0027,\u0027 + this.dl;","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":35}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    public Event(String name, String from, String to) {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"        super(name);","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        this.from \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        this.to \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    public Event(String name, String from, String to, String status, String tag) {","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"        super(name, status, tag);","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"            this.from \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"            this.to \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"            this.from \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"            this.to \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\"));","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        return String.format(\"[E]%s (from: %s %d %d %d:%02d, to: %s %d %d %d:%02d)\",","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"                super.toString(), from.getMonth(), from.getDayOfMonth(), from.getYear(),","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"                from.getHour(), from.getMinute(), to.getMonth(), to.getDayOfMonth(),","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"                to.getYear(), to.getHour(), to.getMinute());","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        return \"E,\" + super.asTokens() +","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"                \u0027,\u0027 + this.from +","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"                \u0027,\u0027 + this.to;","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"public class Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"    private final String name;","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"    private String status;","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"    private String tag;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    protected Task(String name) {","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"        this.status \u003d \" \";","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"        this.tag \u003d \"\";","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"    protected Task(String name, String status, String tag) {","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    public String getStatus() {","lastModifiedDate":"2023-01-15"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        return status;","lastModifiedDate":"2023-01-15"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    public String getName() {","lastModifiedDate":"2023-01-15"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        return name;","lastModifiedDate":"2023-01-15"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    public void setStatus(String status) {","lastModifiedDate":"2023-01-15"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-01-15"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    public void setTag(String tag) {","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        if (this.tag.equals(\"\")) {","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"            return \"[\" + this.status + \"] \" + this.name;","lastModifiedDate":"2023-01-15"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-15"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        return \"[\" + this.status + \"] \" + this.name + \" #\" + this.tag;","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"        return this.status + \u0027,\u0027 + this.tag + \u0027,\u0027 + this.name;","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":47}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"        super(name);","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"    public ToDo(String name, String status, String tag) {","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"        super(name, status, tag);","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-15"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    public String asTokens() {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"        return \"T,\" + super.asTokens();","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"euph00":21}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    private Label dialog;","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(UiController.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    private void flip() {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        db.flip();","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"        return db;","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"euph00":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.Duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import duke.Message;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"    private TextField userInput;","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"    private Button sendButton;","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"    private UiController ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"    public void initialize() {","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    public void setUiController(UiController ui) {","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"    @FXML","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"        displayUserDialog(userInput.getText());","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"        displayDukeDialog(ui.getResponse(new Message(userInput.getText())).getMessage());","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        userInput.clear();","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"     * Creates a dialog entry originating from the user on the GUI.","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"     * @param userString \u003ccode\u003eString\u003c/code\u003e representing user message.","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"    private void displayUserDialog(String userString) {","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"        dialogContainer.getChildren()","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"                .add(DialogBox.getUserDialog(userString, userImage));","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"     * Creates a dialog entry originating from Duke on the GUI.","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"     * @param dukeString \u003ccode\u003eString\u003c/code\u003e representing Duke message.","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"    void displayDukeDialog(String dukeString) {","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"        dialogContainer.getChildren()","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"                .add(DialogBox.getDukeDialog(dukeString, dukeImage));","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"euph00":69}},{"path":"src/main/java/duke/ui/UiController.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke.ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"import duke.Duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.Message;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":" * This class handles the formatting and outputting of text based UI to the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"public class UiController {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    private FXMLLoader fxmlLoader;","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"    private final Duke context;","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"    public UiController(Duke context) {","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"        this.context \u003d context;","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"     * Displays welcome message from Duke on GUI.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"    public void displayWelcomeMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        String welcomeText \u003d \"\"\"","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"                Welcome! My name is Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"                How may I help?\"\"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        fxmlLoader.\u003cMainWindow\u003egetController().displayDukeDialog(welcomeText);","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"     * Displays goodbye message from Duke on GUI.","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"    public void displayGoodbyeMessage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"euph00"},"content":"        String goodbyeText \u003d \" Goodbye. Hope to see you again soon.\";","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"euph00"},"content":"        fxmlLoader.\u003cMainWindow\u003egetController().displayDukeDialog(goodbyeText);","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"euph00"},"content":"     * Initialises UI elements from FXML files.","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"euph00"},"content":"     * @param stage \u003ccode\u003eStage\u003c/code\u003e supplied to the instance of JavaFX \u003ccode\u003eApplication\u003c/code\u003e.","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"euph00"},"content":"    public void initUiElems(Stage stage) {","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"euph00"},"content":"            this.fxmlLoader \u003d new FXMLLoader(UiController.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"euph00"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"euph00"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"euph00"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"euph00"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setUiController(this);","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"euph00"},"content":"            stage.show();","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"euph00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"euph00"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"euph00"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"euph00"},"content":"     * Gets Duke\u0027s response to a message from the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"euph00"},"content":"     * @param msg User\u0027s message.","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"euph00"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"euph00"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"euph00"},"content":"    Message getResponse(Message msg) {","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"euph00"},"content":"            return context.respondToMessage(msg);","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"euph00"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"euph00"},"content":"            return new Message(e.getMessage());","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":72,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"euph00":73}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"euph00":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"648.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"648.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"800.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"776.0\" /\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"euph00":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"public class DukeTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"    public void addTodoTest() {","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"        Message msg \u003d new Message(\"todo return book\");","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"            Message response \u003d duke.respondToMessage(msg);","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"            assertEquals(\"\"\"","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"                    Got it. I\u0027ve added this task:","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"                    [T][ ] return book","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"                    Now you have 1 tasks in the list","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"                    \"\"\", response.getMessage());","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"            fail();","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"euph00":27}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"euph00"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"euph00"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"euph00"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"euph00"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"euph00"},"content":"import duke.ui.UiController;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"euph00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"euph00"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"euph00"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"euph00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"euph00"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"euph00"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"euph00"},"content":"    public void addTodoToListTest() {","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"euph00"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"euph00"},"content":"            taskList.addToDo(new String[]{\"this is not a todo\"});","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"euph00"},"content":"            Assertions.fail();","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"euph00"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"euph00"},"content":"            Assertions.fail();","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"euph00"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"euph00"},"content":"            assertTrue(true);","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"euph00"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"euph00"},"content":"            taskList.addToDo(new String[]{\"todo\", \"return\", \"book\"});","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"euph00"},"content":"            assertEquals(1, taskList.size());","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"euph00"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"euph00"},"content":"            Assertions.fail();","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"euph00"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"euph00"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"euph00"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"euph00"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"euph00":39}}]
