[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"    // id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"// javafx {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"//     version \u003d \"11\"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"//     modules \u003d [ \u0027javafx.base\u0027, \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"// }","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"checkstyle {","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"filbertphang":27,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"# Duke: User Guide","lastModifiedDate":"2023-02-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"**Duke** is a command-based note-taking desktop app that allows you to quickly add, remove, and view your tasks.","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"## Quick Start","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"1. Ensure you have Java 11 or above installed on your computer.","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"2. Download the latest `duke.jar` from [here](https://github.com/filbertphang/ip/releases)","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"3. Copy the file to the folder you want to use as the home folder for Duke.","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"4. Open a command terminal, `cd` into the folder you put the jar file in, and run the application with `java -jar duke.jar`. A GUI similar to the below should appear in a few seconds.","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"![UI Screenshot](Ui.png)","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"5. Type a command in the chat box and press \"Enter\" or press the \"Send\" button to execute it. See below for a list of possible commands.","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"## Commands","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"### List all tasks: `list`","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"Syntax: `list`","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"Displays a list of all saved tasks and their statuses.","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"### Add To-Do: `todo`","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"Syntax: `todo \u003cDESCRIPTION\u003e`","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"Adds a To-Do task to Duke. To-Do tasks only contain a description of a task to be completed.","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"### Add Deadline: `deadline`","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"Syntax: `deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e`","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"Adds a Deadline task to Duke. Deadline tasks contain a description of a task to be completed, and a deadline for the task to be completed by.","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"_Note_: The date field must be given in the format \"dd-MM-yyyy\".","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"### Add Event: `event`","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"Syntax: `event \u003cDESCRIPTION\u003e /start \u003cDATE\u003e /end \u003cDATE\u003e`","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"Adds a Event task to Duke. Event tasks contain a description of a task to be completed, a start date, and an end date for that Event.","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"_Note_: Both date fields must be given in the format \"dd-MM-yyyy\".","lastModifiedDate":"2023-02-16"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"### Mark task as done: `mark`","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"Syntax: `mark \u003cINDEX\u003e`","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"Marks the task at the given index as done.","lastModifiedDate":"2023-02-20"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"### Mark task as undone: `unmark`","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"Syntax: `unmark \u003cINDEX\u003e`","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"Marks the task at the given index as not done yet.","lastModifiedDate":"2023-02-20"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"### Delete task: `delete`","lastModifiedDate":"2023-02-16"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"Syntax: `delete \u003cINDEX\u003e`","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"Deletes the task atthe given index .","lastModifiedDate":"2023-02-20"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"### Find task: `find`","lastModifiedDate":"2023-02-20"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"Syntax: `find \u003cKEYWORD\u003e`","lastModifiedDate":"2023-02-20"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"Lists all tasks that match the given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":73,"author":{"gitId":"filbertphang"},"content":"### Archive all tasks: `archive`","lastModifiedDate":"2023-02-20"},{"lineNumber":74,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":75,"author":{"gitId":"filbertphang"},"content":"Syntax: `archive` OR `archive \u003cFILENAME\u003e`","lastModifiedDate":"2023-02-20"},{"lineNumber":76,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":77,"author":{"gitId":"filbertphang"},"content":"Archives all saved tasks to a file, then clears the task list.","lastModifiedDate":"2023-02-20"},{"lineNumber":78,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":79,"author":{"gitId":"filbertphang"},"content":"Tasks will be saved to the given filename if provided, otherwise it will be saved to \"archive-dd-MM-yyyy-HH-mm.txt\" in the current directory.","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":81,"author":{"gitId":"filbertphang"},"content":"### Exit Duke: `bye`","lastModifiedDate":"2023-02-20"},{"lineNumber":82,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":83,"author":{"gitId":"filbertphang"},"content":"Syntax: `bye`","lastModifiedDate":"2023-02-20"},{"lineNumber":84,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":85,"author":{"gitId":"filbertphang"},"content":"Bye!","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"filbertphang":62,"-":23}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"/** A JavaFX component representing a dialog box. */","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    // user images","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    private static final Image USER_IMAGE \u003d new Image(DialogBox.class.getResourceAsStream(\"/images/v2.png\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    private static final Image DUKE_IMAGE \u003d new Image(","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"            DialogBox.class.getResourceAsStream(\"/images/maurice.png\"));","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    // javafx component default settings","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    private static final int FONT_SIZE \u003d 16;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    private static final Font DEFAULT_FONT \u003d new Font(FONT_SIZE);","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    // javafx components","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    private Label text;","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"     * Creates a DialogBox with a given text string and image.","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"     * @param text  The message to be displayed","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"     * @param image The image to be displayed","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"    private DialogBox(String text, Image image) {","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        this.text \u003d new Label(text);","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        this.text.setFont(DialogBox.DEFAULT_FONT);","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"        this.text.setWrapText(true);","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        this.displayPicture \u003d new ImageView(image);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"        this.displayPicture.setFitWidth(100.0);","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"        this.displayPicture.setFitHeight(100.0);","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"     * Creates a DialogBox using the user\u0027s avatar.","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"     * @param text The message to be displayed","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"     * @return The created DialogBox","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"    public static DialogBox makeUserDialog(String text) {","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"        DialogBox dialogBox \u003d new DialogBox(\"You said: \" + text, DialogBox.USER_IMAGE);","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"        dialogBox.getChildren().addAll(dialogBox.displayPicture, dialogBox.text);","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"        dialogBox.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"        return dialogBox;","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"     * Creates a DialogBox using Duke\u0027s avatar.","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"     * @param text The message to be displayed","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"     * @return The created DialogBox","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"    public static DialogBox makeDukeDialog(String text) {","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"        DialogBox dialogBox \u003d new DialogBox(text, DialogBox.DUKE_IMAGE);","lastModifiedDate":"2023-02-07"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"        dialogBox.getChildren().addAll(dialogBox.text, dialogBox.displayPicture);","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"        dialogBox.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"        return dialogBox;","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"filbertphang":68}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"/** Duke is an interactive To-Do list created for CS2103T. */","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    /** Path to saved data */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    private static final String PATH \u003d \"/data/duke.txt\";","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    // duke components","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"     * Constructor for Duke. Initializes a Ui, TaskList, and Storage object for use","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"     * within that session.","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"     * @param path Path to the saved data","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    public Duke() {","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"        this.ui \u003d new Ui(this);","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        this.taskList \u003d new TaskList(this.ui);","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"        this.storage \u003d new Storage(Duke.PATH, this.ui);","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"    /** Runs Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"    public void run(String rawInput) {","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        Command command;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"            command \u003d Parser.parse(rawInput);","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"            command.execute(taskList, ui);","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"            isExit \u003d command.isExit();","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(e.toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"        } finally {","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"            this.ui.displayMessage();","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"            this.storage.saveToFile(this.taskList);","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"            if (isExit) {","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"                Platform.exit();","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"        this.ui.initializeStage(stage);","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"        this.storage.readToTaskList(this.taskList);","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"        this.ui.showWelcome();","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"filbertphang":57,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"/** Launches Duke with GUI. */","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"public class Launcher {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"filbertphang":10}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.command.ArchiveCommand;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"import duke.command.ToDoCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"import duke.exception.UnknownCommandException;","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"/**","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":" * Parser for Duke. Parses raw inputs from the user into the respective","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":" * commands.","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":" */","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"public class Parser {","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"     * Parses a raw command from the user.","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"     * @param rawCommand The raw command string to parse","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"     * @return A {@link duke.command.Command} object corresponding to the parsed","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"     *         command","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"     * @throws DukeException Thrown when the parser is unable to parse the raw","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"     *                       command (likely due to an invalid input)","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"    public static Command parse(String rawCommand) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        // identify command name","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"        String[] rawSplit \u003d rawCommand.split(\" \", 2);","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"        String commandName \u003d rawSplit[0];","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        String argString \u003d null;","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"        if (rawSplit.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"            argString \u003d rawSplit[1];","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"        Command command \u003d null;","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"        int index \u003d -1;","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"        String[] args \u003d null;","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"        // create commands depending on the command name","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"        switch (commandName) {","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"        case \"archive\":","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"            command \u003d new ArchiveCommand(argString);","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"            command \u003d new ByeCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"        case \"list\":","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"            command \u003d new ListCommand();","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"            // TODO: throw exception in MarkCommand if mark index out of bounds","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"            args \u003d Parser.getArgs(commandName, argString, 1);","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"            index \u003d Integer.parseInt(args[0]) - 1;","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"            command \u003d new MarkCommand(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"            // TODO: throw exception in UnmarkCommand if mark index out of bounds","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"            args \u003d Parser.getArgs(commandName, argString, 1);","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"            index \u003d Integer.parseInt(args[0]) - 1;","lastModifiedDate":"2023-01-23"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"            command \u003d new UnmarkCommand(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"        case \"delete\":","lastModifiedDate":"2023-01-23"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"            // TODO: throw exception in UnmarkCommand if mark index out of bounds","lastModifiedDate":"2023-01-23"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"            args \u003d Parser.getArgs(commandName, argString, 1);","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"            index \u003d Integer.parseInt(args[0]) - 1;","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"filbertphang"},"content":"            command \u003d new DeleteCommand(index);","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"filbertphang"},"content":"        case \"find\":","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"filbertphang"},"content":"            args \u003d Parser.getArgs(commandName, argString, 1);","lastModifiedDate":"2023-01-23"},{"lineNumber":77,"author":{"gitId":"filbertphang"},"content":"            command \u003d new FindCommand(args[0]);","lastModifiedDate":"2023-01-23"},{"lineNumber":78,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"filbertphang"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-23"},{"lineNumber":80,"author":{"gitId":"filbertphang"},"content":"            args \u003d Parser.getArgs(commandName, argString, 1, ToDoCommand.FLAGS);","lastModifiedDate":"2023-02-08"},{"lineNumber":81,"author":{"gitId":"filbertphang"},"content":"            command \u003d new ToDoCommand(args[0]);","lastModifiedDate":"2023-01-23"},{"lineNumber":82,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":83,"author":{"gitId":"filbertphang"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-23"},{"lineNumber":84,"author":{"gitId":"filbertphang"},"content":"            args \u003d Parser.getArgs(commandName, argString, 2, DeadlineCommand.FLAGS);","lastModifiedDate":"2023-02-08"},{"lineNumber":85,"author":{"gitId":"filbertphang"},"content":"            command \u003d new DeadlineCommand(args[0], args[1]);","lastModifiedDate":"2023-01-23"},{"lineNumber":86,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":87,"author":{"gitId":"filbertphang"},"content":"        case \"event\":","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"filbertphang"},"content":"            args \u003d Parser.getArgs(commandName, argString, 3, EventCommand.FLAGS);","lastModifiedDate":"2023-02-08"},{"lineNumber":89,"author":{"gitId":"filbertphang"},"content":"            command \u003d new EventCommand(args[0], args[1], args[2]);","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"filbertphang"},"content":"            break;","lastModifiedDate":"2023-01-23"},{"lineNumber":91,"author":{"gitId":"filbertphang"},"content":"        default:","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"filbertphang"},"content":"            throw new UnknownCommandException(commandName);","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"filbertphang"},"content":"        return command;","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":96,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":98,"author":{"gitId":"filbertphang"},"content":"     * Parses an argument string into an array of arguments, splitting by space (\"","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"filbertphang"},"content":"     * \").","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":101,"author":{"gitId":"filbertphang"},"content":"     * @param commandName The name of the current command","lastModifiedDate":"2023-01-23"},{"lineNumber":102,"author":{"gitId":"filbertphang"},"content":"     * @param argString   The argument string to be parsed","lastModifiedDate":"2023-01-23"},{"lineNumber":103,"author":{"gitId":"filbertphang"},"content":"     * @param numArgs     The number of arguments to be parsed","lastModifiedDate":"2023-01-23"},{"lineNumber":104,"author":{"gitId":"filbertphang"},"content":"     * @return An array of the numArgs arguments.","lastModifiedDate":"2023-01-23"},{"lineNumber":105,"author":{"gitId":"filbertphang"},"content":"     * @throws InvalidArgumentException Thrown when argument string does not tally","lastModifiedDate":"2023-01-23"},{"lineNumber":106,"author":{"gitId":"filbertphang"},"content":"     *                                  with numArgs given.","lastModifiedDate":"2023-01-23"},{"lineNumber":107,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":108,"author":{"gitId":"filbertphang"},"content":"    public static String[] getArgs(String commandName, String argString, int numArgs)","lastModifiedDate":"2023-01-23"},{"lineNumber":109,"author":{"gitId":"filbertphang"},"content":"            throws InvalidArgumentException {","lastModifiedDate":"2023-01-23"},{"lineNumber":110,"author":{"gitId":"filbertphang"},"content":"        String[] args \u003d argString.split(\" \");","lastModifiedDate":"2023-01-23"},{"lineNumber":111,"author":{"gitId":"filbertphang"},"content":"        if (args.length !\u003d numArgs) {","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"filbertphang"},"content":"            throw new InvalidArgumentException(commandName);","lastModifiedDate":"2023-01-23"},{"lineNumber":113,"author":{"gitId":"filbertphang"},"content":"        } else {","lastModifiedDate":"2023-01-23"},{"lineNumber":114,"author":{"gitId":"filbertphang"},"content":"            return args;","lastModifiedDate":"2023-01-23"},{"lineNumber":115,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":116,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":117,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":118,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":119,"author":{"gitId":"filbertphang"},"content":"     * Parses an argument string into an array of arguments, splitting by the","lastModifiedDate":"2023-01-23"},{"lineNumber":120,"author":{"gitId":"filbertphang"},"content":"     * respective delimiters in flags.","lastModifiedDate":"2023-01-23"},{"lineNumber":121,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":122,"author":{"gitId":"filbertphang"},"content":"     * @param commandName The name of the current command","lastModifiedDate":"2023-01-23"},{"lineNumber":123,"author":{"gitId":"filbertphang"},"content":"     * @param argString   The argument string to be parsed","lastModifiedDate":"2023-01-23"},{"lineNumber":124,"author":{"gitId":"filbertphang"},"content":"     * @param numArgs     The number of arguments to be parsed","lastModifiedDate":"2023-01-23"},{"lineNumber":125,"author":{"gitId":"filbertphang"},"content":"     * @param flags       The flags indicating the start of an argument","lastModifiedDate":"2023-01-23"},{"lineNumber":126,"author":{"gitId":"filbertphang"},"content":"     * @return An array of the numArgs arguments.","lastModifiedDate":"2023-01-23"},{"lineNumber":127,"author":{"gitId":"filbertphang"},"content":"     * @throws InvalidArgumentException Thrown when argument string does not tally","lastModifiedDate":"2023-01-23"},{"lineNumber":128,"author":{"gitId":"filbertphang"},"content":"     *                                  with numArgs given.","lastModifiedDate":"2023-01-23"},{"lineNumber":129,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":130,"author":{"gitId":"filbertphang"},"content":"    public static String[] getArgs(String commandName, String argString, int numArgs, String[] flags)","lastModifiedDate":"2023-01-23"},{"lineNumber":131,"author":{"gitId":"filbertphang"},"content":"            throws InvalidArgumentException {","lastModifiedDate":"2023-01-23"},{"lineNumber":132,"author":{"gitId":"filbertphang"},"content":"        String[] args \u003d new String[numArgs];","lastModifiedDate":"2023-01-23"},{"lineNumber":133,"author":{"gitId":"filbertphang"},"content":"        boolean hasWrongNumberOfFlags \u003d numArgs - 1 !\u003d flags.length;","lastModifiedDate":"2023-02-08"},{"lineNumber":134,"author":{"gitId":"filbertphang"},"content":"        if (hasWrongNumberOfFlags) {","lastModifiedDate":"2023-02-08"},{"lineNumber":135,"author":{"gitId":"filbertphang"},"content":"            // function was called incorrectly:","lastModifiedDate":"2023-01-23"},{"lineNumber":136,"author":{"gitId":"filbertphang"},"content":"            // numArgs and given flags do not match","lastModifiedDate":"2023-01-23"},{"lineNumber":137,"author":{"gitId":"filbertphang"},"content":"            throw new InvalidArgumentException(commandName);","lastModifiedDate":"2023-01-23"},{"lineNumber":138,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":139,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":140,"author":{"gitId":"filbertphang"},"content":"        for (int i \u003d 0; i \u003c flags.length; i++) {","lastModifiedDate":"2023-01-23"},{"lineNumber":141,"author":{"gitId":"filbertphang"},"content":"            String[] split \u003d argString.split(flags[i], 2);","lastModifiedDate":"2023-01-23"},{"lineNumber":142,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":143,"author":{"gitId":"filbertphang"},"content":"            // if the flag exists in the argument string, we should be able","lastModifiedDate":"2023-02-08"},{"lineNumber":144,"author":{"gitId":"filbertphang"},"content":"            // to split it into 2 parts: before and after the flag","lastModifiedDate":"2023-02-08"},{"lineNumber":145,"author":{"gitId":"filbertphang"},"content":"            if (split.length !\u003d 2) {","lastModifiedDate":"2023-01-23"},{"lineNumber":146,"author":{"gitId":"filbertphang"},"content":"                // flag was not found -- invalid input","lastModifiedDate":"2023-01-23"},{"lineNumber":147,"author":{"gitId":"filbertphang"},"content":"                throw new InvalidArgumentException(commandName);","lastModifiedDate":"2023-01-23"},{"lineNumber":148,"author":{"gitId":"filbertphang"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":149,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":150,"author":{"gitId":"filbertphang"},"content":"            args[i] \u003d split[0].trim();","lastModifiedDate":"2023-01-23"},{"lineNumber":151,"author":{"gitId":"filbertphang"},"content":"            argString \u003d split[1];","lastModifiedDate":"2023-01-23"},{"lineNumber":152,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":153,"author":{"gitId":"filbertphang"},"content":"        args[numArgs - 1] \u003d argString.trim();","lastModifiedDate":"2023-01-23"},{"lineNumber":154,"author":{"gitId":"filbertphang"},"content":"        return args;","lastModifiedDate":"2023-01-23"},{"lineNumber":155,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":156,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":157,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"filbertphang":157}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import java.io.File;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"import duke.exception.InvalidDateException;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"/** Storage module for Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"public class Storage {","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    private File dataFile;","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    private boolean hasFile;","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"     * Initializes a Storage object for the current session.","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"     * @param path Path to the saved data","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"     * @param ui   Ui object for the current session","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"    public Storage(String path, Ui ui) {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"        Path fullPath \u003d Paths.get(System.getProperty(\"user.dir\"), path);","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        this.dataFile \u003d fullPath.toFile();","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        this.hasFile \u003d true;","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"            // create the parent directories and file if needed","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"            this.dataFile.getParentFile().mkdir();","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"            this.dataFile.createNewFile();","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"            // do nothing if we can\u0027t create the file!","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"            // either the file already exists, or we do not have permission to create it","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"            // the second case will be handled in the read and save methods","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"     * Reads tasks from the save file and store them in the given TaskList.","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"     * @param taskList TaskList to store saved tasks in","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"    public void readToTaskList(TaskList taskList) {","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"            Scanner reader \u003d new Scanner(this.dataFile);","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"            while (reader.hasNext()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"                String line \u003d reader.nextLine();","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"                String[] args \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"                Task task \u003d null;","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"                switch (args[0]) {","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"                case \"T\":","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"                    task \u003d new ToDo(args[2], Integer.parseInt(args[1]) \u003d\u003d 1);","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"                    break;","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"                case \"D\":","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"                    task \u003d new Deadline(args[2], Integer.parseInt(args[1]) \u003d\u003d 1, args[3]);","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"                    break;","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"                case \"E\":","lastModifiedDate":"2023-01-23"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"                    task \u003d new Event(args[2], Integer.parseInt(args[1]) \u003d\u003d 1, args[3], args[4]);","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"                    break;","lastModifiedDate":"2023-01-23"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"                default:","lastModifiedDate":"2023-01-23"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"                    throw new InvalidArgumentException(line);","lastModifiedDate":"2023-01-23"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"                }","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"                taskList.addTask(task);","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"filbertphang"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"filbertphang"},"content":"            this.ui.clearMessage();","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"filbertphang"},"content":"            reader.close();","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"filbertphang"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":77,"author":{"gitId":"filbertphang"},"content":"            this.notifyNoStorage();","lastModifiedDate":"2023-01-23"},{"lineNumber":78,"author":{"gitId":"filbertphang"},"content":"        } catch (InvalidDateException | InvalidArgumentException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"filbertphang"},"content":"            this.ui.clearMessage();","lastModifiedDate":"2023-01-23"},{"lineNumber":80,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(\"Duke ran into an error while reading saved data.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"filbertphang"},"content":"            this.ui.displayMessage();","lastModifiedDate":"2023-01-23"},{"lineNumber":82,"author":{"gitId":"filbertphang"},"content":"            taskList.clearTasks();","lastModifiedDate":"2023-01-23"},{"lineNumber":83,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":84,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":85,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":86,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":87,"author":{"gitId":"filbertphang"},"content":"     * Saves tasks from a given TaskList to the save file.","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":89,"author":{"gitId":"filbertphang"},"content":"     * @param taskList TaskList containing the tasks to be saved","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":91,"author":{"gitId":"filbertphang"},"content":"    public void saveToFile(TaskList taskList) {","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"filbertphang"},"content":"            FileWriter writer \u003d new FileWriter(this.dataFile);","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"filbertphang"},"content":"            String toWrite \u003d taskList.serializeTasks();","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"filbertphang"},"content":"            writer.write(toWrite);","lastModifiedDate":"2023-01-23"},{"lineNumber":96,"author":{"gitId":"filbertphang"},"content":"            writer.close();","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"filbertphang"},"content":"        } catch (IOException | NullPointerException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":98,"author":{"gitId":"filbertphang"},"content":"            this.notifyNoStorage();","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":100,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":101,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":102,"author":{"gitId":"filbertphang"},"content":"    /** Notify the user that storage is not available for the current session. */","lastModifiedDate":"2023-01-23"},{"lineNumber":103,"author":{"gitId":"filbertphang"},"content":"    public void notifyNoStorage() {","lastModifiedDate":"2023-01-23"},{"lineNumber":104,"author":{"gitId":"filbertphang"},"content":"        if (this.hasFile) {","lastModifiedDate":"2023-01-23"},{"lineNumber":105,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(\"WARNING: Duke cannot read from/write to a storage file. \");","lastModifiedDate":"2023-01-23"},{"lineNumber":106,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(\"         All tasks created will only last within this session.\");","lastModifiedDate":"2023-01-23"},{"lineNumber":107,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(\"\");","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"filbertphang"},"content":"            this.ui.displayMessage();","lastModifiedDate":"2023-01-23"},{"lineNumber":109,"author":{"gitId":"filbertphang"},"content":"            this.hasFile \u003d false;","lastModifiedDate":"2023-01-23"},{"lineNumber":110,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":111,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":113,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"filbertphang":113}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** Manages the task list of Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public class TaskList {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"     * Initializes a TaskList.","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     * @param ui Ui object for the current session.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    public TaskList(Ui ui) {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"     * Marks the task at the given index as done.","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"     * @param index Index of task to be marked as done","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"    public void markTaskAsDone(int index) {","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c list.size() : \"Given index should be valid\";","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        Task task \u003d this.list.get(index);","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"        task.markAsDone();","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(task.toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"     * Marks the task at the given index as undone.","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"     * @param index Index of task to be marked as undone","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"    public void markTaskAsUndone(int index) {","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c list.size() : \"Given index should be valid\";","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"        Task task \u003d this.list.get(index);","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"        task.unmarkAsDone();","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(\"Ok, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(task.toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"     * @param task Task to be added to the task list","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"        int listSize \u003d list.size();","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"        this.list.add(task);","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(task.toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(String.format(\"Now you have %d tasks in the list.\", list.size()));","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"        assert list.size() \u003d\u003d listSize + 1 : \"List size should increase after adding a task\";","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"     * @param index Task to be deleted from the task list","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c list.size() : \"Given index should be valid\";","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"        int listSize \u003d list.size();","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"        Task currentTask \u003d list.get(index);","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"        list.remove(index);","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(currentTask.toString());","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"filbertphang"},"content":"        assert list.size() \u003d\u003d listSize - 1 : \"List size should decrease after deleting a task\";","lastModifiedDate":"2023-02-08"},{"lineNumber":76,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"filbertphang"},"content":"     * Finds all tasks that contain the given keyword.","lastModifiedDate":"2023-02-20"},{"lineNumber":80,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":81,"author":{"gitId":"filbertphang"},"content":"     * @param keyword The keyword to find tasks with","lastModifiedDate":"2023-01-23"},{"lineNumber":82,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":83,"author":{"gitId":"filbertphang"},"content":"    public void findTasks(String keyword) {","lastModifiedDate":"2023-01-23"},{"lineNumber":84,"author":{"gitId":"filbertphang"},"content":"        this.ui.addToMessage(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-01-23"},{"lineNumber":85,"author":{"gitId":"filbertphang"},"content":"        int numMatchingTasks \u003d 1;","lastModifiedDate":"2023-01-23"},{"lineNumber":86,"author":{"gitId":"filbertphang"},"content":"        for (Task task : this.list) {","lastModifiedDate":"2023-01-23"},{"lineNumber":87,"author":{"gitId":"filbertphang"},"content":"            if (task.hasKeyword(keyword)) {","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"filbertphang"},"content":"                this.ui.addToMessage(String.format(\"%s: %s\", numMatchingTasks, task.toString()));","lastModifiedDate":"2023-01-23"},{"lineNumber":89,"author":{"gitId":"filbertphang"},"content":"                numMatchingTasks +\u003d 1;","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"filbertphang"},"content":"            }","lastModifiedDate":"2023-01-23"},{"lineNumber":91,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"filbertphang"},"content":"        if (numMatchingTasks \u003d\u003d 1) {","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"filbertphang"},"content":"            this.ui.clearMessage();","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(String.format(\"Uh oh! You don\u0027t have any tasks matching \u0027%s\u0027\", keyword));","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":96,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":98,"author":{"gitId":"filbertphang"},"content":"    /** Displays the current list of tasks. */","lastModifiedDate":"2023-01-23"},{"lineNumber":99,"author":{"gitId":"filbertphang"},"content":"    public void displayTasks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"filbertphang"},"content":"        if (list.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(\"You have no tasks! Try adding some.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"filbertphang"},"content":"        } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"filbertphang"},"content":"            this.ui.addToMessage(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"filbertphang"},"content":"            for (int i \u003d 0; i \u003c this.list.size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"filbertphang"},"content":"                Task currentTask \u003d this.list.get(i);","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"filbertphang"},"content":"                String s \u003d String.format(\"%d: %s\", i + 1, currentTask.toString());","lastModifiedDate":"2023-01-23"},{"lineNumber":107,"author":{"gitId":"filbertphang"},"content":"                this.ui.addToMessage(s);","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"filbertphang"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":113,"author":{"gitId":"filbertphang"},"content":"     * Serializes all the tasks in the task list.","lastModifiedDate":"2023-01-23"},{"lineNumber":114,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":115,"author":{"gitId":"filbertphang"},"content":"     * @return A string containing the serialized tasks. Each line is the string","lastModifiedDate":"2023-01-23"},{"lineNumber":116,"author":{"gitId":"filbertphang"},"content":"     *         representation of a task in the task list","lastModifiedDate":"2023-01-23"},{"lineNumber":117,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":118,"author":{"gitId":"filbertphang"},"content":"    public String serializeTasks() {","lastModifiedDate":"2023-01-23"},{"lineNumber":119,"author":{"gitId":"filbertphang"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-23"},{"lineNumber":120,"author":{"gitId":"filbertphang"},"content":"        for (Task task : this.list) {","lastModifiedDate":"2023-01-23"},{"lineNumber":121,"author":{"gitId":"filbertphang"},"content":"            sb.append(task.serialize());","lastModifiedDate":"2023-01-23"},{"lineNumber":122,"author":{"gitId":"filbertphang"},"content":"            sb.append(\"\\n\");","lastModifiedDate":"2023-01-23"},{"lineNumber":123,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":124,"author":{"gitId":"filbertphang"},"content":"        return sb.toString();","lastModifiedDate":"2023-01-23"},{"lineNumber":125,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":126,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":127,"author":{"gitId":"filbertphang"},"content":"    public void clearTasks() {","lastModifiedDate":"2023-01-23"},{"lineNumber":128,"author":{"gitId":"filbertphang"},"content":"        this.list.clear();","lastModifiedDate":"2023-01-23"},{"lineNumber":129,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":130,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":130}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"/** Handles input/output for Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"public class Ui {","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    // commonly-displayed elements","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    public static final String NEWL \u003d \"\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    public static final String LOGO \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    // duke components","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    private StringBuilder message;","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    // javafx ui components","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"    private Scene scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"     * Initializes a Ui object.","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"     * @param duke The Duke instance that this Ui object belongs to","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"    public Ui(Duke duke) {","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        this.duke \u003d duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"        this.message \u003d new StringBuilder();","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"     * Initializes the main Scene to be displayed on the Stage.","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"     * @param stage The stage to display the created scene on","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"    public void initializeStage(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"        // create components","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"        // add and position children","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"        // adjust stage","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"        // configure size for components","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"filbertphang"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"filbertphang"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"filbertphang"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"filbertphang"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"filbertphang"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"filbertphang"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"filbertphang"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"filbertphang"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"filbertphang"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"filbertphang"},"content":"        // display scene","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"filbertphang"},"content":"        this.scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"filbertphang"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"filbertphang"},"content":"        stage.show();","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"filbertphang"},"content":"        this.initializeHandlers();","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"filbertphang"},"content":"    /** Prints a welcome message. */","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"filbertphang"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"filbertphang"},"content":"        this.addToMessage(\"Hello from\");","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"filbertphang"},"content":"        this.addToMessage(LOGO);","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"filbertphang"},"content":"        this.addToMessage(\"Hello! I\u0027m Duke.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"filbertphang"},"content":"        this.addToMessage(\"What can I do for you?\");","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"filbertphang"},"content":"        this.displayMessage();","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":103,"author":{"gitId":"filbertphang"},"content":"     * Prints the stored message to the user.","lastModifiedDate":"2023-01-23"},{"lineNumber":104,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":105,"author":{"gitId":"filbertphang"},"content":"    public void displayMessage() {","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"filbertphang"},"content":"        DialogBox newChild \u003d DialogBox.makeDukeDialog(this.message.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":107,"author":{"gitId":"filbertphang"},"content":"        this.dialogContainer.getChildren().add(newChild);","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"filbertphang"},"content":"        this.clearMessage();","lastModifiedDate":"2023-01-23"},{"lineNumber":109,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":111,"author":{"gitId":"filbertphang"},"content":"    /** Clears the stored message. */","lastModifiedDate":"2023-01-23"},{"lineNumber":112,"author":{"gitId":"filbertphang"},"content":"    public void clearMessage() {","lastModifiedDate":"2023-01-23"},{"lineNumber":113,"author":{"gitId":"filbertphang"},"content":"        this.message.setLength(0);","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"filbertphang"},"content":"        assert this.message.length() \u003d\u003d 0 : \"Message length should be 0 after clearing message\";","lastModifiedDate":"2023-02-08"},{"lineNumber":115,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":116,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":117,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":118,"author":{"gitId":"filbertphang"},"content":"     * Appends a string to the stored message.","lastModifiedDate":"2023-01-23"},{"lineNumber":119,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":120,"author":{"gitId":"filbertphang"},"content":"     * @param toAdd The string to be appended to the stored message","lastModifiedDate":"2023-02-03"},{"lineNumber":121,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":122,"author":{"gitId":"filbertphang"},"content":"    public void addToMessage(String toAdd) {","lastModifiedDate":"2023-01-22"},{"lineNumber":123,"author":{"gitId":"filbertphang"},"content":"        this.message.append(toAdd);","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"filbertphang"},"content":"        this.message.append(NEWL);","lastModifiedDate":"2023-02-02"},{"lineNumber":125,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":126,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":127,"author":{"gitId":"filbertphang"},"content":"    /** Initialize all JavaFX event handlers */","lastModifiedDate":"2023-02-03"},{"lineNumber":128,"author":{"gitId":"filbertphang"},"content":"    private void initializeHandlers() {","lastModifiedDate":"2023-02-03"},{"lineNumber":129,"author":{"gitId":"filbertphang"},"content":"        // on-click handler for sendButton","lastModifiedDate":"2023-02-03"},{"lineNumber":130,"author":{"gitId":"filbertphang"},"content":"        this.sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":131,"author":{"gitId":"filbertphang"},"content":"            this.handleUserInput();","lastModifiedDate":"2023-02-03"},{"lineNumber":132,"author":{"gitId":"filbertphang"},"content":"        });","lastModifiedDate":"2023-02-03"},{"lineNumber":133,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":134,"author":{"gitId":"filbertphang"},"content":"        // \"enter\" on-press handler for userInput","lastModifiedDate":"2023-02-03"},{"lineNumber":135,"author":{"gitId":"filbertphang"},"content":"        this.userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":136,"author":{"gitId":"filbertphang"},"content":"            this.handleUserInput();","lastModifiedDate":"2023-02-03"},{"lineNumber":137,"author":{"gitId":"filbertphang"},"content":"        });","lastModifiedDate":"2023-02-03"},{"lineNumber":138,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":139,"author":{"gitId":"filbertphang"},"content":"        // dialogContainer handler to auto-scroll","lastModifiedDate":"2023-02-03"},{"lineNumber":140,"author":{"gitId":"filbertphang"},"content":"        this.dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-02-03"},{"lineNumber":141,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":142,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":143,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":144,"author":{"gitId":"filbertphang"},"content":"    /** Handles the event where the user inputs a command into userInput */","lastModifiedDate":"2023-02-03"},{"lineNumber":145,"author":{"gitId":"filbertphang"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-03"},{"lineNumber":146,"author":{"gitId":"filbertphang"},"content":"        String userText \u003d userInput.getText();","lastModifiedDate":"2023-02-03"},{"lineNumber":147,"author":{"gitId":"filbertphang"},"content":"        // don\u0027t handle if user gives a blank input","lastModifiedDate":"2023-02-03"},{"lineNumber":148,"author":{"gitId":"filbertphang"},"content":"        if (userText.equals(\"\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":149,"author":{"gitId":"filbertphang"},"content":"            return;","lastModifiedDate":"2023-02-03"},{"lineNumber":150,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":151,"author":{"gitId":"filbertphang"},"content":"        DialogBox newChild \u003d DialogBox.makeUserDialog(userText);","lastModifiedDate":"2023-02-03"},{"lineNumber":152,"author":{"gitId":"filbertphang"},"content":"        this.dialogContainer.getChildren().add(newChild);","lastModifiedDate":"2023-02-03"},{"lineNumber":153,"author":{"gitId":"filbertphang"},"content":"        this.duke.run(userText);","lastModifiedDate":"2023-02-03"},{"lineNumber":154,"author":{"gitId":"filbertphang"},"content":"        this.userInput.clear();","lastModifiedDate":"2023-02-03"},{"lineNumber":155,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":156,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":156}},{"path":"src/main/java/duke/command/ArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import java.io.File;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"import duke.exception.FilePermissionsException;","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"archive\" command. */","lastModifiedDate":"2023-02-09"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"public class ArchiveCommand extends Command {","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    // date format used for generating a default filename","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy-HH-mm\");","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    private final String fileName;","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"     * Initializes an archive command with a given filename.","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"     * @param fileName Name of the file to store archived data in","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"    public ArchiveCommand(String fileName) {","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        if (fileName \u003d\u003d null) {","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"            // use a default filename","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"            String date \u003d DATE_FORMAT.format(LocalDateTime.now());","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"            this.fileName \u003d String.format(\"archive-%s.txt\", date);","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        } else {","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"            this.fileName \u003d fileName;","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"        // get full path to archive file","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"        Path fullPath \u003d Paths.get(System.getProperty(\"user.dir\"), \"archive\", this.fileName);","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"        File archiveFile \u003d fullPath.toFile();","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"            // create the parent directories and file if needed","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"            archiveFile.getParentFile().mkdir();","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"            archiveFile.createNewFile();","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"            // do nothing if we can\u0027t create the file!","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"            // either the file already exists, or we do not have permission to create it","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"            // the second case will be handled in the read and save methods","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"            // serialize tasks and write to output file","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"            String toWrite \u003d taskList.serializeTasks();","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"            FileWriter writer \u003d new FileWriter(archiveFile);","lastModifiedDate":"2023-02-08"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"            writer.write(toWrite);","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"            writer.close();","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"            String message \u003d String.format(\"All data has successfully been archived to:\\n%s\",","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"                    fullPath.toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"            ui.addToMessage(message);","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"            // clear task list after archiving","lastModifiedDate":"2023-02-09"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"            taskList.clearTasks();","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"            // unable to create or write to file,","lastModifiedDate":"2023-02-09"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"            // throw a new file permissions exception","lastModifiedDate":"2023-02-09"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"            throw new FilePermissionsException(fullPath.toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"filbertphang":72}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"bye\" command. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"        ui.addToMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"        return true;","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":19}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** A base class representing a command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"     * Executes the command.","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"     * @param taskList The TaskList used in the current session","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"     * @param ui       The Ui object used in the current session","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"     * @throws DukeException Thrown when the command cannot be executed","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    public abstract void execute(TaskList taskList, Ui ui) throws DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"     * Indicates whether this command will terminate the current Duke instance.","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"     * @return Whether the current command will terminate Duke","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"        return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":27}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"deadline\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    public static final String[] FLAGS \u003d { \"/by\" };","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    private String title;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    private String deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"     * Initializes a deadline command with a given title and deadline.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"     * @param title    The title of the Deadline to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"     * @param deadline The deadline of the Deadline to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    public DeadlineCommand(String title, String deadline) {","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        Task task \u003d new Deadline(this.title, this.deadline);","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"        DeadlineCommand cmd \u003d (DeadlineCommand) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"        return this.title.equals(cmd.title) \u0026\u0026 this.deadline.equals(cmd.deadline);","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":45}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"delete\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    private int index;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"     * Initializes a unmark command with a given index.","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"     * @param index The index of the task to be marked as not done yet","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"        taskList.deleteTask(this.index);","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        DeleteCommand cmd \u003d (DeleteCommand) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        return this.index \u003d\u003d cmd.index;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"filbertphang":37}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"event\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    public static final String[] FLAGS \u003d { \"/from\", \"/to\" };","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    private String title;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    private String from;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    private String to;","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"     * Initializes an event command with a given title, start date, and end date.","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"     * @param title The title of the Event to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"     * @param from  The start date of the Event to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"     * @param to    The end date of the Event to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"    public EventCommand(String title, String from, String to) {","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        Task task \u003d new Event(this.title, this.from, this.to);","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"        EventCommand cmd \u003d (EventCommand) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"        return this.title.equals(cmd.title) \u0026\u0026 this.from.equals(cmd.from) \u0026\u0026 this.to.equals(cmd.to);","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":47}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"find\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    private String keyword;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"     * Initializes a find command with a given keyword.","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"     * @param keyword The keyword to find tasks with","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"        taskList.findTasks(keyword);","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        FindCommand cmd \u003d (FindCommand) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        return this.keyword \u003d\u003d cmd.keyword;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"filbertphang":36}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"list\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"        taskList.displayTasks();","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":14}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"mark\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    private int index;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"     * Initializes a mark command with a given index.","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"     * @param index The index of the task to be marked as done","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"        taskList.markTaskAsDone(this.index);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        MarkCommand cmd \u003d (MarkCommand) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        return this.index \u003d\u003d cmd.index;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":36}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"todo\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    public static final String[] FLAGS \u003d {};","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    private String title;","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"     * Initializes a todo command with a given title.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"     * @param title The title of the Event to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    public ToDoCommand(String title) {","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"        Task task \u003d new ToDo(this.title);","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"        ToDoCommand cmd \u003d (ToDoCommand) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"        return this.title.equals(cmd.title);","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":41}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.command;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"/** A representation of the \"unmark\" command in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    private int index;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"     * Initializes a unmark command with a given index.","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"     * @param index The index of the task to be marked as not done yet","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"        taskList.markTaskAsUndone(this.index);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"        UnmarkCommand cmd \u003d (UnmarkCommand) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        return this.index \u003d\u003d cmd.index;","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"filbertphang":37}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.exception;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"/** A base class representing exceptions that may be thrown by Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"     * Creates a new DukeException with a given message.","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"     * @param msg Additional information regarding the exception","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"        super(msg);","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     * Gets the name of the current exception.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"     * @return The name of the current exception","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    public abstract String getExceptionName();","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"        String s \u003d String.format(\"%s: %s\", this.getExceptionName(), super.getMessage());","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"        return s;","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"filbertphang":27}},{"path":"src/main/java/duke/exception/FilePermissionsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.exception;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"/**","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":" * An exception thrown when Duke is unable to create or write to a given file.","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":" */","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"public class FilePermissionsException extends DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"     * Initializes a FilePermissionsException that was caused by a file at the given","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"     * path.","lastModifiedDate":"2023-02-09"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"     * ","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"     * @param path The path to the file that cannot be created/written to","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    public FilePermissionsException(String path) {","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"        super(path);","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    public String getExceptionName() {","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"        return \"Unable to create or write to file\";","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"filbertphang":23}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.exception;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"/** An exception thrown when a user issues a command with invalid arguments. */","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"public class InvalidArgumentException extends DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"    /** The command causing the InvalidArgumentException */","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"    private String command;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"     * Initializes an InvalidArgumentException that was caused by a command.","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"     * @param command The command causing the InvalidArgumentException","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    public InvalidArgumentException(String command) {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"        super(\"Arguments are of the wrong type or format\");","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    public String getExceptionName() {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"        String name \u003d String.format(\"Invalid Argument(s) for %s\", this.command);","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"        return name;","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"filbertphang":23}},{"path":"src/main/java/duke/exception/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.exception;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"/** An exception thrown when a user supplies dates in the wrong format. */","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"public class InvalidDateException extends DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"     * Initializes an InvalidDateException that was caused by an unparseable string.","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"     * @param date The unparseable string that resulted in the exception","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    public InvalidDateException(String date) {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"        super(String.format(\"%s is not of the form \u0027%s\u0027\", date, Task.DT_INPUT_FORMAT));","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    public String getExceptionName() {","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"        String name \u003d String.format(\"Invalid Date\");","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"        return name;","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"filbertphang":22}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.exception;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"/** An exception thrown when a user issues a command that is not understood. */","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"public class UnknownCommandException extends DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"     * Initializes an UnknownCommandException caused by an unknown user command.","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"     * @param cmd The command given by the user that cannot be parsed","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    public UnknownCommandException(String cmd) {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"        super(cmd);","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    public String getExceptionName() {","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"        return \"Unknown Command\";","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"filbertphang":19}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import duke.exception.InvalidDateException;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"/** A representation of a task with a deadline. */","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    /** Deadline of the task. */","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"     * Creates a Deadline object with a given name, completion status, and deadline.","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"     * @param name     The name of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"     * @param isDone   The completion status of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"     * @param deadline A string representation of the task\u0027s deadline","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    public Deadline(String name, boolean isDone, String deadline) throws InvalidDateException {","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"            this.deadline \u003d Task.parseDate(deadline);","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"            throw new InvalidDateException(e.getParsedString());","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"     * Creates a Deadline object with a given name and deadline.","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"     * @param name     The name of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"     * @param deadline A string representation of the task\u0027s deadline","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"    public Deadline(String name, String deadline) throws InvalidDateException {","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        this(name, false, deadline);","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"    protected String getTaskType() {","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"        return \"D\";","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"    public String serialize() {","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"        String serialized \u003d String.format(\"%s|%s\", super.serialize(), this.deadline);","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"        return serialized;","lastModifiedDate":"2023-01-23"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"        String s \u003d String.format(\"%s (by: %s)\", super.toString(), Task.formatDate(this.deadline));","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"        return s;","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"        Deadline task \u003d (Deadline) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"        return super.equals(task) \u0026\u0026 this.deadline.equals(task.deadline);","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"filbertphang":67}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"import duke.exception.InvalidDateException;","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"/** A representation of a task with a start date and an end date. */","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    /** Start date of the task. */","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    private LocalDate start;","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    /** End date of the task. */","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    private LocalDate end;","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"     * Creates a Event object with a given name, completion status, start date, and","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"     * end date.","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"     * @param name   The name of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"     * @param isDone The completion status of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"     * @param start  A string representation of the task\u0027s start date","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"     * @param start  A string representation of the task\u0027s end date","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"    public Event(String name, boolean isDone, String start, String end) throws InvalidDateException {","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"        try {","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"            this.start \u003d Task.parseDate(start);","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"            this.end \u003d Task.parseDate(end);","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"            throw new InvalidDateException(e.getParsedString());","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"     * Creates a Event object with a given name, start date, and end date.","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"     * @param name  The name of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"     * @param start A string representation of the task\u0027s start date","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"     * @param start A string representation of the task\u0027s end date","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"    public Event(String name, String start, String end) throws InvalidDateException {","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"        this(name, false, start, end);","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"    protected String getTaskType() {","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"        return \"E\";","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"    public String serialize() {","lastModifiedDate":"2023-01-23"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"        String serialized \u003d String.format(\"%s|%s|%s\", super.serialize(), this.start, this.end);","lastModifiedDate":"2023-01-23"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"        return serialized;","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"        String s \u003d String.format(\"%s (from: %s to: %s)\", super.toString(), Task.formatDate(this.start),","lastModifiedDate":"2023-01-23"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"                Task.formatDate(this.end));","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"        return s;","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"        Event task \u003d (Event) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"        return super.equals(task) \u0026\u0026 this.start.equals(task.start) \u0026\u0026 this.end.equals(task.end);","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"filbertphang":74}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"/** A specification for a Task in Duke. */","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"    // date formats and formatters","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"    public static final String DT_INPUT_FORMAT \u003d \"dd-MM-yyyy\";","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    public static final String DT_PRINT_FORMAT \u003d \"d MMM yyyy\";","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    public static final DateTimeFormatter DT_INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(DT_INPUT_FORMAT);","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"    public static final DateTimeFormatter DT_PRINT_FORMATTER \u003d DateTimeFormatter.ofPattern(DT_PRINT_FORMAT);","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    // status icons","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    public static final String STATUS_ICON_DONE \u003d \"x\";","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"    public static final String STATUS_ICON_NOT_DONE \u003d \" \";","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"    protected String name;","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    /** Creates a task with a given name and completion status. */","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    public Task(String name, boolean isDone) {","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"     * Parses a date from a string using the date formatter.","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"     * @param dateString The string to be parsed","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"     * @return The date represented by the given string","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"    public static LocalDate parseDate(String dateString) {","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"        return LocalDate.parse(dateString, Task.DT_INPUT_FORMATTER);","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"     * Gets a string representation of a date using the date formatter.","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"     * @param date The date to be formatted","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"     * @return The formatted string representation of that date","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"    public static String formatDate(LocalDate date) {","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"        return date.format(DT_PRINT_FORMATTER);","lastModifiedDate":"2023-01-23"},{"lineNumber":46,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":47,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":48,"author":{"gitId":"filbertphang"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"filbertphang"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"filbertphang"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"filbertphang"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"filbertphang"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"filbertphang"},"content":"        return (isDone ? Task.STATUS_ICON_DONE : Task.STATUS_ICON_NOT_DONE);","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":61,"author":{"gitId":"filbertphang"},"content":"     * Gets a string representation of the task type.","lastModifiedDate":"2023-01-23"},{"lineNumber":62,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":63,"author":{"gitId":"filbertphang"},"content":"     * @return A string representation of the task type.","lastModifiedDate":"2023-01-23"},{"lineNumber":64,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":65,"author":{"gitId":"filbertphang"},"content":"    protected abstract String getTaskType();","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":68,"author":{"gitId":"filbertphang"},"content":"     * Serializes the task object into a string.","lastModifiedDate":"2023-01-23"},{"lineNumber":69,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":70,"author":{"gitId":"filbertphang"},"content":"     * @return A string representation of the task object.","lastModifiedDate":"2023-01-23"},{"lineNumber":71,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":72,"author":{"gitId":"filbertphang"},"content":"    public String serialize() {","lastModifiedDate":"2023-01-23"},{"lineNumber":73,"author":{"gitId":"filbertphang"},"content":"        String serialized \u003d String.format(\"%s|%s|%s\", this.getTaskType(), this.isDone ? 1 : 0, this.name);","lastModifiedDate":"2023-01-23"},{"lineNumber":74,"author":{"gitId":"filbertphang"},"content":"        return serialized;","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":77,"author":{"gitId":"filbertphang"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2023-01-23"},{"lineNumber":78,"author":{"gitId":"filbertphang"},"content":"        return this.name.contains(keyword);","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":80,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":81,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"filbertphang"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"filbertphang"},"content":"        String s \u003d String.format(\"[%s][%s] %s\", this.getTaskType(), this.getStatusIcon(), this.name);","lastModifiedDate":"2023-01-23"},{"lineNumber":84,"author":{"gitId":"filbertphang"},"content":"        return s;","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":87,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":88,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":89,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":90,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":91,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":92,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":93,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":94,"author":{"gitId":"filbertphang"},"content":"        Task task \u003d (Task) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":95,"author":{"gitId":"filbertphang"},"content":"        return this.name.equals(task.name) \u0026\u0026 (this.isDone \u003d\u003d task.isDone);","lastModifiedDate":"2023-01-23"},{"lineNumber":96,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":97,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"filbertphang":97}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"/** A representation of a task with no given deadline. */","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"     * Creates a ToDo object with a given name and completion status.","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"     * @param name   The name of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"     * @param isDone The completion status of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    public ToDo(String name, boolean isDone) {","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"        super(name, isDone);","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"     * Creates a ToDo object with a given name.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"     *","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"     * @param name The name of the object to be created","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"        this(name, false);","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"    protected String getTaskType() {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"        return \"T\";","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"    @Override","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"        } else if (obj.getClass() !\u003d this.getClass()) {","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"            return false;","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        ToDo task \u003d (ToDo) obj;","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"        return super.equals(task);","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"filbertphang":40}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"import duke.command.ToDoCommand;","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"    public void parser_validToDo_correctCommand() throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"        String name \u003d \"sample name\";","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"        String rawCommand \u003d String.format(\"todo %s\", name);","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"        Command actualCommand \u003d Parser.parse(rawCommand);","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"        Command expectedCommand \u003d new ToDoCommand(name);","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"        assertEquals(expectedCommand, actualCommand);","lastModifiedDate":"2023-01-23"},{"lineNumber":22,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":23,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":24,"author":{"gitId":"filbertphang"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":25,"author":{"gitId":"filbertphang"},"content":"    public void parser_validDeadline_correctCommand() throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":26,"author":{"gitId":"filbertphang"},"content":"        String name \u003d \"sample name\";","lastModifiedDate":"2023-01-23"},{"lineNumber":27,"author":{"gitId":"filbertphang"},"content":"        String date \u003d \"01-02-2003\";","lastModifiedDate":"2023-01-23"},{"lineNumber":28,"author":{"gitId":"filbertphang"},"content":"        String rawCommand \u003d String.format(\"deadline %s /by %s\", name, date);","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"filbertphang"},"content":"        Command actualCommand \u003d Parser.parse(rawCommand);","lastModifiedDate":"2023-01-23"},{"lineNumber":30,"author":{"gitId":"filbertphang"},"content":"        Command expectedCommand \u003d new DeadlineCommand(name, date);","lastModifiedDate":"2023-01-23"},{"lineNumber":31,"author":{"gitId":"filbertphang"},"content":"        assertEquals(expectedCommand, actualCommand);","lastModifiedDate":"2023-01-23"},{"lineNumber":32,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":33,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":34,"author":{"gitId":"filbertphang"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":35,"author":{"gitId":"filbertphang"},"content":"    public void parser_validEvent_correctCommand() throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":36,"author":{"gitId":"filbertphang"},"content":"        String name \u003d \"sample name\";","lastModifiedDate":"2023-01-23"},{"lineNumber":37,"author":{"gitId":"filbertphang"},"content":"        String start \u003d \"01-02-2003\";","lastModifiedDate":"2023-01-23"},{"lineNumber":38,"author":{"gitId":"filbertphang"},"content":"        String end \u003d \"02-02-2003\";","lastModifiedDate":"2023-01-23"},{"lineNumber":39,"author":{"gitId":"filbertphang"},"content":"        String rawCommand \u003d String.format(\"event %s /from %s /to %s\", name, start, end);","lastModifiedDate":"2023-01-23"},{"lineNumber":40,"author":{"gitId":"filbertphang"},"content":"        Command actualCommand \u003d Parser.parse(rawCommand);","lastModifiedDate":"2023-01-23"},{"lineNumber":41,"author":{"gitId":"filbertphang"},"content":"        Command expectedCommand \u003d new EventCommand(name, start, end);","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"filbertphang"},"content":"        assertEquals(expectedCommand, actualCommand);","lastModifiedDate":"2023-01-23"},{"lineNumber":43,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":44,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":45,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"filbertphang":45}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"filbertphang"},"content":"package duke.task;","lastModifiedDate":"2023-01-23"},{"lineNumber":2,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":3,"author":{"gitId":"filbertphang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-23"},{"lineNumber":4,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":5,"author":{"gitId":"filbertphang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-23"},{"lineNumber":6,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":7,"author":{"gitId":"filbertphang"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-23"},{"lineNumber":8,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":9,"author":{"gitId":"filbertphang"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-01-23"},{"lineNumber":10,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":11,"author":{"gitId":"filbertphang"},"content":"    @Test","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"filbertphang"},"content":"    public void deadline_differentNames_NotEqual() throws DukeException {","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"filbertphang"},"content":"        String name1 \u003d \"sample name1\";","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"filbertphang"},"content":"        String name2 \u003d \"sample name2\";","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"filbertphang"},"content":"        String date \u003d \"01-02-2003\";","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"filbertphang"},"content":"        Deadline dl1 \u003d new Deadline(name1, date);","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"filbertphang"},"content":"        Deadline dl2 \u003d new Deadline(name2, date);","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"filbertphang"},"content":"        assertEquals(dl1.equals(dl2), false);","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"filbertphang"},"content":"    }","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"filbertphang"},"content":"","lastModifiedDate":"2023-01-23"},{"lineNumber":21,"author":{"gitId":"filbertphang"},"content":"}","lastModifiedDate":"2023-01-23"}],"authorContributionMap":{"filbertphang":21}}]
