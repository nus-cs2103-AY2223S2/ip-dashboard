[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"checkstyle {","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"    mainClassName \u003d \"duke.gui.Launcher\"","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"gitsac":20,"-":40}},{"path":"data/dukedata.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"1.[T][X] test1   ","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"The Knight is a chat bot which is designed to help free you from life\u0027s smallest worries, by remembering all the tasks that you will need to do.","lastModifiedDate":"2023-02-16"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"Be grateful, for the Knight helps anyone, even orcs.","lastModifiedDate":"2023-02-16"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"1. [Quick Start](#quick-start)","lastModifiedDate":"2023-02-16"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"2. [Features](#features)","lastModifiedDate":"2023-02-16"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"3. [Usage](#usage)","lastModifiedDate":"2023-02-16"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"4. [Summary](#summary)","lastModifiedDate":"2023-02-16"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"## Quick Start","lastModifiedDate":"2023-02-16"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"Ready to remember less, and achieve more?","lastModifiedDate":"2023-02-16"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"All you need to do is:","lastModifiedDate":"2023-02-16"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"1. Download it from here.","lastModifiedDate":"2023-02-16"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"2. Open a command window in the same directory","lastModifiedDate":"2023-02-16"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"3. Using the command window, type the following command:","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"`java -jar Duke.jar`","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"4. Add your tasks.","lastModifiedDate":"2023-02-16"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"5. Let it manage your tasks for you 😉","lastModifiedDate":"2023-02-16"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"### Task Manager","lastModifiedDate":"2023-02-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"Have you always been a klutz, and scramble to finish your assignments due to your forgetfulness?","lastModifiedDate":"2023-02-16"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"Not to worry, Knight is here to (degradingly) remind you to do them all!","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"### Tagging","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"Want to tag an event as #fun? Or feeling #sad that you need to study for the upcoming midterms?","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"Fret not, for Knight can show you events of the same tags!","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"### `todo` - Add a task without a timeframe.","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"Adds a task to be completed, but without any need for a specific timeframe.","lastModifiedDate":"2023-02-16"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"  Format: `todo [task description]`","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"  Example of usage: ","lastModifiedDate":"2023-02-16"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"  `todo Get new eyeglasses`","lastModifiedDate":"2023-02-16"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"### `deadline` - Add a task which has a deadline","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"Adds a task which should be completed by the specified deadline in the following format: YYYY-MM-DD.","lastModifiedDate":"2023-02-16"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"  Format: `deadline [task description] /by [YYYY-MM-DD]`","lastModifiedDate":"2023-02-16"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"  `deadline Study for CS2105 Midterms /by 2023-02-28`","lastModifiedDate":"2023-02-16"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"### `event` - Add a task which has a specific timeframe","lastModifiedDate":"2023-02-16"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"Adds a task which is ongoing during the specified timeframe.","lastModifiedDate":"2023-02-16"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"  Format: `event [task description] /from [start date] /to [end date]`","lastModifiedDate":"2023-02-16"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"  `event Celebrating CNY! /from 23rd Jan 2023 /to 8th Feb 2023`","lastModifiedDate":"2023-02-16"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"### `delete` - Delete a task","lastModifiedDate":"2023-02-16"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"Deletes a task (by index) as specified.","lastModifiedDate":"2023-02-16"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"  Format: `delete [index]`","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"  `delete 3`","lastModifiedDate":"2023-02-16"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"### `list` - A list of all tasks currently scheduled","lastModifiedDate":"2023-02-16"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"Displays the cumulative list of all tasks added by the user.","lastModifiedDate":"2023-02-16"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"  Format: `list`","lastModifiedDate":"2023-02-16"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"  `list`","lastModifiedDate":"2023-02-16"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"### `mark` - Marks a task as completed","lastModifiedDate":"2023-02-16"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"Marks a specified task (by index) as completed.","lastModifiedDate":"2023-02-16"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"  Format: `mark [index]`","lastModifiedDate":"2023-02-16"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"  `mark 2`","lastModifiedDate":"2023-02-16"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"### `unmark` - Marks a task as not completed","lastModifiedDate":"2023-02-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"Marks a specified task (by index) as not completed.","lastModifiedDate":"2023-02-16"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"  Format: `unmark [index]`","lastModifiedDate":"2023-02-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2019-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"  `unmark 2`","lastModifiedDate":"2023-02-16"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"### `tag` - Sets a tag for a task","lastModifiedDate":"2023-02-16"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"Sets the tag for a specified task (by index).","lastModifiedDate":"2023-02-16"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"  Format: `tag [index] [tag name]`","lastModifiedDate":"2023-02-16"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"  `tag 3 #EnjoyLife`","lastModifiedDate":"2023-02-16"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"### `find` - Finds all tasks using specified keyword","lastModifiedDate":"2023-02-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"Finds all matching tasks that have the specified keyword in their description.","lastModifiedDate":"2023-02-16"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"  Format: `find [keyword]`","lastModifiedDate":"2023-02-16"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"  `find assignment`","lastModifiedDate":"2023-02-16"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"### `findtag` - Finds all tasks with matching tag","lastModifiedDate":"2023-02-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"Finds all tasks which are exactly tagged with the specified tag name.","lastModifiedDate":"2023-02-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"  Format: `find [tag name]`","lastModifiedDate":"2023-02-16"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"  `findtag #EnjoyLife`","lastModifiedDate":"2023-02-16"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"### `checkdue` - Checks the due date of a deadline","lastModifiedDate":"2023-02-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"Finds the due date of a deadline using the specified index.","lastModifiedDate":"2023-02-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-16"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"  Format: `checkdue [index]`","lastModifiedDate":"2023-02-16"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"  ","lastModifiedDate":"2023-02-16"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"  Example of usage:","lastModifiedDate":"2023-02-16"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"  `checkdue 3`","lastModifiedDate":"2023-02-16"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2019-07-29"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"## Summary","lastModifiedDate":"2023-02-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"|    Command Format  | Description |","lastModifiedDate":"2023-02-16"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"| ------------------ | ----------- |","lastModifiedDate":"2023-02-16"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"| todo [task description] | Creates a task with specified description |","lastModifiedDate":"2023-02-16"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"| deadline [task description] /by [YYYY-MM-DD]                | Creates a task with specified deadline         |","lastModifiedDate":"2023-02-16"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"| event [task description] /from [starting date] /to [ending date] | Creates a task within the specified timeframe |","lastModifiedDate":"2023-02-16"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"| delete [index] | Deletes the task at the specified index |","lastModifiedDate":"2023-02-16"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"| list | Displays the cumulative list of tasks added by the user |","lastModifiedDate":"2023-02-16"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"| mark [index] | Marks the task at the specified index as completed |","lastModifiedDate":"2023-02-16"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"| unmark [index] | Marks the task at the specified index as not completed |","lastModifiedDate":"2023-02-16"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"| tag [index] [tag name] | Sets the tag name of the task at the specified index |","lastModifiedDate":"2023-02-16"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"| find [keyword] | Finds a list of tasks which contain specified keyword in their description |","lastModifiedDate":"2023-02-16"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"| findtag [tag name] | Finds a list of tasks which are exactly tagged with the specified tag name |","lastModifiedDate":"2023-02-16"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"| checkdue [index] | Gets the due date of a task with deadline at the specified index (if applicable) |","lastModifiedDate":"2023-02-16"}],"authorContributionMap":{"gitsac":129,"-":21}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.gui.MainWindow;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":" * Main Duke class whereby an instance of the Duke chatbot is initialized.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"public class Duke {","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    private static Parser dukeParser;","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    private static Storage dukeStorage;","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    private static TaskList dukeTaskList;","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    private static TagList dukeTagList;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    private static Stage stageToControl;","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     * Constructor to create an instance of Duke chatbot.","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public Duke() throws IOException, DukeExceptions {","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        dukeParser \u003d new Parser();","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        dukeStorage \u003d new Storage(\"data\", \"dukedata.txt\", \"duketagdata.txt\");","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"            dukeTagList \u003d new TagList(dukeStorage.loadTags());","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"            dukeTaskList \u003d new TaskList(dukeStorage.loadTask(), dukeTagList);","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"            for (int i \u003d 0; i \u003c dukeTaskList.getListOfTasks().size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"                ArrayList\u003cString\u003e tagList \u003d dukeTagList.getTagListFull();","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"                String toUpdate \u003d tagList.get(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"                dukeTaskList.getListOfTasks().get(i).setTag(toUpdate);","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"     * Runs the Duke chatbot program.","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"     * @param tool Instance of MainWindow is taken in to get user input and send output.","lastModifiedDate":"2023-02-05"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"    public void run(MainWindow tool) throws IOException, DukeExceptions {","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"        String input \u003d tool.getUserInput();","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"            dukeStorage.storeTask(dukeTaskList.getListOfTasks());","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"            dukeStorage.storeTags(dukeTagList.getTagListFull());","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"            this.stageToControl.close();","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"        String dukeOutput \u003d dukeParser.readInput(input, dukeTaskList, dukeTagList);","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"        tool.setDukeOutput(dukeOutput);","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"        dukeStorage.storeTask(dukeTaskList.getListOfTasks());","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"        dukeStorage.storeTags(dukeTagList.getTagListFull());","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"     * Sets the stage whereby the Duke chatbot will be running its logic.","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"     * @param stage Stage whereby the Duke chatbot will run.","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"    public void setStage(Stage stage) {","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"        this.stageToControl \u003d stage;","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":71}},{"path":"src/main/java/duke/DukeExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":" * Custom class of exception for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"public class DukeExceptions extends Exception {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"    protected String printThisOut;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize an instance of DukeException","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"     * @param commandType String which indicates type of DukeException","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    public DukeExceptions(String commandType) {","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"        this.printThisOut \u003d commandType;","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"     * Function to return String representation based on stored String.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"     * @return String representation, which changes depending on the stored String for the object.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"This isn\u0027t even a valid command you dumb orc!\";","lastModifiedDate":"2023-02-16"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"Wrong size for mark/unmark\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"Dumb orc, the number input is wrong. You\u0027d better check\"","lastModifiedDate":"2023-02-16"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"                    + \" the possible indexes again using list!\";","lastModifiedDate":"2023-02-16"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"deadline\") || printThisOut.equals(\"todo\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"Dumb orc, the description of a \" + this.printThisOut + \" cannot be empty!\";","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"event\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"Dumb orc, the description of an \" + this.printThisOut + \" cannot be empty!\";","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"find\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"Dumb orc, you didn\u0027t input a keyword!\";","lastModifiedDate":"2023-02-16"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"bad tag\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"Oi dumb orc, can\u0027t you follow the tag format properly? \"","lastModifiedDate":"2023-02-16"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"                    + \"Try again with this format: tag index-of-task #tagname\";","lastModifiedDate":"2023-02-16"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":45}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Events;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.ToDo;","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":" * Class used to interpret the user\u0027s input for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"public class Parser {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    private String outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    public Parser() {}","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"     * Function to redirect user\u0027s input to the relevant functions.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"     * @return String representation of output.","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the user inputs an invalid command.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    public String readInput(String input, TaskList listOfTasks, TagList listOfTags) throws DukeExceptions {","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"findtag\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"                handleFindTag(input, listOfTasks);","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"tag\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"                handleTag(input, listOfTasks, listOfTags);","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"todo\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"                handleToDoTask(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"                handleFindTask(input, listOfTasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"                handleDeadlineTask(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"                handleEventTask(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"            if (input.equals(\"list\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"                handleList(listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"                handleDelete(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"checkdue\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"                handleCheckDue(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"                handleMark(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"                handleUnmark(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"                return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"            return this.outputToReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"     * Function to find tasks which match the given tag.","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks to check for matching tag.","lastModifiedDate":"2023-02-11"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"    public void handleFindTag(String input, TaskList listOfTasks) {","lastModifiedDate":"2023-02-11"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"        String tagName \u003d input.split(\" \")[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"        String toSet \u003d \"Here are the tasks matching the tag [\"","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"                + tagName + \"]:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"        Integer indexToPrint \u003d 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.getListOfTasks().size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.getListOfTasks().get(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"            if (tagName.equals(currTask.getTag())) {","lastModifiedDate":"2023-02-11"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"                String appendThis \u003d indexToPrint.toString() + \".\" + currTask.toString()","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"                        + \" \" + currTask.getTag() + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"                toSet +\u003d appendThis;","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"                indexToPrint++;","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"        if (indexToPrint \u003d\u003d 1) {","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"            toSet \u003d \"Hey, it appears there are no tasks that match such a tag!\";","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"        this.outputToReturn \u003d toSet;","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"     * Function to help handle tagging command","lastModifiedDate":"2023-02-11"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-02-11"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks used by Duke chatbot.","lastModifiedDate":"2023-02-11"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"     * @param listOfTags The list of tags used by Duke chatbot associated with tasks.","lastModifiedDate":"2023-02-11"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"    public void handleTag(String input, TaskList listOfTasks, TagList listOfTags) {","lastModifiedDate":"2023-02-11"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-02-11"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"            String[] tagDetailsInArr \u003d input.split(\" \");","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"            if (tagDetailsInArr.length \u003c 3) {","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"bad tag\");","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"            int indexToUse \u003d Integer.parseInt(tagDetailsInArr[1]) - 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"            String tagName \u003d tagDetailsInArr[2];","lastModifiedDate":"2023-02-11"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"            if (indexToUse \u003e\u003d listOfTags.getTagListFull().size()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"bad tag\");","lastModifiedDate":"2023-02-11"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"            listOfTasks.getListOfTasks().get(indexToUse).setTag(tagName);","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"            String toOutput \u003d listOfTags.setTag(indexToUse, tagName);","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d toOutput;","lastModifiedDate":"2023-02-11"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-02-11"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"     * Function to handle find command from the user input","lastModifiedDate":"2023-02-04"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-02-04"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-02-04"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the keyword given is invalid.","lastModifiedDate":"2023-02-04"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"    public void handleFindTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"            String[] checkForKeywordArr \u003d input.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":151,"author":{"gitId":"gitsac"},"content":"            if (checkForKeywordArr.length \u003c 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":152,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"find\");","lastModifiedDate":"2023-01-29"},{"lineNumber":153,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":154,"author":{"gitId":"gitsac"},"content":"            String keyword \u003d input.substring(4);","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d listOfTasks.findTasks(keyword);","lastModifiedDate":"2023-02-05"},{"lineNumber":156,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-29"},{"lineNumber":157,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":158,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":159,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":160,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":161,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":162,"author":{"gitId":"gitsac"},"content":"     * Function to handle ToDo tasks from the user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":163,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":164,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":165,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":166,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if name of the task is not properly given by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":167,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":168,"author":{"gitId":"gitsac"},"content":"    public void handleToDoTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"gitsac"},"content":"            String todoDescription \u003d input.substring(4);","lastModifiedDate":"2023-02-11"},{"lineNumber":171,"author":{"gitId":"gitsac"},"content":"            Task toAdd \u003d new ToDo(todoDescription);","lastModifiedDate":"2023-02-11"},{"lineNumber":172,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d listOfTasks.addTask(toAdd);","lastModifiedDate":"2023-02-05"},{"lineNumber":173,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":174,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":175,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":176,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":177,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":178,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":179,"author":{"gitId":"gitsac"},"content":"     * Function to handle Deadlines tasks from the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":180,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":181,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":182,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":183,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if date of task is wrongly given or if name of task is not properly given by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":184,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":185,"author":{"gitId":"gitsac"},"content":"    public void handleDeadlineTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":186,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":187,"author":{"gitId":"gitsac"},"content":"            String deadlineDescription \u003d input.substring(8);","lastModifiedDate":"2023-02-11"},{"lineNumber":188,"author":{"gitId":"gitsac"},"content":"            Task toAdd \u003d new Deadlines(deadlineDescription);","lastModifiedDate":"2023-02-11"},{"lineNumber":189,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d listOfTasks.addTask(toAdd);","lastModifiedDate":"2023-02-05"},{"lineNumber":190,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":191,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":192,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":193,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":194,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":195,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"gitsac"},"content":"     * Function to handle Events tasks from the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":197,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":198,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":199,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":200,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if event details (from and to dates) are not properly given by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":201,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":202,"author":{"gitId":"gitsac"},"content":"    public void handleEventTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":203,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":204,"author":{"gitId":"gitsac"},"content":"            String eventDescription \u003d input.substring(5);","lastModifiedDate":"2023-02-11"},{"lineNumber":205,"author":{"gitId":"gitsac"},"content":"            Task toAdd \u003d new Events(eventDescription);","lastModifiedDate":"2023-02-11"},{"lineNumber":206,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d listOfTasks.addTask(toAdd);","lastModifiedDate":"2023-02-05"},{"lineNumber":207,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":208,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":209,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":210,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":211,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":212,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":213,"author":{"gitId":"gitsac"},"content":"     * Function to redirect listing out the list of tasks when user input is \"list\".","lastModifiedDate":"2023-01-29"},{"lineNumber":214,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":215,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The arraylist containing the tasks from Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":216,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":217,"author":{"gitId":"gitsac"},"content":"    public void handleList(TaskList listOfTasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":218,"author":{"gitId":"gitsac"},"content":"        this.outputToReturn \u003d listOfTasks.toRead();","lastModifiedDate":"2023-02-05"},{"lineNumber":219,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":220,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":221,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":222,"author":{"gitId":"gitsac"},"content":"     * Function to handle deleting tasks from user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":223,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":224,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":225,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":226,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the index indicated in the input string is invalid (\u003c\u003d 0 or greater than list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":227,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":228,"author":{"gitId":"gitsac"},"content":"    public void handleDelete(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":229,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":230,"author":{"gitId":"gitsac"},"content":"            String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":231,"author":{"gitId":"gitsac"},"content":"            if (commandSplit.length \u003c\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":232,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":233,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":234,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d listOfTasks.deleteTask(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-02-05"},{"lineNumber":235,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":236,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":237,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":238,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":239,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":240,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":241,"author":{"gitId":"gitsac"},"content":"     * Function to redirect checking task\u0027s due date when user input is \"checkdue\"","lastModifiedDate":"2023-01-29"},{"lineNumber":242,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":243,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":244,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":245,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":246,"author":{"gitId":"gitsac"},"content":"    public void handleCheckDue(String input, TaskList listOfTasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":247,"author":{"gitId":"gitsac"},"content":"        String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":248,"author":{"gitId":"gitsac"},"content":"        this.outputToReturn \u003d listOfTasks.checkDueDate(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-02-05"},{"lineNumber":249,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":250,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":251,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":252,"author":{"gitId":"gitsac"},"content":"     * Function to redirect marking task as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":253,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":254,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":255,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":256,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the index in the input is invalid (\u003c\u003d 0 or greater than list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":257,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":258,"author":{"gitId":"gitsac"},"content":"    public void handleMark(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":259,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":260,"author":{"gitId":"gitsac"},"content":"            String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":261,"author":{"gitId":"gitsac"},"content":"            if (commandSplit.length \u003c\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":262,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":263,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":264,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d listOfTasks.markTask(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-02-05"},{"lineNumber":265,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":266,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":267,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":268,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":269,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":270,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":271,"author":{"gitId":"gitsac"},"content":"     * Function to redirect marking task as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":272,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":273,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":274,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":275,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the index in the input is invalid (\u003c\u003d 0 or greater than list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":276,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":277,"author":{"gitId":"gitsac"},"content":"    public void handleUnmark(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":278,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":279,"author":{"gitId":"gitsac"},"content":"            String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":280,"author":{"gitId":"gitsac"},"content":"            if (commandSplit.length \u003c\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":281,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":282,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":283,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d listOfTasks.unmarkTask(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-02-05"},{"lineNumber":284,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":285,"author":{"gitId":"gitsac"},"content":"            this.outputToReturn \u003d DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":286,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":287,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":288,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":288}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Events;","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.ToDo;","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":" * Class used to help in storing and loading user\u0027s list of tasks for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"public class Storage {","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    protected Path dataPath;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    protected Path dataPathForTag;","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * Constructor to initiate a Storage instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"     * @param filePath  directory whereby the list of tasks should be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"     * @param fileName file in which the list of tasks should or will be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"     * @throws IOException if force-closed.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"    public Storage(String filePath, String fileName, String tagFileName) throws IOException {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        this.dataPath \u003d getData(filePath, fileName);","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        this.dataPathForTag \u003d getData(filePath, tagFileName);","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"     * Method to get, or otherwise create, file containing list of tasks.","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"     * @param filePath","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"     * @param fileName","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"     * @return Path whereby the file containing the list of tasks is supposed to be. If there is no such file, the","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"     *         file will be created in the specified filePath with fileName.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"    public Path getData(String filePath, String fileName) throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"        Path toCheck \u003d Paths.get(filePath);","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"        if (!Files.exists(toCheck)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"            Files.createDirectory(toCheck);","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"        Path fileToCheck \u003d Paths.get(filePath, fileName);","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"        if (!Files.exists(fileToCheck)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"            Files.createFile(fileToCheck);","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"        assert Files.exists(fileToCheck) : \"File not being freshly created despite never being initialized\";","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"        return fileToCheck;","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"     * Helper method to handle loading of ToDo tasks from the file into the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"     * @param isDone Character read from the file to indicate whether the task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"     * @param nameOfTask A string containing the name of the task to be handled.","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list which will have tasks written into from the file.","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"    public void handleToDo(Character isDone, String nameOfTask, ArrayList\u003cTask\u003e listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"        Task toAdd \u003d new ToDo(nameOfTask);","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"        if (isDone.equals(\u0027X\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"            toAdd.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"        listOfTasks.add(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"     * Helper method to handle loading of Deadlines tasks from the file into the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"     * @param isDone Character read from the file to indicate whether the task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list which will have tasks written into from the file.","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"     * @param requiredInformation A string containing the full name of the task as written into the file previously.","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"    public void handleDeadline(","lastModifiedDate":"2023-02-04"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"            Character isDone, ArrayList\u003cTask\u003e listOfTasks, String requiredInformation) throws DukeExceptions {","lastModifiedDate":"2023-02-04"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"        String deadlineWithBy \u003d requiredInformation.substring(requiredInformation.lastIndexOf(\"(\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"        String rawDate \u003d deadlineWithBy.split(\"\\\\(by: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"        String[] nameSplitInArr \u003d requiredInformation.substring(6).split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"        String nameOfTask \u003d nameSplitInArr[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 1; i \u003c nameSplitInArr.length; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"            if (nameSplitInArr[i].equals(\"(by:\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"            nameOfTask \u003d nameOfTask + \" \" + nameSplitInArr[i];","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"        String toInitialize \u003d nameOfTask + \" /by\" + \" \" + rawDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"        Task toAdd \u003d new Deadlines(toInitialize);","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"        if (isDone.equals(\u0027X\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"            toAdd.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"        listOfTasks.add(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"     * Helper method to handle loading of Events tasks from the file into the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"     * @param isDone Character read from the file to indicate whether the task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list which will have tasks written into from the file.","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"     * @param requiredInformation A string containing the full name of the task as written into the file previously.","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"    public void handleEvents(","lastModifiedDate":"2023-02-04"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"        Character isDone, ArrayList\u003cTask\u003e listOfTasks, String requiredInformation) throws DukeExceptions {","lastModifiedDate":"2023-02-04"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"        String timeframe \u003d requiredInformation.substring(requiredInformation.lastIndexOf(\"(\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"        String from \u003d timeframe.substring(1).split(\" to:\")[0].substring(5);","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"        String to \u003d timeframe.substring(1).split(\"to: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"        String[] nameSplitInArr \u003d requiredInformation.substring(6).split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"        String nameOfTask \u003d nameSplitInArr[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 1; i \u003c nameSplitInArr.length; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"            if (nameSplitInArr[i].equals(\"(from:\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"            nameOfTask \u003d nameOfTask + \" \" + nameSplitInArr[i];","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"        String toInitialize \u003d nameOfTask + \" /from\" + from + \" /to \" + to;","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"        Task toAdd \u003d new Events(toInitialize);","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"        if (isDone.equals(\u0027X\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"            toAdd.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"        listOfTasks.add(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"     * Function to load tasks from stored dataPath into an arraylist to be used by the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"     * @return An arraylist which contains the tasks as stored from the previous session.","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"    public ArrayList\u003cTask\u003e loadTask() throws IOException, DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"        ArrayList\u003cTask\u003e useThis \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"        Scanner scannerForFileData \u003d new Scanner(this.dataPath);","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"        if (!scannerForFileData.hasNext()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"            scannerForFileData.close();","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"            return useThis;","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"        while (scannerForFileData.hasNextLine()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"            String taskToLoad \u003d scannerForFileData.nextLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"            String dataWithoutIndexes \u003d taskToLoad.substring(2);","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"            Character isDone \u003d dataWithoutIndexes.charAt(4);","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"            Character taskType \u003d dataWithoutIndexes.charAt(1);","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"gitsac"},"content":"            if (taskType.equals(\u0027T\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"gitsac"},"content":"                String nameOfTask \u003d dataWithoutIndexes.substring(6);","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"gitsac"},"content":"                handleToDo(isDone, nameOfTask, useThis);","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"gitsac"},"content":"            if (taskType.equals(\u0027D\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"gitsac"},"content":"                handleDeadline(isDone, useThis, dataWithoutIndexes);","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":161,"author":{"gitId":"gitsac"},"content":"            if (taskType.equals(\u0027E\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":162,"author":{"gitId":"gitsac"},"content":"                handleEvents(isDone, useThis, dataWithoutIndexes);","lastModifiedDate":"2023-01-28"},{"lineNumber":163,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":164,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":165,"author":{"gitId":"gitsac"},"content":"        scannerForFileData.close();","lastModifiedDate":"2023-01-28"},{"lineNumber":166,"author":{"gitId":"gitsac"},"content":"        return useThis;","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":170,"author":{"gitId":"gitsac"},"content":"     * Function to load tags from the data file into an arraylist to be used by Duke chatbot.","lastModifiedDate":"2023-02-11"},{"lineNumber":171,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":172,"author":{"gitId":"gitsac"},"content":"     * @return An arraylist containing tags loaded from the data file.","lastModifiedDate":"2023-02-11"},{"lineNumber":173,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-02-11"},{"lineNumber":174,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":175,"author":{"gitId":"gitsac"},"content":"    public ArrayList\u003cString\u003e loadTags() throws IOException {","lastModifiedDate":"2023-02-11"},{"lineNumber":176,"author":{"gitId":"gitsac"},"content":"        ArrayList\u003cString\u003e useThis \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":177,"author":{"gitId":"gitsac"},"content":"        Scanner scannerForFileData \u003d new Scanner(this.dataPathForTag);","lastModifiedDate":"2023-02-11"},{"lineNumber":178,"author":{"gitId":"gitsac"},"content":"        if (!scannerForFileData.hasNext()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":179,"author":{"gitId":"gitsac"},"content":"            scannerForFileData.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":180,"author":{"gitId":"gitsac"},"content":"            return useThis;","lastModifiedDate":"2023-02-11"},{"lineNumber":181,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":182,"author":{"gitId":"gitsac"},"content":"        while (scannerForFileData.hasNextLine()) {","lastModifiedDate":"2023-02-11"},{"lineNumber":183,"author":{"gitId":"gitsac"},"content":"            String tagName \u003d scannerForFileData.nextLine();","lastModifiedDate":"2023-02-11"},{"lineNumber":184,"author":{"gitId":"gitsac"},"content":"            useThis.add(tagName);","lastModifiedDate":"2023-02-11"},{"lineNumber":185,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":186,"author":{"gitId":"gitsac"},"content":"        scannerForFileData.close();","lastModifiedDate":"2023-02-11"},{"lineNumber":187,"author":{"gitId":"gitsac"},"content":"        return useThis;","lastModifiedDate":"2023-02-11"},{"lineNumber":188,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":189,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":190,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":191,"author":{"gitId":"gitsac"},"content":"     * Function to store the list of tasks from the current Duke chatbot session into the dataPath file.","lastModifiedDate":"2023-01-29"},{"lineNumber":192,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":193,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks from the current Duke chatbot session.","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":195,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"gitsac"},"content":"    public void storeTask(ArrayList\u003cTask\u003e listOfTasks) throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":197,"author":{"gitId":"gitsac"},"content":"        if (listOfTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":198,"author":{"gitId":"gitsac"},"content":"            Files.write(dataPath, \"\".getBytes());","lastModifiedDate":"2023-01-28"},{"lineNumber":199,"author":{"gitId":"gitsac"},"content":"            return;","lastModifiedDate":"2023-01-28"},{"lineNumber":200,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":201,"author":{"gitId":"gitsac"},"content":"        Files.write(dataPath, \"\".getBytes());","lastModifiedDate":"2023-01-28"},{"lineNumber":202,"author":{"gitId":"gitsac"},"content":"        Task firstTask \u003d listOfTasks.get(0);","lastModifiedDate":"2023-01-28"},{"lineNumber":203,"author":{"gitId":"gitsac"},"content":"        String toSave \u003d \"1.\" + firstTask.toString() + \"\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":204,"author":{"gitId":"gitsac"},"content":"        Files.write(dataPath, toSave.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2023-01-28"},{"lineNumber":205,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 1; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":206,"author":{"gitId":"gitsac"},"content":"            Integer currIndex \u003d i + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":207,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(i);","lastModifiedDate":"2023-01-28"},{"lineNumber":208,"author":{"gitId":"gitsac"},"content":"            String toUse \u003d currIndex.toString() + \".\" + currTask.toString() + \"\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":209,"author":{"gitId":"gitsac"},"content":"            Files.write(dataPath, toUse.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2023-01-28"},{"lineNumber":210,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":211,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":212,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":213,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":214,"author":{"gitId":"gitsac"},"content":"     * Function to store list of tags from the current Duke chatbot session into the dataPathForTag file.","lastModifiedDate":"2023-02-11"},{"lineNumber":215,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":216,"author":{"gitId":"gitsac"},"content":"     * @param listOfTags The list of tags from the current Duke chatbot session.","lastModifiedDate":"2023-02-11"},{"lineNumber":217,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-02-11"},{"lineNumber":218,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":219,"author":{"gitId":"gitsac"},"content":"    public void storeTags(ArrayList\u003cString\u003e listOfTags) throws IOException {","lastModifiedDate":"2023-02-11"},{"lineNumber":220,"author":{"gitId":"gitsac"},"content":"        if (listOfTags.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-11"},{"lineNumber":221,"author":{"gitId":"gitsac"},"content":"            Files.write(dataPathForTag, \"\".getBytes());","lastModifiedDate":"2023-02-11"},{"lineNumber":222,"author":{"gitId":"gitsac"},"content":"            return;","lastModifiedDate":"2023-02-11"},{"lineNumber":223,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":224,"author":{"gitId":"gitsac"},"content":"        Files.write(dataPathForTag, \"\".getBytes());","lastModifiedDate":"2023-02-11"},{"lineNumber":225,"author":{"gitId":"gitsac"},"content":"        String firstTag \u003d listOfTags.get(0);","lastModifiedDate":"2023-02-11"},{"lineNumber":226,"author":{"gitId":"gitsac"},"content":"        String toSave \u003d firstTag + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":227,"author":{"gitId":"gitsac"},"content":"        Files.write(dataPathForTag, toSave.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2023-02-11"},{"lineNumber":228,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 1; i \u003c listOfTags.size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":229,"author":{"gitId":"gitsac"},"content":"            Integer currIndex \u003d i + 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":230,"author":{"gitId":"gitsac"},"content":"            String currTag \u003d listOfTags.get(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":231,"author":{"gitId":"gitsac"},"content":"            String toUse \u003d currTag + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":232,"author":{"gitId":"gitsac"},"content":"            Files.write(dataPathForTag, toUse.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2023-02-11"},{"lineNumber":233,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":234,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":235,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":236,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":236}},{"path":"src/main/java/duke/TagList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":" * Class to store tags associated with each task in Duke chatbot.","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class TagList {","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    protected ArrayList\u003cString\u003e listOfTags;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"     * Constructor for an instance of TagList.","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"     * @param listOfTags Arraylist containing Strings which specify the tag names.","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    public TagList(ArrayList\u003cString\u003e listOfTags) {","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        this.listOfTags \u003d listOfTags;","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"     * Function to set the tag name at specified index with given tag name.","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     * @param index Index specified by user.","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * @param newTag Name of new tag given by user.","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     * @return String representation of confirmation that the tag name has been changed.","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public String setTag(int index, String newTag) {","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        Integer indexInString \u003d index;","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        this.listOfTags.set(index, newTag);","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        indexInString++;","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"Ugh, do I really need change the tag for you? Fine...\\n\"","lastModifiedDate":"2023-02-16"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"                + \" The task at index \" + indexInString.toString()","lastModifiedDate":"2023-02-16"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"                + \" has successfully been tagged with \" + newTag + \".\\n\"","lastModifiedDate":"2023-02-16"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"                + \"Getting my hands dirty just for an orc....\";","lastModifiedDate":"2023-02-16"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"     * Function to add a tag name upon first adding a task.","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"     * @param tagName The tag name of the task to be set.","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"    public void addTag(String tagName) {","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"        this.listOfTags.add(tagName);","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"    public ArrayList\u003cString\u003e getTagListFull() {","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"        return this.listOfTags;","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"     * Function to return a list of tags without their associated task details.","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the list of tags.","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"    public String getStringFormOfList() {","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"        String toPrint \u003d \"Here are the tags for each index, without any of the details:\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 0; i \u003c listOfTags.size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"            Integer currIndex \u003d i + 1;","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"            String currTag \u003d listOfTags.get(i);","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"            String toUse \u003d currIndex.toString() + \". \" + currTag + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"            toPrint +\u003d toUse;","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"        return toPrint;","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"    public String getTagAtIndex(int index) {","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"        return listOfTags.get(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"     * Function to delete tag name at specified index","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"     * @param index Specified index at which to delete task.","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"    public void deleteTagAtIndex(int index) {","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"        listOfTags.remove(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"gitsac":80}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":" * Class containing the list of tasks for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"public class TaskList {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    protected ArrayList\u003cTask\u003e listOfTasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"    protected TagList listOfTags;","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a TaskList instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks An arraylist containing a list of tasks from the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTasks, TagList listOfTags) {","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"        this.listOfTasks \u003d listOfTasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"        this.listOfTags \u003d listOfTags;","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"        return this.listOfTasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"     * Function to return string representation of the list of tasks currently stored in the list to the user.","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the list of tasks currently stored.","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"    public String toRead() {","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        String toPrint \u003d \"Damn, can\u0027t believe I\u0027m doing you a favour...\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"        toPrint +\u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"            Integer currIndex \u003d i + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(i);","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"            String toUse \u003d currIndex.toString() + \".\" + currTask.toString() + \" \"","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"                    + currTask.getTag() + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"            toPrint +\u003d toUse;","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"        toPrint +\u003d \"Man, now I have to wash myself clean after helping an orc...\";","lastModifiedDate":"2023-02-16"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"        return toPrint;","lastModifiedDate":"2023-02-05"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"     * Deletes the task at the indicated index.","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"     * @param index The index which the task is stored at.","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the list of tasks after deleting indicated task.","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"    public String deleteTask(int index) throws DukeExceptions {","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"            int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"            if (indexToUse \u003e\u003d listOfTasks.size() || indexToUse \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"Wrong size for mark/unmark\");","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"            int sizeBeforeDelete \u003d listOfTasks.size();","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"            Task gettingTask \u003d listOfTasks.remove(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"            listOfTags.deleteTagAtIndex(indexToUse);","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"            assert sizeBeforeDelete - 1 \u003d\u003d listOfTasks.size() : \"It appears the\"","lastModifiedDate":"2023-02-10"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"                    + \"task has not been successfully deleted.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"            String toOutput \u003d \"You owe me one, filthy pig. I\u0027ve removed this task:\\n  \"","lastModifiedDate":"2023-02-16"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"                    + gettingTask.toString() + \"\\nNow you have \"","lastModifiedDate":"2023-02-16"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"                    + listOfTasks.size() + \" tasks in the list\";","lastModifiedDate":"2023-02-16"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"            return toOutput;","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"            return DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-04"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"     * Finds a list of tasks containing the given keyword.","lastModifiedDate":"2023-02-04"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"     * @param keyword String representation of the keyword.","lastModifiedDate":"2023-02-04"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the list of tasks containing given keyword.","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-04"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"    public String findTasks(String keyword) {","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"        String starter \u003d \"Can\u0027t you orcs find things on your own?\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"        starter +\u003d \"Fine...\\n\";","lastModifiedDate":"2023-02-16"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"        starter +\u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2023-02-16"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"        Integer firstIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(i);","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"            if (currTask.getName().contains(keyword)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"                String printThis \u003d \"\\n\" + firstIndex.toString() + \".\" + currTask.toString() + \" \"","lastModifiedDate":"2023-02-11"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"                        + currTask.getTag();","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"                firstIndex++;","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"                starter +\u003d printThis;","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"        starter +\u003d \"\\nMan, now I have to wash myself clean after helping an orc...\";","lastModifiedDate":"2023-02-16"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"        return starter;","lastModifiedDate":"2023-02-05"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"     * Adds a task to the list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"     * @param toAdd The task which will be added to the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the list of tasks after adding specified task.","lastModifiedDate":"2023-02-05"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"    public String addTask(Task toAdd) {","lastModifiedDate":"2023-02-05"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"        int sizeBeforeAdd \u003d listOfTasks.size();","lastModifiedDate":"2023-02-10"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"        listOfTasks.add(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"        listOfTags.addTag(toAdd.getTag());","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"        assert sizeBeforeAdd + 1 \u003d\u003d listOfTasks.size() : \"It appears that\"","lastModifiedDate":"2023-02-10"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"                + \"the task has not been added successfully.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"        String toPrint \u003d \"\";","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"        if (listOfTasks.size() \u003d\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"            toPrint \u003d \"You owe me one, filthy pig. I\u0027ve added this task:\\n  \"","lastModifiedDate":"2023-02-16"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"                    + toAdd.toString() + \"\\nNow you have \"","lastModifiedDate":"2023-02-16"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"                    + listOfTasks.size() + \" task in the list.\";","lastModifiedDate":"2023-02-16"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"            toPrint \u003d \"You owe me one, filthy pig. I\u0027ve added this task:\\n  \"","lastModifiedDate":"2023-02-16"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"                    + toAdd.toString() + \"\\nNow you have \"","lastModifiedDate":"2023-02-16"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"                    + listOfTasks.size() + \" tasks in the list.\";","lastModifiedDate":"2023-02-16"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"        return toPrint;","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"     * Marks the task at the indicated index as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"     * @param index The index at which the task should be marked as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the task which has been marked as done.","lastModifiedDate":"2023-02-05"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the indicated index is invalid (\u003c\u003d 0 or larger than the size of the list)","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"    public String markTask(int index) throws DukeExceptions {","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"            int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"            if (indexToUse \u003e\u003d listOfTasks.size() || indexToUse \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"Wrong size for mark/unmark\");","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"            currTask.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"            assert currTask.isDone() : \"It appears that the task was not\"","lastModifiedDate":"2023-02-10"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"                    + \"successfully marked as done.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"            String toOutput \u003d \"Can\u0027t you mark your own things? Fine,\"","lastModifiedDate":"2023-02-16"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"                    + \" I\u0027ve marked this task as done:\\n  \" + currTask.toString();","lastModifiedDate":"2023-02-16"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"            return toOutput;","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"            return DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"     * Marks the task at the indicated index as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":151,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":152,"author":{"gitId":"gitsac"},"content":"     * @param index The index at which the task should be marked as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":153,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the task which has been marked as not done.","lastModifiedDate":"2023-02-05"},{"lineNumber":154,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the indicated index is invalid (\u003c\u003d 0 or larger than the list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":156,"author":{"gitId":"gitsac"},"content":"    public String unmarkTask(int index) throws DukeExceptions {","lastModifiedDate":"2023-02-05"},{"lineNumber":157,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"gitsac"},"content":"            int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"gitsac"},"content":"            if (indexToUse \u003e\u003d listOfTasks.size() || indexToUse \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"Wrong size for mark/unmark\");","lastModifiedDate":"2023-01-28"},{"lineNumber":161,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":162,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":163,"author":{"gitId":"gitsac"},"content":"            currTask.setUndone();","lastModifiedDate":"2023-01-28"},{"lineNumber":164,"author":{"gitId":"gitsac"},"content":"            assert !currTask.isDone() : \"It appears that the task was not\"","lastModifiedDate":"2023-02-10"},{"lineNumber":165,"author":{"gitId":"gitsac"},"content":"                    + \"successfully marked as not done.\";","lastModifiedDate":"2023-02-10"},{"lineNumber":166,"author":{"gitId":"gitsac"},"content":"            String toOutput \u003d \"Can\u0027t you unmark your own tasks? Fine, I\u0027ve marked\"","lastModifiedDate":"2023-02-16"},{"lineNumber":167,"author":{"gitId":"gitsac"},"content":"                    + \" this task as not done yet:\\n  \" + currTask.toString();","lastModifiedDate":"2023-02-16"},{"lineNumber":168,"author":{"gitId":"gitsac"},"content":"            return toOutput;","lastModifiedDate":"2023-02-05"},{"lineNumber":169,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"gitsac"},"content":"            return DE.toString();","lastModifiedDate":"2023-02-05"},{"lineNumber":171,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":172,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":173,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":174,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":175,"author":{"gitId":"gitsac"},"content":"     * Checks the due date of the task if it is applicable.","lastModifiedDate":"2023-01-29"},{"lineNumber":176,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":177,"author":{"gitId":"gitsac"},"content":"     * @param index The index at which to find out the due date of.","lastModifiedDate":"2023-01-29"},{"lineNumber":178,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the task\u0027s due date if applicable.","lastModifiedDate":"2023-02-05"},{"lineNumber":179,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":180,"author":{"gitId":"gitsac"},"content":"    public String checkDueDate(int index) {","lastModifiedDate":"2023-02-05"},{"lineNumber":181,"author":{"gitId":"gitsac"},"content":"        int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":182,"author":{"gitId":"gitsac"},"content":"        if (listOfTasks.get(indexToUse) instanceof Deadlines) {","lastModifiedDate":"2023-01-28"},{"lineNumber":183,"author":{"gitId":"gitsac"},"content":"            Deadlines taskOfInterest \u003d (Deadlines) listOfTasks.get(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":184,"author":{"gitId":"gitsac"},"content":"            return taskOfInterest.taskDate();","lastModifiedDate":"2023-02-05"},{"lineNumber":185,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":186,"author":{"gitId":"gitsac"},"content":"            String toReturn \u003d \"Dumb orc, this task doesn\u0027t even have a due date!\";","lastModifiedDate":"2023-02-16"},{"lineNumber":187,"author":{"gitId":"gitsac"},"content":"            return toReturn;","lastModifiedDate":"2023-02-05"},{"lineNumber":188,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":189,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":190,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":191,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":191}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":" * Class used to read user\u0027s input for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"public class Ui {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    protected BufferedReader readingInput;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"     * Constructor to initiate a bufferedreader to get user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    public Ui() {","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        this.readingInput \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"     * Function to read user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     * @return String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    public String gettingUserInput() throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"        String userInput \u003d readingInput.readLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        return userInput;","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":31}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.gui;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-04"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-04"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-04"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    private DialogBox(String text, Image img, String type) {","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"        Circle imageSize;","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"        if (type.equals(\"duke\")) {","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"            imageSize \u003d new Circle(65, 65, 65);","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"            imageSize \u003d new Circle(65, 50, 50);","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"        displayPicture.setClip(imageSize);","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"    private void flip() {","lastModifiedDate":"2023-02-04"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-04"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"        setAlignment(Pos.CENTER_LEFT);","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"    public static DialogBox getUserDialog(String text, Image img, String type) {","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"        return new DialogBox(text, img, type);","lastModifiedDate":"2023-02-15"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"    public static DialogBox getDukeDialog(String text, Image img, String type) {","lastModifiedDate":"2023-02-15"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"        var db \u003d new DialogBox(text, img, type);","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"        db.flip();","lastModifiedDate":"2023-02-04"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"        return db;","lastModifiedDate":"2023-02-04"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"gitsac":69}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.gui;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":" * Class to launch the GUI for Duke chatbot.","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class Launcher {","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-04"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-04"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-02-04"}],"authorContributionMap":{"gitsac":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.gui;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    public void start(Stage stage) throws DukeExceptions, IOException {","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"            duke \u003d new Duke();","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"            duke.setStage(stage);","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"            stage.setTitle(\"Knight\");","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"            stage.show();","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"gitsac":36}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.gui;","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-05"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-05"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-02-05"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-05"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-05"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"    private String currentInput;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"    private String dukeOutput;","lastModifiedDate":"2023-02-05"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/trollorc.png\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeHelm.png\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"     * Initializes the MainWindow.","lastModifiedDate":"2023-02-05"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"        String firstGreetings \u003d \"What does a filthy orc want from me?\";","lastModifiedDate":"2023-02-16"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(firstGreetings, dukeImage, \"duke\"));","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"     * Sets the instance of Duke which will be running on this MainWindow.","lastModifiedDate":"2023-02-05"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"     * @param d The instance of Duke which will be running.","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-05"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"    @FXML","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"    private void handleUserInput() throws DukeExceptions, IOException {","lastModifiedDate":"2023-02-05"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"        this.currentInput \u003d input;","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"        duke.run(this);","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"        String response \u003d this.dukeOutput;","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"                DialogBox.getUserDialog(input, userImage, \"user\"),","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"                DialogBox.getDukeDialog(response, dukeImage, \"duke\")","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"        );","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-05"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"    public String getUserInput() {","lastModifiedDate":"2023-02-05"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"        return this.currentInput;","lastModifiedDate":"2023-02-05"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"    public String setDukeOutput(String output) {","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"        this.dukeOutput \u003d output;","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"        return dukeOutput;","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"gitsac":83}},{"path":"src/main/java/duke/tasktypes/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":" * Class which represents a Task with a deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    protected String endsBy;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    protected LocalDate dueDateBy;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    protected LocalTime dueTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    protected boolean validTime \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a Deadlines task","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     * @param taskName String containing the task\u0027s name and due date.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the task name is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the due date is an invalid format.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public Deadlines(String taskName) throws DukeExceptions, DateTimeParseException {","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        super(taskName.split(\"/by \")[0]);","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        if (taskName.length() \u003c\u003d 0 || taskName.isBlank() || !taskName.contains(\"/by\")) {","lastModifiedDate":"2023-02-16"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"deadline\");","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        this.endsBy \u003d taskName.split(\"/by \")[1];","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"        String[] endsByInArr \u003d this.endsBy.split(\" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        String possibleDueDate \u003d endsByInArr[0];","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        if (endsByInArr.length \u003e 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"            String timeInString \u003d endsByInArr[1];","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"            formatTimeIfValid(timeInString);","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"        if (possibleDueDate.indexOf(\"/\") !\u003d -1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"            possibleDueDate \u003d possibleDueDate.replace(\"/\", \"-\");","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"        if (checkValidityOfInitialInputDate(possibleDueDate)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"            this.dueDateBy \u003d LocalDate.parse(possibleDueDate);","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"     * Function to format the time of the due date if it is a valid time but not in correct format.","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"     * @param toFormat String representation of the time to be formatted.","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"    public void formatTimeIfValid(String toFormat) {","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"        if (toFormat.length() \u003d\u003d 4) {","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"            String firstTwo \u003d toFormat.substring(0, 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"            String nextTwo \u003d toFormat.substring(2, 4);","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"            String toParse \u003d firstTwo + \":\" + nextTwo;","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"            if (checkValidityOfTime(toParse)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"                this.dueTime \u003d LocalTime.parse(toParse);","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"                validTime \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"        } else if (toFormat.length() \u003d\u003d 5) {","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"            if (checkValidityOfTime(toFormat)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"                this.dueTime \u003d LocalTime.parse(toFormat);","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"                validTime \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"    public boolean hasTime() {","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"        return this.validTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"     * Function to reformat the stored date when reading from the stored list due to differences in input and","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"     * output date format.","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"    public void reformat() {","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"        String[] reconstructedDateArr \u003d this.endsBy.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"        String reconstructedDateInString \u003d reconstructedDateArr[0] + \" \"","lastModifiedDate":"2023-02-04"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"                + reconstructedDateArr[1] + \" \" + reconstructedDateArr[2];","lastModifiedDate":"2023-02-04"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"        reconstructedDateInString \u003d reconstructedDateInString.replace(\" \", \"/\");","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"        DateTimeFormatter originalFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"        LocalDate reconstructedDate \u003d LocalDate.parse(","lastModifiedDate":"2023-02-04"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"                LocalDate.parse(reconstructedDateInString, originalFormat).toString());","lastModifiedDate":"2023-02-04"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"        this.dueDateBy \u003d reconstructedDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"     * Function to check the validity of the due date when first input by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"     * @param toCheck String representation of the date input by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"     * @return boolean indicating if the date input by the user is valid.","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the date input is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"    public boolean checkValidityOfInitialInputDate(String toCheck) throws DateTimeParseException {","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"            LocalDate.parse(toCheck);","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2023-02-04"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"            isValid \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"        return isValid;","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"     * Function to check the validity of the due date when reading from the stored list.","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"     * @param toCheck String representation of the date when read from stored list.","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"     * @return boolean indicating if the date read from the stored list is valid.","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the date read is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"    public boolean checkValidityOfDateFromList(String toCheck) throws DateTimeParseException {","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"            DateTimeFormatter originalFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"            LocalDate.parse(toCheck, originalFormat);","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2023-02-04"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"            isValid \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"        return isValid;","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"     * Function to check if the time input by the user is valid","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"     * @param toCheck String representation of the time.","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"     * @return boolean indicating if the time is valid.","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the time is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"    public boolean checkValidityOfTime(String toCheck) throws DateTimeParseException {","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"            LocalTime.parse(toCheck);","lastModifiedDate":"2023-01-26"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2023-02-04"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"            isValid \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"        return isValid;","lastModifiedDate":"2023-01-26"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"     * Function to format the deadline task\u0027s due date if it is a valid input.","lastModifiedDate":"2023-01-29"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the due date if valid, else string representation of prompting valid input","lastModifiedDate":"2023-01-29"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"     *      is returned.","lastModifiedDate":"2023-01-29"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"    public String taskDate() {","lastModifiedDate":"2023-01-26"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"        if (this.dueDateBy \u003d\u003d null) {","lastModifiedDate":"2023-01-29"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"This task does not have a valid due date! Please input the date in this format: YYYY-MM-DD\";","lastModifiedDate":"2023-01-26"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":151,"author":{"gitId":"gitsac"},"content":"            DateTimeFormatter newFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-01-26"},{"lineNumber":152,"author":{"gitId":"gitsac"},"content":"            String newFormatOfDate \u003d this.dueDateBy.format(newFormat).replace(\"/\", \" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":153,"author":{"gitId":"gitsac"},"content":"            if (validTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":154,"author":{"gitId":"gitsac"},"content":"                toReturn \u003d \"This task is due by: \" + newFormatOfDate + \" \" + this.dueTime.toString();","lastModifiedDate":"2023-01-26"},{"lineNumber":155,"author":{"gitId":"gitsac"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":156,"author":{"gitId":"gitsac"},"content":"                toReturn \u003d \"This task is due by: \" + newFormatOfDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":158,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":159,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-26"},{"lineNumber":160,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":161,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":162,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":163,"author":{"gitId":"gitsac"},"content":"     * Function to check if the date of deadline object is truly null","lastModifiedDate":"2023-02-11"},{"lineNumber":164,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":165,"author":{"gitId":"gitsac"},"content":"    private void checkDateForNull() {","lastModifiedDate":"2023-02-11"},{"lineNumber":166,"author":{"gitId":"gitsac"},"content":"        if (this.dueDateBy \u003d\u003d null) {","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"gitsac"},"content":"            String[] stringToCheckForNullArr \u003d this.endsBy.split(\" \");","lastModifiedDate":"2023-02-11"},{"lineNumber":168,"author":{"gitId":"gitsac"},"content":"            if (stringToCheckForNullArr.length \u003e\u003d 3) {","lastModifiedDate":"2023-02-11"},{"lineNumber":169,"author":{"gitId":"gitsac"},"content":"                String checkingInStringForm \u003d stringToCheckForNullArr[0] + \"/\" + stringToCheckForNullArr[1]","lastModifiedDate":"2023-02-11"},{"lineNumber":170,"author":{"gitId":"gitsac"},"content":"                        + \"/\" + stringToCheckForNullArr[2];","lastModifiedDate":"2023-02-11"},{"lineNumber":171,"author":{"gitId":"gitsac"},"content":"                checkStringForValidDate(checkingInStringForm, stringToCheckForNullArr);","lastModifiedDate":"2023-02-11"},{"lineNumber":172,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":173,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":174,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":175,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":176,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":177,"author":{"gitId":"gitsac"},"content":"     * Function to check if a string is valid format for a date.","lastModifiedDate":"2023-02-11"},{"lineNumber":178,"author":{"gitId":"gitsac"},"content":"     * @param toCheck String to be checked for valid date.","lastModifiedDate":"2023-02-11"},{"lineNumber":179,"author":{"gitId":"gitsac"},"content":"     * @param originalStringInArr Array of strings which contains time in String form if applicable.","lastModifiedDate":"2023-02-11"},{"lineNumber":180,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":181,"author":{"gitId":"gitsac"},"content":"    private void checkStringForValidDate(String toCheck, String[] originalStringInArr) {","lastModifiedDate":"2023-02-11"},{"lineNumber":182,"author":{"gitId":"gitsac"},"content":"        if (checkValidityOfDateFromList(toCheck)) {","lastModifiedDate":"2023-02-11"},{"lineNumber":183,"author":{"gitId":"gitsac"},"content":"            reformat();","lastModifiedDate":"2023-01-28"},{"lineNumber":184,"author":{"gitId":"gitsac"},"content":"            if (originalStringInArr.length \u003d\u003d 4) {","lastModifiedDate":"2023-02-11"},{"lineNumber":185,"author":{"gitId":"gitsac"},"content":"                formatTimeIfValid(originalStringInArr[3]);","lastModifiedDate":"2023-02-11"},{"lineNumber":186,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":187,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":188,"author":{"gitId":"gitsac"},"content":"            System.out.println(\"The date is invalid!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":189,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":190,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":191,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":192,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":193,"author":{"gitId":"gitsac"},"content":"     * Function to handle dates when added directly by user or after reformatting","lastModifiedDate":"2023-02-11"},{"lineNumber":194,"author":{"gitId":"gitsac"},"content":"     * when reading from list","lastModifiedDate":"2023-02-11"},{"lineNumber":195,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":196,"author":{"gitId":"gitsac"},"content":"     * @param newFormat Date-time format required to convert to date.","lastModifiedDate":"2023-02-11"},{"lineNumber":197,"author":{"gitId":"gitsac"},"content":"     * @return String representation of task after being formatted.","lastModifiedDate":"2023-02-11"},{"lineNumber":198,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":199,"author":{"gitId":"gitsac"},"content":"    private String handleNormalDates(DateTimeFormatter newFormat) {","lastModifiedDate":"2023-02-11"},{"lineNumber":200,"author":{"gitId":"gitsac"},"content":"        if (this.dueDateBy !\u003d null) {","lastModifiedDate":"2023-01-28"},{"lineNumber":201,"author":{"gitId":"gitsac"},"content":"            String newFormatOfDate \u003d this.dueDateBy.format(newFormat).replace(\"/\", \" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":202,"author":{"gitId":"gitsac"},"content":"            return checkConditions(newFormatOfDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":203,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":204,"author":{"gitId":"gitsac"},"content":"            return formatIfNoDueDate();","lastModifiedDate":"2023-02-11"},{"lineNumber":205,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":206,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":207,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":208,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":209,"author":{"gitId":"gitsac"},"content":"     * Function to format string of task to be printed if no valid date is provided.","lastModifiedDate":"2023-02-11"},{"lineNumber":210,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":211,"author":{"gitId":"gitsac"},"content":"     * @return String representation of deadline task without date.","lastModifiedDate":"2023-02-11"},{"lineNumber":212,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":213,"author":{"gitId":"gitsac"},"content":"    private String formatIfNoDueDate() {","lastModifiedDate":"2023-02-11"},{"lineNumber":214,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":215,"author":{"gitId":"gitsac"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-11"},{"lineNumber":216,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[D][X]\" + this.getName() + \"(by: \" + this.endsBy + \")\";","lastModifiedDate":"2023-02-11"},{"lineNumber":217,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":218,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[D][ ]\" + this.getName() + \"(by: \" + this.endsBy + \")\";","lastModifiedDate":"2023-02-11"},{"lineNumber":219,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":220,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-02-11"},{"lineNumber":221,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":222,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":223,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":224,"author":{"gitId":"gitsac"},"content":"     * Function to output string representation of task based on whether it is completed.","lastModifiedDate":"2023-02-11"},{"lineNumber":225,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":226,"author":{"gitId":"gitsac"},"content":"     * @param formattedDate String representation of date of the task.","lastModifiedDate":"2023-02-11"},{"lineNumber":227,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the task.","lastModifiedDate":"2023-02-11"},{"lineNumber":228,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":229,"author":{"gitId":"gitsac"},"content":"    private String checkConditions(String formattedDate) {","lastModifiedDate":"2023-02-11"},{"lineNumber":230,"author":{"gitId":"gitsac"},"content":"        String toBeReturned \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":231,"author":{"gitId":"gitsac"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-11"},{"lineNumber":232,"author":{"gitId":"gitsac"},"content":"            toBeReturned \u003d formatDone(formattedDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":233,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":234,"author":{"gitId":"gitsac"},"content":"            toBeReturned \u003d formatUndone(formattedDate);","lastModifiedDate":"2023-02-11"},{"lineNumber":235,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":236,"author":{"gitId":"gitsac"},"content":"        return toBeReturned;","lastModifiedDate":"2023-02-11"},{"lineNumber":237,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":238,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":239,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":240,"author":{"gitId":"gitsac"},"content":"     * Function to help format string representation of a task if it is done.","lastModifiedDate":"2023-02-11"},{"lineNumber":241,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":242,"author":{"gitId":"gitsac"},"content":"     * @param formattedDate String representation of date of the task.","lastModifiedDate":"2023-02-11"},{"lineNumber":243,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the task.","lastModifiedDate":"2023-02-11"},{"lineNumber":244,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":245,"author":{"gitId":"gitsac"},"content":"    private String formatDone(String formattedDate) {","lastModifiedDate":"2023-02-11"},{"lineNumber":246,"author":{"gitId":"gitsac"},"content":"        String toPrintEventually \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":247,"author":{"gitId":"gitsac"},"content":"        if (this.validTime) {","lastModifiedDate":"2023-02-11"},{"lineNumber":248,"author":{"gitId":"gitsac"},"content":"            toPrintEventually \u003d \"[D][X]\" + this.getName() + \"(by: \"","lastModifiedDate":"2023-02-11"},{"lineNumber":249,"author":{"gitId":"gitsac"},"content":"                    + formattedDate + \" \" + this.dueTime.toString() + \")\";","lastModifiedDate":"2023-02-11"},{"lineNumber":250,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":251,"author":{"gitId":"gitsac"},"content":"            toPrintEventually \u003d \"[D][X]\" + this.getName() + \"(by: \"","lastModifiedDate":"2023-02-11"},{"lineNumber":252,"author":{"gitId":"gitsac"},"content":"                    + formattedDate + \")\";","lastModifiedDate":"2023-02-11"},{"lineNumber":253,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-02-11"},{"lineNumber":254,"author":{"gitId":"gitsac"},"content":"        return toPrintEventually;","lastModifiedDate":"2023-02-11"},{"lineNumber":255,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":256,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":257,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":258,"author":{"gitId":"gitsac"},"content":"     * Function to output string representation of task if it is not completed.","lastModifiedDate":"2023-02-11"},{"lineNumber":259,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":260,"author":{"gitId":"gitsac"},"content":"     * @param formattedDate String representation of the date of the task.","lastModifiedDate":"2023-02-11"},{"lineNumber":261,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the task.","lastModifiedDate":"2023-02-11"},{"lineNumber":262,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":263,"author":{"gitId":"gitsac"},"content":"    private String formatUndone(String formattedDate) {","lastModifiedDate":"2023-02-11"},{"lineNumber":264,"author":{"gitId":"gitsac"},"content":"        String toPrintEventually \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":265,"author":{"gitId":"gitsac"},"content":"        if (this.validTime) {","lastModifiedDate":"2023-02-11"},{"lineNumber":266,"author":{"gitId":"gitsac"},"content":"            toPrintEventually \u003d \"[D][ ]\" + this.getName() + \"(by: \"","lastModifiedDate":"2023-02-11"},{"lineNumber":267,"author":{"gitId":"gitsac"},"content":"                    + formattedDate + \" \" + this.dueTime.toString() + \")\";","lastModifiedDate":"2023-02-11"},{"lineNumber":268,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":269,"author":{"gitId":"gitsac"},"content":"            toPrintEventually \u003d \"[D][ ]\" + this.getName() + \"(by: \" + formattedDate + \")\";","lastModifiedDate":"2023-02-11"},{"lineNumber":270,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":271,"author":{"gitId":"gitsac"},"content":"        return toPrintEventually;","lastModifiedDate":"2023-02-11"},{"lineNumber":272,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":273,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":274,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-02-11"},{"lineNumber":275,"author":{"gitId":"gitsac"},"content":"     * Function to check, and accordingly print String representation of deadline.","lastModifiedDate":"2023-02-11"},{"lineNumber":276,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":277,"author":{"gitId":"gitsac"},"content":"     * @return String representation of deadline task.","lastModifiedDate":"2023-02-11"},{"lineNumber":278,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-02-11"},{"lineNumber":279,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-02-11"},{"lineNumber":280,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-02-11"},{"lineNumber":281,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":282,"author":{"gitId":"gitsac"},"content":"        DateTimeFormatter newFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-02-11"},{"lineNumber":283,"author":{"gitId":"gitsac"},"content":"        checkDateForNull();","lastModifiedDate":"2023-02-11"},{"lineNumber":284,"author":{"gitId":"gitsac"},"content":"        toReturn \u003d handleNormalDates(newFormat);","lastModifiedDate":"2023-02-11"},{"lineNumber":285,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":286,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":287,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":287}},{"path":"src/main/java/duke/tasktypes/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":" * Class which represents an event that has a start and end period.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class Events extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    protected String fromDetails;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    protected String toDetails;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize an event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"     * @param taskName String containing the task\u0027s name and due date.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if there is no start \u0026 end period being input.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    public Events(String taskName) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"        super(taskName.split(\"/from \")[0]);","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"        if (taskName.length() \u003c\u003d 0 || taskName.isBlank()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"event\");","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        String[] initialSplit \u003d taskName.split(\"/from \");","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"        String[] nextSplit \u003d initialSplit[1].split(\"/to \");","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"        this.fromDetails \u003d nextSplit[0];","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"        this.toDetails \u003d nextSplit[1];","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"     * Function to print String representation of Event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"     * @return String representation of Event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[E][X]\" + this.getName() + \"(from: \" + this.fromDetails + \"to: \" + this.toDetails + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[E][ ]\" + this.getName() + \"(from: \" + this.fromDetails + \"to: \" + this.toDetails + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":44}},{"path":"src/main/java/duke/tasktypes/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":" * Class which has all the basic fields of a task.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"public class Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"    protected String name;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-02-11"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    protected String tag \u003d \"#Untagged\";","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"     * @param taskName String which will be the name of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    Task(String taskName) {","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        this.name \u003d taskName;","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    public void setDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    public void setUndone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    public String getName() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        return this.name;","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-02-10"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        return this.isDone;","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"    public String getTag() {","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"        return this.tag;","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"    public void setTag(String newTag) {","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"        this.tag \u003d newTag;","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":45}},{"path":"src/main/java/duke/tasktypes/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":" * Class which is more specific in nature than Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a ToDo task object.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     * @param taskName String which the ToDo task will be named after.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the task name is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    public ToDo(String taskName) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        super(taskName);","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        if (taskName.length() \u003c\u003d 0 || taskName.isBlank()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"todo\");","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * Function to print the ToDo task depending on whether it is done.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the ToDo task.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[T][X]\" + this.getName();","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[T][ ]\" + this.getName();","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":38}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" stylesheets \u003d \"@dukeStyle.css\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" minHeight\u003d\"-Infinity\"/\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"130.0\" fitWidth\u003d\"130.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"gitsac":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"\u003cAnchorPane stylesheets \u003d \"@dukeStyle.css\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"                   AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\"/\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"/\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"                    vvalue\u003d\"1.0\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.rightAnchor\u003d\"0.0\"","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"                    AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"/\u003e","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-05"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-05"}],"authorContributionMap":{"gitsac":23}},{"path":"src/test/java/duke/DeadlinesTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"public class DeadlinesTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    public void testEmpty() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"        String caughtIt \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"            Deadlines emptyOne \u003d new Deadlines(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"            caughtIt \u003d DE.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"Dumb orc, the description of a deadline cannot be empty!\", caughtIt);","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    public void testInvalidDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test0 /by 12/12/2023\");","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"This task does not have a valid due date! Please input the date in this format: YYYY-MM-DD\",","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"                testIt.taskDate());","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"    public void testUndoneWithDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test1 /by 2023/12/12 1800\");","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][ ]\" + \"test1\" + \" (by: Dec 12 2023 18:00)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"    public void testUndoneWithoutDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test2 /by Monday\");","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][ ]\" + \"test2\" + \" (by: Monday)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"    public void testDoneWithDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test3 /by 2023/10/03 1800\");","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"        testIt.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][X]\" + \"test3\" + \" (by: Oct 3 2023 18:00)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"    public void testDoneWithoutDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test4 /by Tuesday\");","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"        testIt.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][X]\" + \"test4\" + \" (by: Tuesday)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":54}},{"path":"src/test/java/duke/EventsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Events;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class EventsTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    public void testEmpty() {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"        String caughtIt \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"            Events emptyOne \u003d new Events(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"            caughtIt \u003d DE.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"Dumb orc, the description of an event cannot be empty!\", caughtIt);","lastModifiedDate":"2023-02-16"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    public void testUndoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[E][ ]test1 (from: Monday to: Thursday)\",","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"                new Events(\"test1 /from Monday /to Thursday\").toString());","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"    public void testDoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        Events toCheck \u003d new Events(\"test2 /from now /to next month\");","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        toCheck.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[E][X]test2 (from: now to: next month)\", toCheck.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":33}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-04"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.ToDo;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    public void testEmpty() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"        String caughtIt \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"            ToDo emptyOne \u003d new ToDo(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"            caughtIt \u003d DE.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"Dumb orc, the description of a todo cannot be empty!\", caughtIt);","lastModifiedDate":"2023-02-16"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    public void testUndoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[T][ ]\" + \"test1\", new ToDo(\"test1\").toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public void testDoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        ToDo testIfDone \u003d new ToDo(\"test2\");","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        testIfDone.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[T][X]\" + \"test2\", testIfDone.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":32}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"todo task1","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"deadline task2 /by Monday","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"event task3 /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"gitsac":7}}]
