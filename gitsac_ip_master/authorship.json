[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"    mainClassName \u003d \"Duke\"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"gitsac":15,"-":40}},{"path":"data/dukedata.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"1.[T][X] test1   ","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":1}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.Parser;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Task;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":" * Main Duke class whereby an instance of the Duke chatbot is initialized.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"    static ArrayList\u003cTask\u003e storedText \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    static Ui DukeUi;","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    static Parser DukeParser;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    static Storage DukeStorage;","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    static TaskList DukeTaskList;","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     * Constructor to create an instance of Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    Duke() throws IOException, DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        DukeUi \u003d new Ui();","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        DukeParser \u003d new Parser();","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        DukeStorage \u003d new Storage(\"data\", \"dukedata.txt\");","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"            DukeTaskList \u003d new TaskList(DukeStorage.loadTask());","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"     * Runs the Duke chatbot program.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"    public void run() throws IOException, DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"        String input \u003d DukeUi.gettingUserInput();","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"            DukeParser.readInput(input, DukeTaskList);","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"            input \u003d DukeUi.gettingUserInput();","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"     * Initializes, runs and stores the resulting list of tasks for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"    public static void main(String[] args) throws IOException, DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"        System.out.println(\"Hello from\\n\" + logo + \"\\nWhat can I do for you?\");","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"        Duke initDuke \u003d new Duke();","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"        initDuke.run();","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"        DukeStorage.storeTask(DukeTaskList.getListOfTasks());","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"        System.out.println(\"Bye! Hope to see you again soon!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":63,"-":8}},{"path":"src/main/java/data/dukedata.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"1.[T][X] test2              ","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"2.[T][X] foru    ","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"3.[D][X] forum enjoyer (by: Tuesday) ","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":3}},{"path":"src/main/java/duke/DukeExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":" * Custom class of exception for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"public class DukeExceptions extends Exception {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"    protected String printThisOut;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize an instance of DukeException","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"     * @param commandType String which indicates type of DukeException","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"    public DukeExceptions(String commandType) {","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"        this.printThisOut \u003d commandType;","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"     * Function to return String representation based on stored String.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"     * @return String representation, which changes depending on the stored String for the object.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \":( Sorry, this is not a supported command!\";","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"Wrong size for mark/unmark\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \":( Sorry, the number input is wrong. Please check the possible indexes again using list!\";","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"deadline\") || printThisOut.equals(\"todo\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \":( Sorry, the description of a \" + this.printThisOut + \" cannot be empty!\";","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"event\")) {","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \":( Sorry, the description of an \" + this.printThisOut + \" cannot be empty!\";","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"        if (printThisOut.equals(\"find\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \":( Sorry, please input a keyword!\";","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":38}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Events;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.ToDo;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":" * Class used to interpret the user\u0027s input for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"public class Parser {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    ","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"    public Parser() {}","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"     * Function to redirect user\u0027s input to the relevant functions.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the user inputs an invalid command.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    public void readInput(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"        ","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"todo\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"                handleToDoTask(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"                handleFindTask(input, listOfTasks);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"                handleDeadlineTask(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"                handleEventTask(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"            if (input.equals(\"list\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"                handleList(listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"                handleDelete(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"checkdue\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"                handleCheckDue(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"                handleMark(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"            if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"                handleUnmark(input, listOfTasks);","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"                return;","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"    public void handleFindTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"            String[] checkForKeywordArr \u003d input.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"            if (checkForKeywordArr.length \u003c 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"find\");","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"            String keyword \u003d input.substring(4);","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"            listOfTasks.findTasks(keyword);","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"     * Function to handle ToDo tasks from the user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if name of the task is not properly given by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"    public void handleToDoTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"            String useForInit \u003d input.substring(4);","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"            Task toAdd \u003d new ToDo(useForInit);","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"            listOfTasks.addTask(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"     * Function to handle Deadlines tasks from the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if date of task is wrongly given or if name of task is not properly given by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"    public void handleDeadlineTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"            String useForInit \u003d input.substring(8);","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"            Task toAdd \u003d new Deadlines(useForInit);","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"            listOfTasks.addTask(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"     * Function to handle Events tasks from the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of the user\u0027s input.","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded into the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if event details (from and to dates) are not properly given by user.","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"    public void handleEventTask(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"            String useForInit \u003d input.substring(5);","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"            Task toAdd \u003d new Events(useForInit);","lastModifiedDate":"2023-01-28"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"            listOfTasks.addTask(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"     * Function to redirect listing out the list of tasks when user input is \"list\".","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The arraylist containing the tasks from Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"    public void handleList(TaskList listOfTasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"        listOfTasks.toRead();","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"     * Function to handle deleting tasks from user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the index indicated in the input string is invalid (\u003c\u003d 0 or greater than list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"    public void handleDelete(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"gitsac"},"content":"            String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"gitsac"},"content":"            if (commandSplit.length \u003c\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"gitsac"},"content":"            listOfTasks.deleteTask(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":161,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":162,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":163,"author":{"gitId":"gitsac"},"content":"     * Function to redirect checking task\u0027s due date when user input is \"checkdue\"","lastModifiedDate":"2023-01-29"},{"lineNumber":164,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":165,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":166,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":167,"author":{"gitId":"gitsac"},"content":"    public void handleCheckDue(String input, TaskList listOfTasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"gitsac"},"content":"        String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"gitsac"},"content":"        listOfTasks.checkDueDate(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":171,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":172,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":173,"author":{"gitId":"gitsac"},"content":"     * Function to redirect marking task as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":174,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":175,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":176,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the index in the input is invalid (\u003c\u003d 0 or greater than list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":177,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":178,"author":{"gitId":"gitsac"},"content":"    public void handleMark(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":179,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":180,"author":{"gitId":"gitsac"},"content":"            String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":181,"author":{"gitId":"gitsac"},"content":"            if (commandSplit.length \u003c\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":182,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":183,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":184,"author":{"gitId":"gitsac"},"content":"            listOfTasks.markTask(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-01-28"},{"lineNumber":185,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":186,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":187,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":188,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":189,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":190,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":191,"author":{"gitId":"gitsac"},"content":"     * Function to redirect marking task as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":192,"author":{"gitId":"gitsac"},"content":"     * @param input String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":193,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks which has been loaded from the Duke chatbot instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the index in the input is invalid (\u003c\u003d 0 or greater than list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":195,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"gitsac"},"content":"    public void handleUnmark(String input, TaskList listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":197,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":198,"author":{"gitId":"gitsac"},"content":"            String[] commandSplit \u003d input.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":199,"author":{"gitId":"gitsac"},"content":"            if (commandSplit.length \u003c\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":200,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"\");","lastModifiedDate":"2023-01-28"},{"lineNumber":201,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":202,"author":{"gitId":"gitsac"},"content":"            listOfTasks.unmarkTask(Integer.parseInt(commandSplit[1]));","lastModifiedDate":"2023-01-28"},{"lineNumber":203,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":204,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":205,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":206,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":207,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":207}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Events;","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.ToDo;","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":" * Class used to help in storing and loading user\u0027s list of tasks for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"public class Storage {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    ","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    protected Path dataPath;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"     * Constructor to initiate a Storage instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"     * @param filePath  directory whereby the list of tasks should be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"     * @param fileName file in which the list of tasks should or will be stored.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"     * @throws IOException if force-closed.","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"    public Storage(String filePath, String fileName) throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        this.dataPath \u003d getData(filePath, fileName);","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"     * @param filePath","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"     * @param fileName","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"     * @return Path whereby the file containing the list of tasks is supposed to be. If there is no such file, the","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"     *         file will be created in the specified filePath with fileName.","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"    public Path getData(String filePath, String fileName) throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"        Path toCheck \u003d Paths.get(filePath);","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"        if (!Files.exists(toCheck)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"            Files.createDirectory(toCheck);","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"        Path fileToCheck \u003d Paths.get(filePath, fileName);","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"        if (!Files.exists(fileToCheck)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"            Files.createFile(fileToCheck);","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"        return fileToCheck;","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"     * Helper method to handle loading of ToDo tasks from the file into the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"     * @param isDone Character read from the file to indicate whether the task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"     * @param nameOfTask A string containing the name of the task to be handled.","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list which will have tasks written into from the file.","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"    public void handleToDo(Character isDone, String nameOfTask, ArrayList\u003cTask\u003e listOfTasks) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"        Task toAdd \u003d new ToDo(nameOfTask);","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"        if (isDone.equals(\u0027X\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"            toAdd.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"        listOfTasks.add(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"     * Helper method to handle loading of Deadlines tasks from the file into the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"     * @param isDone Character read from the file to indicate whether the task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list which will have tasks written into from the file.","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"     * @param requiredInformation A string containing the full name of the task as written into the file previously.","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"    public void handleDeadline(Character isDone, ArrayList\u003cTask\u003e listOfTasks, String requiredInformation) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"                String deadlineWithBy \u003d requiredInformation.substring(requiredInformation.lastIndexOf(\"(\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"                String rawDate \u003d deadlineWithBy.split(\"\\\\(by: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"                String[] nameSplitInArr \u003d requiredInformation.substring(6).split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"                String nameOfTask \u003d nameSplitInArr[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"                for (int i \u003d 1; i \u003c nameSplitInArr.length; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"                    if (nameSplitInArr[i].equals(\"(by:\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"                        break;","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"                    }","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"                    nameOfTask \u003d nameOfTask + \" \" + nameSplitInArr[i];","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"                String toInitialize \u003d nameOfTask + \" /by\" + \" \" + rawDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"                Task toAdd \u003d new Deadlines(toInitialize);","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"                if (isDone.equals(\u0027X\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"                    toAdd.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"                listOfTasks.add(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"     * Helper method to handle loading of Events tasks from the file into the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"     * @param isDone Character read from the file to indicate whether the task is done or not.","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list which will have tasks written into from the file.","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"     * @param requiredInformation A string containing the full name of the task as written into the file previously.","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"    public void handleEvents(Character isDone, ArrayList\u003cTask\u003e listOfTasks, String requiredInformation) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"                String timeframe \u003d requiredInformation.substring(requiredInformation.lastIndexOf(\"(\"));","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"                String from \u003d timeframe.substring(1).split(\" to:\")[0].substring(5);","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"                String to \u003d timeframe.substring(1).split(\"to: \")[1].split(\"\\\\)\")[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"                String[] nameSplitInArr \u003d requiredInformation.substring(6).split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"                String nameOfTask \u003d nameSplitInArr[0];","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"                for (int i \u003d 1; i \u003c nameSplitInArr.length; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"                    if (nameSplitInArr[i].equals(\"(from:\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"                        break;","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"                    }","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"                    nameOfTask \u003d nameOfTask + \" \" + nameSplitInArr[i];","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"                String toInitialize \u003d nameOfTask + \" /from\" + from + \" /to \" + to;","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"                Task toAdd \u003d new Events(toInitialize);","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"                if (isDone.equals(\u0027X\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"                    toAdd.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"                listOfTasks.add(toAdd); ","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"     * Function to load tasks from stored dataPath into an arraylist to be used by the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"     * @return An arraylist which contains the tasks as stored from the previous session.","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"    public ArrayList\u003cTask\u003e loadTask() throws IOException, DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"        ArrayList\u003cTask\u003e useThis \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"        Scanner scannerForFileData \u003d new Scanner(this.dataPath);","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"        if (!scannerForFileData.hasNext()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"            scannerForFileData.close();","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"            return useThis;","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"        while (scannerForFileData.hasNextLine()) {","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"            String taskToLoad \u003d scannerForFileData.nextLine();  ","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"            String dataWithoutIndexes \u003d taskToLoad.substring(2);","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"            Character isDone \u003d dataWithoutIndexes.charAt(4);","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"            Character taskType \u003d dataWithoutIndexes.charAt(1);","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"            if (taskType.equals(\u0027T\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"                String nameOfTask \u003d dataWithoutIndexes.substring(6);","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"                handleToDo(isDone, nameOfTask, useThis);","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"            if (taskType.equals(\u0027D\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"                handleDeadline(isDone, useThis, dataWithoutIndexes);","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"gitsac"},"content":"            if (taskType.equals(\u0027E\u0027)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"gitsac"},"content":"                handleEvents(isDone, useThis, dataWithoutIndexes);","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"gitsac"},"content":"        scannerForFileData.close();","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"gitsac"},"content":"        return useThis;","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":161,"author":{"gitId":"gitsac"},"content":"     * Function to store the list of tasks from the current Duke chatbot session into the dataPath file.","lastModifiedDate":"2023-01-29"},{"lineNumber":162,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks The list of tasks from the current Duke chatbot session.","lastModifiedDate":"2023-01-29"},{"lineNumber":163,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":164,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":165,"author":{"gitId":"gitsac"},"content":"    public void storeTask(ArrayList\u003cTask\u003e listOfTasks) throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":166,"author":{"gitId":"gitsac"},"content":"        if (listOfTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"gitsac"},"content":"            Files.write(dataPath, \"\".getBytes());","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"gitsac"},"content":"            return;","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"gitsac"},"content":"        Files.write(dataPath, \"\".getBytes());","lastModifiedDate":"2023-01-28"},{"lineNumber":171,"author":{"gitId":"gitsac"},"content":"        Task firstTask \u003d listOfTasks.get(0);","lastModifiedDate":"2023-01-28"},{"lineNumber":172,"author":{"gitId":"gitsac"},"content":"        String toSave \u003d \"1.\" + firstTask.toString() + \" \\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":173,"author":{"gitId":"gitsac"},"content":"        Files.write(dataPath, toSave.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2023-01-28"},{"lineNumber":174,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 1; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":175,"author":{"gitId":"gitsac"},"content":"            Integer currIndex \u003d i + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":176,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(i);","lastModifiedDate":"2023-01-28"},{"lineNumber":177,"author":{"gitId":"gitsac"},"content":"            String toUse \u003d currIndex.toString() + \".\" + currTask.toString() + \" \\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":178,"author":{"gitId":"gitsac"},"content":"            Files.write(dataPath, toUse.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2023-01-28"},{"lineNumber":179,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":180,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":181,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":182,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":182}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Task;","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":" * Class containing the list of tasks for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"public class TaskList {","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    ","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"    protected ArrayList\u003cTask\u003e listOfTasks;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a TaskList instance.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"     * @param listOfTasks An arraylist containing a list of tasks from the Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"        this.listOfTasks \u003d listOfTasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() {","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"        return this.listOfTasks;","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"     * Function to print out the list of tasks currently stored in the list to the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"    public void toRead() {","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"            Integer currIndex \u003d i + 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(i);","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"            String toUse \u003d currIndex.toString() + \".\" + currTask.toString();","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"            System.out.println(toUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"     * Deletes the task at the indicated index.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"     * @param index The index which the task is stored at.","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"    public void deleteTask(int index) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"            int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"            if (indexToUse \u003e\u003d listOfTasks.size() || indexToUse \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"Wrong size for mark/unmark\");","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"            Task gettingTask \u003d listOfTasks.remove(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"            String toOutput \u003d \"Noted. I\u0027ve removed this task:\\n  \" + gettingTask.toString() + \"\\nNow you have \" + listOfTasks.size() + \" tasks in the list\";","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"            System.out.println(toOutput);    ","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"    public void findTasks(String keyword) {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"        String starter \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"        Integer firstIndex \u003d 1;","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(i);","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"            if (currTask.getName().contains(keyword)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"                String printThis \u003d \"\\n\" + firstIndex.toString() + \".\" + currTask.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"                firstIndex++;","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"                starter +\u003d printThis;","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"        System.out.println(starter);","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"     * Adds a task to the list of tasks.","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"     * @param toAdd The task which will be added to the list.","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"    public void addTask(Task toAdd) {","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"        listOfTasks.add(toAdd);","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"        String toPrint \u003d \"\";","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"        if (listOfTasks.size() \u003d\u003d 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"            toPrint \u003d \"Got it. I\u0027ve added this task:\\n  \" + toAdd.toString() + \"\\nNow you have \" + listOfTasks.size() + \" task in the list.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"            toPrint \u003d \"Got it. I\u0027ve added this task:\\n  \" + toAdd.toString() + \"\\nNow you have \" + listOfTasks.size() + \" tasks in the list.\";                   ","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"        System.out.println(toPrint);","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"     * Marks the task at the indicated index as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"     * @param index The index at which the task should be marked as done.","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the indicated index is invalid (\u003c\u003d 0 or larger than the size of the list)","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"    public void markTask(int index) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"            int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"            if (indexToUse \u003e\u003d listOfTasks.size() || indexToUse \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"Wrong size for mark/unmark\");","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"            currTask.setDone();","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"            String toOutput \u003d \"Nice! I\u0027ve marked this task as done:\\n  \" + currTask.toString();","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"            System.out.println(toOutput);","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"     * Marks the task at the indicated index as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"     * @param index The index at which the task should be marked as not done.","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the indicated index is invalid (\u003c\u003d 0 or larger than the list size)","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"    public void unmarkTask(int index) throws DukeExceptions {","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"            int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"            if (indexToUse \u003e\u003d listOfTasks.size() || indexToUse \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"                throw new DukeExceptions(\"Wrong size for mark/unmark\");","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"            Task currTask \u003d listOfTasks.get(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"            currTask.setUndone();","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"            String toOutput \u003d \"Ok, I\u0027ve marked this task as not done yet:\\n  \" + currTask.toString();","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"            System.out.println(toOutput);","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"        } catch (DukeExceptions DE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"            System.out.println(DE.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"     * Checks the due date of the task if it is applicable.","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"     * @param index The index at which to find out the due date of.","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"    public void checkDueDate(int index) {","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"        int indexToUse \u003d index - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"        if (listOfTasks.get(indexToUse) instanceof Deadlines) {","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"            Deadlines taskOfInterest \u003d (Deadlines) listOfTasks.get(indexToUse);","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"            System.out.println(taskOfInterest.taskDate());","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"            System.out.println(\"This task does not have a due date!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":142}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":" * Class used to read user\u0027s input for Duke chatbot.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"public class Ui {","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    ","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    protected BufferedReader readingInput;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"     * Constructor to initiate a bufferedreader to get user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    public Ui() {","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        this.readingInput \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     * Function to read user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     * @return String representation of user input.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * @throws IOException","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    public String gettingUserInput() throws IOException {","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"        String userInput \u003d readingInput.readLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        return userInput;","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"gitsac":31}},{"path":"src/main/java/duke/tasktypes/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":" * Class which represents a Task with a deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    protected String endsBy;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    protected LocalDate dueDateBy;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"    protected LocalTime dueTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    protected boolean validTime \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a Deadlines task/","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"     * @param taskName String containing the task\u0027s name and due date.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the task name is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the due date is an invalid format.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    public Deadlines(String taskName) throws DukeExceptions, DateTimeParseException{","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"        super(taskName.split(\"/by \")[0]);","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        if (taskName.length() \u003c\u003d 0 || taskName.isBlank()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"deadline\");","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        this.endsBy \u003d taskName.split(\"/by \")[1];","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"        String[] endsByInArr \u003d this.endsBy.split(\" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"        String possibleDueDate \u003d endsByInArr[0];","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        if (endsByInArr.length \u003e 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"            String timeInString \u003d endsByInArr[1];","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"            formatTimeIfValid(timeInString);","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"        if (possibleDueDate.indexOf(\"/\") !\u003d -1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"            possibleDueDate \u003d possibleDueDate.replace(\"/\", \"-\");","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"        if (checkValidityOfInitialInputDate(possibleDueDate)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"            this.dueDateBy \u003d LocalDate.parse(possibleDueDate);","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"     * Function to format the time of the due date if it is a valid time but not in correct format.","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"     * @param toFormat String representation of the time to be formatted.","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"    public void formatTimeIfValid(String toFormat) {","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"        if (toFormat.length() \u003d\u003d 4) {","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"            String firstTwo \u003d toFormat.substring(0, 2);","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"            String nextTwo \u003d toFormat.substring(2, 4);","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"gitsac"},"content":"            String toParse \u003d firstTwo + \":\" + nextTwo;","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"gitsac"},"content":"            if (checkValidityOfTime(toParse)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"gitsac"},"content":"                this.dueTime \u003d LocalTime.parse(toParse);","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"gitsac"},"content":"                validTime \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"gitsac"},"content":"        } else if (toFormat.length() \u003d\u003d 5) {","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"gitsac"},"content":"            if (checkValidityOfTime(toFormat)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"gitsac"},"content":"                this.dueTime \u003d LocalTime.parse(toFormat);","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"gitsac"},"content":"                validTime \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"gitsac"},"content":"    public boolean hasTime() {","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"gitsac"},"content":"        return this.validTime;","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"gitsac"},"content":"     * Function to reformat the stored date when reading from the stored list due to differences in input and","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"gitsac"},"content":"     * output date format.","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"gitsac"},"content":"    public void reformat() {","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"gitsac"},"content":"        String[] reconstructedDateArr \u003d this.endsBy.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"gitsac"},"content":"        String reconstructedDateInString \u003d reconstructedDateArr[0] + \" \" + reconstructedDateArr[1] + \" \" + reconstructedDateArr[2];","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"gitsac"},"content":"        reconstructedDateInString \u003d reconstructedDateInString.replace(\" \", \"/\");","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"gitsac"},"content":"        DateTimeFormatter originalFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"gitsac"},"content":"        LocalDate reconstructedDate \u003d LocalDate.parse(LocalDate.parse(reconstructedDateInString, originalFormat).toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"gitsac"},"content":"        this.dueDateBy \u003d reconstructedDate;","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"gitsac"},"content":"     * Function to check the validity of the due date when first input by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"gitsac"},"content":"     * @param toCheck String representation of the date input by the user.","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"gitsac"},"content":"     * @return boolean indicating if the date input by the user is valid.","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the date input is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"gitsac"},"content":"    public boolean checkValidityOfInitialInputDate(String toCheck) throws DateTimeParseException {","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"gitsac"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"gitsac"},"content":"            LocalDate.parse(toCheck);","lastModifiedDate":"2023-01-26"},{"lineNumber":94,"author":{"gitId":"gitsac"},"content":"        } catch (DateTimeParseException DTPE) {","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"gitsac"},"content":"            isValid \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"gitsac"},"content":"        return isValid;","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":100,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"gitsac"},"content":"     * Function to check the validity of the due date when reading from the stored list.","lastModifiedDate":"2023-01-29"},{"lineNumber":102,"author":{"gitId":"gitsac"},"content":"     * @param toCheck String representation of the date when read from stored list.","lastModifiedDate":"2023-01-29"},{"lineNumber":103,"author":{"gitId":"gitsac"},"content":"     * @return boolean indicating if the date read from the stored list is valid.","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the date read is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"gitsac"},"content":"    public boolean checkValidityOfDateFromList(String toCheck) throws DateTimeParseException {","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"gitsac"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"gitsac"},"content":"            DateTimeFormatter originalFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"gitsac"},"content":"            LocalDate.parse(toCheck, originalFormat);","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"gitsac"},"content":"        } catch (DateTimeParseException DTPE) {","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"gitsac"},"content":"            isValid \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"gitsac"},"content":"        return isValid;","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"gitsac"},"content":"     * Function to check if the time input by the user is valid","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"gitsac"},"content":"     * @param toCheck String representation of the time.","lastModifiedDate":"2023-01-29"},{"lineNumber":120,"author":{"gitId":"gitsac"},"content":"     * @return boolean indicating if the time is valid.","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"gitsac"},"content":"     * @throws DateTimeParseException if the time is invalid.","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"gitsac"},"content":"    public boolean checkValidityOfTime(String toCheck) throws DateTimeParseException {","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"gitsac"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":126,"author":{"gitId":"gitsac"},"content":"            LocalTime.parse(toCheck);","lastModifiedDate":"2023-01-26"},{"lineNumber":127,"author":{"gitId":"gitsac"},"content":"        } catch (DateTimeParseException DTPE) {","lastModifiedDate":"2023-01-26"},{"lineNumber":128,"author":{"gitId":"gitsac"},"content":"            isValid \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":129,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":130,"author":{"gitId":"gitsac"},"content":"        return isValid;","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":132,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":133,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"gitsac"},"content":"     * Function to format the deadline task\u0027s due date if it is a valid input.","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the due date if valid, else string representation of prompting valid input","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"gitsac"},"content":"     * is returned.","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":138,"author":{"gitId":"gitsac"},"content":"    public String taskDate() {","lastModifiedDate":"2023-01-26"},{"lineNumber":139,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":140,"author":{"gitId":"gitsac"},"content":"        if (this.dueDateBy \u003d\u003d null) {","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"This task does not have a valid due date! Please input the date in this format: YYYY-MM-DD\";","lastModifiedDate":"2023-01-26"},{"lineNumber":142,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":143,"author":{"gitId":"gitsac"},"content":"            DateTimeFormatter newFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-01-26"},{"lineNumber":144,"author":{"gitId":"gitsac"},"content":"            String newFormatOfDate \u003d this.dueDateBy.format(newFormat).replace(\"/\", \" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":145,"author":{"gitId":"gitsac"},"content":"            if (validTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":146,"author":{"gitId":"gitsac"},"content":"                toReturn \u003d \"This task is due by: \" + newFormatOfDate + \" \" + this.dueTime.toString();","lastModifiedDate":"2023-01-26"},{"lineNumber":147,"author":{"gitId":"gitsac"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":148,"author":{"gitId":"gitsac"},"content":"                toReturn \u003d \"This task is due by: \" + newFormatOfDate;","lastModifiedDate":"2023-01-26"},{"lineNumber":149,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":150,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":151,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-26"},{"lineNumber":152,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":153,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":154,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"gitsac"},"content":"     * Function to check, and accordingly print String representation of deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":156,"author":{"gitId":"gitsac"},"content":"     * @return String representation of deadline task.","lastModifiedDate":"2023-01-29"},{"lineNumber":157,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":158,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":159,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":160,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":161,"author":{"gitId":"gitsac"},"content":"        DateTimeFormatter newFormat \u003d DateTimeFormatter.ofPattern(\"MMM/d/uuuu\");","lastModifiedDate":"2023-01-26"},{"lineNumber":162,"author":{"gitId":"gitsac"},"content":"        if (this.dueDateBy \u003d\u003d null) {","lastModifiedDate":"2023-01-28"},{"lineNumber":163,"author":{"gitId":"gitsac"},"content":"            String[] checkIfTrulyNull \u003d this.endsBy.split(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":164,"author":{"gitId":"gitsac"},"content":"            if (checkIfTrulyNull.length \u003e\u003d 3) {","lastModifiedDate":"2023-01-28"},{"lineNumber":165,"author":{"gitId":"gitsac"},"content":"                String checkingInString \u003d checkIfTrulyNull[0] + \"/\" + checkIfTrulyNull[1] + \"/\" + checkIfTrulyNull[2];","lastModifiedDate":"2023-01-28"},{"lineNumber":166,"author":{"gitId":"gitsac"},"content":"                if (checkValidityOfDateFromList(checkingInString)) {","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"gitsac"},"content":"                    reformat();","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"gitsac"},"content":"                    if (checkIfTrulyNull.length \u003d\u003d 4) {","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"gitsac"},"content":"                        formatTimeIfValid(checkIfTrulyNull[3]);","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"gitsac"},"content":"                    }","lastModifiedDate":"2023-01-28"},{"lineNumber":171,"author":{"gitId":"gitsac"},"content":"                } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":172,"author":{"gitId":"gitsac"},"content":"                    System.out.println(\"The date is invalid!\");","lastModifiedDate":"2023-01-28"},{"lineNumber":173,"author":{"gitId":"gitsac"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":174,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":175,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":176,"author":{"gitId":"gitsac"},"content":"        if (this.dueDateBy !\u003d null) {","lastModifiedDate":"2023-01-28"},{"lineNumber":177,"author":{"gitId":"gitsac"},"content":"            String newFormatOfDate \u003d this.dueDateBy.format(newFormat).replace(\"/\", \" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":178,"author":{"gitId":"gitsac"},"content":"            if (this.done) {","lastModifiedDate":"2023-01-17"},{"lineNumber":179,"author":{"gitId":"gitsac"},"content":"                if (validTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":180,"author":{"gitId":"gitsac"},"content":"                    toReturn \u003d \"[D][X]\" + this.getName() + \"(by: \" + newFormatOfDate + \" \" + this.dueTime.toString() + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":181,"author":{"gitId":"gitsac"},"content":"                } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":182,"author":{"gitId":"gitsac"},"content":"                    toReturn \u003d \"[D][X]\" + this.getName() + \"(by: \" + newFormatOfDate + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":183,"author":{"gitId":"gitsac"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":184,"author":{"gitId":"gitsac"},"content":"            } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":185,"author":{"gitId":"gitsac"},"content":"                if (validTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":186,"author":{"gitId":"gitsac"},"content":"                    toReturn \u003d \"[D][ ]\" + this.getName() + \"(by: \" + newFormatOfDate + \" \" + this.dueTime.toString() + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":187,"author":{"gitId":"gitsac"},"content":"                } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":188,"author":{"gitId":"gitsac"},"content":"                    toReturn \u003d \"[D][ ]\" + this.getName() + \"(by: \" + newFormatOfDate + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":189,"author":{"gitId":"gitsac"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":190,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-17"},{"lineNumber":191,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":192,"author":{"gitId":"gitsac"},"content":"            if (this.done) {","lastModifiedDate":"2023-01-28"},{"lineNumber":193,"author":{"gitId":"gitsac"},"content":"                toReturn \u003d \"[D][X]\" + this.getName() + \"(by: \" + this.endsBy + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"gitsac"},"content":"            } else {","lastModifiedDate":"2023-01-28"},{"lineNumber":195,"author":{"gitId":"gitsac"},"content":"                toReturn \u003d \"[D][ ]\" + this.getName() + \"(by: \" + this.endsBy + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":196,"author":{"gitId":"gitsac"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":197,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":198,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":199,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":200,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":200}},{"path":"src/main/java/duke/tasktypes/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":" * Class which represents an event that has a start and end period.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class Events extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    protected String fromDetails;","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    protected String toDetails;","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize an event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"     * @param taskName String containing the task\u0027s name and due date.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if there is no start \u0026 end period being input.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    public Events(String taskName) throws DukeExceptions{","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        super(taskName.split(\"/from \")[0]);","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"        if (taskName.length() \u003c\u003d 0 || taskName.isBlank()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"event\");","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"        String[] initialSplit \u003d taskName.split(\"/from \");","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        String[] nextSplit \u003d initialSplit[1].split(\"/to \");","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"        this.fromDetails \u003d nextSplit[0];","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"        this.toDetails \u003d nextSplit[1];","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"     * Function to print String representation of Event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"     * @return String representation of Event task.","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        if (this.done) {","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[E][X]\" + this.getName() + \"(from: \" + this.fromDetails + \"to: \" + this.toDetails + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[E][ ]\" + this.getName() + \"(from: \" + this.fromDetails + \"to: \" + this.toDetails + \")\";","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":42}},{"path":"src/main/java/duke/tasktypes/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":" * Class which has all the basic fields of a task.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"public class Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"    protected String name;","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"    protected boolean done;","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"     * @param taskName String which will be the name of the task.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"    Task(String taskName) {","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"        this.name \u003d taskName;","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"        done \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    public void setDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"        done \u003d true;","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"    public void setUndone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"        done \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public String getName() {","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        return this.name;","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":31}},{"path":"src/main/java/duke/tasktypes/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke.tasktypes;","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import duke.DukeExceptions;","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":" * Class which is more specific in nature than Task.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"     * Constructor to initialize a ToDo task object.","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"     * @param taskName String which the ToDo task will be named after.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"     * @throws DukeExceptions if the task name is empty.","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"    public ToDo(String taskName) throws DukeExceptions{","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"        super(taskName);","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        if (taskName.length() \u003c\u003d 0 || taskName.isBlank()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"            throw new DukeExceptions(\"todo\");","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"     * Function to print the ToDo task depending on whether it is done.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"     * @return String representation of the ToDo task.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public String toString() {","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        String toReturn \u003d \"\";","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        if (this.done) {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[T][X]\" + this.getName();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"        } else {","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"            toReturn \u003d \"[T][ ]\" + this.getName();","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        return toReturn;","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"gitsac":36}},{"path":"src/test/java/duke/DeadlinesTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Deadlines;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"public class DeadlinesTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    public void testEmpty() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"        String caughtIt \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"            Deadlines emptyOne \u003d new Deadlines(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"        } catch  (DukeExceptions DE){","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"            caughtIt \u003d DE.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        assertEquals(\":( Sorry, the description of a deadline cannot be empty!\", caughtIt);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    public void testInvalidDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test0 /by 12/12/2023\");","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"This task does not have a valid due date! Please input the date in this format: YYYY-MM-DD\", testIt.taskDate());","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public void testUndoneWithDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test1 /by 2023/12/12 1800\");","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][ ]\" + \"test1\" + \" (by: Dec 12 2023 18:00)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"gitsac"},"content":"    public void testUndoneWithoutDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test2 /by Monday\");","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][ ]\" + \"test2\" + \" (by: Monday)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"gitsac"},"content":"    public void testDoneWithDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test3 /by 2023/10/03 1800\");","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"gitsac"},"content":"        testIt.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][X]\" + \"test3\" + \" (by: Oct 3 2023 18:00)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"gitsac"},"content":"    public void testDoneWithoutDate() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"gitsac"},"content":"        Deadlines testIt \u003d new Deadlines(\"test4 /by Tuesday\");","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"gitsac"},"content":"        testIt.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[D][X]\" + \"test4\" + \" (by: Tuesday)\", testIt.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":53}},{"path":"src/test/java/duke/EventsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.Events;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class EventsTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"    public void testEmpty() {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"        String caughtIt \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"            Events emptyOne \u003d new Events(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"        } catch  (DukeExceptions DE){","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"            caughtIt \u003d DE.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"        assertEquals(\":( Sorry, the description of an event cannot be empty!\", caughtIt);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    public void testUndoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[E][ ]test1 (from: Monday to: Thursday)\", new Events(\"test1 /from Monday /to Thursday\").toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public void testDoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        Events toCheck \u003d new Events(\"test2 /from now /to next month\");","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        toCheck.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[E][X]test2 (from: now to: next month)\", toCheck.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":32}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"import duke.tasktypes.ToDo;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"gitsac"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"gitsac"},"content":"    public void testEmpty() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"gitsac"},"content":"        String caughtIt \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"gitsac"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"gitsac"},"content":"            ToDo emptyOne \u003d new ToDo(\"\");","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"gitsac"},"content":"        } catch  (DukeExceptions DE){","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"gitsac"},"content":"            caughtIt \u003d DE.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"gitsac"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"gitsac"},"content":"        assertEquals(\":( Sorry, the description of a todo cannot be empty!\", caughtIt);","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"gitsac"},"content":"    public void testUndoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[T][ ]\" + \"test1\", new ToDo(\"test1\").toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"gitsac"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"gitsac"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"gitsac"},"content":"    public void testDoneValid() throws DukeExceptions {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"gitsac"},"content":"        ToDo testIfDone \u003d new ToDo(\"test2\");","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"gitsac"},"content":"        testIfDone.setDone();","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"gitsac"},"content":"        assertEquals(\"[T][X]\" + \"test2\", testIfDone.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"gitsac"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"gitsac"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"gitsac":32}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gitsac"},"content":"todo task1","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"gitsac"},"content":"deadline task2 /by Monday","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"gitsac"},"content":"event task3 /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"gitsac"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"gitsac"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"gitsac"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"gitsac"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"gitsac":7}}]
