[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"harin0826":15}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"    protected String by;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"     * Constructor for Deadline class.","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"     * Returns Deadline task with status set as NOT_DONE.","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"     * @param description String description of Deadline task.","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"     * @param by Deadline date in the format for LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If by is not parsable as LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"            this.byDate \u003d LocalDate.parse(by);","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Wrong format for date!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"     * Constructor for Deadline class to be mainly used by Storage class to load tasks from data.txt file.","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"     * Returns Deadline task with specified status.","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"     * @param description String description of Deadline task.","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"     * @param by Deadline date in the format for LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"     * @param status Status of the task.","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If by is not parsable as LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"    public Deadline(String description, String by, String status) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"        super(description, status);","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"            this.byDate \u003d LocalDate.parse(by);","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Wrong format for date!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"harin0826"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"harin0826"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"harin0826"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"harin0826"},"content":"     * Converts Deadline data into String to be used to save task data.","lastModifiedDate":"2023-02-07"},{"lineNumber":56,"author":{"gitId":"harin0826"},"content":"     * Returns String of Deadline in a format to be saved and loaded in the future.","lastModifiedDate":"2023-02-07"},{"lineNumber":57,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":58,"author":{"gitId":"harin0826"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"harin0826"},"content":"    public String toData() {","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"harin0826"},"content":"        return \"D|\" + super.toData() + \"|\" + this.by;","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"harin0826":62}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"    protected static final String DIV_OPEN \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"    protected static final String DIV_CLOSE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"    protected static final String logo \u003d \"\"","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"            + \" ____        _        \\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"            + \"\\n\";","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"    private Parser parser;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"     * Constructor for Duke class.","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"     * Returns Duke object which runs the program.","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"     * @param filePath File path which Duke will use for file creation and management.","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Loading Duke...\");","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"        this.parser \u003d new Parser(this.tasks);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"    private void run() {","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"        while (isRunning) {","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"            String input \u003d ui.takeInput(sc);","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"            if (input.equals(\"bye\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"                isRunning \u003d false;","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"            } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"                try {","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"harin0826"},"content":"                    parser.parse(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"harin0826"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"harin0826"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"harin0826"},"content":"                }","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"harin0826"},"content":"                storage.save(tasks.tasks);","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"harin0826"},"content":"        sc.close();","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"harin0826"},"content":"    private void terminate() {","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"harin0826"},"content":"        storage.save(tasks.tasks);","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"harin0826"},"content":"        ui.printByeMsg();","lastModifiedDate":"2023-02-07"},{"lineNumber":62,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":63,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":64,"author":{"gitId":"harin0826"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"harin0826"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"harin0826"},"content":"        Duke duke \u003d new Duke(home);","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Loading complete.\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"harin0826"},"content":"        duke.ui.printHelloMsg();","lastModifiedDate":"2023-02-07"},{"lineNumber":71,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"harin0826"},"content":"        duke.run();","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"harin0826"},"content":"        duke.terminate();","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"harin0826":74,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"        super(message);","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"harin0826":9}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"    protected String from;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"    protected String to;","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"    protected LocalDate fromDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"    protected LocalDate toDate;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"     * Constructor for Event class.","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"     * Returns Event task with status set as NOT_DONE.","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"     * @param description String description of Event task.","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"     * @param from Event start date in the format for LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"     * @param to Event end date in the format for LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If by is not parsable as LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"    public Event(String description, String from, String to) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"            this.fromDate \u003d LocalDate.parse(from);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"            this.toDate \u003d LocalDate.parse(to);","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Wrong format for dates!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"     * Constructor for Event class to be mainly used by Storage class to load tasks from data.txt file.","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"     * Returns Event task with specified status.","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"     * @param description String description of Event task.","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"     * @param from Event start date in the format for LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"     * @param to Event end in the format for LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"     * @param status Status of the task.","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If by is not parsable as LocalDate.","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"    public Event(String description, String from, String to, String status) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"        super(description, status);","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"harin0826"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"harin0826"},"content":"            this.fromDate \u003d LocalDate.parse(from);","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"harin0826"},"content":"            this.toDate \u003d LocalDate.parse(to);","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"harin0826"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Wrong format for dates!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"harin0826"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"harin0826"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":60,"author":{"gitId":"harin0826"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.fromDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"harin0826"},"content":"                + \" to: \" + this.toDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":65,"author":{"gitId":"harin0826"},"content":"     * Converts Event data into String to be used to save task data.","lastModifiedDate":"2023-02-07"},{"lineNumber":66,"author":{"gitId":"harin0826"},"content":"     * Returns String of Event in a format to be saved and loaded in the future.","lastModifiedDate":"2023-02-07"},{"lineNumber":67,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":68,"author":{"gitId":"harin0826"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"harin0826"},"content":"    public String toData() {","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"harin0826"},"content":"        return \"E|\" + super.toData() + \"|\" + this.from + \"|\" + this.to;","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"harin0826":73}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"public class Parser {","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"    TaskList tasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"     * Constructor for Parser class.","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"     * Returns Parser for Duke to parse user input.","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"     * @param tasks TaskList object to reference for executing parsed commands.","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"    public Parser(TaskList tasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"     * Parses user input and executes it.","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"     * @param commandLine User input in String.","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If user inputs a wrong command that is not specified or implemented.","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"    public void parse(String commandLine) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"        System.out.printf(Duke.DIV_OPEN);","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"        String[] command \u003d commandLine.split(\" \");","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"        switch (command[0]) {","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"        case \"list\":","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"            tasks.printList();","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"        case \"mark\":","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"            if (command.length !\u003d 2) {","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Please check the number of your arguments!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"            tasks.markTask(command[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"        case \"unmark\":","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"            if (command.length !\u003d 2) {","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Please check the number of your arguments!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"harin0826"},"content":"            tasks.unmarkTask(command[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"harin0826"},"content":"        case \"todo\":","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"harin0826"},"content":"            if (command.length \u003c 2) {","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"The description of a todo cannot be empty!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"harin0826"},"content":"            tasks.addTodo(command);","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"harin0826"},"content":"        case \"deadline\":","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"harin0826"},"content":"            int byIndex \u003d Arrays.asList(command).indexOf(\"/by\");","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"harin0826"},"content":"            if (command.length \u003c 4 || byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Too few arguments!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"harin0826"},"content":"            if (byIndex \u003d\u003d command.length - 1) {","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Check the format again!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"harin0826"},"content":"            tasks.addDeadline(command, byIndex);","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"harin0826"},"content":"        case \"event\":","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"harin0826"},"content":"            int fromIndex \u003d Arrays.asList(command).indexOf(\"/from\");","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"harin0826"},"content":"            int toIndex \u003d Arrays.asList(command).indexOf(\"/to\");","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"harin0826"},"content":"            if (command.length \u003c 6 || fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Too few arguments!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"harin0826"},"content":"            if (fromIndex + 1 \u003e\u003d toIndex || toIndex \u003d\u003d command.length - 1) {","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Check the format again!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"harin0826"},"content":"            tasks.addEvent(command, fromIndex, toIndex);","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"harin0826"},"content":"        case \"delete\":","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"harin0826"},"content":"            if (command.length !\u003d 2) {","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Please check the number of your arguments!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"harin0826"},"content":"            tasks.deleteTask(command[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"harin0826"},"content":"        case \"find\":","lastModifiedDate":"2023-02-07"},{"lineNumber":90,"author":{"gitId":"harin0826"},"content":"            StringBuilder keyword \u003d new StringBuilder(command[1]);","lastModifiedDate":"2023-02-07"},{"lineNumber":91,"author":{"gitId":"harin0826"},"content":"            for (int i \u003d 2; i \u003c command.length; i++) {","lastModifiedDate":"2023-02-07"},{"lineNumber":92,"author":{"gitId":"harin0826"},"content":"                keyword.append(\" \").append(command[i]);","lastModifiedDate":"2023-02-07"},{"lineNumber":93,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":94,"author":{"gitId":"harin0826"},"content":"            tasks.find(keyword.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":95,"author":{"gitId":"harin0826"},"content":"            break;","lastModifiedDate":"2023-02-07"},{"lineNumber":96,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":97,"author":{"gitId":"harin0826"},"content":"        default:","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Invalid/Unknown command.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":99,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":100,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":101,"author":{"gitId":"harin0826"},"content":"        System.out.println(Duke.DIV_CLOSE); // DIV_CLOSE for output","lastModifiedDate":"2023-02-03"},{"lineNumber":102,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":103,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":104,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"harin0826":105}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"import java.util.List;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"public class Storage {","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"    private Path homeDir;","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"    private Path dataFile;","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"     * Constructor for Storage class.","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"     * Manages Duke\u0027s directory and file location for its data.","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"     * Creates new directory /data/ if directory does not exist.","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"     * Returns Storage object.","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"     * @param homeDir Directory path for Duke program.","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"     * @throws RuntimeException If directory creation fails.","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"    public Storage(String homeDir) {","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"        Path dir \u003d Paths.get(homeDir, \"data\");","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"        if (!Files.exists(dir)) {","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Default data directory not found! Creating new directory...\");","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"            try {","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"                Files.createDirectories(dir);","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"        this.homeDir \u003d dir;","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"     * Loads saved tasks from previous execution of Duke.","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"     * Attempt to create data.txt data file if not found.","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"     * @return ArrayList\u003cTask\u003e that is either empty or filled with loaded tasks.","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If data file creation or loading fails.","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"        Path dataFile \u003d Paths.get(String.valueOf(this.homeDir), \"data.txt\");","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"        if (!Files.exists(dataFile)) {","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Data file not found! Creating new data file...\");","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"harin0826"},"content":"            try {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"harin0826"},"content":"                Files.createFile(dataFile);","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"harin0826"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Error occurred loading file!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"harin0826"},"content":"        this.dataFile \u003d dataFile;","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"harin0826"},"content":"        List\u003cString\u003e readFile;","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"harin0826"},"content":"            readFile \u003d Files.readAllLines(this.dataFile);","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"harin0826"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Failed to parse data file! Maybe it is corrupted?\");","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"harin0826"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"harin0826"},"content":"        for (String line : readFile) {","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"harin0826"},"content":"            String[] fileData \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"harin0826"},"content":"            switch (fileData[0]) {","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"harin0826"},"content":"            case \"T\":","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"harin0826"},"content":"                Todo todo \u003d new Todo(fileData[2], fileData[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"harin0826"},"content":"                loadedTasks.add(todo);","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"harin0826"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"harin0826"},"content":"            case \"D\":","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"harin0826"},"content":"                Deadline deadline \u003d new Deadline(fileData[2], fileData[3], fileData[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"harin0826"},"content":"                loadedTasks.add(deadline);","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"harin0826"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"harin0826"},"content":"            case \"E\":","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"harin0826"},"content":"                Event event \u003d new Event(fileData[2], fileData[3], fileData[4], fileData[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"harin0826"},"content":"                loadedTasks.add(event);","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"harin0826"},"content":"                break;","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"harin0826"},"content":"            default:","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"harin0826"},"content":"                // Write default case if any","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"harin0826"},"content":"        return loadedTasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":88,"author":{"gitId":"harin0826"},"content":"     * Saves currently registered tasks into the data file.","lastModifiedDate":"2023-02-07"},{"lineNumber":89,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":90,"author":{"gitId":"harin0826"},"content":"     * @param tasks ArrayList\u003cTask\u003e of currently registered tasks by Duke.","lastModifiedDate":"2023-02-07"},{"lineNumber":91,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":92,"author":{"gitId":"harin0826"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"harin0826"},"content":"            FileWriter saveWriter \u003d new FileWriter(dataFile.toFile(), false);","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"harin0826"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"harin0826"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"harin0826"},"content":"                saveWriter.write(task.toData() + System.lineSeparator());","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":99,"author":{"gitId":"harin0826"},"content":"            saveWriter.close();","lastModifiedDate":"2023-02-03"},{"lineNumber":100,"author":{"gitId":"harin0826"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":101,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Error occurred while saving data!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":102,"author":{"gitId":"harin0826"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-03"},{"lineNumber":103,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":104,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":106,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"harin0826":106}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"public class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"    protected String description;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"    protected TaskStatus status;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"     * Enumeration for TaskStatus.","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"     * DONE: Task is done.","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"     * NOT_DONE: Task is not done.","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"     * DOING: Task is currently in progress.","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"    public enum TaskStatus {","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"        DONE {","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"            public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"                return \"DONE\";","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"        },","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"        NOT_DONE {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"            public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"                return \"NOT_DONE\";","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"        },","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"        DOING {","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"            public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"                return \"DOING\";","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"        this.status \u003d TaskStatus.NOT_DONE;","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"    public Task(String description, String status) {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"        this.status \u003d TaskStatus.valueOf(status);","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"    public String toData() {","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"        return this.status.toString() + \"|\" + this.description;","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"harin0826"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"harin0826"},"content":"        switch(status) {","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"harin0826"},"content":"            case DONE:","lastModifiedDate":"2023-01-20"},{"lineNumber":54,"author":{"gitId":"harin0826"},"content":"                return \"X\";","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"harin0826"},"content":"            case NOT_DONE:","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"harin0826"},"content":"                return \" \";","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"harin0826"},"content":"            case DOING:","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"harin0826"},"content":"                return \"~\";","lastModifiedDate":"2023-01-20"},{"lineNumber":59,"author":{"gitId":"harin0826"},"content":"            default:","lastModifiedDate":"2023-01-20"},{"lineNumber":60,"author":{"gitId":"harin0826"},"content":"                return \"?\";","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"harin0826"},"content":"    public void markDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"harin0826"},"content":"        this.status \u003d TaskStatus.DONE;","lastModifiedDate":"2023-01-20"},{"lineNumber":66,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"harin0826"},"content":"    public void markUndone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"harin0826"},"content":"        this.status \u003d TaskStatus.NOT_DONE;","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"harin0826"},"content":"    public void markDoing() {","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"harin0826"},"content":"        this.status \u003d TaskStatus.DOING;","lastModifiedDate":"2023-01-20"},{"lineNumber":74,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":76,"author":{"gitId":"harin0826"},"content":"    public String getDescription() {","lastModifiedDate":"2023-02-07"},{"lineNumber":77,"author":{"gitId":"harin0826"},"content":"        return this.description;","lastModifiedDate":"2023-02-07"},{"lineNumber":78,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":79,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"harin0826":79}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import java.sql.Array;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"public class TaskList {","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"    private int numOfTasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"     * Constructor for TaskList mainly used by Storage to return loaded tasks.","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"     * Returns TaskList object with loaded tasks.","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"     * @param loadedTasks ArrayList\u003cTask\u003e of tasks loaded by Storage.","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"    public TaskList(ArrayList\u003cTask\u003e loadedTasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"        this.numOfTasks \u003d loadedTasks.size();","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"        this.tasks \u003d loadedTasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"     * Constructor for TaskList in very first initialization of Duke or when data file is corrupted or does not exist.","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"     * Returns empty TaskList object.","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"        this.numOfTasks \u003d 0;","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"     * Prints all tasks that are currently registered.","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"    public void printList() {","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"            System.out.println((i + 1) + \". \" + tasks.get(i));","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"     * Marks specified task as done.","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"     * @param arg Index starting from 1 for the specific task to be marked done.","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If arg is out of bounds or not an integer.","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"    public void markTask(String arg) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"harin0826"},"content":"            int num \u003d Integer.parseInt(arg);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"harin0826"},"content":"            if (num \u003e numOfTasks || num \u003c\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Task number is out of bounds!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"harin0826"},"content":"            tasks.get(num - 1).markDone();","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \" + tasks.get(num - 1));","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"harin0826"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Invalid number\");","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":61,"author":{"gitId":"harin0826"},"content":"     * Marks specified task as not done.","lastModifiedDate":"2023-02-07"},{"lineNumber":62,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":63,"author":{"gitId":"harin0826"},"content":"     * @param arg Index starting from 1 for the specific task to be marked not done.","lastModifiedDate":"2023-02-07"},{"lineNumber":64,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If arg is out of bounds or not an integer.","lastModifiedDate":"2023-02-07"},{"lineNumber":65,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":66,"author":{"gitId":"harin0826"},"content":"    public void unmarkTask(String arg) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"harin0826"},"content":"            int num \u003d Integer.parseInt(arg);","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"harin0826"},"content":"            if (num \u003e numOfTasks || num \u003c\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Task number is out of bounds!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"harin0826"},"content":"            tasks.get(num - 1).markUndone();","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Ok, I\u0027ve marked this task as not done yet:\\n  \" + tasks.get(num - 1));","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"harin0826"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Invalid number\");","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":80,"author":{"gitId":"harin0826"},"content":"     * Adds a Todo task into the TaskList.","lastModifiedDate":"2023-02-07"},{"lineNumber":81,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":82,"author":{"gitId":"harin0826"},"content":"     * @param args Array of inputs for constructing Todo. Each element refers to each word of Todo\u0027s description.","lastModifiedDate":"2023-02-07"},{"lineNumber":83,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":84,"author":{"gitId":"harin0826"},"content":"    public void addTodo(String[] args) {","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"harin0826"},"content":"        int len \u003d args.length;","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"harin0826"},"content":"        StringBuilder taskName \u003d new StringBuilder(args[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"harin0826"},"content":"        for (int i \u003d 2; i \u003c len; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"harin0826"},"content":"            taskName.append(\" \").append(args[i]);","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"harin0826"},"content":"        Todo todo \u003d new Todo(taskName.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"harin0826"},"content":"        tasks.add(todo);","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Got it. I\u0027ve added this To Do:\\n  \" + tasks.get(numOfTasks));","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"harin0826"},"content":"        numOfTasks++;","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Now you have \" + numOfTasks + \" tasks in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":98,"author":{"gitId":"harin0826"},"content":"     * Adds a Deadline task into the TaskList.","lastModifiedDate":"2023-02-07"},{"lineNumber":99,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":100,"author":{"gitId":"harin0826"},"content":"     * @param args Array of inputs for constructing Deadline task. First few elements up to {by} refers to each word of","lastModifiedDate":"2023-02-07"},{"lineNumber":101,"author":{"gitId":"harin0826"},"content":"     *         Deadline\u0027s description. Remaining elements refer to the deadline date.","lastModifiedDate":"2023-02-07"},{"lineNumber":102,"author":{"gitId":"harin0826"},"content":"     * @param by Index where the argument for LocalDate deadline begins.","lastModifiedDate":"2023-02-07"},{"lineNumber":103,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":104,"author":{"gitId":"harin0826"},"content":"    public void addDeadline(String[] args, int by) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"harin0826"},"content":"        int len \u003d args.length;","lastModifiedDate":"2023-02-03"},{"lineNumber":106,"author":{"gitId":"harin0826"},"content":"        StringBuilder taskName \u003d new StringBuilder(args[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":107,"author":{"gitId":"harin0826"},"content":"        for (int i \u003d 2; i \u003c by; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"harin0826"},"content":"            taskName.append(\" \").append(args[i]);","lastModifiedDate":"2023-02-03"},{"lineNumber":109,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":110,"author":{"gitId":"harin0826"},"content":"        StringBuilder byWhen \u003d new StringBuilder(args[by + 1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":111,"author":{"gitId":"harin0826"},"content":"        for (int i \u003d by + 2; i \u003c len; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":112,"author":{"gitId":"harin0826"},"content":"            byWhen.append(\" \").append(args[i]);","lastModifiedDate":"2023-02-03"},{"lineNumber":113,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":114,"author":{"gitId":"harin0826"},"content":"        Deadline deadline \u003d new Deadline(taskName.toString(), byWhen.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":115,"author":{"gitId":"harin0826"},"content":"        tasks.add(deadline);","lastModifiedDate":"2023-02-03"},{"lineNumber":116,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Got it. I\u0027ve added this Deadline:\\n  \" + tasks.get(numOfTasks));","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"harin0826"},"content":"        numOfTasks++;","lastModifiedDate":"2023-02-03"},{"lineNumber":118,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Now you have \" + numOfTasks + \" tasks in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":119,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":120,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":121,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":122,"author":{"gitId":"harin0826"},"content":"     * Adds an Event task into the TaskList.","lastModifiedDate":"2023-02-07"},{"lineNumber":123,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":124,"author":{"gitId":"harin0826"},"content":"     * @param args Array of inputs for constructing Event task. First few elements up to from refers to each word of","lastModifiedDate":"2023-02-07"},{"lineNumber":125,"author":{"gitId":"harin0826"},"content":"     *         Event\u0027s description. Remaining elements up to {to} refers to start date of Event. Remaining elements","lastModifiedDate":"2023-02-07"},{"lineNumber":126,"author":{"gitId":"harin0826"},"content":"     *         refers to the end date of Event.","lastModifiedDate":"2023-02-07"},{"lineNumber":127,"author":{"gitId":"harin0826"},"content":"     * @param from Index where the argument for LocalDate start date begins.","lastModifiedDate":"2023-02-07"},{"lineNumber":128,"author":{"gitId":"harin0826"},"content":"     * @param to Index where the argument for LocalDate end date begins.","lastModifiedDate":"2023-02-07"},{"lineNumber":129,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":130,"author":{"gitId":"harin0826"},"content":"    public void addEvent(String[] args, int from, int to) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":131,"author":{"gitId":"harin0826"},"content":"        int len \u003d args.length;","lastModifiedDate":"2023-02-03"},{"lineNumber":132,"author":{"gitId":"harin0826"},"content":"        StringBuilder taskName \u003d new StringBuilder(args[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":133,"author":{"gitId":"harin0826"},"content":"        for (int i \u003d 2; i \u003c from; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":134,"author":{"gitId":"harin0826"},"content":"            taskName.append(\" \").append(args[i]);","lastModifiedDate":"2023-02-03"},{"lineNumber":135,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":136,"author":{"gitId":"harin0826"},"content":"        StringBuilder fromWhen \u003d new StringBuilder(args[from + 1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":137,"author":{"gitId":"harin0826"},"content":"        for (int i \u003d from + 2; i \u003c to; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":138,"author":{"gitId":"harin0826"},"content":"            fromWhen.append(\" \").append(args[i]);","lastModifiedDate":"2023-02-03"},{"lineNumber":139,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":140,"author":{"gitId":"harin0826"},"content":"        StringBuilder toWhen \u003d new StringBuilder(args[to + 1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":141,"author":{"gitId":"harin0826"},"content":"        for (int i \u003d to + 2; i \u003c len; i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":142,"author":{"gitId":"harin0826"},"content":"            toWhen.append(\" \").append(args[i]);","lastModifiedDate":"2023-02-03"},{"lineNumber":143,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":144,"author":{"gitId":"harin0826"},"content":"        Event event \u003d new Event(taskName.toString(), fromWhen.toString(), toWhen.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":145,"author":{"gitId":"harin0826"},"content":"        tasks.add(event);","lastModifiedDate":"2023-02-03"},{"lineNumber":146,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Got it. I\u0027ve added this Event:\\n  \" + tasks.get(numOfTasks));","lastModifiedDate":"2023-02-03"},{"lineNumber":147,"author":{"gitId":"harin0826"},"content":"        numOfTasks++;","lastModifiedDate":"2023-02-03"},{"lineNumber":148,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Now you have \" + numOfTasks + \" tasks in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":149,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":150,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":151,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":152,"author":{"gitId":"harin0826"},"content":"     * Deletes task in the TaskList specified by the argument.","lastModifiedDate":"2023-02-07"},{"lineNumber":153,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":154,"author":{"gitId":"harin0826"},"content":"     * @param arg Index starting from 1 for the specific task to be deleted.","lastModifiedDate":"2023-02-07"},{"lineNumber":155,"author":{"gitId":"harin0826"},"content":"     * @throws DukeException If arg is out of bounds or is not an integer.","lastModifiedDate":"2023-02-07"},{"lineNumber":156,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":157,"author":{"gitId":"harin0826"},"content":"    public void deleteTask(String arg) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":158,"author":{"gitId":"harin0826"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":159,"author":{"gitId":"harin0826"},"content":"            int num \u003d Integer.parseInt(arg);","lastModifiedDate":"2023-02-03"},{"lineNumber":160,"author":{"gitId":"harin0826"},"content":"            if (num \u003e numOfTasks || num \u003c\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":161,"author":{"gitId":"harin0826"},"content":"                throw new DukeException(\"Task number is out of bounds!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":162,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":163,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\\n  \" + tasks.get(num - 1));","lastModifiedDate":"2023-02-03"},{"lineNumber":164,"author":{"gitId":"harin0826"},"content":"            tasks.remove(num - 1);","lastModifiedDate":"2023-02-03"},{"lineNumber":165,"author":{"gitId":"harin0826"},"content":"            numOfTasks--;","lastModifiedDate":"2023-02-03"},{"lineNumber":166,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Now you have \" + (numOfTasks) + \" tasks in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":167,"author":{"gitId":"harin0826"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2023-02-03"},{"lineNumber":168,"author":{"gitId":"harin0826"},"content":"            throw new DukeException(\"Invalid number\");","lastModifiedDate":"2023-02-03"},{"lineNumber":169,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":170,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":171,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":172,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":173,"author":{"gitId":"harin0826"},"content":"     * Finds tasks with matching keyword amongst currently registered tasks.","lastModifiedDate":"2023-02-07"},{"lineNumber":174,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":175,"author":{"gitId":"harin0826"},"content":"     * @param arg String keyword to search for.","lastModifiedDate":"2023-02-07"},{"lineNumber":176,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":177,"author":{"gitId":"harin0826"},"content":"    public void find(String arg) {","lastModifiedDate":"2023-02-07"},{"lineNumber":178,"author":{"gitId":"harin0826"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-07"},{"lineNumber":179,"author":{"gitId":"harin0826"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-02-07"},{"lineNumber":180,"author":{"gitId":"harin0826"},"content":"            if (task.getDescription().indexOf(arg) \u003e\u003d 0) {","lastModifiedDate":"2023-02-07"},{"lineNumber":181,"author":{"gitId":"harin0826"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-02-07"},{"lineNumber":182,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":183,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":184,"author":{"gitId":"harin0826"},"content":"        if (foundTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-02-07"},{"lineNumber":185,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"There are no matching tasks!\");","lastModifiedDate":"2023-02-07"},{"lineNumber":186,"author":{"gitId":"harin0826"},"content":"        } else {","lastModifiedDate":"2023-02-07"},{"lineNumber":187,"author":{"gitId":"harin0826"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-02-07"},{"lineNumber":188,"author":{"gitId":"harin0826"},"content":"            for (int i \u003d 0; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2023-02-07"},{"lineNumber":189,"author":{"gitId":"harin0826"},"content":"                System.out.println((i + 1) + \". \" + foundTasks.get(i));","lastModifiedDate":"2023-02-07"},{"lineNumber":190,"author":{"gitId":"harin0826"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":191,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":192,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":193,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"harin0826":193}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"     * Constructor for Todo class.","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"     * Returns Todo task with status set as NOT_DONE.","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"     * @param description String description of Todo task.","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"        super(description);","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"     * Constructor for Todo class to be mainly used by Storage class to load tasks from data.txt file.","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"     * Returns Todo task with specified status.","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"     *","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"     * @param description String description of Todo task.","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"     * @param status Status of the task.","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"    public Todo(String description, String status) {","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"        super(description, status);","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"     * Converts Todo data into String to be used to save task data.","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"     * Returns String of Todo in a format to be saved and loaded in the future.","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"    public String toData() {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"        return \"T|\" + super.toData();","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"harin0826":40}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"public class Ui {","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"    public Ui() {","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"     * Takes input from the user and returns it as String.","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"     * @param sc Scanner object to take user input.","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"     * @return User input as String.","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"    public String takeInput(Scanner sc) {","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"            return \"bye\";","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"        } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"            return input;","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"harin0826"},"content":"     * Prints greeting message for Duke.","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"harin0826"},"content":"    public void printHelloMsg() {","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"harin0826"},"content":"        System.out.println(Duke.logo);","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"harin0826"},"content":"     * Prints closing message for Duke.","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"harin0826"},"content":"    public void printByeMsg() {","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"harin0826"},"content":"        System.out.printf(Duke.DIV_OPEN + \"Bye. Hope to see you again soon!\\n\"+ Duke.DIV_CLOSE);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"harin0826"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"harin0826"},"content":"     * Prints error message from loading.","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"harin0826"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"harin0826"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"harin0826"},"content":"        System.out.println(\"Error occurred while loading file! Is the datafile missing or corrupted?\");","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"harin0826":48}},{"path":"src/test/java/data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"T|DONE|test1","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"T|NOT_DONE|test2","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"harin0826":2}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"public class StorageTest {","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"    public void storageLoadTest() throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"        Storage storageTest \u003d new Storage(\"src/test/java\");","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"        ArrayList\u003cTask\u003e testTasks \u003d storageTest.load();","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"        Task testTask1 \u003d testTasks.get(0);","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"        Task testTask2 \u003d testTasks.get(1);","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"        assertEquals(\"[T][X] test1\", testTask1.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"        assertEquals(\"[T][ ] test2\", testTask2.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"harin0826":24}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"package duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"public class TodoTest {","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"        Todo todoTest \u003d new Todo(\"test\", \"NOT_DONE\");","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"        assertEquals(\"[T][ ] test\", todoTest.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"harin0826"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"harin0826"},"content":"    public void toDataTest() {","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"harin0826"},"content":"        Todo todoTest \u003d new Todo(\"test\", \"DONE\");","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"harin0826"},"content":"        assertEquals(\"T|DONE|test\", todoTest.toData());","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"harin0826"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"harin0826"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"harin0826"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"harin0826":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"harin0826"},"content":"todo read book","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"harin0826"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"harin0826"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"harin0826"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"harin0826"},"content":"todo join sports club","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"harin0826"},"content":"mark 4","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"harin0826"},"content":"todo borrow book","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"harin0826"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"harin0826"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"harin0826"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"harin0826"},"content":"delete 1","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"harin0826"},"content":"delete 3","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"harin0826"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"harin0826":13}}]
