[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"checkstyle {","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"hingen":21,"-":40}},{"path":"src/main/java/duke/CliDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import duke.ui.cli.Cli;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import duke.utils.DukeUtils;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":" * Main class of the CLI version of the app.","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"public class CliDuke {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    private Parser parser;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    private boolean didSetupFail;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    private CliDuke() {","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        ui \u003d (Ui) (new Cli(System.out, System.in, this::handleInput, parser::isByeCommand));","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"            tasks \u003d DukeUtils.loadTasks();","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"            ui.print(e.getMessage());","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"            didSetupFail \u003d true;","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     * Launches the CLI version of the app.","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    public static void launch() {","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"        CliDuke duke \u003d new CliDuke();","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"        if (duke.didSetupFail) {","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"            return;","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"        duke.run();","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    private void handleInput(String input, Consumer\u003cString\u003e printer) {","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        DukeUtils.handleInput(input, tasks, parser, printer);","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    private void run() {","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        ui.print(DukeUtils.getGreetingMessage());","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        ui.start();","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"hingen":55}},{"path":"src/main/java/duke/GuiDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import duke.ui.gui.Gui;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import duke.utils.DukeUtils;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":" * Main class of the GUI version of the app.","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"public class GuiDuke extends Application {","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    private boolean didSetupFail;","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"     * Launches the GUI version of the app.","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"     * @param args Command-line arguments.","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    public static void launch(String[] args) {","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"        Application.launch(GuiDuke.class, args);","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        setup(stage);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"        run();","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"    private void setup(Stage stage) {","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        ui \u003d (Ui) (new Gui(stage, this::handleInput));","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"            tasks \u003d DukeUtils.loadTasks();","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"            handleSetupFailure(e.getMessage());","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"    private void handleInput(String input, Consumer\u003cString\u003e printer) {","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        if (shouldExit(input)) {","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"            Platform.exit();","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"            return;","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        DukeUtils.handleInput(input, tasks, parser, printer);","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    private boolean shouldExit(String input) {","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"        return didSetupFail || parser.isByeCommand(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"    private void handleSetupFailure(String errorMessage) {","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"        didSetupFail \u003d true;","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"        ui.print(errorMessage);","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"        ui.print(\"Duke will exit on the next input ...\");","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"    private void run() {","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"        if (!didSetupFail) {","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"            ui.print(DukeUtils.getGreetingMessage());","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"        ui.start();","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":78}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":" * Handles launching the app.","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"public class Launcher {","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"     * Determines which version of the app to run, CLI or GUI, and runs it.","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"     * By default, the app runs using a GUI. However, if the \"--cli\" argument is provided, then the app will run via a","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     * CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param args Command-line arguments.","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"        if (shouldLaunchCli(args)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"            CliDuke.launch();","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"            GuiDuke.launch(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    private static boolean shouldLaunchCli(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"        return args.length \u003d\u003d 1 \u0026\u0026 args[0].equals(\"--cli\");","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":29}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":" * Represents an add command for adding task to a task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"public abstract class AddCommand implements Command {","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     * Creates a task using the specified input, adds it to tasks, and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @return An acknowledgement message.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * @throws DukeException {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        Task task \u003d createTask(input);","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"        return String.format(\"A perfect task for a simpleton like you. I\u0027ve added this task:\\n  %s\\nNow you have %d \"","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"                + \"tasks in the list.\", task.toString(), tasks.size());","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"     * Returns a Task object created using the provided input.","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     * @return Task object created using the provided input.","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in the specified input.","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"    protected abstract Task createTask(String input) throws DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":38}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-15"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":" * Represents a bye command for exiting the app.","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"public class ByeCommand implements Command {","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"     * Returns a farewell message.","lastModifiedDate":"2023-01-18"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @return A farewell message.","lastModifiedDate":"2023-01-18"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-15"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) {","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"        return \"Finally! I thought you\u0027d never leave.\";","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"hingen":20}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-15"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" * Represents a command given by the user.","lastModifiedDate":"2023-01-15"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-15"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"public interface Command {","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-15"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     * Runs the command and returns the response message.","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-15"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2023-01-15"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param tasks User\u0027s tasks.","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @return The response message.","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in the input.","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-15"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    String run(String input, TaskList tasks) throws DukeException;","lastModifiedDate":"2023-01-18"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"hingen":19}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import duke.utils.LocalDateTimeUtils;","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":" * Represents an add deadline command for adding a deadline to a task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"public class DeadlineCommand extends AddCommand {","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * Creates a deadline using the specified input, adds it to tasks, and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in the input caused by one of the following: missing cutoff date and","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     *                       time, missing description, incorrect format, invalid cutoff date and time.","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"        return super.run(input, tasks);","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in the input caused by one of the following: missing cutoff date and","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     *                       time, missing description, incorrect format, invalid cutoff date and time.","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"    protected Task createTask(String input) throws DukeException {","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"        String[] args \u003d extractValidArgs(input);","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        return createDeadline(args);","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"    private String[] extractValidArgs(String input) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        validateCommandFormat(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        String[] args \u003d extractArgs(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        validateNonEmptyDescription(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"        validateNonEmptyCutoff(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        validateCutoffFormat(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"        return args;","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    private void validateCommandFormat(String input) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        if (!input.matches(\"deadline .+ /by .+\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The deadline command format should be:\\n  deadline \u003cdescription\u003e /by \u003ccutoff\u003e\");","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"    private String[] extractArgs(String input) {","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"        String argStr \u003d input.replaceFirst(\"deadline\", \"\");","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        String[] args \u003d argStr.split(\" /by \", 2);","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        for (int i \u003d 0; i \u003c args.length; ++i) {","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"            args[i] \u003d args[i].trim();","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"        return args;","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyDescription(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"        if (args[0].isEmpty()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyCutoff(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"        if (args[1].isEmpty()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The cutoff of a deadline must be specified!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"    private void validateCutoffFormat(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":99,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"hingen"},"content":"        if (!args[1].matches(LocalDateTimeUtils.INPUT_DATE_TIME_REGEX)) {","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"hingen"},"content":"            throw new DukeException(String.format(\"The cutoff format should be:\\n  %s\",","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"hingen"},"content":"                    LocalDateTimeUtils.INPUT_DATE_TIME_FORMAT));","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":104,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":105,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":106,"author":{"gitId":"hingen"},"content":"    private Deadline createDeadline(String[] args) throws DukeException {","lastModifiedDate":"2023-01-20"},{"lineNumber":107,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":110,"author":{"gitId":"hingen"},"content":"        String description \u003d args[0];","lastModifiedDate":"2023-02-03"},{"lineNumber":111,"author":{"gitId":"hingen"},"content":"        LocalDateTime cutoff \u003d extractValidCutoff(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":112,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":113,"author":{"gitId":"hingen"},"content":"        return new Deadline(false, description, cutoff);","lastModifiedDate":"2023-02-03"},{"lineNumber":114,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":115,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":116,"author":{"gitId":"hingen"},"content":"    private LocalDateTime extractValidCutoff(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":118,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":119,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":120,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":121,"author":{"gitId":"hingen"},"content":"            return LocalDateTime.parse(args[1], LocalDateTimeUtils.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-02-03"},{"lineNumber":122,"author":{"gitId":"hingen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":123,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The cutoff provided is an invalid date and time!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":125,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":126,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":126}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":" * Represents a delete command for a deleting a task from a task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     * Deletes the task specified in the input from tasks and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @return An acknowledgement message.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates missing index or non-integer index or out of bound index in input.","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        int index \u003d extractValidIndex(input, tasks);","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"        Task task \u003d tasks.removeAt(index);","lastModifiedDate":"2023-01-18"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"        return getMessage(tasks, task);","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    private int extractValidIndex(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"        String argStr \u003d input.replaceFirst(\"delete\", \"\").trim();","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"        validateNonEmptyArg(argStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"        int index \u003d extractIntegerArg(argStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        validateIndexRange(index, tasks);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"        return index;","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyArg(String argStr) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        assert argStr !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        if (argStr.isEmpty()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The task to be deleted must be specified!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    private int extractIntegerArg(String argStr) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"        assert argStr !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"            return Integer.parseInt(argStr) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The index of the task to be deleted must be an integer!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"    private void validateIndexRange(int index, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"        if (index \u003e\u003d tasks.size() || index \u003c 0) {","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The task to be deleted doesn\u0027t exist!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"    private String getMessage(TaskList tasks, Task task) {","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"        assert task !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"        return String.format(\"I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\", task.toString(),","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"                tasks.size());","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"hingen":75}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import duke.utils.LocalDateTimeUtils;","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":" * Represents an add event command for adding an event to a task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"public class EventCommand extends AddCommand {","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * Creates an event using the specified input, adds it to tasks, and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in the input caused by one of the following: missing start or end of","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     *                       event, missing description, incorrect format, invalid start or end of event.","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"        return super.run(input, tasks);","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in the input caused by one of the following: missing start or end of","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     *                       event, missing description, incorrect format, invalid start or end of event.","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"    protected Task createTask(String input) throws DukeException {","lastModifiedDate":"2023-01-16"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"        String[] args \u003d extractValidArgs(input);","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        return createEvent(args);","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"    private String[] extractValidArgs(String input) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        validateCommandFormat(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        String[] args \u003d extractArgs(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        validateNonEmptyDescription(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"        validateNonEmptyStart(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"        validateNonEmptyEnd(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        validateStartAndEndFormat(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"        return args;","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    private void validateCommandFormat(String input) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"        if (!input.matches(\"event .+ /from .+ /to .+\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The event command format should be:\\n  event \u003cdescription\u003e /from \u003cstart of event\u003e \"","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"                    + \"/to \u003cend of event\u003e\");","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"    private String[] extractArgs(String input) {","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"        String argStr \u003d input.replaceFirst(\"event \", \"\");","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        String[] args \u003d argStr.split(\"( /from | /to )\", 3);","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        for (int i \u003d 0; i \u003c args.length; ++i) {","lastModifiedDate":"2023-01-20"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"            args[i] \u003d args[i].trim();","lastModifiedDate":"2023-01-20"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"        return args;","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyDescription(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"        if (args[0].isEmpty()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The description of an event cannot be empty!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyStart(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"        if (args[1].isEmpty()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The start of an event must be specified!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyEnd(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":99,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 3;","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"hingen"},"content":"        if (args[2].isEmpty()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":103,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The end of an event must be specified!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":105,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":106,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":107,"author":{"gitId":"hingen"},"content":"    private void validateStartAndEndFormat(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":109,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 3;","lastModifiedDate":"2023-02-05"},{"lineNumber":110,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"hingen"},"content":"        if (!args[1].matches(LocalDateTimeUtils.INPUT_DATE_TIME_REGEX)","lastModifiedDate":"2023-01-24"},{"lineNumber":112,"author":{"gitId":"hingen"},"content":"                || !args[2].matches(LocalDateTimeUtils.INPUT_DATE_TIME_REGEX)) {","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":114,"author":{"gitId":"hingen"},"content":"            throw new DukeException(String.format(\"Start and end of event should be of the format:\\n  %s\",","lastModifiedDate":"2023-01-20"},{"lineNumber":115,"author":{"gitId":"hingen"},"content":"                    LocalDateTimeUtils.INPUT_DATE_TIME_FORMAT));","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":117,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":118,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":119,"author":{"gitId":"hingen"},"content":"    private Event createEvent(String[] args) throws DukeException {","lastModifiedDate":"2023-01-20"},{"lineNumber":120,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":121,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":122,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":123,"author":{"gitId":"hingen"},"content":"        String description \u003d args[0];","lastModifiedDate":"2023-02-03"},{"lineNumber":124,"author":{"gitId":"hingen"},"content":"        LocalDateTime start \u003d extractValidStart(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":125,"author":{"gitId":"hingen"},"content":"        LocalDateTime end \u003d extractValidEnd(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":126,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":127,"author":{"gitId":"hingen"},"content":"        return new Event(false, description, start, end);","lastModifiedDate":"2023-02-03"},{"lineNumber":128,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":129,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":130,"author":{"gitId":"hingen"},"content":"    private LocalDateTime extractValidStart(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":131,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":132,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":133,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":134,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":135,"author":{"gitId":"hingen"},"content":"            return LocalDateTime.parse(args[1], LocalDateTimeUtils.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-02-03"},{"lineNumber":136,"author":{"gitId":"hingen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":137,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The start of the event provided is an invalid date and time!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":138,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":139,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":140,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":141,"author":{"gitId":"hingen"},"content":"    private LocalDateTime extractValidEnd(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":142,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":143,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 3;","lastModifiedDate":"2023-02-05"},{"lineNumber":144,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":145,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":146,"author":{"gitId":"hingen"},"content":"            return LocalDateTime.parse(args[2], LocalDateTimeUtils.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-02-03"},{"lineNumber":147,"author":{"gitId":"hingen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":148,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The end of the event provided is an invalid date and time!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":149,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":150,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":151,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":151}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.util.List;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":" * Represents a find command for finding a task by searching for a keyword or keyphrase.","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * Returns a message listing out each task whose description contains the keyword or keyphrase specified in input.","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     * @return A message listing out each task whose description contains the keyword or keyphrase specified in input.","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates that no keyword/keyphrase was specified in input.","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        List\u003cInteger\u003e matchedTaskIndexes \u003d getMatchedTaskIndexes(input, tasks);","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"        return getMessage(tasks, matchedTaskIndexes);","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    private List\u003cInteger\u003e getMatchedTaskIndexes(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        String keyphrase \u003d extractValidKeyphrase(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"        return filterTasksByKeyphrase(tasks, keyphrase);","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"    private String extractValidKeyphrase(String input) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"        String[] args \u003d extractArgs(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        validateNonEmptyKeyphrase(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        return args[1].trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    private String[] extractArgs(String input) {","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        return input.split(\" \", 2);","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyKeyphrase(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        if (args.length !\u003d 2 || args[1].trim().isEmpty()) {","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The keyphrase to search for cannot be empty!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"    private List\u003cInteger\u003e filterTasksByKeyphrase(TaskList tasks, String keyphrase) {","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"        assert keyphrase !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        List\u003cInteger\u003e taskIndexes \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"            if (tasks.get(i).getDescription().contains(keyphrase)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"                taskIndexes.add(i);","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"        return taskIndexes;","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"    private String getMessage(TaskList tasks, List\u003cInteger\u003e matchedTaskIndexes) {","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        assert matchedTaskIndexes !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        if (matchedTaskIndexes.isEmpty()) {","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"            return \"The task you\u0027re searching for DOESN\u0027T EXIST!\";","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"            String matchedTaskListStr \u003d getMatchedTaskListStr(tasks, matchedTaskIndexes);","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"            return String.format(\"It seems that there are %d matching tasks:\\n%s\", matchedTaskIndexes.size(),","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"                    matchedTaskListStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"    private String getMatchedTaskListStr(TaskList tasks, List\u003cInteger\u003e matchedTasks) {","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"        assert matchedTasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"        for (Integer index : matchedTasks) {","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"            stringBuilder.append(String.format(\"%d.%s\\n\", index + 1, tasks.get(index).toString()));","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"        return stringBuilder.toString().trim();","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"hingen":91}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":" * Represents a list command for listing out the tasks in a task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"     * Returns a message listing out each task in tasks if tasks is not empty. Otherwise, returns a message informing","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     * the user of the empty task list.","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @return A message listing out each task in tasks if tasks is not empty. Otherwise, a message informing the user","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     *         of the empty task list.","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"        return tasks.size() \u003d\u003d 0 ? \"Nothing to see here. Now go on, scram!\" : tasks.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":24}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" * Represents a mark command for marking a task as done.","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"public class MarkCommand extends SetDoneCommand {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     * Sets the done status of the task specified in the input to true and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @throws DukeException {@inheritDoc}","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"        return super.run(input, tasks);","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    protected String getCommand() {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        return \"mark\";","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    protected boolean shouldBeDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        return true;","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"    protected String getSuccessMessagePrefix() {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        return \"I see that you\u0027re at least competent enough to clear this task.\";","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":37}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import java.util.Map;","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":" * Handles parsing of user inputs to determine the command to execute.","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"public class Parser {","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    private final Map\u003cString, Command\u003e strToCommand;","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * Creates a Parser object.","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    public Parser() {","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"        strToCommand \u003d new HashMap\u003cString, Command\u003e();","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"todo\", new ToDoCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"deadline\", new DeadlineCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"event\", new EventCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"delete\", new DeleteCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"mark\", new MarkCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"unmark\", new UnmarkCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"find\", new FindCommand());","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"list\", new ListCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        strToCommand.put(\"bye\", new ByeCommand());","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"     * Returns the Command object associated with the command specified in input.","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     * @param input The input which contains a command.","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     * @return The Command object associated with the command specified in the input.","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates that no known command was found in the input.","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    public Command getCommand(String input) throws DukeException {","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        String op \u003d input.split(\" \")[0];","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        Command command \u003d strToCommand.get(op);","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"        if (command \u003d\u003d null) {","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I\u0027ve never heard of such a command!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"            return command;","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"     * Returns true if the input contains a bye command. Otherwise, returns false.","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-20"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"     * @param input The input which is to be checked for whether it contains a bye command.","lastModifiedDate":"2023-01-20"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"     * @return True if the input contains a bye command. False otherwise.","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    public boolean isByeCommand(String input) {","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        return input.split(\" \")[0].equals(\"bye\");","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"hingen":62}},{"path":"src/main/java/duke/command/SetDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":" * Represents a command that sets the done status of a task.","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"public abstract class SetDoneCommand implements Command {","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     * Updates the done status of the task specified in the input and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @return An acknowledgement message.","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates missing index or non-integer index or out of bound index in input.","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        int index \u003d extractValidIndex(input, tasks);","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"        Task task \u003d tasks.get(index).setDone(shouldBeDone());","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"        tasks.update(index, task);","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        return getMessage(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"     * Returns the name of the command.","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     * @return Name of the command.","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"    protected abstract String getCommand();","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"     * Returns the done status to set the task to.","lastModifiedDate":"2023-01-17"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"     * @return The done status to set the task to.","lastModifiedDate":"2023-01-17"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"    protected abstract boolean shouldBeDone();","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-17"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"     * Returns the prefix to prepend to the response message when the command succeeds.","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-17"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"     * @return The prefix to prepend to the response message when the command succeeds.","lastModifiedDate":"2023-01-17"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-17"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    protected abstract String getSuccessMessagePrefix();","lastModifiedDate":"2023-01-17"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"    private int extractValidIndex(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        String argStr \u003d extractArgStr(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"        validateNonEmptyArg(argStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"        int index \u003d extractIntegerArg(argStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        validateIndexRange(index, tasks);","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        return index;","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"    private String extractArgStr(String input) {","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"        return input.replaceFirst(getCommand(), \"\").trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyArg(String argStr) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"        assert argStr !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"        if (argStr.isEmpty()) {","lastModifiedDate":"2023-01-17"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"            throw new DukeException(String.format(\"The task to %s must be specified!\", getCommand()));","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"    private int extractIntegerArg(String argStr) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"        assert argStr !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-17"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"            return Integer.parseInt(argStr) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-17"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"            throw new DukeException(String.format(\"The index of the task to %s must be an integer!\", getCommand()));","lastModifiedDate":"2023-01-24"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"    private void validateIndexRange(int index, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"        if (index \u003e\u003d tasks.size() || index \u003c 0) {","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"            throw new DukeException(String.format(\"The task to %s doesn\u0027t exist!\", getCommand()));","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-17"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"    private String getMessage(Task task) {","lastModifiedDate":"2023-01-17"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"        assert task !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"        return String.format(\"%s\\n  %s\", getSuccessMessagePrefix(), task.toString());","lastModifiedDate":"2023-01-17"},{"lineNumber":99,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":100,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"hingen":100}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":" * Represents an add to-do command for adding a to-do to a task list.","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"public class ToDoCommand extends AddCommand {","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * Creates a to-do using the specified input, adds it to tasks, and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates empty description in input.","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"        return super.run(input, tasks);","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates empty description in input.","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    protected Task createTask(String input) throws DukeException {","lastModifiedDate":"2023-01-16"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"        String description \u003d extractValidDescription(input);","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        return new ToDo(false, description);","lastModifiedDate":"2023-01-17"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    private String extractValidDescription(String input) throws DukeException {","lastModifiedDate":"2023-01-17"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"        String description \u003d extractDescription(input);","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        validateNonEmptyDescription(description);","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        return description;","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"    private String extractDescription(String input) {","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        return input.replaceFirst(\"todo\", \"\").trim();","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"    private void validateNonEmptyDescription(String description) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        assert description !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"The description of a to-do cannot be empty!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":59}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.command;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-18"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" * Represents an unmark command for marking a task as not done.","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"public class UnmarkCommand extends SetDoneCommand {","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     * Sets the done status of the task specified in the input to false and returns an acknowledgement message.","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * @param input {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * @param tasks {@inheritDoc}","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @throws DukeException {@inheritDoc}","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    public String run(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"        return super.run(input, tasks);","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    protected String getCommand() {","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        return \"unmark\";","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    protected boolean shouldBeDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        return false;","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"    protected String getSuccessMessagePrefix() {","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        return \"YOU DARE LIE TO ME?!\";","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":37}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.exception;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":" * An exception thrown when an error to be printed to output occurs during the app\u0027s execution.","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"     * Creates a DukeException object.","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"     * @param message The error message to be printed to output.","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"        super(String.format(\"Do you take me for a FOOL?!\\n%s\", message));","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":15}},{"path":"src/main/java/duke/io/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.io;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import java.nio.file.FileAlreadyExistsException;","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":" * Represents a file storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"public class FileStorage implements Storage {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"    private final Path path;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     * Creates a FileStorage object.","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * @param path The path of the file to use for storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    public FileStorage(Path path) {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"        assert path !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    public boolean doesExist() throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"            return Files.exists(path);","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I do not have enough permissions to check for the save file\u0027s existence!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"    public void create() throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"            ensureDirectoriesExist();","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"            Files.createFile(path);","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        } catch (FileAlreadyExistsException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"            // Nothing to do as the file already exist","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I encountered an I/O error when creating the save file!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I do not have enough permissions to create the save file!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    public String read() throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"            return Files.readString(path);","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I encountered an I/O error when reading the save file!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"        } catch (OutOfMemoryError e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I need more memory to read the save file!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I do not have enough permissions to read the save file!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"    public void write(String data) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"        assert data !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"            Files.writeString(path, data);","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I encountered an I/O error when writing to the save file!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"I do not have enough permissions to write to the save file!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"    private void ensureDirectoriesExist() throws IOException {","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"            Files.createDirectories(path.getParent());","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"        } catch (FileAlreadyExistsException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"            // Nothing to do as the directories already exist","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"hingen":83}},{"path":"src/main/java/duke/io/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.io;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":" * Represents a readable and writable storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"public interface Storage {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"     * Returns true if the storage exist. Otherwise, returns false.","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     * @return True if the storage exist. False otherwise.","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates failure to check for file.","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"    boolean doesExist() throws DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     * Creates the storage.","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates failure to create storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    void create() throws DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"     * Returns the contents stored in the storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"     * @return The contents stored in the storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates failure to read from storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"    String read() throws DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"     * Write data to the storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     * @param data The data to be written to the storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates failure to write to storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    void write(String data) throws DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"hingen":39}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.task;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.utils.BooleanUtils;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.utils.LocalDateTimeUtils;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":" * Represents a deadline task.","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"    private static final char SYMBOL \u003d \u0027D\u0027;","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    private final LocalDateTime cutoff;","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * Creates a Deadline object.","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     * @param isDone Is the deadline over.","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     * @param cutoff Cutoff of the deadline.","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    public Deadline(boolean isDone, String description, LocalDateTime cutoff) {","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"        super(isDone, description);","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        assert cutoff !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        this.cutoff \u003d cutoff;","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     * Returns a Deadline object created using the specified data that was loaded from storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     * @param args Data about the deadline that was loaded from storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"     * @return The Deadline object created using the data loaded from storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates missing data or incorrect data type or format in args.","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    public static Deadline createFromStorage(String[] args) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        validateNoMissingData(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        String[] formattedArgs \u003d Task.formatStrsFromStorage(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        boolean isDone \u003d extractValidIsDone(formattedArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"        LocalDateTime cutoff \u003d extractValidCutoff(formattedArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        return new Deadline(isDone, formattedArgs[2], cutoff);","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"    public String getStorageStr() {","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        return String.format(\"%c %c %s %c %s\", SYMBOL, FIELD_DIVIDER, super.getStorageStr(), FIELD_DIVIDER,","lastModifiedDate":"2023-02-05"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"                Task.formatStrForStorage(cutoff.toString()));","lastModifiedDate":"2023-02-05"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        String cutoffStr \u003d cutoff.format(LocalDateTimeUtils.OUTPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"        return String.format(\"[%c]%s (by: %s)\", SYMBOL, super.toString(), cutoffStr);","lastModifiedDate":"2023-02-05"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"    protected Task createCopy() {","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"        return new Deadline(isDone(), getDescription(), cutoff);","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"    private static void validateNoMissingData(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"        if (args.length !\u003d 4) {","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"A deadline in storage has missing data!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"    private static boolean extractValidIsDone(String[] formattedArgs) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"        assert formattedArgs !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"        assert formattedArgs.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        if (!BooleanUtils.isBooleanStr(formattedArgs[1])) {","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"A deadline in storage has an incorrect data type!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"        return Boolean.parseBoolean(formattedArgs[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"    private static LocalDateTime extractValidCutoff(String[] formattedArgs) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"        assert formattedArgs !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"        assert formattedArgs.length \u003e\u003d 4;","lastModifiedDate":"2023-02-05"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"            return LocalDateTime.parse(formattedArgs[3]);","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"A deadline in storage has an incorrectly formatted cutoff date and time!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":98}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.task;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.utils.BooleanUtils;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.utils.LocalDateTimeUtils;","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":" * Represents an event task.","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"    private static final char SYMBOL \u003d \u0027E\u0027;","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    private final LocalDateTime start;","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    private final LocalDateTime end;","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     * Creates an Event object.","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     * @param isDone Is the event done.","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     * @param start When the event starts.","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"     * @param end When the event ends.","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    public Event(boolean isDone, String description, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        super(isDone, description);","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        assert start !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"        assert end !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"     * Returns an Event object created using the specified data that was loaded from storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"     * @param args Data about the event that was loaded from storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"     * @return The Event object created using the data loaded from storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates missing data or incorrect data type or format in args.","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"    public static Event createFromStorage(String[] args) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        validateNoMissingData(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        String[] formattedArgs \u003d Task.formatStrsFromStorage(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        boolean isDone \u003d extactValidIsDone(formattedArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"        String description \u003d formattedArgs[2];","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"        LocalDateTime start \u003d extractValidStart(formattedArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        LocalDateTime end \u003d extactValidEnd(formattedArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"        return new Event(isDone, description, start, end);","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    public String getStorageStr() {","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        String startStr \u003d Task.formatStrForStorage(start.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        String endStr \u003d Task.formatStrForStorage(end.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"        return String.format(\"%c %c %s %c %s %c %s\", SYMBOL, FIELD_DIVIDER, super.getStorageStr(), FIELD_DIVIDER,","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"                startStr, FIELD_DIVIDER, endStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"        String startStr \u003d start.format(LocalDateTimeUtils.OUTPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        String endStr \u003d end.format(LocalDateTimeUtils.OUTPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        return String.format(\"[%c]%s (from: %s to: %s)\", SYMBOL, super.toString(), startStr, endStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"    protected Task createCopy() {","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"        return new Event(isDone(), getDescription(), start, end);","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"    private static void validateNoMissingData(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"        if (args.length !\u003d 5) {","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"An event in storage has missing data!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"    private static LocalDateTime extractValidStart(String[] formattedArgs) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"        assert formattedArgs !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"        assert formattedArgs.length \u003e\u003d 4;","lastModifiedDate":"2023-02-05"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"            return LocalDateTime.parse(formattedArgs[3]);","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"An event in storage has an incorrectly formatted start of event!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"    private static LocalDateTime extactValidEnd(String[] formattedArgs) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":99,"author":{"gitId":"hingen"},"content":"        assert formattedArgs !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":100,"author":{"gitId":"hingen"},"content":"        assert formattedArgs.length \u003e\u003d 5;","lastModifiedDate":"2023-02-05"},{"lineNumber":101,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":102,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":103,"author":{"gitId":"hingen"},"content":"            return LocalDateTime.parse(formattedArgs[4]);","lastModifiedDate":"2023-02-03"},{"lineNumber":104,"author":{"gitId":"hingen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"An event in storage has an incorrectly formatted end of event!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":106,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":107,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":109,"author":{"gitId":"hingen"},"content":"    private static boolean extactValidIsDone(String[] formattedArgs) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":110,"author":{"gitId":"hingen"},"content":"        assert formattedArgs !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":111,"author":{"gitId":"hingen"},"content":"        assert formattedArgs.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":112,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":113,"author":{"gitId":"hingen"},"content":"        if (!BooleanUtils.isBooleanStr(formattedArgs[1])) {","lastModifiedDate":"2023-02-03"},{"lineNumber":114,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"An event in storage has an incorrect data type!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":115,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":116,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"hingen"},"content":"        return Boolean.parseBoolean(formattedArgs[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":118,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":119,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":119}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.task;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":" * Represents a task.","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"    /** Use to divide the fields of the task when writing to storage. */","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"    protected static final char FIELD_DIVIDER \u003d \u0027|\u0027;","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"    /** Use to split a task storage string into it\u0027s fields.*/","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"    static final String FIELD_SPLIT_REGEX \u003d String.format(\" \\\\%c \", Task.FIELD_DIVIDER);","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"    private static final String FIELD_DIVIDER_SUBSTITUTE \u003d \"\\\\|\";","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-18"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    private final String description;","lastModifiedDate":"2023-01-16"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * Creates a Task object.","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     * @param isDone Is the task done.","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    public Task(boolean isDone, String description) {","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-16"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        return description;","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"     * Returns a copy of this Task object with isDone set to the specified value.","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"     * @param isDone The value to set isDone to.","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"     * @return Copy of this Task object with isDone set to the specified value.","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"    public Task setDone(boolean isDone) {","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"        Task task \u003d createCopy();","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        task.isDone \u003d isDone;","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        return task;","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        String doneStatusStr \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"        return String.format(\"[%s] %s\", doneStatusStr, description);","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"     * Returns a string containing data about the task. This string is formatted for writing to storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"     * @return A string containing data about the task.","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    public String getStorageStr() {","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        return String.format(\"%b %s %s\", isDone, FIELD_DIVIDER, formatStrForStorage(description));","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"     * Formats a string to be suited for writing to storage and returns the formatted string.","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"     * @param str The string to be formatted.","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"     * @return The string formatted to be suited for writing to storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"    protected static String formatStrForStorage(String str) {","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        assert str !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        return str.replace(Character.toString(FIELD_DIVIDER), FIELD_DIVIDER_SUBSTITUTE);","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"     * Takes an array of strings that were loaded from storage, undo the formatting from","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"     * {@link duke.task.Task#formatStrForStorage}, and return the strings.","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"     * @param strs The strings that are to be formatted.","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"     * @return The strings with formatting from {@link duke.task.Task#formatStrForStorage} undone.","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"    protected static String[] formatStrsFromStorage(String[] strs) {","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"        assert strs !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"        String[] formatted \u003d new String[strs.length];","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"        for (int i \u003d 0; i \u003c strs.length; ++i) {","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"            formatted[i] \u003d strs[i].replace(FIELD_DIVIDER_SUBSTITUTE, Character.toString(FIELD_DIVIDER));","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"        return formatted;","lastModifiedDate":"2023-01-19"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"     * Returns true if the task is done. Otherwise, returns false.","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"     * @return True if the task is done. False otherwise.","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"    protected boolean isDone() {","lastModifiedDate":"2023-01-24"},{"lineNumber":99,"author":{"gitId":"hingen"},"content":"        return isDone;","lastModifiedDate":"2023-01-24"},{"lineNumber":100,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":101,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":102,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":103,"author":{"gitId":"hingen"},"content":"     * Creates a copy of this task and returns it.","lastModifiedDate":"2023-01-24"},{"lineNumber":104,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":105,"author":{"gitId":"hingen"},"content":"     * @return A copy of this task.","lastModifiedDate":"2023-01-24"},{"lineNumber":106,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":107,"author":{"gitId":"hingen"},"content":"    protected abstract Task createCopy();","lastModifiedDate":"2023-01-24"},{"lineNumber":108,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":108}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.task;","lastModifiedDate":"2023-01-18"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.io.Storage;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-18"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.util.List;","lastModifiedDate":"2023-01-18"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-18"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":" * Represents a task list.","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-18"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"public class TaskList {","lastModifiedDate":"2023-01-18"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     * Creates a TaskList object.","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     * Fills the task list using the data from the specified storage if it exist. If the storage does not exist, create","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     * it.","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     * @param storage The storage to read the task list from and write the task list to.","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in loading from storage or creating the storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    public TaskList(Storage storage) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"        if (storage.doesExist()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"            loadFromStorage();","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"        } else {","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"            createNewTaskListAndStorage();","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"            String taskStr \u003d String.format(\"%d.%s\\n\", i + 1, tasks.get(i).toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"            stringBuilder.append(taskStr);","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        return stringBuilder.toString().trim();","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"     * Returns the task at the specified index.","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"     * @param index The index of the task to be returned.","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"     * @throws IndexOutOfBoundsException Indicates that the index is out of range.","lastModifiedDate":"2023-01-18"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-01-18"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"    public int size() {","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-18"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"     * Adds the specified task to the end of the list and writes the updated task list to storage.","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-01-18"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates failure to write to storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"    public void add(Task task) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"        assert task !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-18"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"            writeToStorage();","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"            tasks.remove(task);","lastModifiedDate":"2023-01-19"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"            throw e;","lastModifiedDate":"2023-01-19"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-18"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"     * Removes the task at the specified index, writes the updated task list to storage, and returns the removed task.","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-18"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"     * @param index The index of the task to be removed.","lastModifiedDate":"2023-01-18"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"     * @return The removed task.","lastModifiedDate":"2023-01-18"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"     * @throws IndexOutOfBoundsException Indicates that the index is out of range.","lastModifiedDate":"2023-01-18"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates failure to write to storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-18"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"    public Task removeAt(int index) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"        Task task \u003d tasks.remove(index);","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"hingen"},"content":"            writeToStorage();","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"hingen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"hingen"},"content":"            tasks.add(index, task);","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"hingen"},"content":"            throw e;","lastModifiedDate":"2023-01-19"},{"lineNumber":105,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":106,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":107,"author":{"gitId":"hingen"},"content":"        return task;","lastModifiedDate":"2023-01-19"},{"lineNumber":108,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":109,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":111,"author":{"gitId":"hingen"},"content":"     * Updates the task at index.","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-24"},{"lineNumber":113,"author":{"gitId":"hingen"},"content":"     * @param index The index of the task to be updated.","lastModifiedDate":"2023-01-30"},{"lineNumber":114,"author":{"gitId":"hingen"},"content":"     * @param task The updated task.","lastModifiedDate":"2023-01-24"},{"lineNumber":115,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates failure to write to storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":116,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":117,"author":{"gitId":"hingen"},"content":"    public void update(int index, Task task) throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":118,"author":{"gitId":"hingen"},"content":"        assert task !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":119,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":120,"author":{"gitId":"hingen"},"content":"        Task oldTask \u003d tasks.get(index);","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"hingen"},"content":"        tasks.set(index, task);","lastModifiedDate":"2023-01-30"},{"lineNumber":122,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":123,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":124,"author":{"gitId":"hingen"},"content":"            writeToStorage();","lastModifiedDate":"2023-01-24"},{"lineNumber":125,"author":{"gitId":"hingen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":126,"author":{"gitId":"hingen"},"content":"            tasks.set(index, oldTask);","lastModifiedDate":"2023-01-30"},{"lineNumber":127,"author":{"gitId":"hingen"},"content":"            throw e;","lastModifiedDate":"2023-01-24"},{"lineNumber":128,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":129,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":130,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":131,"author":{"gitId":"hingen"},"content":"    private void loadFromStorage() throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":132,"author":{"gitId":"hingen"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-19"},{"lineNumber":133,"author":{"gitId":"hingen"},"content":"        String[] taskStorageStrs \u003d storage.read().split(\"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":134,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":135,"author":{"gitId":"hingen"},"content":"        for (String taskStorageStr : taskStorageStrs) {","lastModifiedDate":"2023-02-03"},{"lineNumber":136,"author":{"gitId":"hingen"},"content":"            if (taskStorageStr.isEmpty()) {","lastModifiedDate":"2023-02-03"},{"lineNumber":137,"author":{"gitId":"hingen"},"content":"                continue;","lastModifiedDate":"2023-01-19"},{"lineNumber":138,"author":{"gitId":"hingen"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":139,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":140,"author":{"gitId":"hingen"},"content":"            String[] args \u003d taskStorageStr.split(Task.FIELD_SPLIT_REGEX);","lastModifiedDate":"2023-02-03"},{"lineNumber":141,"author":{"gitId":"hingen"},"content":"            tasks.add(createTask(args));","lastModifiedDate":"2023-02-03"},{"lineNumber":142,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":143,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":144,"author":{"gitId":"hingen"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-19"},{"lineNumber":145,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":146,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":147,"author":{"gitId":"hingen"},"content":"    private Task createTask(String[] args) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":148,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":149,"author":{"gitId":"hingen"},"content":"        assert args.length \u003e\u003d 1;","lastModifiedDate":"2023-02-05"},{"lineNumber":150,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":151,"author":{"gitId":"hingen"},"content":"        switch (args[0]) {","lastModifiedDate":"2023-01-19"},{"lineNumber":152,"author":{"gitId":"hingen"},"content":"        case \"T\":","lastModifiedDate":"2023-01-19"},{"lineNumber":153,"author":{"gitId":"hingen"},"content":"            return ToDo.createFromStorage(args);","lastModifiedDate":"2023-01-19"},{"lineNumber":154,"author":{"gitId":"hingen"},"content":"        case \"D\":","lastModifiedDate":"2023-01-19"},{"lineNumber":155,"author":{"gitId":"hingen"},"content":"            return Deadline.createFromStorage(args);","lastModifiedDate":"2023-01-19"},{"lineNumber":156,"author":{"gitId":"hingen"},"content":"        case \"E\":","lastModifiedDate":"2023-01-19"},{"lineNumber":157,"author":{"gitId":"hingen"},"content":"            return Event.createFromStorage(args);","lastModifiedDate":"2023-01-19"},{"lineNumber":158,"author":{"gitId":"hingen"},"content":"        default:","lastModifiedDate":"2023-01-19"},{"lineNumber":159,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"An unknown task type was found in storage.\");","lastModifiedDate":"2023-01-19"},{"lineNumber":160,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":161,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":162,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":163,"author":{"gitId":"hingen"},"content":"    private void createNewTaskListAndStorage() throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":164,"author":{"gitId":"hingen"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-03"},{"lineNumber":165,"author":{"gitId":"hingen"},"content":"        storage.create();","lastModifiedDate":"2023-02-03"},{"lineNumber":166,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":167,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":168,"author":{"gitId":"hingen"},"content":"    private void writeToStorage() throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":169,"author":{"gitId":"hingen"},"content":"        StringBuilder data \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":170,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":171,"author":{"gitId":"hingen"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-01-19"},{"lineNumber":172,"author":{"gitId":"hingen"},"content":"            data.append(task.getStorageStr());","lastModifiedDate":"2023-02-03"},{"lineNumber":173,"author":{"gitId":"hingen"},"content":"            data.append(\"\\n\");","lastModifiedDate":"2023-02-03"},{"lineNumber":174,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":175,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":176,"author":{"gitId":"hingen"},"content":"        storage.write(data.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":177,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":178,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"hingen":178}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.task;","lastModifiedDate":"2023-01-16"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.utils.BooleanUtils;","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" * Represents a to-do task.","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-16"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"    private static final char SYMBOL \u003d \u0027T\u0027;","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * Creates a ToDo object.","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @param isDone Is the to-do done.","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     * @param description Description of the to-do.","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-16"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    public ToDo(boolean isDone, String description) {","lastModifiedDate":"2023-01-16"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"        super(isDone, description);","lastModifiedDate":"2023-01-16"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     * Returns a ToDo object created using the specified data that was loaded from storage.","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"     * @param args Data about the to-do that was loaded from storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     * @return The ToDo object created using the data loaded from storage.","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates missing data or incorrect data type in args.","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    public static ToDo createFromStorage(String[] args) throws DukeException {","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        validateNoMissingData(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"        String[] formattedArgs \u003d Task.formatStrsFromStorage(args);","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"        boolean isDone \u003d extractValidIsDone(formattedArgs);","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        String description \u003d formattedArgs[2];","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        return new ToDo(isDone, description);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"    public String getStorageStr() {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        return String.format(\"%c %c %s\", SYMBOL, FIELD_DIVIDER, super.getStorageStr());","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        return String.format(\"[%c]%s\", SYMBOL, super.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    protected Task createCopy() {","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        return new ToDo(isDone(), getDescription());","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    private static void validateNoMissingData(String[] args) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        if (args.length !\u003d 3) {","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"A to-do in storage has missing data!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"    private static boolean extractValidIsDone(String[] formattedArgs) throws DukeException {","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"        assert formattedArgs !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"        assert formattedArgs.length \u003e\u003d 2;","lastModifiedDate":"2023-02-05"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-05"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"        if (!BooleanUtils.isBooleanStr(formattedArgs[1])) {","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"            throw new DukeException(\"A to-do in storage has an incorrect data type!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        return Boolean.parseBoolean(formattedArgs[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"hingen":73}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.ui;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":" * Handles the UI of the app.","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"public interface Ui {","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"     * Starts the UI.","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"    void start();","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * Prints a specified message.","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    void print(String message);","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"hingen":18}},{"path":"src/main/java/duke/ui/cli/Cli.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.ui.cli;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.util.function.BiConsumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"import java.util.function.Function;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":" * Handles user interactions and displaying of messages via a CLI.","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"public class Cli implements Ui {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    private static final String MESSAGE_BORDER \u003d","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"            \"    ______________________________________________________________________\";","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    private final PrintStream printStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    private final BiConsumer\u003cString, Consumer\u003cString\u003e\u003e inputHandler;","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    private final Function\u003cString, Boolean\u003e exitConditionChecker;","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     * Creates a Cli object.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"     * @param printStream The stream to print messages to.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"     * @param inputStream The stream to read the user\u0027s input from.","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"     * @param inputHandler Handles the user\u0027s inputs.","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"     * @param exitConditionChecker Checks if the app should exit base on the given user input.","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    public Cli(PrintStream printStream, InputStream inputStream, BiConsumer\u003cString, Consumer\u003cString\u003e\u003e inputHandler,","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"               Function\u003cString, Boolean\u003e exitConditionChecker) {","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        assert printStream !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"        assert inputStream !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        assert inputHandler !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"        assert exitConditionChecker !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"        this.printStream \u003d printStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        this.scanner \u003d new Scanner(inputStream);","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        this.inputHandler \u003d inputHandler;","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        this.exitConditionChecker \u003d exitConditionChecker;","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    public void start() {","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        while (true) {","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"            inputHandler.accept(input, this::print);","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"            if (exitConditionChecker.apply(input)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"                break;","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"        scanner.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"    public void print(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"        printStream.printf(\"%s\\n     %s\\n%s\\n\\n\", MESSAGE_BORDER, message.replace(\"\\n\", \"\\n     \"), MESSAGE_BORDER);","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"hingen":65}},{"path":"src/main/java/duke/ui/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.ui.gui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":" * Controller for DialogBox.","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":" * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label containing the text","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":" * from the speaker.","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    private static final String FXML_PATH \u003d \"/view/DialogBox.fxml\";","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    private static final double CLIP_CIRCLE_RADIUS \u003d 25;","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    private Text dialog;","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    private DialogBox(String message, Image img) {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"        loadFxml();","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        setNodeValues(message, img);","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"     * Creates and returns a dialog box with a message that appears to be spoken by the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"     * @param message The message.","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"     * @param img The image of the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"     * @return A dialog box with a message that appears to be spoken by the user.","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    public static DialogBox getUserDialog(String message, Image img) {","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        return new DialogBox(message, img);","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"     * Creates and returns a dialog box with a message that appears to be spoken by Duke.","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"     * @param message The message.","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"     * @param img The image of Duke.","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"     * @return A dialog box with a message that appears to be spoken by Duke.","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    public static DialogBox getDukeDialog(String message, Image img) {","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        DialogBox dialogBox \u003d new DialogBox(message, img);","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        dialogBox.flip();","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"        return dialogBox;","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"    private void loadFxml() {","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML_PATH));","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"    private void setNodeValues(String message, Image img) {","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"        dialog.setText(message);","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        displayPicture.setClip(getDisplayPictureClip());","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"    private Node getDisplayPictureClip() {","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"        Circle clip \u003d new Circle();","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"        clip.setRadius(CLIP_CIRCLE_RADIUS);","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"        clip.setCenterX(CLIP_CIRCLE_RADIUS);","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"        clip.setCenterY(CLIP_CIRCLE_RADIUS);","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"        return (Node) clip;","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"    private void flip() {","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":99}},{"path":"src/main/java/duke/ui/gui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.ui.gui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.util.function.BiConsumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":" * Handles displaying of messages and user interactions via the GUI.","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"public class Gui implements Ui {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"    private static final double STAGE_WIDTH \u003d 600;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"    private static final double STAGE_HEIGHT \u003d 600;","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    private final Stage stage;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     * Creates a Gui object.","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     * @param stage The Stage object provided by JavaFX.","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"     * @param inputHandler Handles the user\u0027s inputs.","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    public Gui(Stage stage, BiConsumer\u003cString, Consumer\u003cString\u003e\u003e inputHandler) {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        assert stage !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        this.stage \u003d stage;","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"        mainWindow \u003d new MainWindow(inputHandler);","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"        setupStageScene();","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"        setupStageSize();","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    public void start() {","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"        stage.show();","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"    public void print(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"        mainWindow.printDukeMessage(message);","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    private void setupStageScene() {","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        stage.setScene(new Scene(mainWindow));","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    private void setupStageSize() {","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        stage.setMinWidth(STAGE_WIDTH);","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        stage.setMinHeight(STAGE_HEIGHT);","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":56}},{"path":"src/main/java/duke/ui/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.ui.gui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"import java.util.function.BiConsumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":" * Controller for MainWindow.","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":" * Provides the Layout for the other controls.","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    private static final String FXML_PATH \u003d \"/view/MainWindow.fxml\";","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"    private static final String USER_IMG_PATH \u003d \"/images/user.png\";","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    private static final String DUKE_IMG_PATH \u003d \"/images/duke.png\";","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    private TextField userInput;","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    private Button sendButton;","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"    private final Image userImg \u003d new Image(getClass().getResourceAsStream(USER_IMG_PATH));","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    private final Image dukeImg \u003d new Image(getClass().getResourceAsStream(DUKE_IMG_PATH));","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    private final BiConsumer\u003cString, Consumer\u003cString\u003e\u003e inputHandler;","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"     * Creates a MainWindow object.","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"     * @param inputHandler Handles the user\u0027s input.","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    public MainWindow(BiConsumer\u003cString, Consumer\u003cString\u003e\u003e inputHandler) {","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        assert inputHandler !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"        this.inputHandler \u003d inputHandler;","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        loadFxml();","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"     * Prints a message that will appear to be said by Duke.","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"    public void printDukeMessage(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"        DialogBox dialogBox \u003d DialogBox.getDukeDialog(message, dukeImg);","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"        dialogContainer.getChildren().add(dialogBox);","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"    private void initialize() {","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        userInput.clear();","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"        printUserMessage(input);","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"        inputHandler.accept(input, this::printDukeMessage);","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"    private void loadFxml() {","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(FXML_PATH));","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-03"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-03"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"hingen"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"hingen"},"content":"    private void printUserMessage(String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"hingen"},"content":"        DialogBox dialogBox \u003d DialogBox.getUserDialog(message, userImg);","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"hingen"},"content":"        dialogContainer.getChildren().add(dialogBox);","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":97}},{"path":"src/main/java/duke/utils/BooleanUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.utils;","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":" * Contains utility methods for boolean.","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"public abstract class BooleanUtils {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"     * Returns true if a string is a boolean in string form. Otherwise, returns false.","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"     * @param str The string to check.","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"     * @return True if a string is a boolean in string form. False otherwise.","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"    public static boolean isBooleanStr(String str) {","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"        return str !\u003d null \u0026\u0026 (str.equals(\"true\") || str.equals(\"false\"));","lastModifiedDate":"2023-02-05"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"hingen":16}},{"path":"src/main/java/duke/utils/DukeUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.utils;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import duke.io.FileStorage;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":" * Contains utility methods for the app.","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"public abstract class DukeUtils {","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"    private static final Path SAVE_FILE_PATH \u003d Path.of(\"./save-data/task-list.csv\");","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"     * Runs the command corresponding to the user\u0027s input and prints the response message.","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"     * If an error occurs due to the user\u0027s input, prints the error message instead.","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"     * @param tasks The user\u0027s task list.","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"     * @param parser Determines the validity of the input and the command to execute.","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"     * @param printer Prints to the UI.","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    public static void handleInput(String input, TaskList tasks, Parser parser, Consumer\u003cString\u003e printer) {","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"        assert parser !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        assert printer !\u003d null;","lastModifiedDate":"2023-02-05"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"        String message;","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"            message \u003d parser.getCommand(input).run(input, tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"            message \u003d e.getMessage();","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"        printer.accept(message);","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"     * Loads the previously saved task list from storage and returns it.","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"     * If a previously saved task list does not exist, creates an empty task list and a storage for it. Returns the new","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"     * task list.","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"     * @return The task list loaded from storage if it exists. Otherwise, the new task list.","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"     * @throws DukeException Indicates an error in loading from storage or creating storage.","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"    public static TaskList loadTasks() throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        return new TaskList(new FileStorage(SAVE_FILE_PATH));","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"     * Returns a greeting message.","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"     * @return A greeting message.","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"    public static String getGreetingMessage() {","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"        return String.format(\"IT IS I!\\n%s\\nManager of tasks! Tracker of progress!\\nHeedless user, what is it that you \"","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"                + \"seek?\", logo);","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":71}},{"path":"src/main/java/duke/utils/LocalDateTimeUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.utils;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"/**","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":" * Contains constants for LocalDateTime.","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":" */","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"public abstract class LocalDateTimeUtils {","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"    /** The format for any LocalDateTime inputted as a string. */","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"    public static final String INPUT_DATE_TIME_FORMAT \u003d \"dd/MM/yyyy HHmm\";","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"     * The regex for checking if any LocalDateTime inputted as a string complies with the format specified in","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"     * {@link #INPUT_DATE_TIME_FORMAT}.","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    public static final String INPUT_DATE_TIME_REGEX \u003d \"[0-9]{2}/[0-9]{2}/[0-9]{4} [0-9]{2}[0-9]{2}\";","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"    /** The formatter for the format specified in {@link #INPUT_DATE_TIME_FORMAT}. */","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    public static final DateTimeFormatter INPUT_DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"            INPUT_DATE_TIME_FORMAT);","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    /** The formatter for any LocalDateTime to be outputted. */","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"            \"EEE MMM dd, yyyy hh:mm a\");","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"hingen":25}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"590.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"      \u003cTextFlow maxWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #202023; -fx-background-radius: 5 5 5 5;\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"            \u003cText fx:id\u003d\"dialog\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"               \u003cfont\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"                  \u003cFont name\u003d\"Consolas\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"               \u003c/font\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"            \u003c/Text\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"            \u003cInsets top\u003d\"25.0\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"      \u003c/TextFlow\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":35}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #1e1e1f;\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"524.0\" promptText\u003d\"Enter command ...\" style\u003d\"-fx-background-color: #1e1e1f; -fx-text-fill: white;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"            \u003cFont name\u003d\"Consolas\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"         \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"523.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"            \u003cFont name\u003d\"Consolas\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #181819;\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"557.0\" prefWidth\u003d\"590.0\" style\u003d\"-fx-background-color: #000000;\" /\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"      \u003c/content\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"hingen":26}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"public class ToDoTest {","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"    public void createFromStorage_validArgs_returnsToDo() throws DukeException {","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"        String expected \u003d \"[T][X] Hello world!\";","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"        String[] args \u003d new String[] {\"T\", \"true\", \"Hello world!\"};","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"        ToDo toDo \u003d ToDo.createFromStorage(args);","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(toDo.toString(), expected);","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    public void createFromStorage_missingArgs_throwsDukeException() {","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        String[] args \u003d new String[] {\"T\", \"true\"};","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        Assertions.assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"            ToDo.createFromStorage(args);","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        });","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"    public void createFromStorage_invalidDoneStatus_throwsDukeException() {","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        String[] args \u003d new String[] {\"T\", \"lorem ipsum\", \"Hello world!\"};","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"        Assertions.assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"            ToDo.createFromStorage(args);","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"        });","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    public void getStorageString_descriptionDoesNotContainDelimiter_returnsStorageString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"        String expected \u003d \"T | false | Hello world!\";","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        ToDo toDo \u003d new ToDo(false, \"Hello world!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        String actual \u003d toDo.getStorageStr();","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(expected, actual);","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"    public void getStorageString_descriptionContainsDelimiter_returnsStorageString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        String expected \u003d \"T | false | Hello \\\\| world!\";","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"        ToDo toDo \u003d new ToDo(false, \"Hello | world!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        String actual \u003d toDo.getStorageStr();","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(expected, actual);","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    public void createCopy_normal_returnsACopy() {","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        ToDo original \u003d new ToDo(false, \"Hello world!\");","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"        Task copy \u003d original.createCopy();","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"        Assertions.assertNotSame(original, copy);","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(original.toString(), copy.toString());","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"hingen":65}},{"path":"src/test/java/duke/ui/cli/CliTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.ui.cli;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"public class CliTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"    public void print_printSingleLineMessage_printsOutFormattedMessage() {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"        String expected \u003d \"    ______________________________________________________________________\\n     Hello \"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"                + \"World! Lorem ipsum\\n    ______________________________________________________________________\\n\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"        // Setup","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"        PrintStream printStream \u003d new PrintStream(outputStream);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        InputStream inputStream \u003d new ByteArrayInputStream(new byte[0]);","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        Cli cli \u003d new Cli(printStream, inputStream, null, null);","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        // Test","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"        cli.print(\"Hello World! Lorem ipsum\");","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        // Check results","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(expected, actual);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"    public void print_printMultiLineMessage_printsOutFormattedMessage() {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"        String expected \u003d \"    ______________________________________________________________________\\n     Hello \"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"                + \"World!\\n     Lorem ipsum\\n    \"","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"                + \"______________________________________________________________________\\n\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"        // Setup","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        PrintStream printStream \u003d new PrintStream(outputStream);","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"        InputStream inputStream \u003d new ByteArrayInputStream(new byte[0]);","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"        Cli cli \u003d new Cli(printStream, inputStream, null, null);","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"        // Test","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"        cli.print(\"Hello World!\\nLorem ipsum\");","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"        // Check results","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(expected, actual);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"    public void start_inputMultipleLinesWithLastLineBeingExitCommand_handleAllLines() {","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"        String expected \u003d \"    ______________________________________________________________________\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"                +  \"     Hello World!\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"                + \"    ______________________________________________________________________\\n\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"                + \"    ______________________________________________________________________\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"                + \"     Lorem Ipsum\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"                + \"    ______________________________________________________________________\\n\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"                + \"    ______________________________________________________________________\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"                + \"     exit\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"                + \"    ______________________________________________________________________\\n\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"        // Setup","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"        String input \u003d \"Hello World!\\nLorem Ipsum\\nexit\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        PrintStream printStream \u003d new PrintStream(outputStream);","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"        InputStream inputStream \u003d new ByteArrayInputStream(input.getBytes());","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"        Cli cli \u003d new Cli(printStream, inputStream, (message, printer) -\u003e printer.accept(message),","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"hingen"},"content":"                (message) -\u003e message.equals(\"exit\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"hingen"},"content":"        // Test","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"hingen"},"content":"        cli.start();","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"hingen"},"content":"        String actual \u003d outputStream.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"hingen"},"content":"        // Check results","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(expected, actual);","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"hingen":88}},{"path":"src/test/java/duke/utils/BooleanUtilsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.utils;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"public class BooleanUtilsTest {","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"    public void isBooleanString_trueString_true() {","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"        String input \u003d \"true\";","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"        Assertions.assertTrue(BooleanUtils.isBooleanStr(input));","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"    public void isBooleanString_falseString_true() {","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"        String input \u003d \"false\";","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"        Assertions.assertTrue(BooleanUtils.isBooleanStr(input));","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"    public void isBooleanString_nonBooleanString_false() {","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        String input \u003d \"0\";","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"        Assertions.assertFalse(BooleanUtils.isBooleanStr(input));","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"hingen":27}},{"path":"src/test/java/duke/utils/LocalDateTimeUtilsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"package duke.utils;","lastModifiedDate":"2023-01-24"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-24"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-24"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-24"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"public class LocalDateTimeUtilsTest {","lastModifiedDate":"2023-01-24"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"    public void inputDateTimeRegex_matchValidDateTimeWithValidFormat_matchFound() {","lastModifiedDate":"2023-01-24"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"        String input \u003d \"04/02/2000 0420\";","lastModifiedDate":"2023-01-24"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"        Assertions.assertTrue(input.matches(LocalDateTimeUtils.INPUT_DATE_TIME_REGEX));","lastModifiedDate":"2023-01-24"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"    public void inputDateTimeRegex_matchInvalidDateTimeWithValidFormat_matchFound() {","lastModifiedDate":"2023-01-24"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"        String input \u003d \"50/02/2000 2500\";","lastModifiedDate":"2023-01-24"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"        Assertions.assertTrue(input.matches(LocalDateTimeUtils.INPUT_DATE_TIME_REGEX));","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"    public void inputDateTimeRegex_matchDifferentDateFormat_matchNotFound() {","lastModifiedDate":"2023-01-24"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"        String input \u003d \"04-02-2000 0420\";","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"        Assertions.assertFalse(input.matches(LocalDateTimeUtils.INPUT_DATE_TIME_REGEX));","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"    public void inputDateTimeRegex_matchDifferentTimeFormat_matchNotFound() {","lastModifiedDate":"2023-01-24"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"        String input \u003d \"04/02/2000 04:20\";","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"        Assertions.assertFalse(input.matches(LocalDateTimeUtils.INPUT_DATE_TIME_REGEX));","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"    public void inputDateTimeFormatter_parseNoMissingData_successfulParse() {","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"        String input \u003d \"04/02/2000 0420\";","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"        LocalDateTime expected \u003d LocalDateTime.of(LocalDate.of(2000, 2, 4), LocalTime.of(4, 20));","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"        LocalDateTime actual \u003d LocalDateTime.parse(input, LocalDateTimeUtils.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(expected, actual);","lastModifiedDate":"2023-01-24"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"    public void inputDateTimeFormatter_parseDifferentDateFormat_throwsDateTimeParseException() {","lastModifiedDate":"2023-01-24"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"        String input \u003d \"04-02-2000 0420\";","lastModifiedDate":"2023-01-24"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2023-01-24"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"            LocalDateTime.parse(input, LocalDateTimeUtils.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-01-24"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"        });","lastModifiedDate":"2023-01-24"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"    public void inputDateTimeFormatter_parseDifferentTimeFormat_throwsDateTimeParseException() {","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"        String input \u003d \"04/02/2000 04:20\";","lastModifiedDate":"2023-01-24"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"hingen"},"content":"            LocalDateTime.parse(input, LocalDateTimeUtils.INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"hingen"},"content":"        });","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":67,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":68,"author":{"gitId":"hingen"},"content":"    @Test","lastModifiedDate":"2023-01-24"},{"lineNumber":69,"author":{"gitId":"hingen"},"content":"    public void outputDateTimeFormatter_formatDateTime_correctDateTimeFormat() {","lastModifiedDate":"2023-01-24"},{"lineNumber":70,"author":{"gitId":"hingen"},"content":"        LocalDateTime input \u003d LocalDateTime.of(LocalDate.of(2000, 2, 4), LocalTime.of(4, 20));","lastModifiedDate":"2023-01-24"},{"lineNumber":71,"author":{"gitId":"hingen"},"content":"        String expected \u003d \"Fri Feb 04, 2000 04:20 AM\";","lastModifiedDate":"2023-01-24"},{"lineNumber":72,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":73,"author":{"gitId":"hingen"},"content":"        String actual \u003d input.format(LocalDateTimeUtils.OUTPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2023-01-24"},{"lineNumber":74,"author":{"gitId":"hingen"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":75,"author":{"gitId":"hingen"},"content":"        Assertions.assertEquals(expected, actual);","lastModifiedDate":"2023-01-24"},{"lineNumber":76,"author":{"gitId":"hingen"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":77,"author":{"gitId":"hingen"},"content":"}","lastModifiedDate":"2023-01-24"}],"authorContributionMap":{"hingen":77}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hingen"},"content":"todo lorem ipsum","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"hingen"},"content":"mark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"hingen"},"content":"unmark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":4,"author":{"gitId":"hingen"},"content":"delete 1","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"hingen"},"content":"todo","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"hingen"},"content":"deadline lorem ipsum /by 01/01/2024 1200","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"hingen"},"content":"mark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":8,"author":{"gitId":"hingen"},"content":"unmark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"hingen"},"content":"delete 1","lastModifiedDate":"2023-01-17"},{"lineNumber":10,"author":{"gitId":"hingen"},"content":"deadline","lastModifiedDate":"2023-01-17"},{"lineNumber":11,"author":{"gitId":"hingen"},"content":"deadline   /by  ","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"hingen"},"content":"deadline /by 01/01/2024 1200","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"hingen"},"content":"deadline   /by 01/01/2024 1200","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"hingen"},"content":"deadline lorem ipsum","lastModifiedDate":"2023-01-17"},{"lineNumber":15,"author":{"gitId":"hingen"},"content":"deadline lorem ipsum /by","lastModifiedDate":"2023-01-17"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"deadline lorem ipsum /by  ","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"hingen"},"content":"deadline lorem ipsum /by now","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"hingen"},"content":"deadline lorem ipsum /by 01/00/2024 1200","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/01/2024 1200 /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"hingen"},"content":"mark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"hingen"},"content":"unmark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"hingen"},"content":"delete 1","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"event","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"hingen"},"content":"event   /from   /to  ","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"hingen"},"content":"event /from 01/01/2024 1200 /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":26,"author":{"gitId":"hingen"},"content":"event   /from 01/01/2024 1200 /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"hingen"},"content":"event lorem ipsum /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/01/2024 1200","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from   /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/01/2024 1200 /to","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/01/2024 1200 /to  ","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"hingen"},"content":"event lorem ipsum","lastModifiedDate":"2023-01-17"},{"lineNumber":34,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from /to","lastModifiedDate":"2023-01-17"},{"lineNumber":35,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from   /to","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from now /to later","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/01/2024 1200 /to later","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from now /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/00/2024 1200 /to 02/01/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/01/2024 1200 /to 02/00/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"hingen"},"content":"event lorem ipsum /from 01/00/2024 1200 /to 02/00/2024 1300","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"hingen"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":43,"author":{"gitId":"hingen"},"content":"todo lorem ipsum","lastModifiedDate":"2023-01-17"},{"lineNumber":44,"author":{"gitId":"hingen"},"content":"deadline hello this world /by 01/01/2024 1200","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"hingen"},"content":"event this world end /from 01/01/2024 1200 /to 02/01/2024 1300","lastModifiedDate":"2023-01-24"},{"lineNumber":46,"author":{"gitId":"hingen"},"content":"list","lastModifiedDate":"2023-01-17"},{"lineNumber":47,"author":{"gitId":"hingen"},"content":"find","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"hingen"},"content":"find  ","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"hingen"},"content":"find this world","lastModifiedDate":"2023-01-24"},{"lineNumber":50,"author":{"gitId":"hingen"},"content":"find no keyword","lastModifiedDate":"2023-01-24"},{"lineNumber":51,"author":{"gitId":"hingen"},"content":"delete 1","lastModifiedDate":"2023-01-17"},{"lineNumber":52,"author":{"gitId":"hingen"},"content":"delete 1","lastModifiedDate":"2023-01-17"},{"lineNumber":53,"author":{"gitId":"hingen"},"content":"delete 1","lastModifiedDate":"2023-01-17"},{"lineNumber":54,"author":{"gitId":"hingen"},"content":"mark","lastModifiedDate":"2023-01-17"},{"lineNumber":55,"author":{"gitId":"hingen"},"content":"mark lorem ipsum","lastModifiedDate":"2023-01-17"},{"lineNumber":56,"author":{"gitId":"hingen"},"content":"mark -1","lastModifiedDate":"2023-01-17"},{"lineNumber":57,"author":{"gitId":"hingen"},"content":"mark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":58,"author":{"gitId":"hingen"},"content":"unmark","lastModifiedDate":"2023-01-17"},{"lineNumber":59,"author":{"gitId":"hingen"},"content":"unmark lorem ipsum","lastModifiedDate":"2023-01-17"},{"lineNumber":60,"author":{"gitId":"hingen"},"content":"unmark -1","lastModifiedDate":"2023-01-17"},{"lineNumber":61,"author":{"gitId":"hingen"},"content":"unmark 1","lastModifiedDate":"2023-01-17"},{"lineNumber":62,"author":{"gitId":"hingen"},"content":"delete 0","lastModifiedDate":"2023-01-17"},{"lineNumber":63,"author":{"gitId":"hingen"},"content":"bye","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"hingen":63}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"hingen"},"content":"if ! (cd .. \u0026\u0026 ./gradlew clean \u0026\u0026 ./gradlew classes \u0026\u0026 cd text-ui-test)","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"hingen"},"content":"java -ea -classpath ../build/classes/java/main duke.Launcher --cli \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"hingen":2,"-":36}}]
