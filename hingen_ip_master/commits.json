{"authorDailyContributionsMap":{"hingen":[{"date":"2023-01-15","commitResults":[{"hash":"30c24c1120d6261e9f63aee1f55c0c6c4f2ccd3a","messageTitle":"Move Duke.java to duke package","messageBody":"Every class should be part of some package.\n\nLet\u0027s move Duke.java into the duke package.\n\nSince Duke.java contains the main(String[]) method, it should be placed\nin the package at the top of the package hierarchy which is duke.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}}]},{"date":"2023-01-16","commitResults":[{"hash":"090a2eb453f38fa98f22ca18a40fcc48fc47f035","messageTitle":"Duke class: change format of greeting message","messageBody":"The greeting message does not comply with the intended format for all\nmessages produced by the bot.\n\nLet\u0027s create a method printMessage(String) that will take in an\nunformatted message and print it out in the bot\u0027s message format. The\ngreeting message is then printed using this method call.\n\nThe bot is expected to print other messages that must also comply with\nthe message format. Using a method that will handle the formatting will\nreduce code duplication.\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":1}}},{"hash":"347e194f0e357586e70e66f0e3c2acfb859dd921","messageTitle":"Add Command.java","messageBody":"The user can input different commands but all commands share common\nfunctionalities. That is all commands produce a response message base on\nthe user\u0027s input.\n\nLet\u0027s add a Command interface.\n\nA Command interface allows for reduce code duplication via polymorphism.\nIt also allows for better structuring by giving each command type it\u0027s\nown class which would contain the logic for how the command is to be\nrun.\n","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":0}}},{"hash":"1e54892cfb8c5ae3d3ad8c80e49f2fe463f49a61","messageTitle":"Add EchoCommand.java","messageBody":"The user\u0027s input needs to be echoed to the user.\n\nLet\u0027s add an EchoCommand class which implements the Command interface.\n\nAn EchoCommand class would encapsulate the logic for the echo command\ntype and can be utilised through the Command interface.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":0}}},{"hash":"8059eca317983de97cc71a0ac46fbfa3164cf8d7","messageTitle":"Add ByeCommand.java","messageBody":"A farewell message needs to be displayed when the user inputs bye.\n\nLet\u0027s add a ByeCommand class which implements the Command interface.\n\nA ByeCommand class would encapsulate the logic for the bye command type\nand can be utilised through the Command interface.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":0}}},{"hash":"27c5f63a68d8d14e0636679e6f034529182fd78c","messageTitle":"Duke class: change to support user input with echo and bye command","messageBody":"User\u0027s need to be able to input echo and bye commands.\n\nLet\u0027s change main(String[]) to have a loop that takes user inputs and\nfor each input, run the appropriate command and display the resulting\nmessage. Exit the loop when the bye command is inputted.\n\nThe code is written such that future modifications can be easily made to\naccount for other command types.\n","fileTypesAndContributionMap":{"java":{"insertions":36,"deletions":1}}},{"hash":"c35b0d257ca11e8ed48e6a27e791fd5b8008c401","messageTitle":"Fix extra new line in the bot\u0027s response messages","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"ae9f41591682c1e3ef73e5330f8d94de05b8e5c0","messageTitle":"Add javadocs for Duke.java","messageBody":"All public methods and classes should have descriptive comments.\n\nLet\u0027s add javadocs for Duke.java class.\n\njavadocs are shown by the IDE when hovering an item which is documented.\nIt can also be used for generating documentation later.\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":0}}},{"hash":"d455641810d0212664bb48cb72f60ca32893f680","messageTitle":"ByeCommand class: remove empty line","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":1}}},{"hash":"6d9c1c1d253a904d0901b98e7eeebb751fb4e0ef","messageTitle":"EchoCommand class: remove empty line","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":1}}},{"hash":"703be8a4574dd90f4829bc3d6e9e7e03dbf45163","messageTitle":"Command class: change run method to support modifying user\u0027s task list","messageBody":"Certain commands must be able to modify the user\u0027s task list.\n\nLet\u0027s\n* change the Command::run method to also take the user\u0027s current task\n  list as input\n* create a CommandResponse class which contains the response message and\n  updated tasks list resulting from a command\n* change Command::run to return a CommandResponse object\n\nAs the chatbot will have to manage the user\u0027s task list, it is expected\nthat almost all future commands will have to modify the user\u0027s task\nlist, hence Command::run should be change to reflect this.\n","fileTypesAndContributionMap":{"java":{"insertions":58,"deletions":12}}},{"hash":"f6737bde8b7515450e9ab5208ff1c21794a2134d","messageTitle":"Add support for add command","messageBody":"The user needs to add tasks to their task list.\n\nLet\u0027s add an AddCommand class which implements the Command interface and\nhave the command run whenever the user inputs anything other than \"bye\".\n\nAn AddCommand class would encapsulate the logic for the add command type\nand can be utilised through the Command interface.\n","fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":3}}},{"hash":"1f90068a4e97ec3b41ac7f4fcbbab58abcc95c71","messageTitle":"Add support for list command","messageBody":"The user needs to list out all tasks in their task list.\n\nLet\u0027s add a ListCommand class which implements the Command interface and\nhave the command run whenever the user inputs \"list\".\n\nA ListCommand class would encapsulate the logic for the list command\ntype and can be utilised through the Command interface.\n","tags":["Level-2","A-Collections"],"fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":4}}},{"hash":"10b3d7f822346695720f61c8e24f70d96aa907eb","messageTitle":"Add support for task done status","messageBody":"Tasks need to have a done status for user\u0027s to track which task they\nhave and have not done.\n\nLet\u0027s,\n* add a Task class to store a task\u0027s done status and description\n* change the current implementation of tasks stored in a List\u003cString\u003e to\n  List\u003cTask\u003e\n\nA Task class allows for packaging of all information related to a\nspecific task into a single location.\n","fileTypesAndContributionMap":{"java":{"insertions":61,"deletions":12}}},{"hash":"e53844c583880ccdf4c758cc556cd5252b5e00e8","messageTitle":"Add support for printing a string containing Task object info","messageBody":"The info related to a task should be printed out in a standardised\nformat.\n\nLet\u0027s,\n* add a toString() method to Task class which returns a string\n  containing the task\u0027s info in a standardised format\n* change ListCommand::run(String, List\u003cTask\u003e) to utilise\n  Task::toString()\n\nTo standardise the way task info is presented, a method for getting a\nstring in said format should exist in the Task class.\n","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":1}}},{"hash":"8ed343b0fde5d9b41bc146cfb30b078bafae9c0d","messageTitle":"Add support for marking task as done","messageBody":"The user needs to be able to mark a task as done.\n\nLet\u0027s,\n* add a MarkCommand class containing the logic for marking a task as\n  done\n* change Duke::main(String[]) to run the mark command when the user\n  enters an input that begins with mark\n\nA MarkCommand class would encapsulate the logic for the mark command\ntype and can be utilised through the Command interface.\n","fileTypesAndContributionMap":{"java":{"insertions":40,"deletions":1}}},{"hash":"0a3d7cb9d34d3684ec83c7f3efe12c9da0dedf98","messageTitle":"Add support for marking task as not done","messageBody":"The user needs t o be able to mark a task as not done.\n\nLet\u0027s,\n* add an UnmarkCommand class containing the logic for marking a task as\n  not done\n* change Duke::main(String[]) to run the unmark command when the user\n  enters an input that begins with unmark\n\nAn UnmarkCommand class would encapsulate the logic for the unmark\ncommand type and can be utilised through the Command interface.\n","tags":["Level-3","A-Classes"],"fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":0}}},{"hash":"7b35e08c85eb4ae14c276802aa6af33f34a2a0cf","messageTitle":"Fix missing new line in javadocs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}},{"hash":"cb09548ff0127297e6a98304ecb31b2d72f19a8b","messageTitle":"Add support for ToDo task","messageBody":"The user needs to be able to add different types of task, one of them\nbeing the To-Do task.\n\nLet\u0027s,\n* add a ToDoTask class which inherits Task and contains any logic\n  related to the To-Do task type\n* add a ToDoCommand class which handles To-Do commands\n* change Duke class to run the ToDoCommand::run(String, List\u003cTask\u003e)\n  method whenever the user\u0027s input starts with \"todo\"\n","fileTypesAndContributionMap":{"java":{"insertions":73,"deletions":9}}},{"hash":"3511a113c5fe2f619f006ec84bd92c0d6c61dffa","messageTitle":"Add support for deadline task","messageBody":"The user needs to be able to add deadline type task.\n\nLet\u0027s,\n* add a DeadlineTask class which inherits Task and contains any logic\n  related to the deadline task type\n* add a DeadlineCommand class which handles deadline commands\n* change Duke class to run the DeadlineCommand::run(String, List\u003cTask\u003e)\n  method whenever the user\u0027s input starts with \"deadline\"\n","fileTypesAndContributionMap":{"java":{"insertions":52,"deletions":0}}},{"hash":"d8fb0a7e48bd66ec2a8dfc5f47b680e18087d131","messageTitle":"Add support for event task","messageBody":"The user needs to be able to add event type task.\n\nLet\u0027s,\n* add a EventTask class which inehrits from Task and contains any logic\n  related to the event task type\n* add a EventCommand class which handles event commands\n* change Duke class to run the EventCommand::run(String, List\u003cTask\u003e)\n  method whenever the user\u0027s input starts with \"event\"\n","fileTypesAndContributionMap":{"java":{"insertions":59,"deletions":0}}},{"hash":"a9eaebeac3074818f7b519071e56ba111e1a89a7","messageTitle":"Rename DeadlineTask, EventTask, ToDoTask to Deadline, Event, ToDo","messageBody":"","tags":["Level-4","A-Inheritance"],"fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":17}}},{"hash":"0c9f308bd650b762180d3417efa0a6ffd5d9d470","messageTitle":"Task.java class: remove unused methods","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":12}}},{"hash":"531d1102fe1ba43a56461bb0c54779ea4bf331f7","messageTitle":"Add support for handling errors in user\u0027s input","messageBody":"Users may input invalid commands which need to be handled.\n\nLet\u0027s,\n* add a DukeException class for handling errors in the user\u0027s input\n* change Command::run(String, List\u003cTask\u003e) to allow for the throwing of a\n  DukeException whenever there an error results from the user\u0027s input\n* change Duke::main(String[]) to print out the error message\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":2}}},{"hash":"be3ecbc684f1e0bcf46ba0e0da6d7c95e11ea203","messageTitle":"Remove EchoCommand.java","messageBody":"EchoCommand class was previously used as a placeholder. It is no longer\nneeded.\n","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":22}}},{"hash":"a3ed11eeccad3d3fd336175e64dbd281e4f3a115","messageTitle":"Command class: add missing javadocs for run(String, List\u003cTask\u003e)","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}},{"hash":"a9120bcafc916bac89fb4b9905b6c881596bea6b","messageTitle":"UnmarkCommand class: add handling of input errors","messageBody":"User input for unmark command might be missing an index or the index is\nnot an integer or the index is out of bounds.\n\nLet\u0027s throw a DukeException with the error described in the exception\nmessage when such errors occur.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":2}}},{"hash":"673c31203d55b6288426b55b7c639802408b7de2","messageTitle":"MarkCommand class: add handling of input errors","messageBody":"User input for mark command might be missing an index or the index is\nnot an integer or the index is out of bounds.\n\nLet\u0027s throw a DukeException with the error described in the exception\nmessage when such errors occur.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":2}}},{"hash":"328009919a27bb8d4631107a9179b0bda40fcd09","messageTitle":"DeadlineCommand class: add handling of input errors","messageBody":"User input for deadline command might be missing a \u0027 /by \u0027.\n\nLet\u0027s throw a DukeException with the error described in the exception\nmessage when such an error occurs.\n","fileTypesAndContributionMap":{"java":{"insertions":34,"deletions":4}}},{"hash":"e0f5e4102a492919cc19eaeedb86b77826149202","messageTitle":"EventCommand class: add handling of input errors","messageBody":"User input for event command might be missing a \u0027 /from \u0027 and/or\n\u0027 /to \u0027.\n\nLet\u0027s throw a DukeException with the error described in the exception\nmessage when such an error occurs.\n","fileTypesAndContributionMap":{"java":{"insertions":34,"deletions":3}}},{"hash":"345e3fef77096e686d6748e84ad444e526ec527d","messageTitle":"Fix missing punctuation in javadocs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}},{"hash":"f93c08703ad6a0c8ab9df1692759fa09bd76a3c9","messageTitle":"Duke class: add handling of unknown command","messageBody":"User input might not be a known command.\n\nLet\u0027s print an error message when such an error occurs.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"bc272669a0eb267a56c54b25b1d4ef5a7763addf","messageTitle":"Fix missing punctuation in error messages","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":5}}},{"hash":"9465a7e49996ad574376965ca0dc27c1ab1ec122","messageTitle":"Fix unwanted removal of \u0027deadline\u0027 from deadline description","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"a588e609c0f10392af3d842bbec60157417198c2","messageTitle":"Fix unwanted deletion of \u0027event\u0027 from event description","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"2acd1ad30ea35d863fc8e6f493a2b3119d50c19f","messageTitle":"Fix deadline command failing with \u0027 /by \u0027 not found even when it exist","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"981736ea55473664ac74167a4efcd943a40f0e31","messageTitle":"Fix event command failing with \u0027 /to \u0027 not found even when it exist","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"28fecb8e900640db9b716e0f2c5237029c4c4c40","messageTitle":"ToDoCommand class: add handling of input errors","messageBody":"User input for todo command might have an empty description.\n\nLet\u0027s throw a DukeException with the error described in the exception\nmessage when such an error occurs.\n","fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":2}}},{"hash":"d5e2fe3f1ee32281b459d9203d6f85ea99d03f75","messageTitle":"DeadlineCommand class: add handling of empty description in input","messageBody":"User input for deadline command might have an empty description.\n\nLet\u0027s throw a DukeException when such an error occurs.\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":3}}},{"hash":"36ef8116f32743b2e84c61e9e5eb6a4bd7b3dbd7","messageTitle":"EventCommand class: add handling of empty description in input","messageBody":"User input for event command might have an empty description.\n\nLet\u0027s throw a DukeException when such an error occurs.\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":6}}},{"hash":"ec5dd066ab4b0b084a17a8ed2ba06396d2ea9b3c","messageTitle":"Fix empty whitespace in deadline and event","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":4}}},{"hash":"b1e3df8b14d90bce4a58cae3f2ab2485f74af0bf","messageTitle":"DeadlineCommand class: fix outdated javadocs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"c74ebf6e28f490470351705ea9d2a010d0acd524","messageTitle":"EventCommand class: fix outdated javadocs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}}]},{"date":"2023-01-17","commitResults":[{"hash":"4dec0bd3a33fd16af57992c63730a4e8d959c72a","messageTitle":"Add support for deleting task","messageBody":"The user needs to be able to delete tasks.\n\nLet\u0027s,\n* add a DeleteCommand class which contains the logic for deleting tasks\n* change Duke class to run the DeleteCommand::run(String, List\u003cTask\u003e)\n  method whenever the user\u0027s input starts with \"delete\"\n","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":54,"deletions":0}}},{"hash":"ea36a8f35b0fed159594de79ac3711a4c15db940","messageTitle":"Fix chatbot not exiting when bye command is inputted with arguments","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"7d190450500bf486b0146996386ef470ddabfc4e","messageTitle":"Duke class: move exit condition into a static method","messageBody":"SLAP property is violated by having the exit condition be in the\nDuke::runInputLoop() method.\n\nLet\u0027s move the exit condition into a static method to maintain SLAP\nproperty.\n\nSLAP makes the code more readable.\n","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":1}}},{"hash":"a6dcacdcede1dd48b5ec7611007b416d79e45878","messageTitle":"DeleteCommand class: split up run(String, List\u003cTask\u003e) method","messageBody":"The run(String, List\u003cTask\u003e) method consist of many sections.\n\nLet\u0027s split the run(String, List\u003cTask\u003e) method in different methods.\n\nThis will improve code readability.\n","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":10}}},{"hash":"9dced95b8b38ab35794f611c21d30bafbb6304a8","messageTitle":"MarkCommand and UnmarkCommand classes: extract a parent class","messageBody":"MarkCommand and UnmarkCommand have very similar logic.\n\nLet\u0027s extract the common behaviour of both classes into a parent class\nSetDoneCommand which both classes can then extend.\n","fileTypesAndContributionMap":{"java":{"insertions":131,"deletions":48}}},{"hash":"2409deb8e13cc11cba0ea474ac3698302d6d9cc6","messageTitle":"ToDoCommand class: split createTask(String) method","messageBody":"The createTask(String) method consist of an input validation section and\ntask creation section.\n\nLet\u0027s split the createTask(String) method into different methods.\n\nThis will improve code readability.\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":2}}},{"hash":"2bc3fb0805412ac3a7914f31283f2dbf11c1a128","messageTitle":"DeadlineCommand class: split createTask(String) method","messageBody":"The createTask(String) method consist of an input validation section and\ntask creation section.\n\nLet\u0027s split the method into different methods.\n\nThis will improve code readability.\n","fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":7}}},{"hash":"efa2c01a46155791e85e340feb779a6d30599c3e","messageTitle":"EventCommand class: split createTask(String) method","messageBody":"The createTask(String) method consist of an input validation section and\ntask creation section.\n\nLet\u0027s split the method into different methods.\n\nThis will improve code readability.\n","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":13}}},{"hash":"6625ed3d92a2fdd0ed3733db0e2f02b94d10285c","messageTitle":"DukeException class: fix compile error due to emoticon","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"a52eb775f814e90589df157efcefde26862b614c","messageTitle":"EventCommand class: combine unspecified start or end date/time errors","messageBody":"There is no need to be that specific with the missing date range error.\n\nLet\u0027s combine the unspecified start or end date/time error into a\nmissing unspecified date range error.\n\nThis will allow the code to be simpler.\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":8}}},{"hash":"175568708d8d99286b3e536169b39723bb42e1e8","messageTitle":"Fix mark command success message being used for unmark command success;","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":1}}},{"hash":"9b88d259f03d5d617d115e363da3b223ed8cc397","messageTitle":"SetDoneCommand class: remove commented out code","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":27}}},{"hash":"cd5a34905b8dc5d43b997afdaf229a8459185beb","messageTitle":"DeleteCommand class: shorten non-existent task error","messageBody":"The non-existent task error is too long.\n\nLet\u0027s shorten it.\n\nShort and concise errors are easier to read.\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"dd6b59787596ab9c236899907775b80290ddcdb9","messageTitle":"SetCommand class: shorten non-existent task error","messageBody":"The non-existent task error is too long.\n\nLet\u0027s shorten it.\n\nShort and concise errors are easier to read.\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"f236f28a7873dfac015418ccb812c1650d8eb87e","messageTitle":"Add testing","messageBody":"","tags":["Level-5","A-TextUiTesting","A-Exceptions"],"fileTypesAndContributionMap":{"txt":{"insertions":43,"deletions":0},"sh":{"insertions":2,"deletions":2}}}]},{"date":"2023-01-18","commitResults":[{"hash":"08901ac8679527c44437f124093d4ebdeba2bfd7","messageTitle":"Duke class: fix scanner not closed","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"0aec8dd20abee25b69881b4ac81de906050b6a01","messageTitle":"Duke class: fix violation of coding standard by case indent","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":18}}},{"hash":"b043042b5dae0262d6353708fd0585cff733103e","messageTitle":"Replace List\u003cTask\u003e with TaskList","messageBody":"There are operations that a task list should have which does not exist\nin List such as a toString that is specific to TaskList.\n\nLet\u0027s create a TaskList class and replace all usage of List\u003cTask\u003e with\nTaskList.\n\nThis allows us to add task list specific operations as methods to\nTaskList.\n","fileTypesAndContributionMap":{"java":{"insertions":131,"deletions":188}}}]},{"date":"2023-01-19","commitResults":[{"hash":"36e0e3a719858b977e1ae61c7182950b9e56ec9c","messageTitle":"Add support for saving and loading task list to storage","messageBody":"The task list needs to be persistent and thus it needs to be written to\nand read from storage.\n\nLet\u0027s,\n* create a Storage interface for our Storage logic\n* create a FileStorage class for our reading and writing to file logic\n* change TaskList to read and write to storage whenever the task list is\n  updated by using a FileStorage object\n","fileTypesAndContributionMap":{"java":{"insertions":379,"deletions":20}}}]},{"date":"2023-01-20","commitResults":[{"hash":"d48f08f02f88dc441ea4c8b1146b292fadf73418","messageTitle":"Add restriction to event and deadline to require date and time","messageBody":"The start and end of an event and the cutoff of a deadline should be\ndates and time.\n\nLet\u0027s,\n* change Event to require start and end to be LocalDateTime objects\n* change Deadline to require cutoff to be a LocalDateTime object\n* change DeadlineCommand to only accept cutoff inputs that are of a\n  specific format and are valid date and time\n* change EventCommand to only accept start and end inputs that are of a\n  specific format and are valid date and time\n","fileTypesAndContributionMap":{"txt":{"insertions":27,"deletions":11},"java":{"insertions":134,"deletions":47}}},{"hash":"6d6ca7679d67f6feb69a43a6459fbd8ae425f843","messageTitle":"Fix Deadline and Event createFromStorage method not parsing date time","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":7}}},{"hash":"7718f231ba8bc05be54d2e6e69097e7bcc0fcb41","messageTitle":"Extract logic for printing messages to Ui.java class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":10}}},{"hash":"4ce3d6dd939e084fb26deb49bd154e30848c8386","messageTitle":"Extract logic for parsing user input to Parser.java class","messageBody":"","tags":["A-Packages","A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":61,"deletions":49}}}]},{"date":"2023-01-24","commitResults":[{"hash":"f7d3a3828aa29af681bd5da3a60616570d624880","messageTitle":"Fix mark and unmark commands not updatng saved task list","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":56,"deletions":4}}},{"hash":"515c5ae632c72ad888ba870b24dc37c6f7d934db","messageTitle":"Add JUnit tests for BooleanUtils","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":0}}},{"hash":"543ed65b7b433980fc5071805a01ea1cfa6e8f01","messageTitle":"Add JUnit tests for LocalDateTimeUtils","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":77,"deletions":0}}},{"hash":"0c0729a957c07de40fbab01749f91a55972873a1","messageTitle":"Add JUnit tests for Ui","messageBody":"","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":66,"deletions":4}}},{"hash":"3cd8572234a150fd8dbffa1dde950b375aeff6ec","messageTitle":"Customise output messages","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1},"java":{"insertions":54,"deletions":52}}},{"hash":"902f8bc62cdc4ad21542246024bc9e9526855833","messageTitle":"ListCommand class: add specific output for when task list is empty","messageBody":"","tags":["A-Jar"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"741b4aa2fd81d4425dd42ef6b01b26383b0bdd38","messageTitle":"Update outdated JavaDocs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":82,"deletions":69}}},{"hash":"cbe08118259f5a0acb81526698038bd5a2e52749","messageTitle":"Fix coding standard violations","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":28}}},{"hash":"48c1ffda681aa226941a705630c3c07f89434888","messageTitle":"Add support for find command","messageBody":"The user needs to be able to search for commands that contain a specific\nkeyword or keyphrase.\n\nLet\u0027s,\n* add a FindCommand class that contains the logic for filtering a task\n  list by a specific keyword or keyphrase\n* change Parser class to use the FindCommand::run method when the user\n  enters the find command\n","fileTypesAndContributionMap":{"txt":{"insertions":6,"deletions":2},"java":{"insertions":71,"deletions":4}}}]}]},"authorFileTypeContributionMap":{"hingen":{"java":1539,"md":0,"fxml":0,"sh":2,"bat":0,"gradle":1,"txt":63}},"authorContributionVariance":{"hingen":88557.47},"authorDisplayNameMap":{"hingen":"HING..DICT"}}
