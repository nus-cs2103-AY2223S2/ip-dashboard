[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    mainClassName \u003d \"chungus.Chungus\"","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    archiveBaseName \u003d \"chungus\"","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"checkstyle {","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    toolVersion \u00279.3\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    configFile file(\"config/checkstyle/checkstyle.xml\")","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"checkstyleMain {","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    source \u003d\u0027src/main/java\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"checkstyleTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    source \u003d\u0027src/test/java\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"sourceSets {","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"\ttest { ","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"\t\tjava {","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"\t\t\tsrcDirs \u003d [\u0027src/main/\u0027, \u0027src/test/\u0027]","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"\t\t}","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"\t}","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"-":39,"immanuelhume":24}},{"path":"src/main/java/chungus/Chonk.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import chungus.util.Pair;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":" * A chonk is a basic unit of serialization which can be used for any string.","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"class Chonk {","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"     * Serializes a string into a chonk.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     * @param s The string to serialize.","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     * @return The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    public static String chonkify(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"        return s.length() + \" \" + s;","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     * Tries to identify a chonk starting at some index of a string.","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * @param s   The serialized string to extract a chonk from.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * @param idx Index of string to start searching from.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @return A pair of the deserialized string and final index of the chonk, or","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     *         null if no valid chonk is found.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public static Pair\u003cString, Integer\u003e dechonkify(String s, int idx) {","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        int chonkLen \u003d 0;","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        for (; idx \u003c s.length(); idx++) {","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"            char c \u003d s.charAt(idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"            if (c \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"                idx++;","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"                break;","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            if (c \u003c \u00270\u0027 || c \u003e \u00279\u0027) {","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"                return null;","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"            chonkLen *\u003d 10;","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            chonkLen +\u003d c - \u00270\u0027;","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        if (idx + chonkLen \u003e s.length()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"            return null;","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        String v \u003d s.substring(idx, idx + chonkLen);","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        return new Pair\u003c\u003e(v, idx + chonkLen);","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"immanuelhume":47}},{"path":"src/main/java/chungus/Chungus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.File;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.io.OutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":" * A task management app.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"class Chungus {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    private Storage db;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    private boolean isRunning;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    private static final String DEFAULT_DB_PATH \u003d System.getProperty(\"user.dir\") + \"/chungus.db\";","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        new Chungus(System.in, System.out, DEFAULT_DB_PATH).spin();","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * A constructor for the Chungus class.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * @param in     Some input stream.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     * @param out    Some output stream.","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     * @param dbPath Path to a database file to read and write tasks from.","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException For errors related to the database file.","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    public Chungus(InputStream in, OutputStream out, String dbPath) {","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        ui \u003d new Ui(in, out);","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        isRunning \u003d true;","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        File dbFile \u003d new File(dbPath);","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        if (dbFile.exists() \u0026\u0026 !dbFile.isFile()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            // this means that the path represents a directory","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(String.format(\"%s is not a file\", dbPath));","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        db \u003d new Storage(dbFile);","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"            if (dbFile.createNewFile()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"Created a database file at %s\\n\", dbPath);","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"                tasks \u003d db.read();","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"Read %s task(s) from %s\\n\", tasks.count(), dbPath);","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(String.format(\"Failed to create/read db file %s\", dbPath), e);","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Hello, I\u0027m Chungus.\");","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"What can I do for you?\\n\");","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"     * Runs the Chungus app.","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    public void spin() {","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        while (isRunning) {","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"            ui.print(\"chungus\u003e \");","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            String cmd \u003d ui.nextLine();","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            parseAndExec(cmd);","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            ui.print(\"\\n\"); // add an extra line","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"     * Wraps command parsing and handler execution with better error handling.","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-23"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"     * @param cmd The raw command to parse.","lastModifiedDate":"2023-01-23"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    private void parseAndExec(String cmd) {","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-14"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"            Handler handler \u003d Parser.parse(cmd);","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"            boolean shouldExit \u003d handler.handle(tasks, ui, db);","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"            // overwrite the database after every command","lastModifiedDate":"2023-01-20"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"            db.write(tasks);","lastModifiedDate":"2023-01-20"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            isRunning \u003d !shouldExit;","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"            ui.error(\"Could not find the requested task. You currently have exactly %d %s\", tasks.count(),","lastModifiedDate":"2023-01-21"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"                    tasks.count() \u003d\u003d 1 ? \"task\" : \"tasks\");","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"            ui.error(\"Reason: %s\", e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        } catch (ChungusException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"            ui.error(\"Could not handle command \\\"%s\\\".\", cmd);","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"            ui.error(\"Reason: %s\", e.getMessage());","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"immanuelhume":92,"-":1}},{"path":"src/main/java/chungus/ChungusException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * An exception related to the Chungus app.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"class ChungusException extends RuntimeException {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    public ChungusException(String msg) {","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"        super(msg);","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    public ChungusException(String msg, Throwable cause) {","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"        super(msg, cause);","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":" * An exception to represent whenever a requested task could not be found.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"class TaskNotFoundException extends ChungusException {","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public TaskNotFoundException(int idx) {","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"Task %d does not exist\", idx));","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":" * An exception to represent when the serialization of a task is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"class TaskMarshalException extends ChungusException {","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    public TaskMarshalException(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"Bad marshal format: \\\"%s\\\"\", s));","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"immanuelhume":32}},{"path":"src/main/java/chungus/Handler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":" * A handler represents something which is used to handle a user command. Also","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" * contains some static utility methods which handler implementations can use.","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"@FunctionalInterface","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"interface Handler {","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     * Executes logic to handle some command.","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks   The list of tasks to work with.","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * @param ui      The Ui instance to use.","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * @param storage The storage instance to use.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * @return Whether the program should exit.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public boolean handle(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-01-23"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * Reports a new task. Just a convenience method.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @param task  The new task.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * @param ui    A Ui instance to use.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks The current full list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    public static void reportNewTask(Task task, Ui ui, TaskList tasks) {","lastModifiedDate":"2023-01-23"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Okay, I\u0027ve added this task:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"  %s\", task);","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Now you have %d %s.\", tasks.count(), tasks.count() \u003d\u003d 1 ? \"task\" : \"tasks\");","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     * Reports a deleted task. Just a convenience method.","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     * @param task  The new task.","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * @param ui    A Ui instance to use.","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks The current full list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public static void reportDeletedTask(Task task, Ui ui, TaskList tasks) {","lastModifiedDate":"2023-01-23"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Okay, I\u0027ve deleted this task:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"  %s\", task);","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Now you have %d %s.\", tasks.count(), tasks.count() \u003d\u003d 1 ? \"task\" : \"tasks\");","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"     * Prints each task in a list, with two spaces of indentation. Just a","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     * convenience method.","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"     * @param ui    The Ui instance to use.","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    public static void printTasksIndented(TaskList tasks, Ui ui) {","lastModifiedDate":"2023-01-23"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        tasks.forEach((task, idx) -\u003e {","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"  %d.%s\", idx + 1, task);","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":" * A logical grouping of handlers used by Chungus.","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"class Handlers {","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler for the exiting the app.","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler for exiting the app.","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    public static Handler bye() {","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Bye!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handleer to list tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler for listing tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    public static Handler list() {","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"            Handler.printTasksIndented(tasks, ui);","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to create a new Todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"     * @param desc The description of the new todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler which creates a new Todo with the given description.","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"    public static Handler todo(String desc) {","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"            Todo task \u003d new Todo(desc);","lastModifiedDate":"2023-01-21"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportNewTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to create a new task with deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"     * @param desc     Description for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"     * @param deadline Deadline for the new task.","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler which creates a new task with the given description and","lastModifiedDate":"2023-01-22"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"     *         deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"    public static Handler deadline(String desc, LocalDateTime deadline) {","lastModifiedDate":"2023-01-22"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"            Deadline task \u003d new Deadline(desc, deadline);","lastModifiedDate":"2023-01-21"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportNewTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to create a new event.","lastModifiedDate":"2023-01-22"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the event.","lastModifiedDate":"2023-01-22"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"     * @param from When the event starts.","lastModifiedDate":"2023-01-22"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"     * @param to   When the event ends.","lastModifiedDate":"2023-01-22"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler which creates a new event with the given description and","lastModifiedDate":"2023-01-22"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"     *         dates.","lastModifiedDate":"2023-01-22"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"    public static Handler event(String desc, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-22"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"            Event task \u003d new Event(desc, from, to);","lastModifiedDate":"2023-01-21"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportNewTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to mark a task as complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The current index of the task (0-based).","lastModifiedDate":"2023-01-22"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to mark the specified task as complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"    public static Handler mark(int idx) {","lastModifiedDate":"2023-01-22"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"            tasks.setDone(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Okay, I\u0027ve marked this task as completed:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"  %s\", tasks.get(idx));","lastModifiedDate":"2023-01-21"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to mark a task as incomplete.","lastModifiedDate":"2023-01-22"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The current index of the task (0-based).","lastModifiedDate":"2023-01-22"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to mark the specified task as incomplete.","lastModifiedDate":"2023-01-22"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"    public static Handler unmark(int idx) {","lastModifiedDate":"2023-01-22"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"            tasks.setNotDone(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":170,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Okay, I\u0027ve marked this task as incomplete:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"  %s\", tasks.get(idx));","lastModifiedDate":"2023-01-21"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":177,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":178,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to delete a task.","lastModifiedDate":"2023-01-22"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The current index of the task (0-based).","lastModifiedDate":"2023-01-22"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to delete the specified task.","lastModifiedDate":"2023-01-22"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"    public static Handler delete(int idx) {","lastModifiedDate":"2023-01-22"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-21"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"            Task task \u003d tasks.remove(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportDeletedTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler for finding tasks by description.","lastModifiedDate":"2023-01-22"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"     * @param searchTerm The term(s) to search for.","lastModifiedDate":"2023-01-22"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler for finding tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"    public static Handler find(String searchTerm) {","lastModifiedDate":"2023-01-22"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-22"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"            TaskList filtered \u003d tasks.filter(task -\u003e task.desc().contains(searchTerm));","lastModifiedDate":"2023-01-22"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"            if (filtered.count() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"No task matching the term \\\"%s\\\" found.\", searchTerm);","lastModifiedDate":"2023-01-22"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"Here are your task(s) containing the term \\\"%s\\\":\", searchTerm);","lastModifiedDate":"2023-01-22"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"                Handler.printTasksIndented(filtered, ui);","lastModifiedDate":"2023-01-22"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-22"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler for unknown commands.","lastModifiedDate":"2023-01-22"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"     * @param cmd The raw unknown command.","lastModifiedDate":"2023-01-22"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to respond to the unknown command.","lastModifiedDate":"2023-01-22"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"    public static Handler unknown(String cmd) {","lastModifiedDate":"2023-01-22"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, Ui ui, Storage storage) -\u003e {","lastModifiedDate":"2023-01-22"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"            throw new ChungusException(String.format(\"Unknown command \\\"%s\\\"\", cmd));","lastModifiedDate":"2023-01-22"},{"lineNumber":220,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-22"},{"lineNumber":221,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":222}},{"path":"src/main/java/chungus/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * This class contains the logic needed to parse user entered commands and","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" * dispatch them to appropriate handlers.","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"class Parser {","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    private static final Pattern DEADLINE_PATTERN \u003d Pattern.compile(\"^deadline\\\\s+(.+)\\\\s+/by\\\\s+(.+)$\");","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    private static final Pattern EVENT_PATTERN \u003d Pattern.compile(\"^event\\\\s+(.+)\\\\s+/from\\\\s+(.+)\\\\s+/to\\\\s+(.+)$\");","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    private static final DateTimeFormatter DATETIME_FMT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     * Parses a command, and selects a suitable handler. This is a pure function.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * The handler returned is not safe to be ran multiple times.","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * @param cmd The raw command to parse.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @return An appropriate handler for the command.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * @throws ChungusException When the expected command format is wrong.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public static Handler parse(String cmd) {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        String[] args \u003d cmd.split(\"\\\\s+\");","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        switch (args[0]) {","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        case \"bye\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.bye();","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        case \"list\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.list();","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        case \"todo\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"            String[] pair \u003d cmd.split(\"\\\\s+\", 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"            if (pair.length \u003c 2) {","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"                throw new ChungusException(\"Description of todo cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.todo(pair[1]);","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        case \"deadline\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"            Matcher matcher \u003d DEADLINE_PATTERN.matcher(cmd);","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"                throw new ChungusException(","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"                        \"Bad format for creating deadline task. Must be of the form deadline \u003ctask\u003e /by \u003cdatetime\u003e.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            String desc \u003d matcher.group(1);","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime deadline \u003d parseDateTimeInput(matcher.group(2));","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.deadline(desc, deadline);","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        case \"event\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"            Matcher matcher \u003d EVENT_PATTERN.matcher(cmd);","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"                throw new ChungusException(","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"                        \"Bad format for creating event.\"","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"                                + \"Must be of the form event \u003cname\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"            String desc \u003d matcher.group(1);","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime from \u003d parseDateTimeInput(matcher.group(2));","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime to \u003d parseDateTimeInput(matcher.group(3));","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.event(desc, from, to);","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        case \"mark\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(args[1]) - 1;","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.mark(idx);","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        case \"unmark\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(args[1]) - 1;","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.unmark(idx);","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"        case \"delete\": {","lastModifiedDate":"2023-01-23"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(args[1]) - 1;","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.delete(idx);","lastModifiedDate":"2023-01-23"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        case \"find\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"            String[] pair \u003d cmd.split(\"\\\\s+\", 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            String searchTerm \u003d \"\";","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"            if (pair.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"                searchTerm \u003d pair[1];","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.find(searchTerm);","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"        default: {","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.unknown(args[0]);","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"    private static LocalDateTime parseDateTimeInput(String s) {","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"            return LocalDateTime.parse(s, DATETIME_FMT);","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"            throw new ChungusException(String.format(\"Bad datetime format \\\"%s\\\": expected dd/MM/yyyy HHmm\", s), e);","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"    private static int getTaskNumberArg(String s) {","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"        String[] xs \u003d s.split(\"\\\\s+\");","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"        int num \u003d Integer.parseInt(xs[xs.length - 1]);","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"        return num;","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":108}},{"path":"src/main/java/chungus/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.File;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":" * Helps manage storage of tasks to disk.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"class Storage {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    private File file;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for Storage.","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * @param file The file to use for reading and writing of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public Storage(File file) {","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * Reads tasks from disk.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * @return A list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     * @throws IOException When reading the file fails.","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    public TaskList read() throws IOException {","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        return new TaskList(Files.readAllLines(file.toPath())","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"                .stream()","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"                .map(line -\u003e Task.unmarshal(line))","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     * Writes a list of task to disk. This overrides the old contents of the file,","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * so make sure the full list is provided each time.","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks A list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException When writing to disk fails.","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    public void write(TaskList tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"            Files.write(file.toPath(), tasks.marshal().getBytes());","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(\"Failed to save tasks to file\", e);","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":50}},{"path":"src/main/java/chungus/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import chungus.util.Pair;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":" * Represents a task.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"abstract class Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    private String desc;","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    protected static final DateTimeFormatter DATETIME_FMT \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a task. All tasks require a description.","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    public Task(String desc) {","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-14"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     * Returns a user-friendly format of the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     * @return A user-friendly format of the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    protected String format() {","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        return (isDone() ? \"[X] \" : \"[ ] \") + desc;","lastModifiedDate":"2023-01-14"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     * Returns whether the task is complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * @return Whether the task is complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        return isDone;","lastModifiedDate":"2023-01-14"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"     * Marks the task as complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    public void setDone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-14"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"     * Marks the task as incomplete.","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    public void setNotDone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-14"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"     * Retrieves the raw description for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"     * @return The raw description.","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"    public String desc() {","lastModifiedDate":"2023-01-20"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        return desc;","lastModifiedDate":"2023-01-20"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"    public abstract String toString();","lastModifiedDate":"2023-01-14"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"     * Serialies the task to make it suitable for storing to disk.","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"     * @return The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    public abstract String marshal();","lastModifiedDate":"2023-01-20"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce a task.","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"     * @return The task.","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"    public static Task unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"        char typ \u003d s.charAt(0);","lastModifiedDate":"2023-01-20"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        switch (typ) {","lastModifiedDate":"2023-01-20"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2023-01-20"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"            return Todo.unmarshal(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2023-01-20"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"            return Deadline.unmarshal(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2023-01-20"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"            return Event.unmarshal(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        default:","lastModifiedDate":"2023-01-20"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"            throw new TaskMarshalException(s);","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"     * Throws an exception if the condition is false. Just a convenience method.","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"     * @param cond The boolean condition.","lastModifiedDate":"2023-01-22"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"     * @param t    The exception to throw.","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"    protected static void trueOrThrow(boolean cond, RuntimeException t) {","lastModifiedDate":"2023-01-20"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"        if (!cond) {","lastModifiedDate":"2023-01-20"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"            throw t;","lastModifiedDate":"2023-01-20"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":" * A todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"class Todo extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"    public Todo(String desc) {","lastModifiedDate":"2023-01-14"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        super(desc);","lastModifiedDate":"2023-01-14"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"        return \"[T]\" + format();","lastModifiedDate":"2023-01-20"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-20"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder b \u003d new StringBuilder();","lastModifiedDate":"2023-01-21"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"        b.append(\u0027T\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"        b.append(isDone() ? \u00271\u0027 : \u00270\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        b.append(desc());","lastModifiedDate":"2023-01-21"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"        return b.toString();","lastModifiedDate":"2023-01-21"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce a todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"     * @return The todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"    public static Todo unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(s.charAt(0) \u003d\u003d \u0027T\u0027, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"        boolean isDone \u003d s.charAt(1) \u003d\u003d \u00270\u0027 ? false : true;","lastModifiedDate":"2023-01-20"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"        String desc \u003d s.substring(2, s.length());","lastModifiedDate":"2023-01-20"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"        Todo ret \u003d new Todo(desc);","lastModifiedDate":"2023-01-20"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-20"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"            ret.setDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"            ret.setNotDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-14"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-20"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof Todo)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"        Todo otherTodo \u003d (Todo) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":170,"author":{"gitId":"immanuelhume"},"content":"        return this.desc().equals(otherTodo.desc());","lastModifiedDate":"2023-01-22"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":" * A task with deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":177,"author":{"gitId":"immanuelhume"},"content":"class Deadline extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":178,"author":{"gitId":"immanuelhume"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a deadline task.","lastModifiedDate":"2023-01-22"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"     * @param desc     The task\u0027s description.","lastModifiedDate":"2023-01-22"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"     * @param deadline Deadline for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"    public Deadline(String desc, LocalDateTime deadline) {","lastModifiedDate":"2023-01-22"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"        super(desc);","lastModifiedDate":"2023-01-14"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"        return \"[D]\" + format() + String.format(\" (by: %s)\", deadline);","lastModifiedDate":"2023-01-20"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-20"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder b \u003d new StringBuilder();","lastModifiedDate":"2023-01-21"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"        b.append(\u0027D\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"        b.append(isDone() ? \u00271\u0027 : \u00270\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(desc()));","lastModifiedDate":"2023-01-21"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(deadline.format(DATETIME_FMT)));","lastModifiedDate":"2023-01-22"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"        return b.toString();","lastModifiedDate":"2023-01-21"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce a task with deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"     * @return The deadline task.","lastModifiedDate":"2023-01-22"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"    public static Deadline unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"        if (s.charAt(0) !\u003d \u0027D\u0027) {","lastModifiedDate":"2023-01-20"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"            throw new TaskMarshalException(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-14"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":220,"author":{"gitId":"immanuelhume"},"content":"        int idx \u003d 2;","lastModifiedDate":"2023-01-20"},{"lineNumber":221,"author":{"gitId":"immanuelhume"},"content":"        Pair\u003cString, Integer\u003e dechonked;","lastModifiedDate":"2023-01-20"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":223,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":224,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":225,"author":{"gitId":"immanuelhume"},"content":"        String desc \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":226,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-01-20"},{"lineNumber":227,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":228,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":229,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":230,"author":{"gitId":"immanuelhume"},"content":"        String deadline \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":231,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":232,"author":{"gitId":"immanuelhume"},"content":"        Deadline ret \u003d new Deadline(desc, LocalDateTime.parse(deadline, DATETIME_FMT));","lastModifiedDate":"2023-01-22"},{"lineNumber":233,"author":{"gitId":"immanuelhume"},"content":"        boolean isDone \u003d s.charAt(1) \u003d\u003d \u00270\u0027 ? false : true;","lastModifiedDate":"2023-01-22"},{"lineNumber":234,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":235,"author":{"gitId":"immanuelhume"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-20"},{"lineNumber":236,"author":{"gitId":"immanuelhume"},"content":"            ret.setDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":237,"author":{"gitId":"immanuelhume"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":238,"author":{"gitId":"immanuelhume"},"content":"            ret.setNotDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":239,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":240,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":241,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-20"},{"lineNumber":242,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":243,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":244,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":245,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":246,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof Deadline)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":247,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":248,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":249,"author":{"gitId":"immanuelhume"},"content":"        Deadline otherDeadline \u003d (Deadline) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":250,"author":{"gitId":"immanuelhume"},"content":"        return this.desc().equals(otherDeadline.desc()) \u0026\u0026 this.deadline.equals(otherDeadline.deadline);","lastModifiedDate":"2023-01-22"},{"lineNumber":251,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":252,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":253,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":254,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":255,"author":{"gitId":"immanuelhume"},"content":" * An event.","lastModifiedDate":"2023-01-22"},{"lineNumber":256,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":257,"author":{"gitId":"immanuelhume"},"content":"class Event extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":258,"author":{"gitId":"immanuelhume"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-01-22"},{"lineNumber":259,"author":{"gitId":"immanuelhume"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-01-22"},{"lineNumber":260,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":261,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":262,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for an event.","lastModifiedDate":"2023-01-22"},{"lineNumber":263,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":264,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the event.","lastModifiedDate":"2023-01-22"},{"lineNumber":265,"author":{"gitId":"immanuelhume"},"content":"     * @param from When the event starts.","lastModifiedDate":"2023-01-22"},{"lineNumber":266,"author":{"gitId":"immanuelhume"},"content":"     * @param to   When the event ends.","lastModifiedDate":"2023-01-22"},{"lineNumber":267,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":268,"author":{"gitId":"immanuelhume"},"content":"    public Event(String desc, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-22"},{"lineNumber":269,"author":{"gitId":"immanuelhume"},"content":"        super(desc);","lastModifiedDate":"2023-01-14"},{"lineNumber":270,"author":{"gitId":"immanuelhume"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-22"},{"lineNumber":271,"author":{"gitId":"immanuelhume"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-22"},{"lineNumber":272,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":273,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":274,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":275,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":276,"author":{"gitId":"immanuelhume"},"content":"        return \"[E]\" + format() + String.format(\" (from: %s to: %s)\", from, to);","lastModifiedDate":"2023-01-20"},{"lineNumber":277,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":278,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":279,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":280,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-20"},{"lineNumber":281,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder b \u003d new StringBuilder();","lastModifiedDate":"2023-01-21"},{"lineNumber":282,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":283,"author":{"gitId":"immanuelhume"},"content":"        b.append(\u0027E\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":284,"author":{"gitId":"immanuelhume"},"content":"        b.append(isDone() ? \u00271\u0027 : \u00270\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":285,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(desc()));","lastModifiedDate":"2023-01-21"},{"lineNumber":286,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(from.format(DATETIME_FMT)));","lastModifiedDate":"2023-01-22"},{"lineNumber":287,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(to.format(DATETIME_FMT)));","lastModifiedDate":"2023-01-22"},{"lineNumber":288,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":289,"author":{"gitId":"immanuelhume"},"content":"        return b.toString();","lastModifiedDate":"2023-01-21"},{"lineNumber":290,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":291,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":292,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":293,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce an event.","lastModifiedDate":"2023-01-22"},{"lineNumber":294,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":295,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":296,"author":{"gitId":"immanuelhume"},"content":"     * @return The event object.","lastModifiedDate":"2023-01-22"},{"lineNumber":297,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":298,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":299,"author":{"gitId":"immanuelhume"},"content":"    public static Event unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":300,"author":{"gitId":"immanuelhume"},"content":"        if (s.charAt(0) !\u003d \u0027E\u0027) {","lastModifiedDate":"2023-01-20"},{"lineNumber":301,"author":{"gitId":"immanuelhume"},"content":"            throw new TaskMarshalException(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":302,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":303,"author":{"gitId":"immanuelhume"},"content":"        boolean isDone \u003d s.charAt(1) \u003d\u003d \u00270\u0027 ? false : true;","lastModifiedDate":"2023-01-20"},{"lineNumber":304,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":305,"author":{"gitId":"immanuelhume"},"content":"        int idx \u003d 2;","lastModifiedDate":"2023-01-20"},{"lineNumber":306,"author":{"gitId":"immanuelhume"},"content":"        Pair\u003cString, Integer\u003e dechonked;","lastModifiedDate":"2023-01-20"},{"lineNumber":307,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":308,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":309,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":310,"author":{"gitId":"immanuelhume"},"content":"        String desc \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":311,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-01-20"},{"lineNumber":312,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":313,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":314,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":315,"author":{"gitId":"immanuelhume"},"content":"        String from \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":316,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-01-20"},{"lineNumber":317,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":318,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":319,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":320,"author":{"gitId":"immanuelhume"},"content":"        String to \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":321,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":322,"author":{"gitId":"immanuelhume"},"content":"        Event ret \u003d new Event(desc, LocalDateTime.parse(from, DATETIME_FMT), LocalDateTime.parse(to, DATETIME_FMT));","lastModifiedDate":"2023-01-22"},{"lineNumber":323,"author":{"gitId":"immanuelhume"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-20"},{"lineNumber":324,"author":{"gitId":"immanuelhume"},"content":"            ret.setDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":325,"author":{"gitId":"immanuelhume"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":326,"author":{"gitId":"immanuelhume"},"content":"            ret.setNotDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":327,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":328,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":329,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-20"},{"lineNumber":330,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":331,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":332,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":333,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":334,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":335,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":336,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":337,"author":{"gitId":"immanuelhume"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":338,"author":{"gitId":"immanuelhume"},"content":"        return this.desc().equals(otherEvent.desc()) \u0026\u0026 this.from.equals(otherEvent.from)","lastModifiedDate":"2023-01-22"},{"lineNumber":339,"author":{"gitId":"immanuelhume"},"content":"                \u0026\u0026 this.to.equals(otherEvent.to);","lastModifiedDate":"2023-01-22"},{"lineNumber":340,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":341,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"immanuelhume":341}},{"path":"src/main/java/chungus/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.BiConsumer;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * Wraps a list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"class TaskList {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * Another constructor for a task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks A list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * Runs some observer function for each task in the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * @param f Some biconsumer function. The second argument is the task\u0027s index in","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     *          the internal list.","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    public void forEach(BiConsumer\u003cTask, Integer\u003e f) {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-21"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            f.accept(tasks.get(i), i);","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"     * Creates a new task list by applying some predicate to the current list.","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"     * @param f The predicate to apply.","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     * @return The new filtered list.","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    public TaskList filter(Predicate\u003cTask\u003e f) {","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        return new TaskList(tasks.stream().filter(f).collect(Collectors.toList()));","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"     * Converts the entire list into a serialized representation.","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"     * @return The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        return tasks.stream()","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"                .map(task -\u003e task.marshal())","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"                .collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"    public int count() {","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"     * @param task The new task to add.","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"     * Retrieves a task by index.","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"     * @return The actual task.","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskNotFoundException If the index is out of bounds.","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"    public Task get(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"            return tasks.get(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"            throw new TaskNotFoundException(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"     * Mark a task as done.","lastModifiedDate":"2023-01-22"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"    public void setDone(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"        get(idx).setDone();","lastModifiedDate":"2023-01-21"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"     * Mark a task as not done.","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"    public void setNotDone(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"        get(idx).setNotDone();","lastModifiedDate":"2023-01-21"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"     * Removes a task and returns it.","lastModifiedDate":"2023-01-22"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"     * @return The removed task.","lastModifiedDate":"2023-01-22"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"    public Task remove(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        Task ret \u003d get(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"        tasks.remove(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-21"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof TaskList)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"        TaskList otherList \u003d (TaskList) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"        if (this.tasks.size() !\u003d otherList.tasks.size()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"            if (!(this.tasks.get(i).equals(otherList.tasks.get(i)))) {","lastModifiedDate":"2023-01-22"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"                return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"        return true;","lastModifiedDate":"2023-01-22"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":143}},{"path":"src/main/java/chungus/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.io.OutputStream;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.io.Writer;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" * A simple console based UI.","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"class Ui {","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    private Scanner in;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    private Writer out;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a Ui. By default, stdin and stdout are used for I/O.","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public Ui() {","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"        out \u003d new PrintWriter(System.out);","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * Another constructor for Ui.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     * @param in  Some input.","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     * @param out Some output.","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    public Ui(InputStream in, OutputStream out) {","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        this.out \u003d new PrintWriter(out);","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     * Gets the next line from input. The line is guaranteed to be trimmed of","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * whitespaces.","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     * @return The next line.","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    public String nextLine() {","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        return in.nextLine().trim();","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     * Prints something to the output with no special formatting.","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException If some I/O exception occurs.","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    public void print(String msg, Object... args) {","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"            out.append(String.format(msg, args)).flush();","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"     * Displays something and formats it as \"information\".","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException If some I/O exception occurs.","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    public void info(String msg, Object... args) {","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"            out.append(\"\\u001b[36m\")","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"                    .append(String.format(msg, args))","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"                    .append(\u0027\\n\u0027)","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"                    .append(\"\\u001b[0m\")","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"                    .flush();","lastModifiedDate":"2023-01-21"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"     * Displays something and formats it as an error.","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException If some I/O exception occurs.","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"    public void error(String msg, Object... args) {","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"            out.append(\"\\u001b[31m\")","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"                    .append(String.format(msg, args))","lastModifiedDate":"2023-01-21"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"                    .append(\u0027\\n\u0027)","lastModifiedDate":"2023-01-21"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"                    .append(\"\\u001b[0m\")","lastModifiedDate":"2023-01-21"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"                    .flush();","lastModifiedDate":"2023-01-21"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-21"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":98}},{"path":"src/main/java/chungus/util/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.util;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * A general pair class.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class Pair\u003cS, T\u003e {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    private S first;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"    private T second;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a pair.","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     * @param first  The first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     * @param second The second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    public Pair(S first, T second) {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"        this.first \u003d first;","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"        this.second \u003d second;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * Gets the first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @return The first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    public S first() {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        return first;","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     * Gets the second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * @return The second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"    public T second() {","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        return second;","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     * Builds a pair. Just a convenience method","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     * @param first  The first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"     * @param second The second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"     * @param \u003cS\u003e    Type for the first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     * @param \u003cT\u003e    Type for the second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"     * @return The new pair.","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    public static \u003cS, T\u003e Pair\u003cS, T\u003e of(S first, T second) {","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        return new Pair\u003c\u003e(first, second);","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":51}},{"path":"src/test/java/chungus/ChonkTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import chungus.util.Pair;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"public class ChonkTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private List\u003cPair\u003cString, String\u003e\u003e tests \u003d List.of(","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\"foobar\", \"6 foobar\"),","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\"foo bar\", \"7 foo bar\"),","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\"\", \"0 \"),","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\" \", \"1  \"));","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public void chonkify() {","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        for (Pair\u003cString, String\u003e tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"            String in \u003d tt.first();","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"            String want \u003d tt.second();","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"            String got \u003d Chonk.chonkify(in);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(want, got);","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    public void dechonkify_singleChonks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        for (Pair\u003cString, String\u003e tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            String in \u003d tt.second();","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            String want \u003d tt.first();","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            Pair\u003cString, Integer\u003e res \u003d Chonk.dechonkify(in, 0);","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(want, res.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(in.length(), res.second());","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public void dechonkify_multipleChonks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        List\u003cPair\u003cString, List\u003cString\u003e\u003e\u003e tests \u003d List.of(","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"3 foo3 bar\", List.of(\"foo\", \"bar\")),","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"3 foo7 bar baz\", List.of(\"foo\", \"bar baz\")),","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"3 foo0\", List.of(\"foo\", \"\")));","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        for (Pair\u003cString, List\u003cString\u003e\u003e tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            String in \u003d tt.first();","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d 0;","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            for (String want : tt.second()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"                Pair\u003cString, Integer\u003e dechonked \u003d Chonk.dechonkify(in, idx);","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"                assertNotNull(dechonked);","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"                assertEquals(want, dechonked.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"                idx \u003d dechonked.second();","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    public void dechonkify_invalidChonks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        List\u003cString\u003e tests \u003d List.of(","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"                \"foobar\", // no length value","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"                \"ジャワ\",","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"                \"4foo\", // no space after length","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"                \"4 foo\" // length is too large","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        for (String tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            Pair\u003cString, Integer\u003e got \u003d Chonk.dechonkify(tt, 0);","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            assertNull(got);","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":71}},{"path":"src/test/java/chungus/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.io.File;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"public class StorageTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    private static final Todo SAMPLE_TODO \u003d new Todo(\"eliminate the working class\");","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private static final Deadline SAMPLE_DEADLINE \u003d new Deadline(\"eliminate the middle class\", LocalDateTime.now());","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    private static final Event SAMPLE_EVENT \u003d new Event(\"eliminate the top 1%\", LocalDateTime.now(),","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime.now().plusDays(2));","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public void canReadAndWrite() throws IOException {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"        // Write a bunch of tasks to a temporary file, then read them out. Check that","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        // the same tasks are retrieved.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(SAMPLE_TODO);","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(SAMPLE_DEADLINE);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(SAMPLE_EVENT);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        File tmpFile \u003d File.createTempFile(\"Chungus-\", \".tmp.db\");","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        Storage st \u003d new Storage(tmpFile);","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        st.write(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        TaskList sameTasks \u003d st.read();","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(tasks, sameTasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":34}},{"path":"src/test/java/chungus/util/PairTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.util;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"public class PairTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    public void itWorks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"        Integer[] xs \u003d { 1, 2, 3 };","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"        String[] ys \u003d { \"a\", \"b\", \"c\" };","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"        for (int i \u003d 0; i \u003c Math.min(xs.length, ys.length); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"            Pair\u003cInteger, String\u003e pair \u003d new Pair\u003c\u003e(xs[i], ys[i]);","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(xs[i], pair.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(ys[i], pair.second());","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"            pair \u003d Pair.of(xs[i], ys[i]);","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(xs[i], pair.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(ys[i], pair.second());","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"todo go to the moon","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"deadline pirate games /by this Friday ","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"event Trump\u0027s wedding /from 1 Oct. 1989 /to 2 Oct. 1989","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"mark 1","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"unmark 1","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"mark 2","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"unmark 2","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"mark 3","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"unmark 3","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"pull for Raiden Shogun","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"deadline build a house","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"event Ivanka\u0027s wedding /from 1 Oct. 1989","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"bye","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"immanuelhume":13}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"java -classpath ../bin Chungus \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"immanuelhume":1}}]
