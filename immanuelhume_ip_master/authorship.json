[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    ","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    mainClassName \u003d \"chungus.fxui.Launcher\"","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    archiveBaseName \u003d \"chungus\"","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"checkstyle {","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"    toolVersion \u00279.3\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"    configFile file(\"config/checkstyle/checkstyle.xml\")","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"checkstyleMain {","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    source \u003d\u0027src/main/java\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"checkstyleTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"    source \u003d\u0027src/test/java\u0027","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"sourceSets {","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"    test { ","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        java {","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            srcDirs \u003d [\u0027src/main/java/\u0027, \u0027src/test/java/\u0027]","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"\tmain {","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"\t\tjava {","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"\t\t\tsrcDirs \u003d [\u0027src/main/java/\u0027]","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"\t\t}","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"\t}","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"-":39,"immanuelhume":46}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"_Chungus_ is a demo application built for a university software engineering class, based on the [AB3](https://github.com/se-edu/addressbook-level3) template.","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"![A screenshot of the application](./Ui.png)","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"- **Persistence**: Chungus will save your tasks to disk","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"- **Text-based**: Not much of a GUI available, and all interactions are through text commands","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"- **Cross-platform**: Thanks to groundbreaking Java \u0027write once, run anywhere\u0027 technology","lastModifiedDate":"2023-02-11"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"- **Tags**: Chungus supports tagging tasks as an alternative way of categorization","lastModifiedDate":"2023-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"### `list` - Lists available tasks","lastModifiedDate":"2023-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"`list`","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"All tasks previously created and not deleted is listed in order of creation.","lastModifiedDate":"2023-02-11"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"### `todo` - Create a todo","lastModifiedDate":"2023-02-11"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"A todo is the simplest type of task, with no associated datetime.","lastModifiedDate":"2023-02-11"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"`todo find atlantis`","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"A new task with the description \"find atlantis\" is created.","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"### `deadline` - Create a task with deadline","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"A deadline can be associated to a task. The date and time must be in `dd/MM/yyyy hhmm` format.","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"`deadline write a user guide /by 11/02/2023 2359`","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"A new task with the description \"write a user guide\" is created, with the associated deadline of 2nd February 2023, 11:59pm.","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"### `event` - Create an event","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"An event is a type of task with a specified start and end time. The date and time must be in `dd/MM/yyyy hhmm` format.","lastModifiedDate":"2023-02-11"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"`event gotoubun movie preview /from 12/10/2022 1500 /to 12/10/2022 1700`","lastModifiedDate":"2023-02-11"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"A new event with the description \"gotoubun movie preview\" is created, with the associated duration of 12th October 2022 3:00pm to 5:00pm.","lastModifiedDate":"2023-02-11"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"### `mark` - Complete a task","lastModifiedDate":"2023-02-11"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"To select a task to complete, first use `list` to see its current index. Then proceed to mark the task, as per the example below.","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"`mark 1`","lastModifiedDate":"2023-02-11"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"The task with index 1 is marked as completed.","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"### `unmark` - Reverse completion","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"This is the reverse of `mark`.","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"`unmark 1`","lastModifiedDate":"2023-02-11"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"The task with index 1 is marked as incomplete.","lastModifiedDate":"2023-02-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"### `delete` - Delete a task","lastModifiedDate":"2023-02-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"As with `mark`, a task can be selected using its index, which is checked by first using `list`. Note that deletion is not reversible.","lastModifiedDate":"2023-02-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"`delete 1`","lastModifiedDate":"2023-02-11"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"The task with index 1 is deleted.","lastModifiedDate":"2023-02-11"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"### `find` - Find a task","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"A simple keyword search which finds all tasks with descriptions containing the exact phrase provided.","lastModifiedDate":"2023-02-11"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"`find date`","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"All tasks with the word \"date\" in its description is listed.","lastModifiedDate":"2023-02-11"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"### `find` - Find a task","lastModifiedDate":"2023-02-11"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"A simple keyword search which finds all tasks with descriptions containing the exact phrase provided.","lastModifiedDate":"2023-02-11"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"`find date`","lastModifiedDate":"2023-02-11"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"All tasks with the word \"date\" in its description is listed.","lastModifiedDate":"2023-02-11"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"### `tag` - Tag a task","lastModifiedDate":"2023-02-11"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"A task can have any number of tags. A tag must be a single token, i.e. a tag like `won\u0027t fix` is not supported.","lastModifiedDate":"2023-02-11"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"`tag 1 work urgent`","lastModifiedDate":"2023-02-11"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"The task at index 1 is tagged with `work` and `urgent`.","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"### `tagall` - Match tasks by tag","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"Finds all tasks which have at least _all_ the tags provided.","lastModifiedDate":"2023-02-11"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"`tagall work urgent`","lastModifiedDate":"2023-02-11"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"All tasks which were previously tagged with `work` and `urgent` are listed.","lastModifiedDate":"2023-02-11"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"### `tagany` - Match tasks by tag","lastModifiedDate":"2023-02-11"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"Finds all tasks which have at least _one of_ the tags provided.","lastModifiedDate":"2023-02-11"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"`tagany work urgent`","lastModifiedDate":"2023-02-11"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"All tasks which were previously tagged with `work` or `urgent` are listed.","lastModifiedDate":"2023-02-11"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"### `tagsee` - Inspect tags","lastModifiedDate":"2023-02-11"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"For a given task, see what tags it has.","lastModifiedDate":"2023-02-11"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"Example of usage:","lastModifiedDate":"2023-02-11"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"`tagsee 1`","lastModifiedDate":"2023-02-11"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-11"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"Expected outcome:","lastModifiedDate":"2023-02-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"The tags associated with task 1 are listed.","lastModifiedDate":"2023-02-11"}],"authorContributionMap":{"-":21,"immanuelhume":147}},{"path":"src/main/java/chungus/Chonk.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import chungus.util.Pair;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":" * A chonk is a basic unit of serialization which can be used for any string.","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"class Chonk {","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"     * Serializes a string into a chonk.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     * @param s The string to serialize.","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     * @return The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    public static String chonkify(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"        return s.length() + \" \" + s;","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     * Tries to identify a chonk starting at some index of a string.","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * @param s   The serialized string to extract a chonk from.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * @param idx Index of string to start searching from.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @return A pair of the deserialized string and final index of the chonk, or","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     *         null if no valid chonk is found.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public static Pair\u003cString, Integer\u003e dechonkify(String s, int idx) {","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        int chonkLen \u003d 0;","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        for (; idx \u003c s.length(); idx++) {","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"            char c \u003d s.charAt(idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"            if (c \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"                idx++;","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"                break;","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            if (c \u003c \u00270\u0027 || c \u003e \u00279\u0027) {","lastModifiedDate":"2023-01-20"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"                return null;","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"            chonkLen *\u003d 10;","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            chonkLen +\u003d c - \u00270\u0027;","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        if (idx + chonkLen \u003e s.length()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"            return null;","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        String v \u003d s.substring(idx, idx + chonkLen);","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        return new Pair\u003c\u003e(v, idx + chonkLen);","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"immanuelhume":47}},{"path":"src/main/java/chungus/Chungus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.File;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.concurrent.atomic.AtomicBoolean;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import chungus.textui.TextUi;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * A task management app.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"public class Chungus {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private NonBlockingUi ui;","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    private Storage db;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    private AtomicBoolean isRunning;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public static final String DEFAULT_DB_PATH \u003d System.getProperty(\"user.dir\") + \"/chungus.db\";","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * This starts Chungus in the CLI, using stdin and stdout.","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * @param args Command line arguments.","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        Chungus chungus \u003d new Chungus(new TextUi(System.in, System.out), DEFAULT_DB_PATH);","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        chungus.spin(() -\u003e chungus.ui.print(\"chungus\u003e \"), () -\u003e chungus.ui.print(\"\\n\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     * A constructor for the Chungus class.","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * @param ui     Some user interface to use.","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * @param dbPath Path to a database file to read and write tasks from.","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException For errors related to the database file.","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    public Chungus(NonBlockingUi ui, String dbPath) {","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        isRunning \u003d new AtomicBoolean(true);","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        File dbFile \u003d new File(dbPath);","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        if (dbFile.exists() \u0026\u0026 !dbFile.isFile()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"            // this means that the path represents a directory","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(String.format(\"%s is not a file\", dbPath));","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        db \u003d new Storage(dbFile);","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            if (dbFile.createNewFile()) {","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"Created a database file at %s\\n\", dbPath);","lastModifiedDate":"2023-01-21"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"                tasks \u003d db.read();","lastModifiedDate":"2023-01-21"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"Read %s task(s) from %s\\n\", tasks.count(), dbPath);","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(String.format(\"Failed to create/read db file %s\", dbPath), e);","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Hello, I\u0027m Chungus.\\nWhat can I do for you?\");","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"     * Runs the Chungus app.","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"     * @param beforeEach A lambda to run before each command is handled.","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"     * @param afterEach  A lambda to run after each command is handled.","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"    public void spin(Runnable beforeEach, Runnable afterEach) {","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        ui.init(cmd -\u003e parseAndExec(cmd), beforeEach, afterEach, isRunning);","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"        while (isRunning.get()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"     * Wraps command parsing and handler execution with better error handling.","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-23"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"     * @param cmd The raw command to parse.","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"    private void parseAndExec(String cmd) {","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-14"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"            Handler handler \u003d Parser.parse(cmd);","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            boolean shouldExit \u003d handler.handle(tasks, ui, db);","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"            // overwrite the database after every command","lastModifiedDate":"2023-01-20"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"            db.write(tasks);","lastModifiedDate":"2023-01-20"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            isRunning.set(!shouldExit);","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-01-20"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"            ui.error(\"Could not find the requested task. You currently have exactly %d %s.\", tasks.count(),","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"                    tasks.count() \u003d\u003d 1 ? \"task\" : \"tasks\");","lastModifiedDate":"2023-01-21"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        } catch (ChungusException e) {","lastModifiedDate":"2023-01-15"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"            ui.error(\"Could not handle command \\\"%s\\\".\\nReason: %s\", cmd, e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"    public void stop() {","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        this.isRunning.set(false);","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"immanuelhume":97,"-":1}},{"path":"src/main/java/chungus/ChungusException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * An exception related to the Chungus app.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class ChungusException extends RuntimeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    public ChungusException(String msg) {","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"        super(msg);","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    public ChungusException(String msg, Throwable cause) {","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"        super(msg, cause);","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":" * An exception to represent whenever a requested task could not be found.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"class TaskNotFoundException extends ChungusException {","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public TaskNotFoundException(int idx) {","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"Task %d does not exist\", idx));","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":" * An exception to represent when the serialization of a task is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"class TaskMarshalException extends ChungusException {","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    public TaskMarshalException(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"Bad marshal format: \\\"%s\\\"\", s));","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"immanuelhume":32}},{"path":"src/main/java/chungus/Handler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":" * A handler represents something which is used to handle a user command. Also","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" * contains some static utility methods which handler implementations can use.","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"@FunctionalInterface","lastModifiedDate":"2023-01-21"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"interface Handler {","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-23"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     * Executes logic to handle some command.","lastModifiedDate":"2023-01-23"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-23"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks   The list of tasks to work with.","lastModifiedDate":"2023-01-23"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * @param ui      The Ui instance to use.","lastModifiedDate":"2023-01-23"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * @param storage The storage instance to use.","lastModifiedDate":"2023-01-23"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * @return Whether the program should exit.","lastModifiedDate":"2023-01-23"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-23"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public boolean handle(TaskList tasks, NonBlockingUi ui, Storage storage);","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * Reports a new task. Just a convenience method.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @param task  The new task.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * @param ui    A Ui instance to use.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks The current full list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    public static void reportNewTask(Task task, NonBlockingUi ui, TaskList tasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Okay, I\u0027ve added this task:\\n  %s\\nNow you have %d task(s).\", task, tasks.count());","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * Reports a deleted task. Just a convenience method.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     * @param task  The new task.","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"     * @param ui    A Ui instance to use.","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks The current full list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    public static void reportDeletedTask(Task task, NonBlockingUi ui, TaskList tasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        ui.info(\"Okay, I\u0027ve deleted this task:\\n  %s\\nNow you have %d task(s).\", task, tasks.count());","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":" * A logical grouping of handlers used by Chungus.","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"class Handlers {","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler for the exiting the app.","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler for exiting the app.","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getBye() {","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Bye!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-01-21"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handleer to list tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler for listing tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getList() {","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Here are the tasks in your list:\\n%s\", tasks);","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to create a new Todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"     * @param desc The description of the new todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler which creates a new Todo with the given description.","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getTodo(String desc) {","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"            Todo task \u003d new Todo(desc);","lastModifiedDate":"2023-01-21"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportNewTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to create a new task with deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"     * @param desc     Description for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"     * @param deadline Deadline for the new task.","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler which creates a new task with the given description and","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"     *         deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getDeadline(String desc, LocalDateTime deadline) {","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"            Deadline task \u003d new Deadline(desc, deadline);","lastModifiedDate":"2023-01-21"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportNewTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to create a new event.","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the event.","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"     * @param from When the event starts.","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"     * @param to   When the event ends.","lastModifiedDate":"2023-01-22"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler which creates a new event with the given description and","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"     *         dates.","lastModifiedDate":"2023-01-22"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getEvent(String desc, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-02-03"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"            Event task \u003d new Event(desc, from, to);","lastModifiedDate":"2023-01-21"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"            tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportNewTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to mark a task as complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The current index of the task (0-based).","lastModifiedDate":"2023-01-22"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to mark the specified task as complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getMark(int idx) {","lastModifiedDate":"2023-02-03"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"            tasks.setDone(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Okay, I\u0027ve marked this task as completed:\\n  %s\", tasks.get(idx));","lastModifiedDate":"2023-01-30"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to mark a task as incomplete.","lastModifiedDate":"2023-01-22"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The current index of the task (0-based).","lastModifiedDate":"2023-01-22"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to mark the specified task as incomplete.","lastModifiedDate":"2023-01-22"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getUnmark(int idx) {","lastModifiedDate":"2023-02-03"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"            tasks.setNotDone(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"            ui.info(\"Okay, I\u0027ve marked this task as incomplete:\\n  %s\", tasks.get(idx));","lastModifiedDate":"2023-01-30"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to delete a task.","lastModifiedDate":"2023-01-22"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-01-22"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The current index of the task (0-based).","lastModifiedDate":"2023-01-22"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to delete the specified task.","lastModifiedDate":"2023-01-22"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getDelete(int idx) {","lastModifiedDate":"2023-02-03"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"            Task task \u003d tasks.remove(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"            Handler.reportDeletedTask(task, ui, tasks);","lastModifiedDate":"2023-01-21"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-21"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-21"},{"lineNumber":170,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler for finding tasks by description.","lastModifiedDate":"2023-01-22"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":"     * @param searchTerm The term(s) to search for.","lastModifiedDate":"2023-01-22"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler for finding tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":177,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":178,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getFind(String searchTerm) {","lastModifiedDate":"2023-02-03"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"            TaskList filtered \u003d tasks.filter(task -\u003e task.desc().contains(searchTerm));","lastModifiedDate":"2023-01-22"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"            if (filtered.count() \u003d\u003d 0) {","lastModifiedDate":"2023-01-22"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"No task matching the term \\\"%s\\\" found.\", searchTerm);","lastModifiedDate":"2023-01-22"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-01-22"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"Here are your task(s) containing the term \\\"%s\\\":\\n%s\", searchTerm, filtered);","lastModifiedDate":"2023-01-30"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-22"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler for unknown commands.","lastModifiedDate":"2023-01-22"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"     * @param cmd The raw unknown command.","lastModifiedDate":"2023-01-22"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to respond to the unknown command.","lastModifiedDate":"2023-01-22"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getUnknown(String cmd) {","lastModifiedDate":"2023-02-03"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"            throw new ChungusException(String.format(\"Unknown command \\\"%s\\\"\", cmd));","lastModifiedDate":"2023-01-22"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-22"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to handle tagging tasks.","lastModifiedDate":"2023-02-03"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-02-03"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"     * @param idx  The task\u0027s index.","lastModifiedDate":"2023-02-03"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"     * @param tags The tags to add.","lastModifiedDate":"2023-02-03"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to tag a task.","lastModifiedDate":"2023-02-03"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getTag(int idx, String... tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"            tasks.get(idx).addTags(tags);","lastModifiedDate":"2023-02-03"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"            StringBuilder sb \u003d new StringBuilder(String.format(\"Task %d is now tagged with\", idx + 1));","lastModifiedDate":"2023-02-03"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"            for (String tag : tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"                sb.append(\" #\").append(tag);","lastModifiedDate":"2023-02-03"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"            ui.info(sb.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-02-03"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":220,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":221,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to handle the tagall command. This command finds tasks","lastModifiedDate":"2023-02-03"},{"lineNumber":223,"author":{"gitId":"immanuelhume"},"content":"     * which match all the tags provided.","lastModifiedDate":"2023-02-03"},{"lineNumber":224,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-02-03"},{"lineNumber":225,"author":{"gitId":"immanuelhume"},"content":"     * @param tags The tags to match for.","lastModifiedDate":"2023-02-03"},{"lineNumber":226,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to find the matching tasks.","lastModifiedDate":"2023-02-03"},{"lineNumber":227,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":228,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getTagAll(String... tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":229,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":230,"author":{"gitId":"immanuelhume"},"content":"            if (tags.length \u003d\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":231,"author":{"gitId":"immanuelhume"},"content":"                ui.error(\"Please provide at least one tag!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":232,"author":{"gitId":"immanuelhume"},"content":"                return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":233,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":234,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":235,"author":{"gitId":"immanuelhume"},"content":"            TaskList tagged \u003d tasks.filter(task -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":236,"author":{"gitId":"immanuelhume"},"content":"                for (String tag : tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":237,"author":{"gitId":"immanuelhume"},"content":"                    if (!task.hasTag(tag)) {","lastModifiedDate":"2023-02-03"},{"lineNumber":238,"author":{"gitId":"immanuelhume"},"content":"                        return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":239,"author":{"gitId":"immanuelhume"},"content":"                    }","lastModifiedDate":"2023-02-03"},{"lineNumber":240,"author":{"gitId":"immanuelhume"},"content":"                }","lastModifiedDate":"2023-02-03"},{"lineNumber":241,"author":{"gitId":"immanuelhume"},"content":"                return true;","lastModifiedDate":"2023-02-03"},{"lineNumber":242,"author":{"gitId":"immanuelhume"},"content":"            });","lastModifiedDate":"2023-02-03"},{"lineNumber":243,"author":{"gitId":"immanuelhume"},"content":"            if (tagged.count() \u003d\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":244,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"No tasks found for these tags.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":245,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":246,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"I found these tagged tasks:\\n%s\", tagged);","lastModifiedDate":"2023-02-03"},{"lineNumber":247,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":248,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":249,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-02-03"},{"lineNumber":250,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":251,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":252,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":253,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler to handle the tagany command. This command finds tasks","lastModifiedDate":"2023-02-03"},{"lineNumber":254,"author":{"gitId":"immanuelhume"},"content":"     * which match at least one of the tags provided.","lastModifiedDate":"2023-02-03"},{"lineNumber":255,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-02-03"},{"lineNumber":256,"author":{"gitId":"immanuelhume"},"content":"     * @param tags The tags to match for.","lastModifiedDate":"2023-02-03"},{"lineNumber":257,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to find the matching tasks.","lastModifiedDate":"2023-02-03"},{"lineNumber":258,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":259,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getTagAny(String... tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":260,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":261,"author":{"gitId":"immanuelhume"},"content":"            if (tags.length \u003d\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":262,"author":{"gitId":"immanuelhume"},"content":"                ui.error(\"Please provide at least one tag!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":263,"author":{"gitId":"immanuelhume"},"content":"                return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":264,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":265,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":266,"author":{"gitId":"immanuelhume"},"content":"            TaskList tagged \u003d tasks.filter(task -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":267,"author":{"gitId":"immanuelhume"},"content":"                for (String tag : tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":268,"author":{"gitId":"immanuelhume"},"content":"                    if (task.hasTag(tag)) {","lastModifiedDate":"2023-02-03"},{"lineNumber":269,"author":{"gitId":"immanuelhume"},"content":"                        return true;","lastModifiedDate":"2023-02-03"},{"lineNumber":270,"author":{"gitId":"immanuelhume"},"content":"                    }","lastModifiedDate":"2023-02-03"},{"lineNumber":271,"author":{"gitId":"immanuelhume"},"content":"                }","lastModifiedDate":"2023-02-03"},{"lineNumber":272,"author":{"gitId":"immanuelhume"},"content":"                return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":273,"author":{"gitId":"immanuelhume"},"content":"            });","lastModifiedDate":"2023-02-03"},{"lineNumber":274,"author":{"gitId":"immanuelhume"},"content":"            if (tagged.count() \u003d\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":275,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"No tasks found for these tags.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":276,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":277,"author":{"gitId":"immanuelhume"},"content":"                ui.info(\"I found these tagged tasks:\\n%s\", tagged);","lastModifiedDate":"2023-02-03"},{"lineNumber":278,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":279,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":280,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-02-03"},{"lineNumber":281,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":282,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":283,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":284,"author":{"gitId":"immanuelhume"},"content":"     * Returns a handler which prints the tags a task has.","lastModifiedDate":"2023-02-03"},{"lineNumber":285,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-02-03"},{"lineNumber":286,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-02-03"},{"lineNumber":287,"author":{"gitId":"immanuelhume"},"content":"     * @return A handler to print the task\u0027s tags.","lastModifiedDate":"2023-02-03"},{"lineNumber":288,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":289,"author":{"gitId":"immanuelhume"},"content":"    public static Handler getTagSee(int idx) {","lastModifiedDate":"2023-02-03"},{"lineNumber":290,"author":{"gitId":"immanuelhume"},"content":"        return (TaskList tasks, NonBlockingUi ui, Storage storage) -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":291,"author":{"gitId":"immanuelhume"},"content":"            String[] tags \u003d tasks.get(idx).getTags();","lastModifiedDate":"2023-02-03"},{"lineNumber":292,"author":{"gitId":"immanuelhume"},"content":"            if (tags.length \u003d\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":293,"author":{"gitId":"immanuelhume"},"content":"                ui.error(\"This task has no tags.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":294,"author":{"gitId":"immanuelhume"},"content":"                return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":295,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":296,"author":{"gitId":"immanuelhume"},"content":"                StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":297,"author":{"gitId":"immanuelhume"},"content":"                sb.append(\"This task is tagged with\");","lastModifiedDate":"2023-02-03"},{"lineNumber":298,"author":{"gitId":"immanuelhume"},"content":"                for (String tag : tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":299,"author":{"gitId":"immanuelhume"},"content":"                    sb.append(\" #\").append(tag);","lastModifiedDate":"2023-02-03"},{"lineNumber":300,"author":{"gitId":"immanuelhume"},"content":"                }","lastModifiedDate":"2023-02-03"},{"lineNumber":301,"author":{"gitId":"immanuelhume"},"content":"                ui.info(sb.toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":302,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":303,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-02-03"},{"lineNumber":304,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-02-03"},{"lineNumber":305,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":306,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":306}},{"path":"src/main/java/chungus/NonBlockingUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.concurrent.atomic.AtomicBoolean;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" * Represents an abstract, basic, I/O-based user interface. Importantly, its","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":" * initialization is guaranteed not to block the caller.","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"public interface NonBlockingUi {","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     * Initializes the UI instance.","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     * @param inputHandler A lambda to apply to each line of user input.","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * @param beforeEach   Something to run before each response.","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * @param afterEach    Something to run after each response.","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * @param isRunning    Whether the app is still running.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public void init(Consumer\u003cString\u003e inputHandler, Runnable beforeEach, Runnable afterEach,","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"            AtomicBoolean isRunning);","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * Displays text.","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    public void print(String msg, Object... args);","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     * Displays text formatted for information.","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    public void info(String msg, Object... args);","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * Displays text formatted as an error.","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    public void error(String msg, Object... args);","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":45}},{"path":"src/main/java/chungus/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" * This class contains the logic needed to parse user entered commands and","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" * dispatch them to appropriate handlers.","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"class Parser {","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    private static final Pattern DEADLINE_PATTERN \u003d Pattern.compile(\"^deadline\\\\s+(.+)\\\\s+/by\\\\s+(.+)$\");","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    private static final Pattern EVENT_PATTERN \u003d Pattern.compile(\"^event\\\\s+(.+)\\\\s+/from\\\\s+(.+)\\\\s+/to\\\\s+(.+)$\");","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    private static final DateTimeFormatter DATETIME_FMT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * Parses a command, and selects a suitable handler. This is a pure function.","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * The handler returned is not safe to be ran multiple times.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @param cmd The raw command to parse.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * @return An appropriate handler for the command.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * @throws ChungusException When the expected command format is wrong.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    public static Handler parse(String cmd) {","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        String[] tokens \u003d cmd.split(\"\\\\s+\");","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        switch (tokens[0]) {","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        case \"bye\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getBye();","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        case \"list\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getList();","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        case \"todo\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"            String[] pair \u003d cmd.split(\"\\\\s+\", 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            if (pair.length \u003c 2) {","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"                throw new ChungusException(\"Description of todo cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getTodo(pair[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        case \"deadline\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"            Matcher matcher \u003d DEADLINE_PATTERN.matcher(cmd);","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"                throw new ChungusException(","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"                        \"Bad format for creating deadline task. Must be of the form deadline \u003ctask\u003e /by \u003cdatetime\u003e.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            String desc \u003d matcher.group(1);","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime deadline \u003d parseDateTimeInput(matcher.group(2));","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getDeadline(desc, deadline);","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        case \"event\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            Matcher matcher \u003d EVENT_PATTERN.matcher(cmd);","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"                throw new ChungusException(","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"                        \"Bad format for creating event.\"","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"                                + \"Must be of the form event \u003cname\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            String desc \u003d matcher.group(1);","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime from \u003d parseDateTimeInput(matcher.group(2));","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime to \u003d parseDateTimeInput(matcher.group(3));","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getEvent(desc, from, to);","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        case \"mark\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(tokens[1]) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getMark(idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        case \"unmark\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(tokens[1]) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getUnmark(idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        case \"delete\": {","lastModifiedDate":"2023-01-23"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(tokens[1]) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getDelete(idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-23"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"        case \"find\": {","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            String[] pair \u003d cmd.split(\"\\\\s+\", 2);","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"            String searchTerm \u003d \"\";","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"            if (pair.length \u003d\u003d 2) {","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"                searchTerm \u003d pair[1];","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getFind(searchTerm);","lastModifiedDate":"2023-02-03"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        case \"tag\": {","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(tokens[1]) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"            String[] tags \u003d Arrays.copyOfRange(tokens, 2, tokens.length);","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getTag(idx, tags);","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        case \"tagall\": {","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"            String[] tags \u003d Arrays.copyOfRange(tokens, 1, tokens.length);","lastModifiedDate":"2023-02-03"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getTagAll(tags);","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        case \"tagany\": {","lastModifiedDate":"2023-02-03"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"            String[] tags \u003d Arrays.copyOfRange(tokens, 1, tokens.length);","lastModifiedDate":"2023-02-03"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getTagAny(tags);","lastModifiedDate":"2023-02-03"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"        case \"tagsee\": {","lastModifiedDate":"2023-02-03"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d getTaskNumberArg(tokens[1]) - 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getTagSee(idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"        default: {","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"            return Handlers.getUnknown(tokens[0]);","lastModifiedDate":"2023-02-03"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"    private static LocalDateTime parseDateTimeInput(String s) {","lastModifiedDate":"2023-01-22"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-22"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"            return LocalDateTime.parse(s, DATETIME_FMT);","lastModifiedDate":"2023-01-22"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-22"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"            throw new ChungusException(String.format(\"Bad datetime format \\\"%s\\\": expected dd/MM/yyyy HHmm\", s), e);","lastModifiedDate":"2023-01-22"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"    private static int getTaskNumberArg(String s) {","lastModifiedDate":"2023-01-22"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"            int num \u003d Integer.parseInt(s);","lastModifiedDate":"2023-02-03"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"            return num;","lastModifiedDate":"2023-01-22"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"            throw new ChungusException(String.format(\"Expected a number\"), e);","lastModifiedDate":"2023-02-03"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":129}},{"path":"src/main/java/chungus/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.File;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-21"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":" * Helps manage storage of tasks to disk.","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"class Storage {","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    private File file;","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for Storage.","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * @param file The file to use for reading and writing of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public Storage(File file) {","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * Reads tasks from disk.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * @return A list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     * @throws IOException When reading the file fails.","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    public TaskList read() throws IOException {","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        return new TaskList(Files.readAllLines(file.toPath())","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"                .stream()","lastModifiedDate":"2023-01-21"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"                .map(line -\u003e Task.unmarshal(line))","lastModifiedDate":"2023-01-21"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-01-21"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     * Writes a list of task to disk. This overrides the old contents of the file,","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * so make sure the full list is provided each time.","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks A list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException When writing to disk fails.","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    public void write(TaskList tasks) {","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"            Files.write(file.toPath(), tasks.marshal().getBytes());","lastModifiedDate":"2023-01-21"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(\"Failed to save tasks to file\", e);","lastModifiedDate":"2023-01-21"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":50}},{"path":"src/main/java/chungus/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import chungus.util.Pair;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * Represents a task.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"abstract class Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private String desc;","lastModifiedDate":"2023-01-14"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-14"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    protected HashSet\u003cString\u003e tags;","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    protected static final DateTimeFormatter DATETIME_FMT \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a task. All tasks require a description.","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    public Task(String desc) {","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-14"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * Returns a user-friendly format of the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * @return A user-friendly format of the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    protected String format() {","lastModifiedDate":"2023-01-20"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        return (isDone() ? \"[X] \" : \"[ ] \") + desc;","lastModifiedDate":"2023-01-14"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * Returns whether the task is complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"     * @return Whether the task is complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        return isDone;","lastModifiedDate":"2023-01-14"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     * Marks the task as complete.","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    public void setDone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-14"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"     * Marks the task as incomplete.","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    public void setNotDone() {","lastModifiedDate":"2023-01-14"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-14"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"     * Retrieves the raw description for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"     * @return The raw description.","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    public String desc() {","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        return desc;","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"    public abstract String toString();","lastModifiedDate":"2023-01-14"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"     * Serialies the task to make it suitable for storing to disk.","lastModifiedDate":"2023-01-22"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"     * @return The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"    public abstract String marshal();","lastModifiedDate":"2023-01-20"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce a task.","lastModifiedDate":"2023-01-22"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"     * @return The task.","lastModifiedDate":"2023-01-22"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"    public static Task unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        assert s.length() \u003e 1;","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        char typ \u003d s.charAt(0);","lastModifiedDate":"2023-01-20"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"        switch (typ) {","lastModifiedDate":"2023-01-20"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2023-01-20"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"            return Todo.unmarshal(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2023-01-20"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"            return Deadline.unmarshal(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2023-01-20"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"            return Event.unmarshal(s);","lastModifiedDate":"2023-01-20"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        default:","lastModifiedDate":"2023-01-20"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"            throw new TaskMarshalException(s);","lastModifiedDate":"2023-01-22"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"     * Throws an exception if the condition is false. Just a convenience method.","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"     * @param cond The boolean condition.","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"     * @param t    The exception to throw.","lastModifiedDate":"2023-01-22"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"    protected static void trueOrThrow(boolean cond, RuntimeException t) {","lastModifiedDate":"2023-01-20"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"        if (!cond) {","lastModifiedDate":"2023-01-20"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"            throw t;","lastModifiedDate":"2023-01-20"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"    public boolean hasTag(String tag) {","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"        return tags.contains(tag);","lastModifiedDate":"2023-02-03"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"    public void addTags(String... tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        for (String tag : tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"            this.tags.add(tag);","lastModifiedDate":"2023-02-03"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"    protected String chonkifyTags() {","lastModifiedDate":"2023-02-03"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-03"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"        for (String tag : tags) {","lastModifiedDate":"2023-02-03"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"            sb.append(Chonk.chonkify(tag));","lastModifiedDate":"2023-02-03"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-03"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"    protected static HashSet\u003cString\u003e dechonkifyTags(String s, int idx) {","lastModifiedDate":"2023-02-03"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"        Pair\u003cString, Integer\u003e dechonked;","lastModifiedDate":"2023-02-03"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-02-03"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"        while (idx \u003c s.length()) {","lastModifiedDate":"2023-02-03"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"            dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"            trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-02-03"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"            String tag \u003d dechonked.first();","lastModifiedDate":"2023-02-03"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"            idx \u003d dechonked.second();","lastModifiedDate":"2023-02-03"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"            tags.add(tag);","lastModifiedDate":"2023-02-03"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"        return tags;","lastModifiedDate":"2023-02-03"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"    public String[] getTags() {","lastModifiedDate":"2023-02-03"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"        return tags.stream().toArray(String[]::new);","lastModifiedDate":"2023-02-03"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":" * A todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"class Todo extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"    public Todo(String desc) {","lastModifiedDate":"2023-01-14"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"        super(desc);","lastModifiedDate":"2023-01-14"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":170,"author":{"gitId":"immanuelhume"},"content":"        return \"[T]\" + format();","lastModifiedDate":"2023-01-20"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-20"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder b \u003d new StringBuilder();","lastModifiedDate":"2023-01-21"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":177,"author":{"gitId":"immanuelhume"},"content":"        b.append(\u0027T\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":178,"author":{"gitId":"immanuelhume"},"content":"        b.append(isDone() ? \u00271\u0027 : \u00270\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(desc()));","lastModifiedDate":"2023-02-03"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"        b.append(chonkifyTags());","lastModifiedDate":"2023-02-03"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"        return b.toString();","lastModifiedDate":"2023-01-21"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce a todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"     * @return The todo.","lastModifiedDate":"2023-01-22"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"    public static Todo unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(s.charAt(0) \u003d\u003d \u0027T\u0027, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"        boolean isDone \u003d s.charAt(1) \u003d\u003d \u00270\u0027 ? false : true;","lastModifiedDate":"2023-01-20"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"        int idx \u003d 2;","lastModifiedDate":"2023-02-03"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"        Pair\u003cString, Integer\u003e dechonked;","lastModifiedDate":"2023-02-03"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"        // Dechonk the description","lastModifiedDate":"2023-02-03"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-02-03"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        String desc \u003d dechonked.first();","lastModifiedDate":"2023-02-03"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-02-03"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"        Todo ret \u003d new Todo(desc);","lastModifiedDate":"2023-01-20"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"        // Dechonk the tags","lastModifiedDate":"2023-02-03"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"        ret.tags \u003d dechonkifyTags(s, idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-20"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"            ret.setDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"            ret.setNotDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-14"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-20"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":220,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":221,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof Todo)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":223,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":224,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":225,"author":{"gitId":"immanuelhume"},"content":"        Todo otherTodo \u003d (Todo) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":226,"author":{"gitId":"immanuelhume"},"content":"        return this.desc().equals(otherTodo.desc());","lastModifiedDate":"2023-01-22"},{"lineNumber":227,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":228,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":229,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":230,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":231,"author":{"gitId":"immanuelhume"},"content":" * A task with deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":232,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":233,"author":{"gitId":"immanuelhume"},"content":"class Deadline extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":234,"author":{"gitId":"immanuelhume"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":235,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":236,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":237,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a deadline task.","lastModifiedDate":"2023-01-22"},{"lineNumber":238,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":239,"author":{"gitId":"immanuelhume"},"content":"     * @param desc     The task\u0027s description.","lastModifiedDate":"2023-01-22"},{"lineNumber":240,"author":{"gitId":"immanuelhume"},"content":"     * @param deadline Deadline for the task.","lastModifiedDate":"2023-01-22"},{"lineNumber":241,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":242,"author":{"gitId":"immanuelhume"},"content":"    public Deadline(String desc, LocalDateTime deadline) {","lastModifiedDate":"2023-01-22"},{"lineNumber":243,"author":{"gitId":"immanuelhume"},"content":"        super(desc);","lastModifiedDate":"2023-01-14"},{"lineNumber":244,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-22"},{"lineNumber":245,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":246,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":247,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":248,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":249,"author":{"gitId":"immanuelhume"},"content":"        return \"[D]\" + format() + String.format(\" (by: %s)\", deadline);","lastModifiedDate":"2023-01-20"},{"lineNumber":250,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":251,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":252,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":253,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-20"},{"lineNumber":254,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder b \u003d new StringBuilder();","lastModifiedDate":"2023-01-21"},{"lineNumber":255,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":256,"author":{"gitId":"immanuelhume"},"content":"        b.append(\u0027D\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":257,"author":{"gitId":"immanuelhume"},"content":"        b.append(isDone() ? \u00271\u0027 : \u00270\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":258,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(desc()));","lastModifiedDate":"2023-01-21"},{"lineNumber":259,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(deadline.format(DATETIME_FMT)));","lastModifiedDate":"2023-01-22"},{"lineNumber":260,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":261,"author":{"gitId":"immanuelhume"},"content":"        b.append(chonkifyTags());","lastModifiedDate":"2023-02-03"},{"lineNumber":262,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":263,"author":{"gitId":"immanuelhume"},"content":"        return b.toString();","lastModifiedDate":"2023-01-21"},{"lineNumber":264,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":265,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":266,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":267,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce a task with deadline.","lastModifiedDate":"2023-01-22"},{"lineNumber":268,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":269,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":270,"author":{"gitId":"immanuelhume"},"content":"     * @return The deadline task.","lastModifiedDate":"2023-01-22"},{"lineNumber":271,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":272,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":273,"author":{"gitId":"immanuelhume"},"content":"    public static Deadline unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":274,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(s.charAt(0) \u003d\u003d \u0027D\u0027, new TaskMarshalException(s));","lastModifiedDate":"2023-02-03"},{"lineNumber":275,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":276,"author":{"gitId":"immanuelhume"},"content":"        int idx \u003d 2;","lastModifiedDate":"2023-01-20"},{"lineNumber":277,"author":{"gitId":"immanuelhume"},"content":"        Pair\u003cString, Integer\u003e dechonked;","lastModifiedDate":"2023-01-20"},{"lineNumber":278,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":279,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":280,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":281,"author":{"gitId":"immanuelhume"},"content":"        String desc \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":282,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-01-20"},{"lineNumber":283,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":284,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":285,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":286,"author":{"gitId":"immanuelhume"},"content":"        String deadline \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":287,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-02-03"},{"lineNumber":288,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":289,"author":{"gitId":"immanuelhume"},"content":"        Deadline ret \u003d new Deadline(desc, LocalDateTime.parse(deadline, DATETIME_FMT));","lastModifiedDate":"2023-01-22"},{"lineNumber":290,"author":{"gitId":"immanuelhume"},"content":"        boolean isDone \u003d s.charAt(1) \u003d\u003d \u00270\u0027 ? false : true;","lastModifiedDate":"2023-01-22"},{"lineNumber":291,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":292,"author":{"gitId":"immanuelhume"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-20"},{"lineNumber":293,"author":{"gitId":"immanuelhume"},"content":"            ret.setDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":294,"author":{"gitId":"immanuelhume"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":295,"author":{"gitId":"immanuelhume"},"content":"            ret.setNotDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":296,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":297,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":298,"author":{"gitId":"immanuelhume"},"content":"        // Dechonk the tags","lastModifiedDate":"2023-02-03"},{"lineNumber":299,"author":{"gitId":"immanuelhume"},"content":"        ret.tags \u003d dechonkifyTags(s, idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":300,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":301,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-20"},{"lineNumber":302,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":303,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":304,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":305,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":306,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof Deadline)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":307,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":308,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":309,"author":{"gitId":"immanuelhume"},"content":"        Deadline otherDeadline \u003d (Deadline) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":310,"author":{"gitId":"immanuelhume"},"content":"        return this.desc().equals(otherDeadline.desc()) \u0026\u0026 this.deadline.equals(otherDeadline.deadline);","lastModifiedDate":"2023-01-22"},{"lineNumber":311,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":312,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-20"},{"lineNumber":313,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":314,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":315,"author":{"gitId":"immanuelhume"},"content":" * An event.","lastModifiedDate":"2023-01-22"},{"lineNumber":316,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":317,"author":{"gitId":"immanuelhume"},"content":"class Event extends Task {","lastModifiedDate":"2023-01-14"},{"lineNumber":318,"author":{"gitId":"immanuelhume"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-01-22"},{"lineNumber":319,"author":{"gitId":"immanuelhume"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-01-22"},{"lineNumber":320,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":321,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":322,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for an event.","lastModifiedDate":"2023-01-22"},{"lineNumber":323,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":324,"author":{"gitId":"immanuelhume"},"content":"     * @param desc Description for the event.","lastModifiedDate":"2023-01-22"},{"lineNumber":325,"author":{"gitId":"immanuelhume"},"content":"     * @param from When the event starts.","lastModifiedDate":"2023-01-22"},{"lineNumber":326,"author":{"gitId":"immanuelhume"},"content":"     * @param to   When the event ends.","lastModifiedDate":"2023-01-22"},{"lineNumber":327,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":328,"author":{"gitId":"immanuelhume"},"content":"    public Event(String desc, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-22"},{"lineNumber":329,"author":{"gitId":"immanuelhume"},"content":"        super(desc);","lastModifiedDate":"2023-01-14"},{"lineNumber":330,"author":{"gitId":"immanuelhume"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-22"},{"lineNumber":331,"author":{"gitId":"immanuelhume"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-22"},{"lineNumber":332,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":333,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-14"},{"lineNumber":334,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-14"},{"lineNumber":335,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-01-14"},{"lineNumber":336,"author":{"gitId":"immanuelhume"},"content":"        return \"[E]\" + format() + String.format(\" (from: %s to: %s)\", from, to);","lastModifiedDate":"2023-01-20"},{"lineNumber":337,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":338,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":339,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":340,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-20"},{"lineNumber":341,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder b \u003d new StringBuilder();","lastModifiedDate":"2023-01-21"},{"lineNumber":342,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":343,"author":{"gitId":"immanuelhume"},"content":"        b.append(\u0027E\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":344,"author":{"gitId":"immanuelhume"},"content":"        b.append(isDone() ? \u00271\u0027 : \u00270\u0027);","lastModifiedDate":"2023-01-21"},{"lineNumber":345,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(desc()));","lastModifiedDate":"2023-01-21"},{"lineNumber":346,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(from.format(DATETIME_FMT)));","lastModifiedDate":"2023-01-22"},{"lineNumber":347,"author":{"gitId":"immanuelhume"},"content":"        b.append(Chonk.chonkify(to.format(DATETIME_FMT)));","lastModifiedDate":"2023-01-22"},{"lineNumber":348,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":349,"author":{"gitId":"immanuelhume"},"content":"        b.append(chonkifyTags());","lastModifiedDate":"2023-02-03"},{"lineNumber":350,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":351,"author":{"gitId":"immanuelhume"},"content":"        return b.toString();","lastModifiedDate":"2023-01-21"},{"lineNumber":352,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":353,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":354,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":355,"author":{"gitId":"immanuelhume"},"content":"     * Tries to deserialize a string to produce an event.","lastModifiedDate":"2023-01-22"},{"lineNumber":356,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":357,"author":{"gitId":"immanuelhume"},"content":"     * @param s The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":358,"author":{"gitId":"immanuelhume"},"content":"     * @return The event object.","lastModifiedDate":"2023-01-22"},{"lineNumber":359,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskMarshalException If the string is invalid.","lastModifiedDate":"2023-01-22"},{"lineNumber":360,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":361,"author":{"gitId":"immanuelhume"},"content":"    public static Event unmarshal(String s) {","lastModifiedDate":"2023-01-20"},{"lineNumber":362,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(s.charAt(0) \u003d\u003d \u0027E\u0027, new TaskMarshalException(s));","lastModifiedDate":"2023-02-03"},{"lineNumber":363,"author":{"gitId":"immanuelhume"},"content":"        boolean isDone \u003d s.charAt(1) \u003d\u003d \u00270\u0027 ? false : true;","lastModifiedDate":"2023-01-20"},{"lineNumber":364,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":365,"author":{"gitId":"immanuelhume"},"content":"        int idx \u003d 2;","lastModifiedDate":"2023-01-20"},{"lineNumber":366,"author":{"gitId":"immanuelhume"},"content":"        Pair\u003cString, Integer\u003e dechonked;","lastModifiedDate":"2023-01-20"},{"lineNumber":367,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":368,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":369,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":370,"author":{"gitId":"immanuelhume"},"content":"        String desc \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":371,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-01-20"},{"lineNumber":372,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":373,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":374,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":375,"author":{"gitId":"immanuelhume"},"content":"        String from \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":376,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-01-20"},{"lineNumber":377,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":378,"author":{"gitId":"immanuelhume"},"content":"        dechonked \u003d Chonk.dechonkify(s, idx);","lastModifiedDate":"2023-01-20"},{"lineNumber":379,"author":{"gitId":"immanuelhume"},"content":"        trueOrThrow(dechonked !\u003d null, new TaskMarshalException(s));","lastModifiedDate":"2023-01-20"},{"lineNumber":380,"author":{"gitId":"immanuelhume"},"content":"        String to \u003d dechonked.first();","lastModifiedDate":"2023-01-20"},{"lineNumber":381,"author":{"gitId":"immanuelhume"},"content":"        idx \u003d dechonked.second();","lastModifiedDate":"2023-02-03"},{"lineNumber":382,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":383,"author":{"gitId":"immanuelhume"},"content":"        Event ret \u003d new Event(desc, LocalDateTime.parse(from, DATETIME_FMT), LocalDateTime.parse(to, DATETIME_FMT));","lastModifiedDate":"2023-01-22"},{"lineNumber":384,"author":{"gitId":"immanuelhume"},"content":"        if (isDone) {","lastModifiedDate":"2023-01-20"},{"lineNumber":385,"author":{"gitId":"immanuelhume"},"content":"            ret.setDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":386,"author":{"gitId":"immanuelhume"},"content":"        } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":387,"author":{"gitId":"immanuelhume"},"content":"            ret.setNotDone();","lastModifiedDate":"2023-01-20"},{"lineNumber":388,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":389,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":390,"author":{"gitId":"immanuelhume"},"content":"        // Dechonk the tags","lastModifiedDate":"2023-02-03"},{"lineNumber":391,"author":{"gitId":"immanuelhume"},"content":"        ret.tags \u003d dechonkifyTags(s, idx);","lastModifiedDate":"2023-02-03"},{"lineNumber":392,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":393,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-20"},{"lineNumber":394,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-14"},{"lineNumber":395,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":396,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":397,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":398,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":399,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":400,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":401,"author":{"gitId":"immanuelhume"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":402,"author":{"gitId":"immanuelhume"},"content":"        return this.desc().equals(otherEvent.desc()) \u0026\u0026 this.from.equals(otherEvent.from)","lastModifiedDate":"2023-01-22"},{"lineNumber":403,"author":{"gitId":"immanuelhume"},"content":"                \u0026\u0026 this.to.equals(otherEvent.to);","lastModifiedDate":"2023-01-22"},{"lineNumber":404,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":405,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"immanuelhume":405}},{"path":"src/main/java/chungus/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.BiConsumer;","lastModifiedDate":"2023-01-21"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * Wraps a list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"class TaskList {","lastModifiedDate":"2023-01-21"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-21"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * Another constructor for a task list.","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * @param tasks A list of tasks.","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * Runs some observer function for each task in the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * @param f Some biconsumer function. The second argument is the task\u0027s index in","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     *          the internal list.","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    public void forEach(BiConsumer\u003cTask, Integer\u003e f) {","lastModifiedDate":"2023-01-21"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-21"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"            f.accept(tasks.get(i), i);","lastModifiedDate":"2023-01-21"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     * Creates a new task list by applying some predicate to the current list.","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     * @param f The predicate to apply.","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"     * @return The new filtered list.","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    public TaskList filter(Predicate\u003cTask\u003e f) {","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        return new TaskList(tasks.stream().filter(f).collect(Collectors.toList()));","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"     * Converts the entire list into a serialized representation.","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"     * @return The serialized string.","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"    public String marshal() {","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        return tasks.stream()","lastModifiedDate":"2023-01-21"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"                .map(task -\u003e task.marshal())","lastModifiedDate":"2023-01-21"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"                .collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2023-01-21"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"    public int count() {","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-21"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-01-22"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"     * @param task The new task to add.","lastModifiedDate":"2023-01-22"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-01-21"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-21"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"     * Retrieves a task by index.","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"     * @return The actual task.","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"     * @throws TaskNotFoundException If the index is out of bounds.","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"    public Task get(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-21"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"            return tasks.get(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-21"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"            throw new TaskNotFoundException(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"    public void setDone(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"        get(idx).setDone();","lastModifiedDate":"2023-01-21"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"     * Marks a task as not done.","lastModifiedDate":"2023-02-11"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"    public void setNotDone(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"        get(idx).setNotDone();","lastModifiedDate":"2023-01-21"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"     * Removes a task and returns it.","lastModifiedDate":"2023-01-22"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"     * @param idx The task\u0027s index.","lastModifiedDate":"2023-01-22"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"     * @return The removed task.","lastModifiedDate":"2023-01-22"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"    public Task remove(int idx) {","lastModifiedDate":"2023-01-21"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        Task ret \u003d get(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        tasks.remove(idx);","lastModifiedDate":"2023-01-21"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"        return ret;","lastModifiedDate":"2023-01-21"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-01-30"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-01-30"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"        forEach((task, idx) -\u003e sb.append(String.format(\"  %d.%s\\n\", idx + 1, task)));","lastModifiedDate":"2023-01-30"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"        return sb.toString();","lastModifiedDate":"2023-01-30"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-01-22"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-02-03"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"        if (!(other instanceof TaskList)) {","lastModifiedDate":"2023-01-22"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"        TaskList otherList \u003d (TaskList) other;","lastModifiedDate":"2023-01-22"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"        if (this.tasks.size() !\u003d otherList.tasks.size()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"            if (!(this.tasks.get(i).equals(otherList.tasks.get(i)))) {","lastModifiedDate":"2023-01-22"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"                return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"        return true;","lastModifiedDate":"2023-01-22"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"immanuelhume":158}},{"path":"src/main/java/chungus/fxui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.fxui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import chungus.ChungusException;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.text.TextAlignment;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"class DialogBox extends HBox {","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    private Label text;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    public DialogBox(String text, Image image) {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        fxmlLoader.setRoot(this);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            throw new ChungusException(\"failed to load fxml for DialogBox\", e);","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        this.text.setText(text);","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        this.displayPicture.setImage(image);","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    public DialogBox(Image image, String text) {","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        this(text, image);","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        flip();","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        this.text.setTextAlignment(TextAlignment.LEFT);","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     * right.","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    private void flip() {","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"immanuelhume":58}},{"path":"src/main/java/chungus/fxui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.fxui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"public class Launcher {","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"     * Runs Chungus, with the JavaFX GUI.","lastModifiedDate":"2023-02-11"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"     * @param args Command line arguments","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"immanuelhume":14}},{"path":"src/main/java/chungus/fxui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.fxui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import chungus.Chungus;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"public class Main extends Application {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private Chungus chungus;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    private static final double DEFAULT_W \u003d 400.0;","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    private static final double DEFAULT_H \u003d 600.0;","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    public void start(Stage primaryStage) throws Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        AnchorPane ap;","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"            ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"            return;","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        assert ap.getPrefHeight() \u003d\u003d DEFAULT_H;","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        assert ap.getPrefWidth() \u003d\u003d DEFAULT_W;","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        primaryStage.setScene(scene);","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        MainWindow mainWindow \u003d fxmlLoader.\u003cMainWindow\u003egetController();","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        if (chungus \u003d\u003d null) {","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"            chungus \u003d new Chungus(mainWindow, Chungus.DEFAULT_DB_PATH);","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        new Thread(() -\u003e chungus.spin(() -\u003e {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        }, () -\u003e {","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        })).start();","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        primaryStage.setMinHeight(DEFAULT_H);","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        primaryStage.setMinWidth(DEFAULT_W);","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        primaryStage.show();","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    public void stop() {","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        chungus.stop();","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"immanuelhume":58}},{"path":"src/main/java/chungus/fxui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.fxui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.concurrent.atomic.AtomicBoolean;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import chungus.NonBlockingUi;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"public class MainWindow extends AnchorPane implements NonBlockingUi {","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    private TextField userInput;","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    private Button sendButton;","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    private Image chungusImage \u003d new Image(getClass().getResourceAsStream(\"/images/chungus.png\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    private Image dogeImage \u003d new Image(getClass().getResourceAsStream(\"/images/doge.png\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    @FXML","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    public void initialize() {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public void init(Consumer\u003cString\u003e inputHandler, Runnable beforeEach, Runnable afterEach,","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"            AtomicBoolean isRunning) {","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        Runnable handleInput \u003d () -\u003e {","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"            String cmd \u003d userInput.getText();","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"            if (cmd.length() \u003d\u003d 0) {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"                return;","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            userInput.clear();","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            dialogContainer.getChildren().add(new DialogBox(cmd, dogeImage));","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            beforeEach.run();","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"            inputHandler.accept(cmd);","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            afterEach.run();","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        };","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        sendButton.setOnMouseClicked(event -\u003e handleInput.run());","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        userInput.setOnKeyPressed(keyEvent -\u003e {","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"            if (keyEvent.getCode().equals(KeyCode.ENTER)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"                handleInput.run();","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"    public void print(String msg, Object... args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        String reply \u003d String.format(msg, args);","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        dialogContainer.getChildren().add(new DialogBox(chungusImage, reply));","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"    public void info(String msg, Object... args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        print(msg, args);","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    public void error(String msg, Object... args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        print(msg, args);","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"immanuelhume":80}},{"path":"src/main/java/chungus/textui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.textui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.io.OutputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.io.Writer;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import java.util.concurrent.atomic.AtomicBoolean;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import chungus.NonBlockingUi;","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":" * A simple console based UI.","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"public class TextUi implements NonBlockingUi {","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    private Scanner in;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    private Writer out;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a Ui. By default, stdin and stdout are used for I/O.","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    public TextUi() {","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        out \u003d new PrintWriter(System.out);","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     * Another constructor for Ui which specifies the input and output sources.","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * @param in  Some input.","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * @param out Some output.","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"    public TextUi(InputStream in, OutputStream out) {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        this.out \u003d new PrintWriter(out);","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    public void init(Consumer\u003cString\u003e inputHandler, Runnable before, Runnable after, AtomicBoolean isRunning) {","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        new Thread(() -\u003e {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"            while (isRunning.get()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"                before.run();","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"                inputHandler.accept(in.nextLine().trim());","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"                after.run();","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        }).start();","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"     * Prints something to the output with no special formatting.","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException If some I/O exception occurs.","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"    public void print(String msg, Object... args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            out.append(String.format(msg, args)).flush();","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"     * Displays something and formats it as \"information\".","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException If some I/O exception occurs.","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    public void info(String msg, Object... args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"            out.append(\"\\u001b[36m\")","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"                    .append(String.format(msg, args))","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"                    .append(\u0027\\n\u0027)","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"                    .append(\"\\u001b[0m\")","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"                    .flush();","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"     * Displays something and formats it as an error.","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"     * @param msg  A format string.","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"     * @param args Arguments for the format string.","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"     * @throws RuntimeException If some I/O exception occurs.","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"    public void error(String msg, Object... args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"            out.append(\"\\u001b[31m\")","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"                    .append(String.format(msg, args))","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"                    .append(\u0027\\n\u0027)","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"                    .append(\"\\u001b[0m\")","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"                    .flush();","lastModifiedDate":"2023-01-30"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-01-30"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"immanuelhume":109}},{"path":"src/main/java/chungus/util/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.util;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * A general pair class.","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class Pair\u003cS, T\u003e {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    private final S first;","lastModifiedDate":"2023-02-05"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"    private final T second;","lastModifiedDate":"2023-02-05"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"     * Constructor for a pair.","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     * @param first  The first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     * @param second The second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    public Pair(S first, T second) {","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"        this.first \u003d first;","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"        this.second \u003d second;","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * Gets the first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * @return The first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    public S first() {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        return first;","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     * Gets the second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * @return The second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"    public T second() {","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        return second;","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     * Builds a pair. Just a convenience method","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * ","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     * @param first  The first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"     * @param second The second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"     * @param \u003cS\u003e    Type for the first item.","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     * @param \u003cT\u003e    Type for the second item.","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"     * @return The new pair.","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    public static \u003cS, T\u003e Pair\u003cS, T\u003e of(S first, T second) {","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        return new Pair\u003c\u003e(first, second);","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":51}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" spacing\u003d\"8.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"\t\u003cLabel fx:id\u003d\"text\" text\u003d\"Label\" textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"32.0\" fitWidth\u003d\"32.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"immanuelhume":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"chungus.fxui.MainWindow\"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" /\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"      \u003c/content\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"immanuelhume":19}},{"path":"src/test/java/chungus/ChonkTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import chungus.util.Pair;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"public class ChonkTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private List\u003cPair\u003cString, String\u003e\u003e tests \u003d List.of(","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\"foobar\", \"6 foobar\"),","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\"foo bar\", \"7 foo bar\"),","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\"\", \"0 \"),","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(\" \", \"1  \"));","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public void chonkify() {","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        for (Pair\u003cString, String\u003e tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"            String in \u003d tt.first();","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"            String want \u003d tt.second();","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"            String got \u003d Chonk.chonkify(in);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(want, got);","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    public void dechonkify_singleChonks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        for (Pair\u003cString, String\u003e tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            String in \u003d tt.second();","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            String want \u003d tt.first();","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            Pair\u003cString, Integer\u003e res \u003d Chonk.dechonkify(in, 0);","lastModifiedDate":"2023-01-22"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(want, res.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(in.length(), res.second());","lastModifiedDate":"2023-01-22"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public void dechonkify_multipleChonks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        List\u003cPair\u003cString, List\u003cString\u003e\u003e\u003e tests \u003d List.of(","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"3 foo3 bar\", List.of(\"foo\", \"bar\")),","lastModifiedDate":"2023-01-22"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"3 foo7 bar baz\", List.of(\"foo\", \"bar baz\")),","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"3 foo0\", List.of(\"foo\", \"\")));","lastModifiedDate":"2023-01-22"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        for (Pair\u003cString, List\u003cString\u003e\u003e tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            String in \u003d tt.first();","lastModifiedDate":"2023-01-22"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            int idx \u003d 0;","lastModifiedDate":"2023-01-22"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            for (String want : tt.second()) {","lastModifiedDate":"2023-01-22"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"                Pair\u003cString, Integer\u003e dechonked \u003d Chonk.dechonkify(in, idx);","lastModifiedDate":"2023-01-22"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"                assertNotNull(dechonked);","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"                assertEquals(want, dechonked.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"                idx \u003d dechonked.second();","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-01-22"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    public void dechonkify_invalidChonks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        List\u003cString\u003e tests \u003d List.of(","lastModifiedDate":"2023-01-22"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"                \"foobar\", // no length value","lastModifiedDate":"2023-01-22"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"                \"ジャワ\",","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"                \"4foo\", // no space after length","lastModifiedDate":"2023-01-22"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"                \"4 foo\" // length is too large","lastModifiedDate":"2023-01-22"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-01-22"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        for (String tt : tests) {","lastModifiedDate":"2023-01-22"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            Pair\u003cString, Integer\u003e got \u003d Chonk.dechonkify(tt, 0);","lastModifiedDate":"2023-01-22"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            assertNull(got);","lastModifiedDate":"2023-01-22"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":71}},{"path":"src/test/java/chungus/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.io.File;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"public class StorageTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    private static final Todo SAMPLE_TODO \u003d new Todo(\"eliminate the working class\");","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private static final Deadline SAMPLE_DEADLINE \u003d new Deadline(\"eliminate the middle class\", LocalDateTime.now());","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    private static final Event SAMPLE_EVENT \u003d new Event(\"eliminate the top 1%\", LocalDateTime.now(),","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"            LocalDateTime.now().plusDays(2));","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public void canReadAndWrite() throws IOException {","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"        // Write a bunch of tasks to a temporary file, then read them out. Check that","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        // the same tasks are retrieved.","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(SAMPLE_TODO);","lastModifiedDate":"2023-01-22"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(SAMPLE_DEADLINE);","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        tasks.add(SAMPLE_EVENT);","lastModifiedDate":"2023-01-22"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        File tmpFile \u003d File.createTempFile(\"Chungus-\", \".tmp.db\");","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        Storage st \u003d new Storage(tmpFile);","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        st.write(tasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        TaskList sameTasks \u003d st.read();","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(tasks, sameTasks);","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":34}},{"path":"src/test/java/chungus/util/PairTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package chungus.util;","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"public class PairTest {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    public void itWorks() {","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"        Integer[] xs \u003d { 1, 2, 3 };","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"        String[] ys \u003d { \"a\", \"b\", \"c\" };","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"        for (int i \u003d 0; i \u003c Math.min(xs.length, ys.length); i++) {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"            Pair\u003cInteger, String\u003e pair \u003d new Pair\u003c\u003e(xs[i], ys[i]);","lastModifiedDate":"2023-01-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(xs[i], pair.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(ys[i], pair.second());","lastModifiedDate":"2023-01-22"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"            pair \u003d Pair.of(xs[i], ys[i]);","lastModifiedDate":"2023-01-22"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(xs[i], pair.first());","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(ys[i], pair.second());","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"immanuelhume":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"todo go to the moon","lastModifiedDate":"2023-01-14"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"deadline pirate games /by this Friday ","lastModifiedDate":"2023-01-14"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"event Trump\u0027s wedding /from 1 Oct. 1989 /to 2 Oct. 1989","lastModifiedDate":"2023-01-14"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"mark 1","lastModifiedDate":"2023-01-14"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"unmark 1","lastModifiedDate":"2023-01-14"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"mark 2","lastModifiedDate":"2023-01-14"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"unmark 2","lastModifiedDate":"2023-01-14"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"mark 3","lastModifiedDate":"2023-01-14"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"unmark 3","lastModifiedDate":"2023-01-14"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"pull for Raiden Shogun","lastModifiedDate":"2023-01-14"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"deadline build a house","lastModifiedDate":"2023-01-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"event Ivanka\u0027s wedding /from 1 Oct. 1989","lastModifiedDate":"2023-01-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"bye","lastModifiedDate":"2023-01-14"}],"authorContributionMap":{"immanuelhume":13}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"java -classpath ../bin Chungus \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"immanuelhume":1}}]
