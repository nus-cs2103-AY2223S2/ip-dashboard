[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"    mainClassName \u003d \"Miki\"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"    archiveBaseName \u003d \"miki\"","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":39,"jefrai":2}},{"path":"src/main/java/Miki.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"import command.Command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import task.Parser;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" * Main class of the Miki personal-task manager project.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":" * In honor of Fuzuki Miki.","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"public class Miki {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * Main function of the Miki project.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     * @param args command-line arguments from the initial program call.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        boolean hasAsciiOnly \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"        boolean hasNoAutoload \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"            if (args[i].equals(\"--ascii-only\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"                hasAsciiOnly \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"            if (args[i].equals(\"--no-autoload\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"                hasNoAutoload \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        Ui ui \u003d new Ui(hasAsciiOnly);","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"        Storage storage \u003d new Storage(\"./data/\");","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"        ui.printIntro();","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"        if (!hasNoAutoload) {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"                storage.load(\"autosave.txt\", tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"            } catch (IOException | Storage.MikiLoadException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"        String cmdLine \u003d \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"        while (!Parser.isExitCommand(cmdLine)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"            cmdLine \u003d ui.readLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"            Command cmd \u003d Parser.parse(cmdLine);","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"            ui.printDiv();","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"            cmd.run(tasks, ui, storage);","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"            ui.printDiv();","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"            try {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"                storage.save(\"autosave.txt\", tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"            } catch (IOException ex) {","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jefrai":59}},{"path":"src/main/java/command/AddTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" * A command adding a \u003ccode\u003eTask\u003c/code\u003e to a \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"public class AddTask implements Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    private final Task task;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * Creates an add-task command.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     * @param task task to be added.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public AddTask(Task task) {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        ui.print(\"Added this thing! That makes \" + tasks.size() + (tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\") + \":\");","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"        ui.print(\"  \" + task.toString());","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":29}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":" * A command containing an action on one or more Miki components.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"public interface Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"     * Performs the action of this command.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"     * @param tasks   tasklist to perform the action on.","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * @param ui      ui to perform the action on.","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     * @param storage storage to perform the action on.","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"    void run(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":19}},{"path":"src/main/java/command/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskListIndexException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" * A command deleting a \u003ccode\u003eTask\u003c/code\u003e at a specified index of a \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"public class Delete implements Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"    private final int idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     * Creates a delete-task command.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     * @param idx index to be deleted.","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"    public Delete(int idx) {","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"            Task task \u003d tasks.delete(idx);","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"            ui.print(\"hm hmm... task #\" + (idx + 1) + \" deleted! \" + tasks.size() + (tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\") + \" left.\");","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"            ui.print(\"- \" + task);","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"        } catch (TaskListIndexException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"            ui.print(\"?!?!? \" + ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":34}},{"path":"src/main/java/command/ExceptionPrint.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":" * A command printing the message of an \u003ccode\u003eException\u003c/code\u003e,","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" * typically as the result of parsing invalid command arguments.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"public class ExceptionPrint implements Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    private final Exception ex;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * Creates an exception-print command.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     * @param ex exception with message to be printed.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public ExceptionPrint(Exception ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        this.ex \u003d ex;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"        ui.print(\"?!?!? \" + ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":27}},{"path":"src/main/java/command/ExitPrint.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":" * A command printing the exit text. Does not directly cause the program to exit.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"public class ExitPrint implements Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"     * Creates an exit-print command.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    public ExitPrint() {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        ui.print(\"Otsumiki!~ I\u0027ll see you later!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jefrai":22}},{"path":"src/main/java/command/Find.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"public class Find implements Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"    private String regex \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"    public Find(String regex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"        this.regex \u003d regex;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"        int matches \u003d 0;","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"            if (tasks.get(i).hasMatchingObjective(regex)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"                matches++;","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"        ui.print(\"here\u0027s your \" + matches + (matches \u003d\u003d 1 ? \" match:\" : \" matches:\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"            if (tasks.get(i).hasMatchingObjective(regex)) {","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"                ui.print(i + 1 + \". \" + tasks.get(i));","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jefrai":29}},{"path":"src/main/java/command/ListTasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" * A command printing the contents of a \u003ccode\u003eTaskList\u003c/code\u003e, optionally filtering by a time window.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"public class ListTasks implements Command {","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"    private LocalDateTime from \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    private LocalDateTime to \u003d null;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     * Creates a list-tasks command.","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public ListTasks() {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"     * Creates a list-tasks command with time window filtering.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"     * @param from start of the time window. May be left null for no window start filtering.","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"     * @param to   end of the time window. May be left null for no window end filtering.","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"    public ListTasks(LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"        ui.print(\"caught in 4k:\");","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"            if ((from \u003d\u003d null || tasks.get(i).isAfterDate(from))","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"                    \u0026\u0026 (to \u003d\u003d null || tasks.get(i).isBeforeDate(to))) {","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"                ui.print(i + 1 + \". \" + tasks.get(i));","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jefrai":44}},{"path":"src/main/java/command/Load.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" * A command loading the contents of a file to a \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"public class Load implements Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"    private final String path;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     * Creates a load command.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     * @param path path of the file to load from.","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"    public Load(String path) {","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        if (!path.equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"                storage.load(path, tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"                ui.print(\"done! i\u0027ve taken your list from: \" + path);","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"            } catch (IOException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"                ui.print(\"umm... i can\u0027t read from that!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"                ui.print(\"\u003e \" + ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"            } catch (Storage.MikiLoadException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"                ui.print(ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"            ui.print(\"tell me what to read!!!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"                String[] saves \u003d storage.listSaves();","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"                for (int i \u003d 0; i \u003c saves.length; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"                    ui.print(\"\u003e \" + saves[i]);","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"            } catch (Storage.MikiLoadException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"                ui.print(ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":48}},{"path":"src/main/java/command/Mark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskListIndexException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" * A command marking a \u003ccode\u003eTask\u003c/code\u003e at a specified index of a \u003ccode\u003eTaskList\u003c/code\u003e as complete.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"public class Mark implements Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    private final int idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * Creates a mark command.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     * @param idx index to be marked.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public Mark(int idx) {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"            tasks.get(idx).mark();","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"            ui.print(\"Yay!! Task marked as done:\");","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"            ui.print(\"  \" + tasks.get(idx));","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"        } catch (TaskListIndexException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"            ui.print(\"?!?!? \" + ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":33}},{"path":"src/main/java/command/Save.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" * A command saving the contents of a \u003ccode\u003eTaskList\u003c/code\u003e to a file.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"public class Save implements Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"    private final String path;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     * Creates a save command.","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     * @param path path of the file to save to.","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"    public Save(String path) {","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        if (!path.equals(\"\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"                storage.save(path, tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"                ui.print(\"done! i\u0027ve written your list to: \" + path);","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"            } catch (IOException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"                ui.print(\"umm... i can\u0027t write on that!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"                ui.print(\"\u003e \" + ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"            ui.print(\"tell me where to write!!!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":38}},{"path":"src/main/java/command/Unmark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskListIndexException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" * A command marking a \u003ccode\u003eTask\u003c/code\u003e at a specified index of a \u003ccode\u003eTaskList\u003c/code\u003e as not complete.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"public class Unmark implements Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    private final int idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * Creates an unmark command.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     * @param idx index to be unmarked.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public Unmark(int idx) {","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    public void run(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"            tasks.get(idx).unmark();","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"            ui.print(\"okay...! task unmarked as undone:\");","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"            ui.print(\"  \" + tasks.get(idx));","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"        } catch (TaskListIndexException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"            ui.print(\"?!?!? \" + ex.getMessage());","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":33}},{"path":"src/main/java/exception/MikiArgsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package exception;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":" * Thrown when an argument could not be parsed as a valid Miki command.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"public class MikiArgsException extends Exception {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"     * Constructs a \u003ccode\u003eMikiArgsException\u003c/code\u003e with the specified detail message.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"     * @param message the detail message.","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    public MikiArgsException(String message) {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"        super(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":15}},{"path":"src/main/java/exception/TaskListIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package exception;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":" * Thrown when a \u003ccode\u003eTaskList\u003c/code\u003e has been accessed with an illegal index.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"public class TaskListIndexException extends ArrayIndexOutOfBoundsException {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"     * Constructs a \u003ccode\u003eTaskListIndexException\u003c/code\u003e with the specified detail message.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"     * @param message the detail message.","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    public TaskListIndexException(String message) {","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"        super(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":15}},{"path":"src/main/java/exception/TaskParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package exception;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":" * Thrown when an argument could not be parsed as a valid \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"public class TaskParseException extends Exception {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"     * Constructs a \u003ccode\u003eTaskParseException\u003c/code\u003e with the specified detail message.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"     * @param message the detail message.","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    public TaskParseException(String message) {","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"        super(message);","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"jefrai":15}},{"path":"src/main/java/shigure/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package shigure;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":" * A UI controller for Miki interactive command-line I/O.","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"public class Ui {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"    private static final String DIV \u003d \"    ____________________________________________________________________________\";","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"    private final boolean isAsciiOnly;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"    private final boolean isAutoDiv \u003d true;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    private final Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * Creates a new UI, optionally using ASCII-only versions of built-in \u003ccode\u003eStrings\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     * @param isAsciiOnly whether this Ui shall operate in ASCII-only mode.","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    public Ui(boolean isAsciiOnly) {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        this.isAsciiOnly \u003d isAsciiOnly;","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"     * Prints an output prompt and reads a single line of input.","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"     * @return the read line of user input.","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"    public String readLine() {","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"        System.out.print(\"\u003e\");","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"     * Prints a line divider to the user interface.","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"    public void printDiv() {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"        System.out.println(DIV);","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"     * If automatic internal line dividers are enabled, prints a line divider.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"    public void printAutoDiv() {","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"        if (isAutoDiv) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"            printDiv();","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"     * Prints a line of output to the user interface,","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"     * formatted with indentation for clarity.","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"     * @param s \u003ccode\u003eString\u003c/code\u003e to be printed.","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"    public void print(String s) {","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"        System.out.println(\"     \" + s);","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"     * Prints a welcome message to the user interface.","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"    public void printIntro() {","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"        printAutoDiv();","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"        String username \u003d System.getProperty(\"user.name\");","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"        print(\"in honour / fuzuki miki / 2020 | 2021\");","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"        if (!isAsciiOnly) {","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"            print(\"\\uD83C\\uDF80✨\");","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"            print(\"Hello \" + username + \" !! Konmiki! ＼(￣▽￣)/\");","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"            print(\"01 f3 80 / 27 28\");","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"            print(\"Hello \" + username + \" !! Konmiki! \\\\(^v^)/\");","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"        printAutoDiv();","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":76}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import task.Deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.Event;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import task.Todo;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"import java.io.File;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"import java.nio.file.FileSystems;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":" * A storage handler for reading and writing to a filesystem.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"public class Storage {","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"     * Thrown when a file could not be parsed as a valid Miki save file.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"    public static class MikiLoadException extends Exception {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        /**","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"         * Constructs a \u003ccode\u003eMikiLoadException\u003c/code\u003e with the specified detail message.","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"         *","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"         * @param message the detail message.","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"         */","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        protected MikiLoadException(String message) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"            super(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"    private final String dataPath;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"     * Creates a new storage handler with a specified base directory for file paths.","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"     * @param dataPath base directory of file paths.","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"    public Storage(String dataPath) {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"        this.dataPath \u003d dataPath;","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"     * Creates the base directory (and any required ancestors) if it does not exist yet.","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"    private void createSaveDir() {","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"        File dir \u003d new File(dataPath);","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"        if (!dir.mkdirs()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"            //no perms/dir locked? consider warning user","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"     * Searches the base directory for loadable files and","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"     * returns their filenames as a \u003ccode\u003eString\u003c/code\u003e array.","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"     * @return the filenames of files in the base directory.","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"     * @throws MikiLoadException if the base directory does not exist and","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"     *                           cannot be created.","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"    public String[] listSaves() throws MikiLoadException {","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"        createSaveDir();","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"        File dir \u003d new File(dataPath);","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"        if (dir \u003d\u003d null) {","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"            throw new MikiLoadException(\"(default save location is missing?!)\");","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"        File[] saves \u003d dir.listFiles();","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"        String[] filenames \u003d new String[saves.length];","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c saves.length; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"            filenames[i] \u003d saves[i].getName();","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"        return filenames;","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"     * Saves a \u003ccode\u003eTaskList\u003c/code\u003e to a file, in a loadable format.","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"     * @param pathString path of the file to save to.","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"     * @param tasks      tasklist to save.","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"     * @throws IOException if the file could not be written to.","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"    public void save(String pathString, TaskList tasks) throws IOException {","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"        createSaveDir();","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"jefrai"},"content":"        Path path \u003d FileSystems.getDefault().getPath(dataPath).resolve(pathString);","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"jefrai"},"content":"        BufferedWriter bw \u003d Files.newBufferedWriter(path, StandardCharsets.UTF_8);","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"jefrai"},"content":"            bw.write(Integer.toString(tasks.size()));","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"jefrai"},"content":"                String[] repres \u003d tasks.get(i).save();","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"jefrai"},"content":"                bw.newLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"jefrai"},"content":"                bw.write(Integer.toString(repres.length));","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"jefrai"},"content":"                for (int j \u003d 0; j \u003c repres.length; j++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"jefrai"},"content":"                    bw.newLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"jefrai"},"content":"                    bw.write(repres[j]);","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"jefrai"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"jefrai"},"content":"        } finally {","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"jefrai"},"content":"            bw.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"jefrai"},"content":"     * Loads a file as a \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"jefrai"},"content":"     * @param pathString path of the file to load from.","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"jefrai"},"content":"     * @param tasks      tasklist to load to.","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"jefrai"},"content":"     * @throws IOException       if the file could not be read from.","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"jefrai"},"content":"     * @throws MikiLoadException if the file did not represent a correctly-encoded TaskList.","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"jefrai"},"content":"    public void load(String pathString, TaskList tasks) throws IOException, MikiLoadException {","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"jefrai"},"content":"        createSaveDir();","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"jefrai"},"content":"        tasks.clear();","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"jefrai"},"content":"        Path path \u003d FileSystems.getDefault().getPath(dataPath).resolve(pathString);","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"jefrai"},"content":"        BufferedReader br \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8);","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":120,"author":{"gitId":"jefrai"},"content":"            int numTasks \u003d Integer.parseInt(br.readLine());","lastModifiedDate":"2023-01-27"},{"lineNumber":121,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c numTasks; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":122,"author":{"gitId":"jefrai"},"content":"                int taskLines \u003d Integer.parseInt(br.readLine());","lastModifiedDate":"2023-01-27"},{"lineNumber":123,"author":{"gitId":"jefrai"},"content":"                String[] repres \u003d new String[taskLines];","lastModifiedDate":"2023-01-27"},{"lineNumber":124,"author":{"gitId":"jefrai"},"content":"                for (int j \u003d 0; j \u003c taskLines; j++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":125,"author":{"gitId":"jefrai"},"content":"                    repres[j] \u003d br.readLine();","lastModifiedDate":"2023-01-27"},{"lineNumber":126,"author":{"gitId":"jefrai"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":127,"author":{"gitId":"jefrai"},"content":"                switch (repres[0].charAt(0)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":128,"author":{"gitId":"jefrai"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"jefrai"},"content":"                    tasks.add(Todo.parseLoad(repres));","lastModifiedDate":"2023-01-27"},{"lineNumber":130,"author":{"gitId":"jefrai"},"content":"                    break;","lastModifiedDate":"2023-01-27"},{"lineNumber":131,"author":{"gitId":"jefrai"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2023-01-27"},{"lineNumber":132,"author":{"gitId":"jefrai"},"content":"                    tasks.add(Deadline.parseLoad(repres));","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"jefrai"},"content":"                    break;","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"jefrai"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2023-01-27"},{"lineNumber":135,"author":{"gitId":"jefrai"},"content":"                    tasks.add(Event.parseLoad(repres));","lastModifiedDate":"2023-01-27"},{"lineNumber":136,"author":{"gitId":"jefrai"},"content":"                    break;","lastModifiedDate":"2023-01-27"},{"lineNumber":137,"author":{"gitId":"jefrai"},"content":"                default:","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"jefrai"},"content":"                    //back-compat? try to handle","lastModifiedDate":"2023-01-27"},{"lineNumber":139,"author":{"gitId":"jefrai"},"content":"                }","lastModifiedDate":"2023-01-27"},{"lineNumber":140,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":141,"author":{"gitId":"jefrai"},"content":"        } catch (NumberFormatException | TaskParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":142,"author":{"gitId":"jefrai"},"content":"            throw new MikiLoadException(\"this file is corrupt...\");","lastModifiedDate":"2023-01-27"},{"lineNumber":143,"author":{"gitId":"jefrai"},"content":"        } finally {","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"jefrai"},"content":"            br.close();","lastModifiedDate":"2023-01-27"},{"lineNumber":145,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":146,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":147,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":147}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":" * Implementation of a \u003ccode\u003eTask\u003c/code\u003e with one chronological deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"     * Creates a deadline with the specified objective,","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"     * and the specified deadline timing.","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"     * @param objective description of this deadline\u0027s objective.","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"     * @param by        deadline time of this deadline.","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"    public Deadline(String objective, LocalDateTime by) {","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"        super(objective);","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"     * Parses the supplied \u003ccode\u003eString[]\u003c/code\u003e command-line arguments to create a deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"     * @param args arguments containing the deadline to be parsed.","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"     * @return a deadline represented by \u003ccode\u003eargs\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"     * @throws TaskParseException if \u003ccode\u003eargs\u003c/code\u003e does not represent a valid deadline.","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"    public static Deadline parseArgs(String[] args) throws TaskParseException {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"        String objective \u003d \"\";","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"        String by \u003d \"\";","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"        boolean isInTokenBy \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"        if (Collections.frequency(Arrays.asList(args), \"/by\") \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This deadline has too many timings!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-01-20"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"            if (args[i].equals(\"/by\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"                isInTokenBy \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"                continue;","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"            if (isInTokenBy) {","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"                by +\u003d (by.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"            } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"                objective +\u003d (objective.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-20"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"        if (objective.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This deadline is missing its body text!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"        if (by.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This deadline is missing its deadline! Use /by [date]\");","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"            return new Deadline(objective, LocalDateTime.parse(by, DATE_IN_FMT));","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(by + \" needs to be formatted as \" + DATE_IN_FMT_STR + \"!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"     * Parses the supplied \u003ccode\u003eString[]\u003c/code\u003e save data to create a deadline.","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"     * @param data data containing the deadline to be parsed.","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"     * @return a deadline represented by \u003ccode\u003edata\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"     * @throws TaskParseException if \u003ccode\u003edata\u003c/code\u003e does not represent a valid deadline.","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"    public static Deadline parseLoad(String[] data) throws TaskParseException {","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"            String[] header \u003d data[0].split(\" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"            if (!header[0].equals(\"D\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"                throw new TaskParseException(\"Invalid deadline data format\");","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"            boolean isDone \u003d Boolean.parseBoolean(header[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"            int objLines \u003d Integer.parseInt(header[2]);","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"            int byLines \u003d Integer.parseInt(header[3]);","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"            String objective \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"            String by \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"            int seek \u003d 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c objLines; i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"                objective +\u003d (i \u003e 0 ? \"\\n\" : \"\") + data[seek++];","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c byLines; i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"jefrai"},"content":"                by +\u003d (i \u003e 0 ? \"\\n\" : \"\") + data[seek++];","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"jefrai"},"content":"            Deadline deadline \u003d new Deadline(objective, LocalDateTime.parse(by, DATE_IN_FMT));","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"jefrai"},"content":"            deadline.isDone \u003d isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"jefrai"},"content":"            return deadline;","lastModifiedDate":"2023-01-26"},{"lineNumber":95,"author":{"gitId":"jefrai"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"Deadline data is malformed:\\n\" + ex.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"jefrai"},"content":"    public boolean isBeforeDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"jefrai"},"content":"        return by.isBefore(date) || by.isEqual(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"jefrai"},"content":"    public boolean isAfterDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"jefrai"},"content":"        return by.isAfter(date) || by.isEqual(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":115,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":120,"author":{"gitId":"jefrai"},"content":"    public String[] save() {","lastModifiedDate":"2023-01-26"},{"lineNumber":121,"author":{"gitId":"jefrai"},"content":"        ArrayList\u003cString\u003e repres \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":122,"author":{"gitId":"jefrai"},"content":"        String cur;","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"jefrai"},"content":"        cur \u003d \"D \" + isDone","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"jefrai"},"content":"                + \" \" + (objective.codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count() + 1)","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"jefrai"},"content":"                + \" \" + (by.format(DATE_IN_FMT).codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count() + 1);","lastModifiedDate":"2023-01-27"},{"lineNumber":126,"author":{"gitId":"jefrai"},"content":"        repres.add(cur);","lastModifiedDate":"2023-01-26"},{"lineNumber":127,"author":{"gitId":"jefrai"},"content":"        Collections.addAll(repres, objective.split(\"\\n\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":128,"author":{"gitId":"jefrai"},"content":"        Collections.addAll(repres, by.format(DATE_IN_FMT).split(\"\\n\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"jefrai"},"content":"        return repres.toArray(new String[repres.size()]);","lastModifiedDate":"2023-01-26"},{"lineNumber":130,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":132,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":136,"author":{"gitId":"jefrai"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":137,"author":{"gitId":"jefrai"},"content":"        return \"[D]\" + super.toString() + \" (\" + by.format(DATE_OUT_FMT) + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":139,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jefrai":139}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":" * Implementation of a \u003ccode\u003eTask\u003c/code\u003e with a chronological start-time and end-time.","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"     * Creates an event with the specified objective,","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"     * and the specified starting and ending timings.","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"     * @param objective description of this event\u0027s objective.","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"     * @param from      start-time of this event.","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"     * @param to        end-time of this event.","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"    public Event(String objective, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"        super(objective);","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"     * Parses the supplied \u003ccode\u003eString[]\u003c/code\u003e command-line arguments to create an event.","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"     * @param args arguments containing the event to be parsed.","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"     * @return an event represented by \u003ccode\u003eargs\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"     * @throws TaskParseException if \u003ccode\u003eargs\u003c/code\u003e does not represent a valid event.","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"    public static Event parseArgs(String[] args) throws TaskParseException {","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"        String objective \u003d \"\";","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"        String from \u003d \"\";","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"        String to \u003d \"\";","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"        boolean isInTokenFrom \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"        boolean isInTokenTo \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"        if (Collections.frequency(Arrays.asList(args), \"/from\") \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This event has too many start-times!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"        if (Collections.frequency(Arrays.asList(args), \"/to\") \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This event has too many end-times!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-01-20"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"            if (args[i].equals(\"/from\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"                isInTokenFrom \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"                isInTokenTo \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"                continue;","lastModifiedDate":"2023-01-20"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"            if (args[i].equals(\"/to\")) {","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"                isInTokenFrom \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"                isInTokenTo \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"                continue;","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"            if (isInTokenFrom) {","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"                from +\u003d (from.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-20"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"            } else if (isInTokenTo) {","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"                to +\u003d (to.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-20"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"            } else {","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"                objective +\u003d (objective.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-20"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"        if (objective.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This event is missing its body text!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"        if (from.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This event is missing its start-time! Use /from [date]\");","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"        if (to.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This event is missing its end-time! Use /to [date]\");","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"        LocalDateTime fromDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"        LocalDateTime toDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"            fromDate \u003d LocalDateTime.parse(from, DATE_IN_FMT);","lastModifiedDate":"2023-01-27"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(from + \" needs to be formatted as \" + DATE_IN_FMT_STR + \"!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"            toDate \u003d LocalDateTime.parse(to, DATE_IN_FMT);","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"jefrai"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(to + \" needs to be formatted as \" + DATE_IN_FMT_STR + \"!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":90,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":91,"author":{"gitId":"jefrai"},"content":"        return new Event(objective, fromDate, toDate);","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"jefrai"},"content":"     * Parses the supplied \u003ccode\u003eString[]\u003c/code\u003e save data to create an event.","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"jefrai"},"content":"     * @param data data containing the event to be parsed.","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"jefrai"},"content":"     * @return an event represented by \u003ccode\u003edata\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"jefrai"},"content":"     * @throws TaskParseException if \u003ccode\u003edata\u003c/code\u003e does not represent a valid event.","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":101,"author":{"gitId":"jefrai"},"content":"    public static Event parseLoad(String[] data) throws TaskParseException {","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"jefrai"},"content":"            String[] header \u003d data[0].split(\" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"jefrai"},"content":"            if (!header[0].equals(\"E\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"jefrai"},"content":"                throw new TaskParseException(\"Invalid event data format\");","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"jefrai"},"content":"            boolean isDone \u003d Boolean.parseBoolean(header[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"jefrai"},"content":"            int objLines \u003d Integer.parseInt(header[2]);","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"jefrai"},"content":"            int fromLines \u003d Integer.parseInt(header[3]);","lastModifiedDate":"2023-01-26"},{"lineNumber":110,"author":{"gitId":"jefrai"},"content":"            int toLines \u003d Integer.parseInt(header[4]);","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"jefrai"},"content":"            String objective \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"jefrai"},"content":"            String from \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":114,"author":{"gitId":"jefrai"},"content":"            String to \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"jefrai"},"content":"            int seek \u003d 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c objLines; i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"jefrai"},"content":"                objective +\u003d (i \u003e 0 ? \"\\n\" : \"\") + data[seek++];","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c fromLines; i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":120,"author":{"gitId":"jefrai"},"content":"                from +\u003d (i \u003e 0 ? \"\\n\" : \"\") + data[seek++];","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c toLines; i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"jefrai"},"content":"                to +\u003d (i \u003e 0 ? \"\\n\" : \"\") + data[seek++];","lastModifiedDate":"2023-01-29"},{"lineNumber":124,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":125,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":126,"author":{"gitId":"jefrai"},"content":"            Event event \u003d new Event(objective,","lastModifiedDate":"2023-01-27"},{"lineNumber":127,"author":{"gitId":"jefrai"},"content":"                    LocalDateTime.parse(from, DATE_IN_FMT),","lastModifiedDate":"2023-01-27"},{"lineNumber":128,"author":{"gitId":"jefrai"},"content":"                    LocalDateTime.parse(to, DATE_IN_FMT));","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"jefrai"},"content":"            event.isDone \u003d isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":130,"author":{"gitId":"jefrai"},"content":"            return event;","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"jefrai"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":132,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"Event data is malformed:\\n\" + ex.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":134,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":135,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":136,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":137,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-30"},{"lineNumber":138,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":139,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":140,"author":{"gitId":"jefrai"},"content":"    public boolean isBeforeDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":141,"author":{"gitId":"jefrai"},"content":"        return from.isBefore(date) || from.isEqual(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":142,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":143,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":144,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":145,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-30"},{"lineNumber":146,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":147,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":148,"author":{"gitId":"jefrai"},"content":"    public boolean isAfterDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":149,"author":{"gitId":"jefrai"},"content":"        return to.isAfter(date) || to.isEqual(date);","lastModifiedDate":"2023-01-29"},{"lineNumber":150,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":151,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":152,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":153,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":154,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":156,"author":{"gitId":"jefrai"},"content":"    public String[] save() {","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"jefrai"},"content":"        ArrayList\u003cString\u003e repres \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":158,"author":{"gitId":"jefrai"},"content":"        String cur;","lastModifiedDate":"2023-01-26"},{"lineNumber":159,"author":{"gitId":"jefrai"},"content":"        cur \u003d \"E \" + isDone","lastModifiedDate":"2023-01-29"},{"lineNumber":160,"author":{"gitId":"jefrai"},"content":"                + \" \" + (objective.codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count() + 1)","lastModifiedDate":"2023-01-26"},{"lineNumber":161,"author":{"gitId":"jefrai"},"content":"                + \" \" + (from.format(DATE_IN_FMT).codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count() + 1)","lastModifiedDate":"2023-01-27"},{"lineNumber":162,"author":{"gitId":"jefrai"},"content":"                + \" \" + (to.format(DATE_IN_FMT).codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count() + 1);","lastModifiedDate":"2023-01-27"},{"lineNumber":163,"author":{"gitId":"jefrai"},"content":"        repres.add(cur);","lastModifiedDate":"2023-01-26"},{"lineNumber":164,"author":{"gitId":"jefrai"},"content":"        Collections.addAll(repres, objective.split(\"\\n\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":165,"author":{"gitId":"jefrai"},"content":"        Collections.addAll(repres, from.format(DATE_IN_FMT).split(\"\\n\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":166,"author":{"gitId":"jefrai"},"content":"        Collections.addAll(repres, to.format(DATE_IN_FMT).split(\"\\n\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":167,"author":{"gitId":"jefrai"},"content":"        return repres.toArray(new String[repres.size()]);","lastModifiedDate":"2023-01-26"},{"lineNumber":168,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":169,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":170,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":171,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":172,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":173,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":174,"author":{"gitId":"jefrai"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":175,"author":{"gitId":"jefrai"},"content":"        return \"[E]\" + super.toString() + \" (\" + from.format(DATE_OUT_FMT) + \" - \" + to.format(DATE_OUT_FMT) + \")\";","lastModifiedDate":"2023-01-27"},{"lineNumber":176,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":177,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jefrai":177}},{"path":"src/main/java/task/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package task;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import command.AddTask;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import command.Command;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import command.Delete;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import command.ExceptionPrint;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import command.ExitPrint;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"import command.Find;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"import command.ListTasks;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"import command.Load;","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"import command.Mark;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"import command.Save;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"import command.Unmark;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"import exception.MikiArgsException;","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"import exception.TaskParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":" * A parser for Miki interactive command-line inputs.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"public class Parser {","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"     * Parses a \u003ccode\u003eListTasks\u003c/code\u003e command from a provided \u003ccode\u003eString[]\u003c/code\u003e of","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"     * space-separated tokens.","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"     * @param args \u003ccode\u003eString[]\u003c/code\u003e denoting a \u003ccode\u003eListTasks\u003c/code\u003e command.","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"     * @return a \u003ccode\u003eListTasks\u003c/code\u003e command represented by \u003ccode\u003eargs\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"     * @throws MikiArgsException if \u003ccode\u003eargs\u003c/code\u003e does not represent","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"     *                           a valid \u003ccode\u003eListTasks\u003c/code\u003e command.","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"    public static ListTasks parseList(String[] args) throws MikiArgsException {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"        String from \u003d \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"        String to \u003d \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"        boolean isInTokenFrom \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"        boolean isInTokenTo \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"        if (Collections.frequency(Arrays.asList(args), \"/from\") \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"            throw new MikiArgsException(\"too many filter-froms...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"        if (Collections.frequency(Arrays.asList(args), \"/to\") \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"            throw new MikiArgsException(\"too many filter-tos...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"            if (args[i].equals(\"/from\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"                isInTokenFrom \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"                isInTokenTo \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"                continue;","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"            if (args[i].equals(\"/to\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"                isInTokenFrom \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"                isInTokenTo \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"                continue;","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"            if (isInTokenFrom) {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"                from +\u003d (from.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"            } else if (isInTokenTo) {","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"                to +\u003d (to.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"        LocalDateTime fromDate \u003d null;","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"        LocalDateTime toDate \u003d null;","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"        if (!from.isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"                fromDate \u003d LocalDateTime.parse(from, Task.DATE_IN_FMT);","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"            } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"                throw new MikiArgsException(from + \" needs to be formatted as \" + Task.DATE_IN_FMT_STR + \"!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"        if (!to.isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"            try {","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"                toDate \u003d LocalDateTime.parse(to, Task.DATE_IN_FMT);","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"            } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"                throw new MikiArgsException(to + \" needs to be formatted as \" + Task.DATE_IN_FMT_STR + \"!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"        return new ListTasks(fromDate, toDate);","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"     * Parses a \u003ccode\u003eTaskList\u003c/code\u003e index from a \u003ccode\u003eString[]\u003c/code\u003e of space-separated tokens.","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"jefrai"},"content":"     * @param args \u003ccode\u003eString[]\u003c/code\u003e containing a \u003ccode\u003eTaskList\u003c/code\u003e index.","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"jefrai"},"content":"     * @return the \u003ccode\u003eTaskList\u003c/code\u003e index represented by \u003ccode\u003eargs\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"jefrai"},"content":"     * @throws MikiArgsException if \u003ccode\u003eargs\u003c/code\u003e does not represent an integer.","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"jefrai"},"content":"    public static int parseTaskIndex(String[] args) throws MikiArgsException {","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"jefrai"},"content":"        int idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"jefrai"},"content":"        if (args.length \u003d\u003d 0) {","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"jefrai"},"content":"            throw new MikiArgsException(\"you didn\u0027t specify which one?!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"jefrai"},"content":"            idx \u003d Integer.parseInt(args[0]) - 1;","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"jefrai"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":100,"author":{"gitId":"jefrai"},"content":"            throw new MikiArgsException(\"\\\"\" + args[0] + \"\\\" isn\u0027t a real integer! There\u0027s no task #\" + args[0] + \"!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":101,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"jefrai"},"content":"        return idx;","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"jefrai"},"content":"     * Recombines a fragmented \u003ccode\u003eString[]\u003c/code\u003e of consecutive","lastModifiedDate":"2023-01-30"},{"lineNumber":107,"author":{"gitId":"jefrai"},"content":"     * space-separated tokens into a single \u003ccode\u003eString\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":108,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"jefrai"},"content":"     * @param args \u003ccode\u003eString[]\u003c/code\u003e to recombine.","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"jefrai"},"content":"     * @return the \u003ccode\u003eString\u003c/code\u003e produced by recombining \u003ccode\u003eargs\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"jefrai"},"content":"    public static String recombine(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"jefrai"},"content":"        String arg \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":114,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"jefrai"},"content":"            arg +\u003d (i \u003e 0 ? \" \" : \"\") + args[i];","lastModifiedDate":"2023-01-30"},{"lineNumber":116,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":117,"author":{"gitId":"jefrai"},"content":"        return arg;","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":120,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"jefrai"},"content":"     * Returns \u003ccode\u003etrue\u003c/code\u003e if the supplied line of input is requesting the program to exit.","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"jefrai"},"content":"     * @param cmdLine input to parse.","lastModifiedDate":"2023-01-30"},{"lineNumber":124,"author":{"gitId":"jefrai"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003ecmdLine\u003c/code\u003e represents an exit command.","lastModifiedDate":"2023-01-30"},{"lineNumber":125,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":126,"author":{"gitId":"jefrai"},"content":"    public static boolean isExitCommand(String cmdLine) {","lastModifiedDate":"2023-01-29"},{"lineNumber":127,"author":{"gitId":"jefrai"},"content":"        return cmdLine.split(\" \")[0].equalsIgnoreCase(\"bye\");","lastModifiedDate":"2023-01-30"},{"lineNumber":128,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":130,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":131,"author":{"gitId":"jefrai"},"content":"     * Parses one supplied line of input String to create a \u003ccode\u003eCommand\u003c/code\u003e action.","lastModifiedDate":"2023-01-29"},{"lineNumber":132,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":133,"author":{"gitId":"jefrai"},"content":"     * @param cmdLine input denoting a \u003ccode\u003eCommand\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":134,"author":{"gitId":"jefrai"},"content":"     * @return a \u003ccode\u003eCommand\u003c/code\u003e represented by \u003ccode\u003ecmdLine\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":135,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":136,"author":{"gitId":"jefrai"},"content":"    public static Command parse(String cmdLine) {","lastModifiedDate":"2023-01-27"},{"lineNumber":137,"author":{"gitId":"jefrai"},"content":"        String cmd \u003d cmdLine.split(\" \")[0].toLowerCase();","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"jefrai"},"content":"        String[] args \u003d {};","lastModifiedDate":"2023-01-27"},{"lineNumber":139,"author":{"gitId":"jefrai"},"content":"        if (cmdLine.contains(\" \")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":140,"author":{"gitId":"jefrai"},"content":"            args \u003d cmdLine.substring(cmd.length() + 1).split(\" \", -1);","lastModifiedDate":"2023-01-30"},{"lineNumber":141,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":142,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":143,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"jefrai"},"content":"            switch (cmd) {","lastModifiedDate":"2023-01-27"},{"lineNumber":145,"author":{"gitId":"jefrai"},"content":"            case \"bye\":","lastModifiedDate":"2023-01-27"},{"lineNumber":146,"author":{"gitId":"jefrai"},"content":"                return new ExitPrint();","lastModifiedDate":"2023-01-29"},{"lineNumber":147,"author":{"gitId":"jefrai"},"content":"            case \"list\":","lastModifiedDate":"2023-01-27"},{"lineNumber":148,"author":{"gitId":"jefrai"},"content":"                return parseList(args);","lastModifiedDate":"2023-01-27"},{"lineNumber":149,"author":{"gitId":"jefrai"},"content":"            case \"mark\":","lastModifiedDate":"2023-01-27"},{"lineNumber":150,"author":{"gitId":"jefrai"},"content":"                return new Mark(parseTaskIndex(args));","lastModifiedDate":"2023-01-27"},{"lineNumber":151,"author":{"gitId":"jefrai"},"content":"            case \"unmark\":","lastModifiedDate":"2023-01-27"},{"lineNumber":152,"author":{"gitId":"jefrai"},"content":"                return new Unmark(parseTaskIndex(args));","lastModifiedDate":"2023-01-27"},{"lineNumber":153,"author":{"gitId":"jefrai"},"content":"            case \"todo\":","lastModifiedDate":"2023-01-27"},{"lineNumber":154,"author":{"gitId":"jefrai"},"content":"                return new AddTask(Todo.parseArgs(args));","lastModifiedDate":"2023-01-27"},{"lineNumber":155,"author":{"gitId":"jefrai"},"content":"            case \"deadline\":","lastModifiedDate":"2023-01-27"},{"lineNumber":156,"author":{"gitId":"jefrai"},"content":"                return new AddTask(Deadline.parseArgs(args));","lastModifiedDate":"2023-01-27"},{"lineNumber":157,"author":{"gitId":"jefrai"},"content":"            case \"event\":","lastModifiedDate":"2023-01-27"},{"lineNumber":158,"author":{"gitId":"jefrai"},"content":"                return new AddTask(Event.parseArgs(args));","lastModifiedDate":"2023-01-27"},{"lineNumber":159,"author":{"gitId":"jefrai"},"content":"            case \"delete\":","lastModifiedDate":"2023-01-27"},{"lineNumber":160,"author":{"gitId":"jefrai"},"content":"                return new Delete(parseTaskIndex(args));","lastModifiedDate":"2023-01-27"},{"lineNumber":161,"author":{"gitId":"jefrai"},"content":"            case \"save\":","lastModifiedDate":"2023-01-27"},{"lineNumber":162,"author":{"gitId":"jefrai"},"content":"                return new Save(recombine(args));","lastModifiedDate":"2023-01-30"},{"lineNumber":163,"author":{"gitId":"jefrai"},"content":"            case \"load\":","lastModifiedDate":"2023-01-27"},{"lineNumber":164,"author":{"gitId":"jefrai"},"content":"                return new Load(recombine(args));","lastModifiedDate":"2023-01-30"},{"lineNumber":165,"author":{"gitId":"jefrai"},"content":"            case \"find\":","lastModifiedDate":"2023-01-30"},{"lineNumber":166,"author":{"gitId":"jefrai"},"content":"                return new Find(\".*\" + recombine(args) + \".*\");","lastModifiedDate":"2023-01-30"},{"lineNumber":167,"author":{"gitId":"jefrai"},"content":"            default:","lastModifiedDate":"2023-01-27"},{"lineNumber":168,"author":{"gitId":"jefrai"},"content":"                throw new MikiArgsException(\"\\\"\" + cmd + \"\\\" isn\u0027t a real word!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":169,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":170,"author":{"gitId":"jefrai"},"content":"        } catch (TaskParseException | MikiArgsException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":171,"author":{"gitId":"jefrai"},"content":"            return new ExceptionPrint(ex);","lastModifiedDate":"2023-01-27"},{"lineNumber":172,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":173,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":174,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":174}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":" * Represents a task with a textual objective, completion status,","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":" * and some chronological order.","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"    /** \u003ccode\u003eDateTimeFormatter\u003c/code\u003e format for parsing supplied time \u003ccode\u003eString\u003c/code\u003es. */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    public static final String DATE_IN_FMT_STR \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"    /** \u003ccode\u003eDateTimeFormatter\u003c/code\u003e format for outputting time \u003ccode\u003eString\u003c/code\u003es. */","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    public static final String DATE_OUT_FMT_STR \u003d \"dd LLL yyyy hh:mm a\";","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    /** \u003ccode\u003eDateTimeFormatter\u003c/code\u003e for parsing supplied time \u003ccode\u003eString\u003c/code\u003es. */","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"    protected static final DateTimeFormatter DATE_IN_FMT \u003d DateTimeFormatter.ofPattern(DATE_IN_FMT_STR);","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"    /** \u003ccode\u003eDateTimeFormatter\u003c/code\u003e for outputting time \u003ccode\u003eString\u003c/code\u003es. */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"    protected static final DateTimeFormatter DATE_OUT_FMT \u003d DateTimeFormatter.ofPattern(DATE_OUT_FMT_STR);","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"    /** The textual objective of this task. */","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    protected String objective;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"    /** The completion status of this task. */","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"     * Creates a task with the specified textual objective.","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"     * @param objective description of this task\u0027s objective.","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"    public Task(String objective) {","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        this.objective \u003d objective;","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"     * Marks this task as completed.","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"    public void mark() {","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"     * Marks this task as not completed.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"     * Returns a \u003ccode\u003eString\u003c/code\u003e array encoding of this task,","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"     * to be used to create an exact copy of this task.","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"     * @return the \u003ccode\u003eString[]\u003c/code\u003e encoding of this task.","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"    public abstract String[] save();","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"     * Returns \u003ccode\u003etrue\u003c/code\u003e if this task occurs on","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"     * or before \u003ccode\u003edate\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"     * @param date date to compare against.","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"     * @return true if this task occurs on or before \u003ccode\u003edate\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"    public abstract boolean isBeforeDate(LocalDateTime date);","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"     * Returns \u003ccode\u003etrue\u003c/code\u003e if this task occurs on","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"     * or after \u003ccode\u003edate\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"     * @param date date to compare against.","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"     * @return true if this task occurs on or after \u003ccode\u003edate\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"    public abstract boolean isAfterDate(LocalDateTime date);","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"     * Returns \u003ccode\u003etrue\u003c/code\u003e if this task\u0027s objective","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"     * matches the specified regular expression.","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"     * @param regex regular expression to match against.","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"     * @return true if this task\u0027s objective matches \u003ccode\u003eregex\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"    public boolean hasMatchingObjective(String regex) {","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"        return objective.matches(regex);","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":90,"author":{"gitId":"jefrai"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":91,"author":{"gitId":"jefrai"},"content":"        return \"[\" + (isDone ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + objective;","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":93,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jefrai":93}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskListIndexException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":" * A wrapper for \u003ccode\u003eArrayList\u003cTask\u003e\u003c/code\u003e with custom","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":" * \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e handling.","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"public class TaskList {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     * Creates an empty tasklist.","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"     * Returns the \u003ccode\u003eTask\u003c/code\u003e at the specified position of the wrapped \u003ccode\u003eArrayList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"     * @param i index of the \u003ccode\u003eTask\u003c/code\u003e to return.","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"     * @return the \u003ccode\u003eTask\u003c/code\u003e at the specified position.","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"     * @throws TaskListIndexException if no \u003ccode\u003eTask\u003c/code\u003e exists at the specified position.","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"    public Task get(int i) throws TaskListIndexException {","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"            return tasks.get(i);","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        } catch (IndexOutOfBoundsException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"            String message \u003d \"There\u0027s no task #\" + i + \"! \";","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"            if (tasks.size() \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"                message +\u003d \"There is currently 1 task...\";","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"                message +\u003d \"There are currently \" + tasks.size() + \" tasks...\";","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"            throw new TaskListIndexException(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"     * Appends the specified \u003ccode\u003eTask\u003c/code\u003e to the end of the wrapped \u003ccode\u003eArrayList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"     * @param t \u003ccode\u003eTask\u003c/code\u003e to be appended.","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"        tasks.add(t);","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"     * Deletes the \u003ccode\u003eTask\u003c/code\u003e at the specified position of the wrapped \u003ccode\u003eArrayList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"     * @param i index of the \u003ccode\u003eTask\u003c/code\u003e to return.","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"     * @return the \u003ccode\u003eTask\u003c/code\u003e deleted from the specified position.","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"     * @throws TaskListIndexException if no \u003ccode\u003eTask\u003c/code\u003e exists at the specified position.","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"    public Task delete(int i) throws TaskListIndexException {","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"            return tasks.remove(i);","lastModifiedDate":"2023-01-27"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"        } catch (IndexOutOfBoundsException ex) {","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"            String message \u003d \"There\u0027s no task #\" + i + \"! \";","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"            if (tasks.size() \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"                message +\u003d \"There is currently 1 task...\";","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"                message +\u003d \"There are currently \" + tasks.size() + \" tasks...\";","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"            throw new TaskListIndexException(message);","lastModifiedDate":"2023-01-27"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"     * Clears the wrapped \u003ccode\u003eArrayList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"    public void clear() {","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"        tasks.clear();","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"     * Returns the size of the wrapped \u003ccode\u003eArrayList\u003c/code\u003e.","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"     * @return the size of the wrapped \u003ccode\u003eArrayList\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"    public int size() {","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"        return tasks.size();","lastModifiedDate":"2023-01-27"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":87}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"package task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import exception.TaskParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.util.Collections;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"/**","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":" * Implementation of a \u003ccode\u003eTask\u003c/code\u003e with no particular chronological position.","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":" */","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"     * Creates a todo with the specified textual objective.","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"     * @param objective description of this todo\u0027s objective.","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"    public Todo(String objective) {","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"        super(objective);","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"     * Parses the supplied \u003ccode\u003eString[]\u003c/code\u003e command-line arguments to create a todo.","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"     * @param args arguments containing the todo to be parsed.","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"     * @return a todo represented by \u003ccode\u003eargs\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"     * @throws TaskParseException if \u003ccode\u003eargs\u003c/code\u003e does not represent a valid todo.","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"    public static Todo parseArgs(String[] args) throws TaskParseException {","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"        String objective \u003d \"\";","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        for (int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"            objective +\u003d (objective.isEmpty() ? \"\" : \" \") + args[i];","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"        if (objective.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"This todo is missing its body text!\");","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"        return new Todo(objective);","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"     * Parses the supplied \u003ccode\u003eString[]\u003c/code\u003e save data to create a todo.","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"     *","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"     * @param data data containing the todo to be parsed.","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"     * @return a todo represented by \u003ccode\u003edata\u003c/code\u003e.","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"     * @throws TaskParseException if \u003ccode\u003edata\u003c/code\u003e does not represent a valid todo.","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"    public static Todo parseLoad(String[] data) throws TaskParseException {","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"            String[] header \u003d data[0].split(\" \");","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"            if (!header[0].equals(\"T\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"                throw new TaskParseException(\"Invalid todo data format\");","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"            boolean isDone \u003d Boolean.parseBoolean(header[1]);","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"            int objLines \u003d Integer.parseInt(header[2]);","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"            String objective \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"            int seek \u003d 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"            for (int i \u003d 0; i \u003c objLines; i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"                objective +\u003d (i \u003e 0 ? \"\\n\" : \"\") + data[seek++];","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"            Todo todo \u003d new Todo(objective);","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"            todo.isDone \u003d isDone;","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"            return todo;","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"            throw new TaskParseException(\"Todo data is malformed:\\n\" + ex.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"    public String[] save() {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"        ArrayList\u003cString\u003e repres \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"        String cur;","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"        cur \u003d \"T \" + isDone + \" \" + (objective.codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count() + 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"        repres.add(cur);","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"        Collections.addAll(repres, objective.split(\"\\n\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"        return repres.toArray(new String[repres.size()]);","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"    public boolean isBeforeDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":88,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":89,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"jefrai"},"content":"    public boolean isAfterDate(LocalDateTime date) {","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"jefrai"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"jefrai"},"content":"    /**","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"jefrai"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-01-29"},{"lineNumber":99,"author":{"gitId":"jefrai"},"content":"     */","lastModifiedDate":"2023-01-29"},{"lineNumber":100,"author":{"gitId":"jefrai"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"jefrai"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"jefrai"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jefrai":104}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"import exception.TaskParseException;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import task.Event;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"import static task.Task.DATE_IN_FMT_STR;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"public class EventTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"    public void mark() {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"        Event event \u003d new Event(\"Body\", LocalDateTime.of(2023, 3, 4, 11, 35), LocalDateTime.of(2023, 3, 4, 14, 20));","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"        event.mark();","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"[E][X] Body (04 Mar 2023 11:35 AM - 04 Mar 2023 02:20 PM)\", event.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    public void checkDate() {","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"        Event event \u003d new Event(\"Body\", LocalDateTime.of(2023, 3, 4, 11, 35), LocalDateTime.of(2023, 3, 4, 14, 20));","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"        assertTrue(event.isBeforeDate(LocalDateTime.of(2023, 3, 4, 11, 35)));","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        assertFalse(event.isBeforeDate(LocalDateTime.of(2023, 3, 4, 11, 34)));","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"        assertTrue(event.isAfterDate(LocalDateTime.of(2023, 3, 4, 14, 20)));","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"        assertFalse(event.isAfterDate(LocalDateTime.of(2023, 3, 4, 14, 21)));","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"    public void parse() {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"            Event event \u003d Event.parseArgs(new String[]{\"Body\", \"/from\", \"2023-03-04\", \"11:35\", \"/to\", \"2023-03-04\", \"14:20\"});","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"            assertEquals(\"[E][ ] Body (04 Mar 2023 11:35 AM - 04 Mar 2023 02:20 PM)\", event.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"            assertTrue(event.isBeforeDate(LocalDateTime.of(2023, 3, 4, 11, 35)));","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"            assertFalse(event.isBeforeDate(LocalDateTime.of(2023, 3, 4, 11, 34)));","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"            assertTrue(event.isAfterDate(LocalDateTime.of(2023, 3, 4, 14, 20)));","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"            assertFalse(event.isAfterDate(LocalDateTime.of(2023, 3, 4, 14, 21)));","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"        });","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"        TaskParseException ex \u003d assertThrows(TaskParseException.class, () -\u003e {","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"            Event.parseArgs(new String[]{\"Body\", \"/from\", \"malformed\", \"/to\", \"2023-03-04\", \"14:20\"});","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"        });","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"malformed needs to be formatted as \" + DATE_IN_FMT_STR + \"!\", ex.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"    public void checkDate_parseLoad() {","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"            Event event \u003d Event.parseLoad(new String[]{\"E true 1 1 1\", \"Body\", \"2023-03-04 11:35\", \"2023-03-04 14:20\"});","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"            assertEquals(\"[E][X] Body (04 Mar 2023 11:35 AM - 04 Mar 2023 02:20 PM)\", event.toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"            assertTrue(event.isBeforeDate(LocalDateTime.of(2023, 3, 4, 11, 35)));","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"            assertFalse(event.isBeforeDate(LocalDateTime.of(2023, 3, 4, 11, 34)));","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"            assertTrue(event.isAfterDate(LocalDateTime.of(2023, 3, 4, 14, 20)));","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"            assertFalse(event.isAfterDate(LocalDateTime.of(2023, 3, 4, 14, 21)));","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"        });","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jefrai":58}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"import storage.Storage;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"import task.Event;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import task.TaskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import task.Todo;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"public class StorageTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"    public void saveLoad() {","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"        Storage storage \u003d new Storage(\"./data/.gradle/\");","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"        tasks.add(new Event(\"Body\", LocalDateTime.of(2023, 3, 4, 11, 35), LocalDateTime.of(2023, 3, 4, 14, 20)));","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        tasks.get(0).mark();","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"        tasks.add(new Todo(\"Item\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"        assertDoesNotThrow(() -\u003e storage.save(\"saveLoad\", tasks));","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"        tasks.clear();","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"        assertDoesNotThrow(() -\u003e storage.load(\"saveLoad\", tasks));","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"[E][X] Body (04 Mar 2023 11:35 AM - 04 Mar 2023 02:20 PM)\", tasks.get(0).toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"[T][ ] Item\", tasks.get(1).toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"    public void saveLoad_empty() {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        Storage storage \u003d new Storage(\"./data/.gradle/\");","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"        assertDoesNotThrow(() -\u003e storage.save(\"saveLoad_empty\", tasks));","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"        tasks.add(new Todo(\"Item\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"        assertDoesNotThrow(() -\u003e storage.load(\"saveLoad_empty\", tasks));","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"        assertEquals(0, tasks.size());","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"    public void load_noFile_exceptionThrown() {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"        Storage storage \u003d new Storage(\"./data/.gradle/\");","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"        IOException ex \u003d assertThrows(IOException.class, () -\u003e storage.load(\"load_noFile_exceptionThrown\", new TaskList()));","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"        assertEquals(\".\\\\data\\\\.gradle\\\\load_noFile_exceptionThrown\", ex.getMessage());","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jefrai":46}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"import shigure.Ui;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"import java.io.FileDescriptor;","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"public class UiTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"    public void printIntro_ascii() {","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"        ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(outStream));","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"        Ui ui \u003d new Ui(true);","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"        ui.printIntro();","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"        String out \u003d outStream.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"        assertEquals(5, out.codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count());","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"    public void printIntro() {","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"        ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(outStream));","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"        Ui ui \u003d new Ui(false);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"        ui.printIntro();","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"        String out \u003d outStream.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"        assertEquals(5, out.codePoints().filter(c -\u003e c \u003d\u003d \u0027\\n\u0027).count());","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"    public void printRead_ascii() {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"        ByteArrayInputStream inStream \u003d new ByteArrayInputStream(\"Input text\".getBytes());","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"        ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"        System.setIn(inStream);","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(outStream));","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"        Ui ui \u003d new Ui(false);","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"        ui.print(\"hello world\");","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"jefrai"},"content":"        ui.printDiv();","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"jefrai"},"content":"        ui.print(\"mint fantôme\");","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"jefrai"},"content":"        String in \u003d ui.readLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"jefrai"},"content":"        String out \u003d outStream.toString().replace(\"\\r\\n\", \"\\n\");","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"jefrai"},"content":"        System.setIn(new FileInputStream(FileDescriptor.in));","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"Input text\", in);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"     hello world\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"jefrai"},"content":"                        + \"    ____________________________________________________________________________\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"jefrai"},"content":"                        + \"     mint fantôme\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"jefrai"},"content":"                        + \"\u003e\"","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"jefrai"},"content":"                , out);","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"jefrai"},"content":"    //@Test","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"jefrai"},"content":"    public void printRead() {","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"jefrai"},"content":"        ByteArrayInputStream inStream \u003d new ByteArrayInputStream(\"Input text \\u29CD\\u23E7\\u2A33\\u2A7C\\u299E\\u2A04\\u2B48\".getBytes());","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"jefrai"},"content":"        ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"jefrai"},"content":"        System.setIn(inStream);","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(outStream));","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"jefrai"},"content":"        Ui ui \u003d new Ui(false);","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"jefrai"},"content":"        ui.print(\"hello world\");","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"jefrai"},"content":"        ui.print(\"\\u6587\\u6708\\u307F\\u304D x fantôme\");","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"jefrai"},"content":"        ui.printDiv();","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"jefrai"},"content":"        ui.print(\"\\u225D\\u237C\\u2A50\\u2A69\\u2368\\u2118\");","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"jefrai"},"content":"        String in \u003d ui.readLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"jefrai"},"content":"        String out \u003d outStream.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"jefrai"},"content":"        System.setIn(new FileInputStream(FileDescriptor.in));","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"jefrai"},"content":"        System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"Input text \\u29CD\\u23E7\\u2A33\\u2A7C\\u299E\\u2A04\\u2B48\", in);","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"jefrai"},"content":"        assertEquals(\"    hello world\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"jefrai"},"content":"                        + \"    \\u6587\\u6708\\u307F\\u304D x fantôme\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"jefrai"},"content":"                        + \"    ____________________________________________________________________________\"","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"jefrai"},"content":"                        + \"    \\u225D\\u237C\\u2A50\\u2A69\\u2368\\u2118\\n\"","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"jefrai"},"content":"                        + \"\u003e\"","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"jefrai"},"content":"                , out);","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"jefrai"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"jefrai"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jefrai":89}},{"path":"text-ui-test/data/autosave.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"5","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"2","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"T true 1","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"read book","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"3","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"D false 1 1","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"get bread","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"2023-03-10 18:00","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"4","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"E false 1 1 1","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"lunch","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"2023-05-01 12:00","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"2023-05-01 13:00","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"2","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"T false 1","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"git-push","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"4","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"E false 1 1 1","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"lecture","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"2023-02-02 14:00","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"2023-02-02 16:00","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":21}},{"path":"text-ui-test/data/test1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"5","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"2","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"T true 1","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"read book","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"3","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"D false 1 1","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"get bread","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"2023-03-10 18:00","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"4","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"E false 1 1 1","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"lunch","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"2023-05-01 12:00","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"2023-05-01 13:00","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"2","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"T false 1","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"git-push","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"4","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"E false 1 1 1","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"lecture","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"2023-02-02 14:00","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"2023-02-02 16:00","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jefrai":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jefrai"},"content":"todo read book","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"jefrai"},"content":"deadline get bread /by 2023-03-10 18:00","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jefrai"},"content":"eat bread","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"jefrai"},"content":"event lunch /from 2023-05-01 12:00 /to 2023-05-01 13:00 /from 2023-05-01 11:00","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jefrai"},"content":"event lunch /from 2023-05-01 12:00 /to 2023-05-01 13:00","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jefrai"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"jefrai"},"content":"todo git-push","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"jefrai"},"content":"mark 4","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"jefrai"},"content":"unmark bread","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"jefrai"},"content":"todo","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"jefrai"},"content":"find ^lunch$","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jefrai"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"jefrai"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"jefrai"},"content":"unmark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"jefrai"},"content":"mark","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"jefrai"},"content":"unmark 4","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"deadline","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"find bread","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"delete","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"jefrai"},"content":"deadline ip /by 2023-02-01 23:59 /by 2023-02-02 14:00","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"event lecture /to 2023-02-02 16:00 /from 2023-02-02 14:00","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"find [a-z]{5}","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jefrai"},"content":"find \\b[a-z]{5}\\b","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"save test1.txt","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jefrai"},"content":"mark 4","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"jefrai"},"content":"find l.*c","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jefrai"},"content":"mark 2","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"jefrai"},"content":"deadline bread /by 2023-03-17 18:00","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"jefrai"},"content":"delete 4","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"jefrai"},"content":"unmark 1","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jefrai"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":33,"author":{"gitId":"jefrai"},"content":"find bread","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jefrai"},"content":"find  bread","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jefrai"},"content":"load test1.txt","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"jefrai"},"content":"list","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"jefrai"},"content":"list /from 2023-02-02 14:00 /to 2023-05-01 13:00","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jefrai"},"content":"list /from 2023-02-02 16:00 /to 2023-05-01 12:00","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"jefrai"},"content":"list /from 2023-02-02 16:00","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"jefrai"},"content":"list /from 2023-02-02 16:01","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"jefrai"},"content":"list /to 2023-05-01 11:59","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"jefrai"},"content":"list /to 2023-05-01 12:00","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"jefrai"},"content":"list /from 2023-02-02 14:00 /to 2023-03-10 17:59","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"jefrai"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jefrai":44}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"jefrai"},"content":"REM set environment variables","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"jefrai"},"content":"set username\u003duser","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"jefrai"},"content":"java -classpath ..\\bin Miki --ascii-only --no-autoload \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"jefrai":4}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"jefrai"},"content":"USER\u003d\"user\"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"jefrai"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"jefrai"},"content":"java -classpath ../bin Miki --ascii-only --no-autoload \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"jefrai":3}}]
