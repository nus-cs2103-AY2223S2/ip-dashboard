[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"# Duke","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"Duke is a chatbot software that helps you manage your tasks.","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"## Features","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"### Viewing Guide: guide","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"Format: `guide`","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"Shows a guide for commands","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"### Listing all the tasks: list","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"Format: `list`","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"Shows the list of tasks added","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"### Adding a Todo Task: todo","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"Format: `todo (content)`","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"Adds the content as a Todo Task","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"### Adding a Deadline Task: deadline","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"Format: `deadline (content) /by (dd/MM/yyyy HH:mm)`","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"Adds the content as a Deadline Task that should be done by the date","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"### Adding an Event Task: event","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"Format: `event (content) /from (dd/MM/yyyy HH:mm) /by (dd/MM/yyyy HH:mm)`","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"Adds the content as an Event Task that is going on between the dates","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"### Marking a Task as done: mark","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"Format: `mark (index)`","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"Mark the task with the given index as done","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"### Marking a Task as undone: unmark","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"Format: `unmark (index)`","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"Mark the task with the given index as undone","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"### Deleting a Task: delete","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"Format: `delete (index)`","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"Delete the task with the given index","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"### Closing Duke: bye","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"Format: `bye`","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"Closes Duke","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"-":2,"jinnieshin":30}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    mainClassName \u003d \"duke.GUI.Launcher\"","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"checkstyle {","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"-":40,"jinnieshin":21}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-24"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-24"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.command.Command;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":" * Main class of Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Starts a new Ui and Storage to prepare running duke and runs when they are ready.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    private String filePath \u003d \"./src/main/java/duke/data.txt\";","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    public Duke() {","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"            tasks \u003d storage.load();","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"     * Runs Duke by using ui to read command and execute the command.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"     * Continues running until the ui reads EndCommand.","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"            res +\u003d c.execute(tasks, ui, storage);","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"            res +\u003d ui.showError(e);","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"        } finally {","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"        try {","lastModifiedDate":"2023-01-24"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"            storage.writeToFile(tasks.toTxtString());","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"            System.out.println(\"Error during saving\");","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"jinnieshin":48}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":" * Exception used in Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"    private String message;","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of DukeException.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"     * @param message the exception details","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     * Returns string representation of DukeException.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     * @return String representation of DukeException","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"        return \"OOPS!!! \" + this.message;","lastModifiedDate":"2023-01-22"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jinnieshin":25}},{"path":"src/main/java/duke/FormatChecker.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":" * A class that contains methods that check whether a string follows different formats used in Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"public class FormatChecker {","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"     * Returns true if the string follows the correct format of deadline command.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"     * @param command the command to be checked","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"     * @return whether the command has the correct deadline command format","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    public static boolean isCorrectDeadlineCmd(String command) {","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"        return command.matches(\"^.+(\\\\s)/by(\\\\s).+$\");","lastModifiedDate":"2023-02-11"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     * Returns true if the string follows the correct format of event command.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     * @param command the command to be checked","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     * @return whether the command has the correct event command format","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    public static boolean isCorrectEventCmd(String command) {","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"        return command.matches(\"^.+(\\\\s)/from(\\\\s).+(\\\\s)/to.*$\");","lastModifiedDate":"2023-02-11"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * Returns true if the string follows the correct format of date representation.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @param dateString the date given in string to be checked","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     * @return whether the command has the correct date format","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    public static boolean isCorrectDateInput(String dateString) {","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        return dateString.matches(\"^(\\\\d)+/(\\\\d)+/(\\\\d)+(\\\\s)(\\\\d)+:(\\\\d)+$\");","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jinnieshin":34}},{"path":"src/main/java/duke/GUI/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.GUI;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":" * This control represents a dialog box consisting of an ImageView and a label containing text.","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of DialogBox","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @param text the text to be shown in the label","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     * @param img the image to be shown in the ImageView","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"    private void flip() {","lastModifiedDate":"2023-02-07"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-07"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"     * Shows the text input by the user with the user image.","lastModifiedDate":"2023-02-15"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"     * @param text the text input by the user","lastModifiedDate":"2023-02-15"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"     * @param img the user image","lastModifiedDate":"2023-02-15"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"     * @return the dialog box that shows the text input by the user with the user image","lastModifiedDate":"2023-02-15"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":62,"author":{"gitId":"jinnieshin"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-07"},{"lineNumber":63,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":64,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":65,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":66,"author":{"gitId":"jinnieshin"},"content":"     * Shows the text by the user with the duke image","lastModifiedDate":"2023-02-15"},{"lineNumber":67,"author":{"gitId":"jinnieshin"},"content":"     * @param text the text that the duke responds to the user","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"jinnieshin"},"content":"     * @param img the duke image","lastModifiedDate":"2023-02-15"},{"lineNumber":69,"author":{"gitId":"jinnieshin"},"content":"     * @return the dialog box that shows the text by the user with the duke image","lastModifiedDate":"2023-02-15"},{"lineNumber":70,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"jinnieshin"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":72,"author":{"gitId":"jinnieshin"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-07"},{"lineNumber":73,"author":{"gitId":"jinnieshin"},"content":"        db.flip();","lastModifiedDate":"2023-02-07"},{"lineNumber":74,"author":{"gitId":"jinnieshin"},"content":"        return db;","lastModifiedDate":"2023-02-07"},{"lineNumber":75,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":76,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"jinnieshin":76}},{"path":"src/main/java/duke/GUI/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.GUI;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":" * Launcher that launches Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"public class Launcher {","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"     * Main method of Duke.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"jinnieshin":15}},{"path":"src/main/java/duke/GUI/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.GUI;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-11"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     * Starts the GUI of Duke by setting up the main window of Duke.","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"     * @param stage the primary stage for Duke, onto which the Duke scene can be set.","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"            stage.show();","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"jinnieshin":36}},{"path":"src/main/java/duke/GUI/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.GUI;","lastModifiedDate":"2023-02-11"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-11"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.GUI.DialogBox;","lastModifiedDate":"2023-02-11"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userDog.png\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/doDog.png\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"     * Initializes the scroll pane of the main window of Duke.","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"     * Sets the duke that the main window is goind to present.","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"     * @param d duke that the main window is going to present.","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"     * Creates two dialog boxes, one to show the user input and another to show the response of Duke.","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"     * Clears the user input after processing.","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-07"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-07"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-07"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-07"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"        );","lastModifiedDate":"2023-02-07"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"jinnieshin":61}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.command.EndCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"import duke.command.GuideCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"import duke.command.PrintListCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"import duke.command.ToDoCommand;","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"import duke.command.UnknownCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":" * Parses a Command based on the string input.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"public class Parser {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     * Returns a Command respective to each command input.","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * @param fullCommand the command that needs to be parsed","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * @return the command that needs to be executed","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    public static Command parse(String fullCommand) {","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"        String[] fullCommandArr \u003d fullCommand.replaceFirst(\" \", \"#\").split(\"#\");","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"        String command \u003d fullCommandArr[0];","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"        String content \u003d \"\";","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"        if (fullCommandArr.length \u003e 1) {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"            content \u003d fullCommandArr[1];","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        switch (command) {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"            return new EndCommand();","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        case \"list\":","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"            return new PrintListCommand();","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"            int markIdx \u003d Integer.parseInt(content);","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"            return new MarkCommand(markIdx);","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"            int unmarkIdx \u003d Integer.parseInt(content);","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"            return new UnmarkCommand(unmarkIdx);","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"            return new ToDoCommand(content);","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"            return new DeadlineCommand(content);","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"        case \"event\":","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"            return new EventCommand(content);","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"        case \"delete\":","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"            int deleteIdx \u003d Integer.parseInt(content);","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"            return new DeleteCommand(deleteIdx);","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"        case \"guide\":","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"            return new GuideCommand();","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"        case \"find\":","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"            return new FindCommand(content);","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"        default:","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"            return new UnknownCommand();","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":61}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import java.io.File;","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" * Storage that reads and writes to the saved data file in local storage.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"public class Storage {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    private String filePath;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of Storage.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     * @param filePath the path of the data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * Loads TaskList from the saved data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @return TaskList containing the tasks saved in the local data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @throws FileNotFoundException If data file does not exist.","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    public TaskList load() throws FileNotFoundException {","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-02-11"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"        Scanner sc \u003d new Scanner(f);","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"        ArrayList\u003cString\u003e rawData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"            rawData.add(sc.nextLine());","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        if (rawData.isEmpty()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"            sc.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"            return tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"        for (int i \u003d 0; i \u003c rawData.size(); i++) {","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"            String[] taskData \u003d rawData.get(i).split(\"\\\\|\");","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"            String eventType \u003d taskData[0];","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"            String isDone \u003d taskData[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"            String title \u003d taskData[2];","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"            String dateTime \u003d \"\";","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"            if (taskData.length \u003e 3) {","lastModifiedDate":"2023-02-11"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"                dateTime \u003d taskData[3];","lastModifiedDate":"2023-02-11"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"            }","lastModifiedDate":"2023-02-11"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"            switch(eventType) {","lastModifiedDate":"2023-02-11"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"            case \"T\":","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"                try {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"                    tasks.addToDo(title);","lastModifiedDate":"2023-02-15"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"                    if (isDone.equals(\"1\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"                        tasks.getTask(i + 1).markDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"                    }","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"                    System.out.println(e);","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"            case \"D\":","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"                try {","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"jinnieshin"},"content":"                    tasks.addDeadline(title, dateTime);","lastModifiedDate":"2023-02-15"},{"lineNumber":63,"author":{"gitId":"jinnieshin"},"content":"                    if (taskData[1].equals(\"1\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"jinnieshin"},"content":"                        tasks.getTask(i + 1).markDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"jinnieshin"},"content":"                    }","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"jinnieshin"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"jinnieshin"},"content":"                    System.out.println(e);","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"jinnieshin"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"jinnieshin"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"jinnieshin"},"content":"            case \"E\":","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"jinnieshin"},"content":"                String[] duration \u003d dateTime.split(\"-\");","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"jinnieshin"},"content":"                String fromDateTime \u003d duration[0];","lastModifiedDate":"2023-02-11"},{"lineNumber":73,"author":{"gitId":"jinnieshin"},"content":"                String toDateTime \u003d duration[1];","lastModifiedDate":"2023-02-11"},{"lineNumber":74,"author":{"gitId":"jinnieshin"},"content":"                try {","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"jinnieshin"},"content":"                    tasks.addEvent(title, fromDateTime, toDateTime);","lastModifiedDate":"2023-02-15"},{"lineNumber":76,"author":{"gitId":"jinnieshin"},"content":"                    if (isDone.equals(\"1\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"jinnieshin"},"content":"                        tasks.getTask(i + 1).markDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":78,"author":{"gitId":"jinnieshin"},"content":"                    }","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"jinnieshin"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"jinnieshin"},"content":"                    System.out.println(e);","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"jinnieshin"},"content":"                }","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"jinnieshin"},"content":"                break;","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"jinnieshin"},"content":"            default:","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"jinnieshin"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"jinnieshin"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"jinnieshin"},"content":"        sc.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"jinnieshin"},"content":"        return tasks;","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"jinnieshin"},"content":"     * Saves the data in Duke that is running to the local data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"jinnieshin"},"content":"     * @param dukeData the data to be saved in string","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"jinnieshin"},"content":"     * @throws IOException If file cannot be written into the data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"jinnieshin"},"content":"    public void writeToFile(String dukeData) throws IOException {","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"jinnieshin"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-02-11"},{"lineNumber":99,"author":{"gitId":"jinnieshin"},"content":"        fw.write(dukeData);","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"jinnieshin"},"content":"        fw.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":102}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" * List of tasks that the user can add, mark, find or delete.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"public class TaskList {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-11"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of Storage.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     * Initialize by adding a zeroth element so that the index of tasks can start from 1.","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"        tasks.add(new ToDo(\"zeroth\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * Add a Todo Task to the TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param title the content of the new Todo Task","lastModifiedDate":"2023-02-11"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @return the message that indicates the addition of the new todo task","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if the content is empty","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    public String addToDo(String title) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"        if (isEmpty(title)) {","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        ToDo newTask \u003d new ToDo(title);","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-02-11"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d newTask + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"     * Add a Deadline Task to the TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"     * @param title the content of the new Deadline Task","lastModifiedDate":"2023-02-11"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"     * @param deadline the deadline date and time of the new Deadline Task","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"     * @return the message that indicates the addition of the new deadline task","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if the content is empty","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"    public String addDeadline(String title, String deadline) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"        if (isEmpty(title) || isEmpty(deadline)) {","lastModifiedDate":"2023-02-11"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"            throw new DukeException(\"The description and deadline of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"        Deadline newTask \u003d new Deadline(title, deadline);","lastModifiedDate":"2023-02-11"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-02-11"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d newTask + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":62,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"jinnieshin"},"content":"     * Add an Event Task to the TaskList.","lastModifiedDate":"2023-02-15"},{"lineNumber":64,"author":{"gitId":"jinnieshin"},"content":"     * @param title the content of the new Event Task","lastModifiedDate":"2023-02-11"},{"lineNumber":65,"author":{"gitId":"jinnieshin"},"content":"     * @param fromDateTime the start date and time of the new Event Task","lastModifiedDate":"2023-02-11"},{"lineNumber":66,"author":{"gitId":"jinnieshin"},"content":"     * @param toDateTime the end date and time of the new Event Task","lastModifiedDate":"2023-02-11"},{"lineNumber":67,"author":{"gitId":"jinnieshin"},"content":"     * @return the message that indicates the addition of the new event task","lastModifiedDate":"2023-02-15"},{"lineNumber":68,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if the content is empty","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"jinnieshin"},"content":"    public String addEvent(String title, String fromDateTime, String toDateTime) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":71,"author":{"gitId":"jinnieshin"},"content":"        if (title.equals(\"\") || fromDateTime.equals(\"\") || toDateTime.equals(\"\")) {","lastModifiedDate":"2023-02-11"},{"lineNumber":72,"author":{"gitId":"jinnieshin"},"content":"            throw new DukeException(\"The description and duration of an event cannot be empty.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":74,"author":{"gitId":"jinnieshin"},"content":"        Event newTask \u003d new Event(title, fromDateTime, toDateTime);","lastModifiedDate":"2023-02-11"},{"lineNumber":75,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":76,"author":{"gitId":"jinnieshin"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-02-11"},{"lineNumber":77,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Got it. I\u0027ve added this task:\";","lastModifiedDate":"2023-02-07"},{"lineNumber":78,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d newTask + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":79,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":80,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":81,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":82,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"jinnieshin"},"content":"     * Checks whether the string is an empty string, excluding spaces.","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"jinnieshin"},"content":"     * @param str the string to be checked","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"jinnieshin"},"content":"     * @return true when the string is empty","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"jinnieshin"},"content":"    public boolean isEmpty(String str) {","lastModifiedDate":"2023-01-22"},{"lineNumber":89,"author":{"gitId":"jinnieshin"},"content":"        String temp \u003d str.replaceAll(\"\\\\s+\", \"\");","lastModifiedDate":"2023-01-22"},{"lineNumber":90,"author":{"gitId":"jinnieshin"},"content":"        if (temp.equals(\"\")) {","lastModifiedDate":"2023-01-22"},{"lineNumber":91,"author":{"gitId":"jinnieshin"},"content":"            return true;","lastModifiedDate":"2023-01-22"},{"lineNumber":92,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-22"},{"lineNumber":94,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":95,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":96,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"jinnieshin"},"content":"     * Deletes a Task from the TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"jinnieshin"},"content":"     * @param index the index of the Task to be deleted","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"jinnieshin"},"content":"     * @return the message that indicates the deletion of the task.","lastModifiedDate":"2023-02-15"},{"lineNumber":100,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"jinnieshin"},"content":"    public String delete(int index) {","lastModifiedDate":"2023-02-07"},{"lineNumber":102,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":103,"author":{"gitId":"jinnieshin"},"content":"        Task removedTask \u003d tasks.get(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":104,"author":{"gitId":"jinnieshin"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":105,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":106,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d removedTask.toString() + \"\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":107,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":108,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":109,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":110,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":111,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"jinnieshin"},"content":"     * Returns a task with the given index.","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"jinnieshin"},"content":"     * @param index the Task to be returns","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"jinnieshin"},"content":"     * @return Task with the given index in the TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"jinnieshin"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-02-11"},{"lineNumber":117,"author":{"gitId":"jinnieshin"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-02-11"},{"lineNumber":118,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":119,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":120,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"jinnieshin"},"content":"     * Finds tasks that contains the target string.","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"jinnieshin"},"content":"     * @param target the target string to find","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"jinnieshin"},"content":"     * @return the list of tasks that contains the target string in String.","lastModifiedDate":"2023-02-15"},{"lineNumber":124,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"jinnieshin"},"content":"    public String find(String target) {","lastModifiedDate":"2023-02-07"},{"lineNumber":126,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":127,"author":{"gitId":"jinnieshin"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"jinnieshin"},"content":"        ArrayList\u003cInteger\u003e taskIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-15"},{"lineNumber":129,"author":{"gitId":"jinnieshin"},"content":"        foundTasks.add(new ToDo(\"zeroth\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"jinnieshin"},"content":"        taskIndexes.add(0);","lastModifiedDate":"2023-02-15"},{"lineNumber":131,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":132,"author":{"gitId":"jinnieshin"},"content":"        for (int i \u003d 1; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":133,"author":{"gitId":"jinnieshin"},"content":"            if (tasks.get(i).getTask().contains(target)) {","lastModifiedDate":"2023-02-11"},{"lineNumber":134,"author":{"gitId":"jinnieshin"},"content":"                foundTasks.add(tasks.get(i));","lastModifiedDate":"2023-02-11"},{"lineNumber":135,"author":{"gitId":"jinnieshin"},"content":"                taskIndexes.add(i);","lastModifiedDate":"2023-02-15"},{"lineNumber":136,"author":{"gitId":"jinnieshin"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"jinnieshin"},"content":"        for (int i \u003d 1; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"jinnieshin"},"content":"            res +\u003d taskIndexes.get(i) + \". \" + foundTasks.get(i).toString() + \"\\n\";","lastModifiedDate":"2023-02-15"},{"lineNumber":140,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":141,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":142,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":143,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":144,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":145,"author":{"gitId":"jinnieshin"},"content":"     * Stringifies the TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":146,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":147,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":148,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":149,"author":{"gitId":"jinnieshin"},"content":"    public String toString() {","lastModifiedDate":"2023-01-26"},{"lineNumber":150,"author":{"gitId":"jinnieshin"},"content":"        String str \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2023-01-26"},{"lineNumber":151,"author":{"gitId":"jinnieshin"},"content":"        for (int i \u003d 1; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":152,"author":{"gitId":"jinnieshin"},"content":"            str +\u003d \"\\n\";","lastModifiedDate":"2023-01-26"},{"lineNumber":153,"author":{"gitId":"jinnieshin"},"content":"            str +\u003d i + \". \" + tasks.get(i).toString();","lastModifiedDate":"2023-02-11"},{"lineNumber":154,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":155,"author":{"gitId":"jinnieshin"},"content":"        return str;","lastModifiedDate":"2023-01-26"},{"lineNumber":156,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":157,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":158,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":159,"author":{"gitId":"jinnieshin"},"content":"     * Stringifies the TaskList with relevant format for the saved data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":160,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the TaskList that follows the format for the saved data file","lastModifiedDate":"2023-01-31"},{"lineNumber":161,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":162,"author":{"gitId":"jinnieshin"},"content":"    public String toTxtString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":163,"author":{"gitId":"jinnieshin"},"content":"        String data \u003d \"\";","lastModifiedDate":"2023-01-24"},{"lineNumber":164,"author":{"gitId":"jinnieshin"},"content":"        for (int i \u003d 1; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-02-11"},{"lineNumber":165,"author":{"gitId":"jinnieshin"},"content":"            data +\u003d tasks.get(i).toTxtString() + \"\\n\";","lastModifiedDate":"2023-02-11"},{"lineNumber":166,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-24"},{"lineNumber":167,"author":{"gitId":"jinnieshin"},"content":"        return data;","lastModifiedDate":"2023-01-24"},{"lineNumber":168,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":169,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":170,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":171,"author":{"gitId":"jinnieshin"},"content":"     * Returns the number of Tasks in this TaskList.","lastModifiedDate":"2023-01-31"},{"lineNumber":172,"author":{"gitId":"jinnieshin"},"content":"     * @return the number of Tasks in this TaskList","lastModifiedDate":"2023-01-31"},{"lineNumber":173,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":174,"author":{"gitId":"jinnieshin"},"content":"    public int size() {","lastModifiedDate":"2023-01-24"},{"lineNumber":175,"author":{"gitId":"jinnieshin"},"content":"        return tasks.size();","lastModifiedDate":"2023-02-11"},{"lineNumber":176,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":177,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jinnieshin":177}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":" * Ui to communicate with the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"public class Ui {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"    private Scanner sc;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of Ui.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    public Ui() {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     * Prints the greeting message.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    public String greeting() {","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"        return \"Hello from Duke!\";","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * Prints the content of the DukeException.","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param error the DukeException to be shown to the user","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    public String showError(DukeException error) {","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"        return error.toString();","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"     * Prints the error that occurs during loading the data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    public String showLoadingError() {","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        return \"The file does not exist.\";","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"     * Prints the user guide for different commands of Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"    public String showGuide() {","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"        String guide \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"list\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"todo (content)\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"deadline (content) /by (dd/MM/yyyy HH:mm)\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"event (content) /from (dd/MM/yyyy HH:mm) /to (dd/MM/yyyy HH:mm)\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"mark (index)\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"unmark (index)\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"delete (index)\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"        guide +\u003d \"bye\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"        return guide;","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"     * Prints the farewell message.","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"    public String end() {","lastModifiedDate":"2023-02-07"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":61}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that contains the command information taken in from the user which can be executed.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"     * Executes the command.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if error occurs during execution of the command","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * @return true when the command indicates the closure of the software","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":26}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.FormatChecker;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" * Command that is used to add a deadline task when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    private String content;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of DeadlineCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     * @param content the content of the deadline task that consists of title and deadline.","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    public DeadlineCommand(String content) {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * Executes the DeadlineCommand to add a deadline task into the given TaskList.","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @return the message to indicate addition of the deadline task","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if error occurs during addition of the deadline task","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        assert FormatChecker.isCorrectDeadlineCmd(content) \u003d\u003d true","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"                : \"Please use the correct format to add a deadline.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        String[] dlTask \u003d content.split(\"/by\");","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        String title \u003d dlTask[0].trim();","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"        String deadline \u003d dlTask[1].trim();","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"        assert FormatChecker.isCorrectDateInput(dlTask[1]) \u003d\u003d true","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"                : \"Please use the correct format for date (dd/MM/yyyy HH:mm)\";","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"        res \u003d tasks.addDeadline(title, deadline);","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":53}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that is used to delete a task when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    private int deleteIdx;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of DeleteCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param deleteIdx the index of the task to be deleted","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public DeleteCommand(int deleteIdx) {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        this.deleteIdx \u003d deleteIdx;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * Deletes the task with an index equal to deleteIdx from the TaskList.","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @return the message to indicate deletion of the task","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if error occurs during deletion of the task","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d tasks.delete(deleteIdx);","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":44}},{"path":"src/main/java/duke/command/EndCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" * Command that is used to end Duke when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"public class EndCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of EndCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    public EndCommand() {}","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     * Ends Duke and saves the TaskList into the storage.","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * @return the message to indicate end of Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if error occurs during saving of TaskList data","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"            storage.writeToFile(tasks.toTxtString());","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"            System.out.println(\"Error during saving\");","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"        return ui.end();","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"     * @return true","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"        return true;","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":45}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.FormatChecker;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" * Command that is used to add an event task when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    private String content;","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of EventCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     * @param content the content of the event task that consists of title and event duration.","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    public EventCommand(String content) {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * Executes the EventCommand to add an event task into the given TaskList.","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @return the message to indicate addition of the event task","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if error occurs during addition of the event task","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        assert FormatChecker.isCorrectEventCmd(this.content) \u003d\u003d true","lastModifiedDate":"2023-02-11"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"                : \"Please use the correct format to add an event.\";","lastModifiedDate":"2023-02-11"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        String[] eventTask \u003d content.split(\"/from|/to\");","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        String title \u003d eventTask[0].trim();","lastModifiedDate":"2023-02-11"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"        String fromDateTime \u003d eventTask[1].trim();","lastModifiedDate":"2023-02-11"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"        String toDateTime \u003d eventTask[2].trim();","lastModifiedDate":"2023-02-11"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"        assert FormatChecker.isCorrectDateInput(fromDateTime) \u003d\u003d true","lastModifiedDate":"2023-02-11"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"                \u0026\u0026 !FormatChecker.isCorrectDateInput(toDateTime) \u003d\u003d true","lastModifiedDate":"2023-02-11"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"                : \"Please use the correct format for date (dd/MM/yyyy HH:mm)\";","lastModifiedDate":"2023-02-11"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d tasks.addEvent(title, fromDateTime, toDateTime);","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":55}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that finds the list of tasks that contains the given content when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    private String content;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of FindCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param content the content to be searched","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public FindCommand(String content) {","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * Finds the list of tasks that contains the given content.","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @return the list of tasks that contains the given content","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if error occurs during addition of the todo task","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d tasks.find(content);","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"jinnieshin":44}},{"path":"src/main/java/duke/command/GuideCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that returns the guide message when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class GuideCommand extends Command {","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of GuideCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    public GuideCommand() {}","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     * Returns the guide message about how to use Duke.","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * @return the guide message in string.","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d ui.showGuide();","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jinnieshin":39}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that is used to mark a task as done when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    private int markIdx;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of MarkCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param markIdx the index of the task to be marked as done","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public MarkCommand(int markIdx) {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        this.markIdx \u003d markIdx;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * Marks the task with an index equal to markIdx as done.","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @return the message that indicates that the task was marked as done","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if the given markIdx is larger than the number of tasks in the TaskList","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        if (this.markIdx \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"                \"The task with the given index does not exist.\");","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d tasks.getTask(this.markIdx).markDone();","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":48}},{"path":"src/main/java/duke/command/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that returns the list of tasks when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class PrintListCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of PrintListCommand","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    public PrintListCommand() {}","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     * Returns the list of tasks in the TaskList in string.","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * @return the list of tasks in the TaskList in string","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d tasks.toString();","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":39}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that is used to add a todo task when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    private String content;","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of TodoCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param content the content of the todo task that contains its title.","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public ToDoCommand(String content) {","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * Executes the ToDoCommand to add an event task into the given TaskList.","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @return the message to indicate addition of the todo task","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if error occurs during addition of the todo task","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        content \u003d content.trim();","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d tasks.addToDo(content);","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-02-15"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"jinnieshin":45}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that indicates that the command word is unrecognizable when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of UnknownCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    public UnknownCommand() {}","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     * Returns the message that indicates that the command word is unrecognizable.","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * @return the message that indicates that the command word is unrecognizable","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":39}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import duke.DukeException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"import duke.Storage;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"import duke.TaskList;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"import duke.Ui;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":" * Command that is used to mark a task as undone when executed.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    private int unmarkIdx;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of MarkCommand.","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param unmarkIdx the index of the task to be marked as undone","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public UnmarkCommand(int unmarkIdx) {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        this.unmarkIdx \u003d unmarkIdx;","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * Marks the task with an index equal to unmarkIdx as undone.","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     * @param tasks the TaskList of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * @param ui the Ui of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @param storage the storage of the Duke","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @return the message that indicates that the task was marked as undone","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     * @throws DukeException if the given unmarkIdx is larger than the number of tasks in the TaskList","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        if (this.unmarkIdx \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"            throw new DukeException(","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"                \"The task with the given index does not exist.\");","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d tasks.getTask(this.unmarkIdx).unmark();","lastModifiedDate":"2023-02-11"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"     * Returns true when the command indicates the closure of the software.","lastModifiedDate":"2023-02-15"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"     * @return false","lastModifiedDate":"2023-02-15"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        return false;","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"jinnieshin":48}},{"path":"src/main/java/duke/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"T|0|ldkjlj","lastModifiedDate":"2023-02-15"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"T|0|ldkjldjdj","lastModifiedDate":"2023-02-15"}],"authorContributionMap":{"jinnieshin":2}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":" * Task that is used to handle a task with a deadline.","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of Deadline.","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"     * @param input the title of the deadline task","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     * @param deadline the due date and time of the deadline task","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    public Deadline(String input, String deadline) {","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"        super(input);","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"        this.deadline \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2023-02-15"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the deadline task","lastModifiedDate":"2023-02-15"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.deadline.format(","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"                DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\")) + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"     * Returns the string representation of the deadline task in a format for saving a task into the local data file.","lastModifiedDate":"2023-02-15"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the deadline task in a format for saving a task into the local data file","lastModifiedDate":"2023-02-15"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"    public String toTxtString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        return \"D\" + super.toTxtString() + \"|\" + this.deadline.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));","lastModifiedDate":"2023-01-25"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jinnieshin":39}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":" * Task that is used to handle a task with a duration.","lastModifiedDate":"2023-02-15"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"    private LocalDateTime fromDateTime;","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"    private LocalDateTime toDateTime;","lastModifiedDate":"2023-02-11"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of Event","lastModifiedDate":"2023-02-15"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     * @param input the title of the event task","lastModifiedDate":"2023-02-15"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"     * @param from the starting date and time of the event task","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"     * @param to the ending date and time of the event task","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    public Event(String input, String from, String to) {","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        super(input);","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"        this.fromDateTime \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"        this.toDateTime \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));","lastModifiedDate":"2023-02-11"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"     * Returns the string representation of the event task.","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the event task","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.fromDateTime.format(","lastModifiedDate":"2023-02-11"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"                DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\")","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"        ) + \" to: \" + this.toDateTime.format(","lastModifiedDate":"2023-02-11"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"                DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\")","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"        ) + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"     * Returns the string representation of the event task in a format for saving a task into the local data file.","lastModifiedDate":"2023-02-15"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the event task in a format for saving a task into the local data file","lastModifiedDate":"2023-02-15"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"    public String toTxtString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"        return \"E\" + super.toTxtString() + \"|\" + this.fromDateTime.format(","lastModifiedDate":"2023-02-11"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"        ) + \"-\" + this.toDateTime.format(","lastModifiedDate":"2023-02-11"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"        );","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jinnieshin":49}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":" * Task that the user can add to the TaskList to be done.","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":" * Parent class of ToDo, Deadline, Event.","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"public abstract class Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-24"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"    private String task;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"     * @param title the title of the Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    public Task(String title) {","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"        this.task \u003d title;","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"     * Marks the state of the Task as done.","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    public String markDone() {","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d this.toString();","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"     * Mark the state of the Task as not done yet.","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"    public String unmark() {","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        res +\u003d this.toString();","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"        return res;","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"     * Returns this Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"     * @return this Task","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"    public String getTask() {","lastModifiedDate":"2023-01-19"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        return this.task;","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"     * Stringifies the Task.","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the Task","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"        String mark \u003d this.isDone ? \"X\" : \" \";","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"        return \"[\" + mark + \"] \" + this.task;","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":58,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"jinnieshin"},"content":"     * Stringifies the Task with relevant format for the saved data file.","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the Task that follows the format for the saved data file","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"jinnieshin"},"content":"    public String toTxtString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":63,"author":{"gitId":"jinnieshin"},"content":"        String mark2 \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-01-24"},{"lineNumber":64,"author":{"gitId":"jinnieshin"},"content":"        return \"|\" + mark2 + \"|\" + this.task;","lastModifiedDate":"2023-01-24"},{"lineNumber":65,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":66,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jinnieshin":66}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.task;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"/**","lastModifiedDate":"2023-02-15"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":" * Task that is used to handle a task without any time limitation.","lastModifiedDate":"2023-02-15"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":" */","lastModifiedDate":"2023-02-15"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-15"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"     * Class constructor of ToDo.","lastModifiedDate":"2023-02-15"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"     * @param input the title of the ToDo Task","lastModifiedDate":"2023-02-15"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    public ToDo(String input) {","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"        super(input);","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"     * Returns the string representation of the todo task.","lastModifiedDate":"2023-02-15"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the todo task","lastModifiedDate":"2023-02-15"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-24"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"    /**","lastModifiedDate":"2023-02-15"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"     * Returns the string representation of the todo task in a format for saving a task into the local data file.","lastModifiedDate":"2023-02-15"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"     * @return the string representation of the todo task in a format for saving a task into the local data file","lastModifiedDate":"2023-02-15"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"     */","lastModifiedDate":"2023-02-15"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    @Override","lastModifiedDate":"2023-01-24"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    public String toTxtString() {","lastModifiedDate":"2023-01-24"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"        return \"T\" + super.toTxtString();","lastModifiedDate":"2023-01-24"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-24"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"jinnieshin":33}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #dfebf0;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"1.7976931348623157E308\" alignment\u003d\"CENTER\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"jinnieshin":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.GUI.MainWindow\"\u003e","lastModifiedDate":"2023-02-11"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"5.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"319.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"329.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"66.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"380.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"jinnieshin":19}},{"path":"src/test/java/duke/FormatCheckerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"public class FormatCheckerTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"    public void isCorrectDateInputTest(){","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, FormatChecker.isCorrectDateInput(\"01/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDateInput(\"01/11/200112:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDateInput(\"01.11.2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDateInput(\"01/11/2001\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDateInput(\"2001/11/01\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"    public void isCorrectDeadlineCmd_correct() {","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, FormatChecker.isCorrectDeadlineCmd(\"task1 /by 01/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, FormatChecker.isCorrectDeadlineCmd(\"task 1 /by 01/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, FormatChecker.isCorrectDeadlineCmd(\"task   1 /by 01/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"jinnieshin"},"content":"    public void isCorrectDeadlineCmd_wrongFormat(){","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDeadlineCmd(\"task1/by 01/11/2001 12:00\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDeadlineCmd(\"task1 /by01/11/2001 12:00\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDeadlineCmd(\"task1 /by 01/11/200112:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"jinnieshin"},"content":"    public void isCorrectDeadlineCmd_missingContent() {","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectDeadlineCmd(\"/by 2001/11/01 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"jinnieshin"},"content":"    public void isCorrectEventCmd_correct() {","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, FormatChecker.isCorrectEventCmd(\"task1 /from 01/11/2001 12:00 /to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, FormatChecker.isCorrectEventCmd(\"task 1 /from 01/11/2001 12:00 /to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, FormatChecker.isCorrectEventCmd(\"task   1 /from 01/11/2001 12:00 /to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"jinnieshin"},"content":"    public void isCorrectEventCmd_wrongFormat(){","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectEventCmd(\"task1/from 01/11/2001 12:00 /to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectEventCmd(\"task1 /from01/11/2001 12:00 /to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectEventCmd(\"task1 /from 01/11/200112:00 /to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectEventCmd(\"task1 /from 01/11/2001 12:00/to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectEventCmd(\"task1 /from 01/11/2001 12:00 /to02/11/2001 12:00\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectEventCmd(\"task1 /from 01/11/2001 12:00 /to 02/11/200112:00\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"jinnieshin"},"content":"    public void isCorrectEventCmd_missingContent() {","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, FormatChecker.isCorrectEventCmd(\"/from 01/11/2001 12:00 /to 02/11/2001 12:00\"));","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jinnieshin":56}},{"path":"src/test/java/duke/command/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jinnieshin"},"content":"package duke.command;","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"jinnieshin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"jinnieshin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"jinnieshin"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"jinnieshin"},"content":"public class CommandTest {","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"jinnieshin"},"content":"    @Test","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"jinnieshin"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-01-29"},{"lineNumber":8,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(true, new EndCommand().isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new DeadlineCommand(\"\").isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new DeleteCommand(1).isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new EventCommand(\"\").isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new GuideCommand().isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new MarkCommand(1).isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new PrintListCommand().isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new ToDoCommand(\"\").isExit());","lastModifiedDate":"2023-02-15"},{"lineNumber":16,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new UnknownCommand().isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"jinnieshin"},"content":"        assertEquals(false, new UnmarkCommand(1).isExit());","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"jinnieshin"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"jinnieshin"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"jinnieshin":19}}]
