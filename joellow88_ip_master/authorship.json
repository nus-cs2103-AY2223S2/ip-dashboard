[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"joellow88":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"joellow88":16,"-":40}},{"path":"src/main/java/duke/CliHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"public class CliHandler {","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"    private static final Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\";","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"    private static final String SEPARATOR \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"    private CommandHandler commandHandler;","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"    private Parser parser;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"    CliHandler() {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"        this.commandHandler \u003d new CommandHandler();","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"     * Shows Duke\u0027s starting dialogue.","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"    public void showStartingDialogue() {","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"        System.out.println(LOGO + \"\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"        System.out.println(SEPARATOR);","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"        System.out.println(\"Duke: \");","lastModifiedDate":"2023-01-25"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"        System.out.println(\"Hello! I\u0027m DUKE!\\nWhat can I do for you?\");","lastModifiedDate":"2023-01-25"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"        System.out.println(SEPARATOR);","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"     * Responsible for taking in user inputs and passing them to the commandHandler.","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"     * @param tasks A TaskList of the current tasks in Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"     * @return true if Duke should continue running, false otherwise.","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"    public boolean run(TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"        System.out.println(\"You: \");","lastModifiedDate":"2023-01-25"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"        Command command \u003d this.parser.parseCommand(input);","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"        System.out.println(SEPARATOR);","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"        System.out.println(\"Duke: \");","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"        ","lastModifiedDate":"2023-01-25"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"        //TODO: Refactor Duke CLI to work with the new Ui interface","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"        //response \u003d this.commandHandler.handleCommand(command, tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"        System.out.print(response);","lastModifiedDate":"2023-01-25"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"        System.out.println(SEPARATOR);","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"        ","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"        if (this.commandHandler.isByeCommand(command)) {","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"            isRunning \u003d false;","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"        ","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"        return isRunning;","lastModifiedDate":"2023-01-25"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"joellow88":60}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"public class Command {","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"    private final String description;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"    private final String[] arguments;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"     * Constructs a Command with the specified description and any necessary arguments.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"     * ","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"     * @param description The Command description (eg: todo, list, mark, etc)","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"     * @param arguments The necessary arguments for the command","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"     *                  (eg: command \"deadline\" can have argument \"11/02/2023 1200\"","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"    public Command(String description, String ... arguments) {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"     * Returns the description of the command as a String","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"     * @return Description of the command (eg: todo, list, mark, etc)","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"        return description;","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"     * Returns the arguments of the command in an ArrayList","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"     * @return Arguments of the command","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"    public String[] getArguments() {","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"        return arguments;","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"     * Compares if another object o is equal to this command.","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"     * Returns true if and only if both command description and arguments are equal.","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"     * @param o The object to be compared for equality with this command","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"     * @return true if the specified object is equal to this command","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"            return true;","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"            return false;","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"        Command command \u003d (Command) o;","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"        if (!description.equals(command.description)) {","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"            return false;","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"        // Probably incorrect - comparing Object[] arrays with Arrays.equals","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"        return Arrays.equals(arguments, command.getArguments());","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"    public int hashCode() {","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"        int result \u003d description.hashCode();","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"        result \u003d 31 * result + Arrays.hashCode(arguments);","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"        return result;","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"    public String toString() {","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"        return \"Command{\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"                \"description\u003d\u0027\" + description + \u0027\\\u0027\u0027 +","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"                \", arguments\u003d\" + Arrays.toString(arguments) +","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"                \u0027}\u0027;","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"joellow88":76}},{"path":"src/main/java/duke/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"public class CommandHandler {","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"    CommandHandler() {}","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"     * Determines the behaviour of Duke given a command.","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"     * @param command The command in which behaviour is to be determined.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"     * @param tasks A TaskList containing the current list of tasks in Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"     *              If required, the TaskList will be modified in place as a side effect of the method call.","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"     * @return The response that Duke will display upon execution of the command.","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"    public String handleCommand(Command command, TaskList tasks, Storage storage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"        String s;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"        switch (command.getDescription()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"            s \u003d endDuke();","lastModifiedDate":"2023-02-10"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"        case \"list\":","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 0;","lastModifiedDate":"2023-02-10"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"            s \u003d showTasks(tasks);","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 1;","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"            s \u003d markTask(command.getArguments()[0], tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"            storage.saveData(tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 1;","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"            s \u003d unmarkTask(command.getArguments()[0], tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"            storage.saveData(tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 1;","lastModifiedDate":"2023-02-10"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"            s \u003d addTodo(command.getArguments()[0], tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"            storage.saveData(tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 2;","lastModifiedDate":"2023-02-10"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"            s \u003d addDeadline(command.getArguments()[0], command.getArguments()[1], tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"            storage.saveData(tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"        case \"event\":","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 3;","lastModifiedDate":"2023-02-10"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"            s \u003d addEvent(command.getArguments()[0],","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"                    command.getArguments()[1], command.getArguments()[2], tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"            storage.saveData(tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"        case \"delete\":","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 1;","lastModifiedDate":"2023-02-10"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"            s \u003d deleteEvent(command.getArguments()[0], tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"            storage.saveData(tasks);","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"        case \"noMatch\":","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"            s \u003d noMatch();","lastModifiedDate":"2023-02-10"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"        case \"invalid\":","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 1;","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"            s \u003d invalid(command.getArguments()[0]);","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"        case \"find\":","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"            assert command.getArguments().length \u003d\u003d 1;","lastModifiedDate":"2023-02-10"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"            s \u003d findTasks(command.getArguments()[0], tasks);","lastModifiedDate":"2023-02-10"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"            break;","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"        default:","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"            throw new IllegalArgumentException(\"Command is not valid and was not caught!\");","lastModifiedDate":"2023-02-10"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"        return s;","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"     * Determines if a command is the \u0027bye\u0027 command. Used to terminate the program.","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"     * @param command The command to be checked.","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"     * @return true if the command is the \u0027bye\u0027 command, false for all other commands.","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"    public boolean isByeCommand(Command command) {","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"        return command.getDescription().equals(\"bye\");","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"joellow88"},"content":"    private String endDuke() {","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"joellow88"},"content":"        return \"Bye! Hope to see you again soon!\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":83,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"joellow88"},"content":"    private String showTasks(TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"joellow88"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2023-01-25"},{"lineNumber":87,"author":{"gitId":"joellow88"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2023-01-25"},{"lineNumber":88,"author":{"gitId":"joellow88"},"content":"                response +\u003d String.format(\"%d.%s\", i, tasks.get(i - 1).printTask()) + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":89,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-01-25"},{"lineNumber":90,"author":{"gitId":"joellow88"},"content":"        } else {","lastModifiedDate":"2023-01-25"},{"lineNumber":91,"author":{"gitId":"joellow88"},"content":"            response \u003d \"You currently have no items in your to-do list!\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":92,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":93,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-25"},{"lineNumber":94,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":95,"author":{"gitId":"joellow88"},"content":"    private String markTask(String index, TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":96,"author":{"gitId":"joellow88"},"content":"        assert index.matches(\"[0-9]+\");","lastModifiedDate":"2023-02-10"},{"lineNumber":97,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":98,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":99,"author":{"gitId":"joellow88"},"content":"            int taskIndex \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"joellow88"},"content":"            tasks.get(taskIndex).setDone(true);","lastModifiedDate":"2023-01-25"},{"lineNumber":101,"author":{"gitId":"joellow88"},"content":"            response +\u003d \"Okay! I\u0027ve marked this task as done!\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":102,"author":{"gitId":"joellow88"},"content":"            response +\u003d tasks.get(taskIndex).printTask() + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":103,"author":{"gitId":"joellow88"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":104,"author":{"gitId":"joellow88"},"content":"            response \u003d \"You don\u0027t have that many tasks!\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":105,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":106,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-25"},{"lineNumber":107,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":108,"author":{"gitId":"joellow88"},"content":"    private String unmarkTask(String index, TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"joellow88"},"content":"        assert index.matches(\"[0-9]+\");","lastModifiedDate":"2023-02-10"},{"lineNumber":110,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":111,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":112,"author":{"gitId":"joellow88"},"content":"            int taskIndex \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"joellow88"},"content":"            tasks.get(taskIndex).setDone(false);","lastModifiedDate":"2023-01-25"},{"lineNumber":114,"author":{"gitId":"joellow88"},"content":"            response +\u003d \"Okay! I\u0027ve marked this task as not done yet!\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":115,"author":{"gitId":"joellow88"},"content":"            response +\u003d tasks.get(taskIndex).printTask() + \"\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":116,"author":{"gitId":"joellow88"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":117,"author":{"gitId":"joellow88"},"content":"            response \u003d \"You don\u0027t have that many tasks!\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":118,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":119,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-25"},{"lineNumber":120,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":121,"author":{"gitId":"joellow88"},"content":"    private String addTodo(String description, TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":122,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":123,"author":{"gitId":"joellow88"},"content":"        Task newTask \u003d new Todo(description);","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"joellow88"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":125,"author":{"gitId":"joellow88"},"content":"        response \u003d String.format(\"Added: %s\\n\", newTask.printTask());","lastModifiedDate":"2023-01-25"},{"lineNumber":126,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-25"},{"lineNumber":127,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":128,"author":{"gitId":"joellow88"},"content":"    private String addDeadline(String description, String by, TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":129,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":130,"author":{"gitId":"joellow88"},"content":"        Task newTask;","lastModifiedDate":"2023-01-27"},{"lineNumber":131,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":132,"author":{"gitId":"joellow88"},"content":"            newTask \u003d new Deadline(description, by);","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"joellow88"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"joellow88"},"content":"            return \"Sorry, I didn\u0027t understand. Please enter a valid date or time.\\n\";","lastModifiedDate":"2023-02-10"},{"lineNumber":135,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":136,"author":{"gitId":"joellow88"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":137,"author":{"gitId":"joellow88"},"content":"        response \u003d String.format(\"Added: %s\\n\", newTask.printTask());","lastModifiedDate":"2023-01-25"},{"lineNumber":138,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-25"},{"lineNumber":139,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":140,"author":{"gitId":"joellow88"},"content":"    private String addEvent(String description, String from, String to, TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":141,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":142,"author":{"gitId":"joellow88"},"content":"        Task newTask;","lastModifiedDate":"2023-01-27"},{"lineNumber":143,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"joellow88"},"content":"            newTask \u003d new Event(description, from, to);","lastModifiedDate":"2023-01-27"},{"lineNumber":145,"author":{"gitId":"joellow88"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":146,"author":{"gitId":"joellow88"},"content":"            return \"Sorry, I didn\u0027t understand. Please enter a valid date or time.\\n\";","lastModifiedDate":"2023-02-10"},{"lineNumber":147,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":148,"author":{"gitId":"joellow88"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-01-25"},{"lineNumber":149,"author":{"gitId":"joellow88"},"content":"        response \u003d String.format(\"Added: %s\\n\", newTask.printTask());","lastModifiedDate":"2023-01-25"},{"lineNumber":150,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-25"},{"lineNumber":151,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":152,"author":{"gitId":"joellow88"},"content":"    private String noMatch() {","lastModifiedDate":"2023-01-26"},{"lineNumber":153,"author":{"gitId":"joellow88"},"content":"        return \"Sorry, I didn\u0027t understand that, please ask again.\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":154,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":155,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":156,"author":{"gitId":"joellow88"},"content":"    private String deleteEvent(String index, TaskList tasks) {","lastModifiedDate":"2023-01-26"},{"lineNumber":157,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-25"},{"lineNumber":158,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-25"},{"lineNumber":159,"author":{"gitId":"joellow88"},"content":"            int taskIndex \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2023-01-26"},{"lineNumber":160,"author":{"gitId":"joellow88"},"content":"            response \u003d String.format(\"Okay! I deleted task %s\\n\", tasks.get(taskIndex).printTask());","lastModifiedDate":"2023-01-25"},{"lineNumber":161,"author":{"gitId":"joellow88"},"content":"            tasks.remove(taskIndex);","lastModifiedDate":"2023-01-25"},{"lineNumber":162,"author":{"gitId":"joellow88"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-25"},{"lineNumber":163,"author":{"gitId":"joellow88"},"content":"            response \u003d \"You don\u0027t have that many tasks!\\n\";","lastModifiedDate":"2023-01-25"},{"lineNumber":164,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-25"},{"lineNumber":165,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-25"},{"lineNumber":166,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":167,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":168,"author":{"gitId":"joellow88"},"content":"    private String invalid(String reply) {","lastModifiedDate":"2023-01-26"},{"lineNumber":169,"author":{"gitId":"joellow88"},"content":"        return reply;","lastModifiedDate":"2023-01-26"},{"lineNumber":170,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":171,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":172,"author":{"gitId":"joellow88"},"content":"    private String findTasks(String taskToFind, TaskList taskList) {","lastModifiedDate":"2023-01-27"},{"lineNumber":173,"author":{"gitId":"joellow88"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-01-27"},{"lineNumber":174,"author":{"gitId":"joellow88"},"content":"        TaskList foundTasks \u003d taskList.find(taskToFind);","lastModifiedDate":"2023-01-27"},{"lineNumber":175,"author":{"gitId":"joellow88"},"content":"        if (foundTasks.isEmpty()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":176,"author":{"gitId":"joellow88"},"content":"            response \u003d \"You don\u0027t have any tasks matching that description!\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":177,"author":{"gitId":"joellow88"},"content":"        } else {","lastModifiedDate":"2023-01-27"},{"lineNumber":178,"author":{"gitId":"joellow88"},"content":"            response \u003d \"I found these tasks in your task list!\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":179,"author":{"gitId":"joellow88"},"content":"            for (Task t : foundTasks.getTasks()) {","lastModifiedDate":"2023-01-27"},{"lineNumber":180,"author":{"gitId":"joellow88"},"content":"                response +\u003d t.printTask() + \"\\n\";","lastModifiedDate":"2023-01-27"},{"lineNumber":181,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":182,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":183,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-01-27"},{"lineNumber":184,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":185,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"joellow88":185}},{"path":"src/main/java/duke/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2023-02-09"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"import java.time.temporal.ChronoField;","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"import java.time.temporal.TemporalAccessor;","lastModifiedDate":"2023-02-09"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-09"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"import java.util.List;","lastModifiedDate":"2023-02-09"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"public class DateTimeParser {","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"    private static final LocalDateTime DEFAULT \u003d LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);","lastModifiedDate":"2023-02-09"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"    private static final String[] acceptedDatePatterns \u003d {","lastModifiedDate":"2023-02-09"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"            \"d/M/yyyy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"            \"d/M/yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"            \"d/M\",","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"            \"d M yyyy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"            \"d M yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"            \"d M\",","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"            \"d LLL\",","lastModifiedDate":"2023-02-09"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"            \"d LLL yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"            \"d LLL yyyy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"            \"d LLLL\",","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"            \"d LLLL yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"            \"d LLLL yyyy\"","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"    };","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"    private static final String[] acceptedTimePatterns \u003d {","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"            \"HHmm\",   //2359","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"            \"h:m\",    //1:30","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"            \"h:m a\",  //1:30 PM","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"            \"h:ma\",   //1:30PM","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"            \"h a\",    //12 PM","lastModifiedDate":"2023-02-09"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"            \"ha\",     //12PM","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"            \"h\"       //12","lastModifiedDate":"2023-02-09"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"    };","lastModifiedDate":"2023-02-09"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"    private static LocalDateTime parseInputWithAcceptedPatterns(String inputDate, String[] acceptedPatterns) {","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"        TemporalAccessor t \u003d null;","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"        DateTimeFormatter dtf \u003d null;","lastModifiedDate":"2023-02-09"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"        for (String pattern : acceptedPatterns) {","lastModifiedDate":"2023-02-09"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"            dtf \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"                    .parseCaseInsensitive()","lastModifiedDate":"2023-02-09"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"                    .appendPattern(pattern)","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"                    .toFormatter();","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"            try {","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"                t \u003d dtf.parse(inputDate);","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"                break;","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"                continue;","lastModifiedDate":"2023-02-09"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"        if (t \u003d\u003d null) {","lastModifiedDate":"2023-02-09"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"            throw new DateTimeParseException(\"Unable to parse date!\", inputDate, 0);","lastModifiedDate":"2023-02-09"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"        LocalDateTime result \u003d DEFAULT;","lastModifiedDate":"2023-02-09"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"        for (ChronoField field : ChronoField.values()) {","lastModifiedDate":"2023-02-09"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"            if (t.isSupported(field)) {","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"                result \u003d result.with(field, t.getLong(field));","lastModifiedDate":"2023-02-09"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"        return result;","lastModifiedDate":"2023-02-09"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"     * Parses a given input string into a LocalDateTime object.","lastModifiedDate":"2023-02-09"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"     * Supports many date and time formats.","lastModifiedDate":"2023-02-09"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"     * Date and times entered are case-insensitive.","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"     * Supported date formats are:","lastModifiedDate":"2023-02-09"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"     *             \"d/M/yyyy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"     *             \"d/M/yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"     *             \"d/M\",","lastModifiedDate":"2023-02-09"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"     *             \"d M yyyy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"     *             \"d M yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":81,"author":{"gitId":"joellow88"},"content":"     *             \"d M\",","lastModifiedDate":"2023-02-09"},{"lineNumber":82,"author":{"gitId":"joellow88"},"content":"     *             \"d LLL\",","lastModifiedDate":"2023-02-09"},{"lineNumber":83,"author":{"gitId":"joellow88"},"content":"     *             \"d LLL yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":84,"author":{"gitId":"joellow88"},"content":"     *             \"d LLL yyyy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":85,"author":{"gitId":"joellow88"},"content":"     *             \"d LLLL\",","lastModifiedDate":"2023-02-09"},{"lineNumber":86,"author":{"gitId":"joellow88"},"content":"     *             \"d LLLL yy\",","lastModifiedDate":"2023-02-09"},{"lineNumber":87,"author":{"gitId":"joellow88"},"content":"     *             \"d LLLL yyyy\"","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"joellow88"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":89,"author":{"gitId":"joellow88"},"content":"     * Supported time formats are:","lastModifiedDate":"2023-02-09"},{"lineNumber":90,"author":{"gitId":"joellow88"},"content":"     *             \"HHmm\",   //2359","lastModifiedDate":"2023-02-09"},{"lineNumber":91,"author":{"gitId":"joellow88"},"content":"     *             \"h:m\",    //1:30","lastModifiedDate":"2023-02-09"},{"lineNumber":92,"author":{"gitId":"joellow88"},"content":"     *             \"h:m a\",  //1:30 PM","lastModifiedDate":"2023-02-09"},{"lineNumber":93,"author":{"gitId":"joellow88"},"content":"     *             \"h:ma\",   //1:30PM","lastModifiedDate":"2023-02-09"},{"lineNumber":94,"author":{"gitId":"joellow88"},"content":"     *             \"h a\",    //12 PM","lastModifiedDate":"2023-02-09"},{"lineNumber":95,"author":{"gitId":"joellow88"},"content":"     *             \"ha\",     //12PM","lastModifiedDate":"2023-02-09"},{"lineNumber":96,"author":{"gitId":"joellow88"},"content":"     *             \"h\"       //12","lastModifiedDate":"2023-02-09"},{"lineNumber":97,"author":{"gitId":"joellow88"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":98,"author":{"gitId":"joellow88"},"content":"     * Any combination of dateFormat + timeFormat, separated with a space, is also accepted.","lastModifiedDate":"2023-02-09"},{"lineNumber":99,"author":{"gitId":"joellow88"},"content":"     * Eg: 1 jan 2023 1:30pm","lastModifiedDate":"2023-02-09"},{"lineNumber":100,"author":{"gitId":"joellow88"},"content":"     * Combination of \"d LLL yyyy\" + \"h:ma\"","lastModifiedDate":"2023-02-09"},{"lineNumber":101,"author":{"gitId":"joellow88"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":102,"author":{"gitId":"joellow88"},"content":"     * @param dateTime String to be format into LocalDateTime object.","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"joellow88"},"content":"     * @throws DateTimeParseException Thrown when parser is unable to format input string","lastModifiedDate":"2023-01-27"},{"lineNumber":104,"author":{"gitId":"joellow88"},"content":"     * @return LocalDateTime object corresponding to the input string","lastModifiedDate":"2023-01-27"},{"lineNumber":105,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":106,"author":{"gitId":"joellow88"},"content":"    public static LocalDateTime parseInput(String dateTime) throws DateTimeParseException {","lastModifiedDate":"2023-01-27"},{"lineNumber":107,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":108,"author":{"gitId":"joellow88"},"content":"            return parseInputWithAcceptedPatterns(dateTime, acceptedDatePatterns);","lastModifiedDate":"2023-02-09"},{"lineNumber":109,"author":{"gitId":"joellow88"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":110,"author":{"gitId":"joellow88"},"content":"            //No error, try to parse as time first","lastModifiedDate":"2023-02-09"},{"lineNumber":111,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":112,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":113,"author":{"gitId":"joellow88"},"content":"            return parseInputWithAcceptedPatterns(dateTime, acceptedTimePatterns);","lastModifiedDate":"2023-02-09"},{"lineNumber":114,"author":{"gitId":"joellow88"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":115,"author":{"gitId":"joellow88"},"content":"            //No error, try to parse as DateTime first","lastModifiedDate":"2023-02-09"},{"lineNumber":116,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":117,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":118,"author":{"gitId":"joellow88"},"content":"            List\u003cString\u003e l \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-09"},{"lineNumber":119,"author":{"gitId":"joellow88"},"content":"            for (String datePattern : acceptedDatePatterns) {","lastModifiedDate":"2023-02-09"},{"lineNumber":120,"author":{"gitId":"joellow88"},"content":"                for (String timePattern : acceptedTimePatterns) {","lastModifiedDate":"2023-02-09"},{"lineNumber":121,"author":{"gitId":"joellow88"},"content":"                    l.add(datePattern + \" \" + timePattern);","lastModifiedDate":"2023-02-09"},{"lineNumber":122,"author":{"gitId":"joellow88"},"content":"                }","lastModifiedDate":"2023-02-09"},{"lineNumber":123,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":124,"author":{"gitId":"joellow88"},"content":"            return parseInputWithAcceptedPatterns(dateTime, l.toArray(new String[0]));","lastModifiedDate":"2023-02-09"},{"lineNumber":125,"author":{"gitId":"joellow88"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":126,"author":{"gitId":"joellow88"},"content":"            throw new DateTimeParseException(\"Unable to parse input date time!\", dateTime, 0);","lastModifiedDate":"2023-02-09"},{"lineNumber":127,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":128,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":129,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":130,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":131,"author":{"gitId":"joellow88"},"content":"     * Formats a LocalDateTime object in dd MMM yyyy hh:mma format.","lastModifiedDate":"2023-01-27"},{"lineNumber":132,"author":{"gitId":"joellow88"},"content":"     * @param dt The LocalDateTime object to be formatted.","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"joellow88"},"content":"     * @return The String of the formatted LocalDateTime object.","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":135,"author":{"gitId":"joellow88"},"content":"    public static String formatOutput(LocalDateTime dt) {","lastModifiedDate":"2023-01-27"},{"lineNumber":136,"author":{"gitId":"joellow88"},"content":"        return dt.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":137,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":139,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":140,"author":{"gitId":"joellow88"},"content":"     * Formats a LocalDateTime object in dd/MM/yyyy HHmm format. Used to save TaskList into a text file.","lastModifiedDate":"2023-01-27"},{"lineNumber":141,"author":{"gitId":"joellow88"},"content":"     * @param dt The LocalDateTime object to be formatted.","lastModifiedDate":"2023-01-27"},{"lineNumber":142,"author":{"gitId":"joellow88"},"content":"     * @return The String of the formatted LocalDateTime object.","lastModifiedDate":"2023-01-27"},{"lineNumber":143,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"joellow88"},"content":"    public static String formatSave(LocalDateTime dt) {","lastModifiedDate":"2023-01-27"},{"lineNumber":145,"author":{"gitId":"joellow88"},"content":"        return dt.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":146,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":147,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"joellow88":147}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"     * Constructs a Deadline task with the given description, completion status and deadline.","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"     * The deadline given has to be in either formats below.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"     * dd/MM/yyyy HHmm","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"     * HHmm","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"     * dd/MM/yyyy ","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"     * @param isDone The done status of the Deadline task.","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"     * @param deadline The deadline of the Deadline task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"    public Deadline(String description, boolean isDone, String deadline) {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"        this.deadline \u003d DateTimeParser.parseInput(deadline);","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"     * Constructs a Deadline task with the given description and deadline.","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"     * The deadline given has to be in either formats below.","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"     * The isDone status defaults to false.","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"     * @param deadline The deadline of the Deadline task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"        this.deadline \u003d DateTimeParser.parseInput(deadline);","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"     * Formats the Deadline task to be printed by Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"     * @return The formatted Deadline task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-18"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"        return String.format(\"[D][%s] %s (by: %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"                (super.isDone() ? \"X\" : \" \"),","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"                super.getDescription(),","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"                DateTimeParser.formatOutput(this.deadline));","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"     * Formats the Deadline task to be saved in a format recognisable by Storage.","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"     * @return The formatted Deadline task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"    public String formatTask() {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"        return String.format(\"deadline~-~-~%s~-~-~%s~-~-~%s\",","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"                this.getDescription(),","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"                DateTimeParser.formatSave(this.deadline),","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"                this.isDone() ? \"X\" : \"O\");","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"joellow88":59}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"import javafx.scene.text.TextAlignment;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"    private Label text;","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"        text \u003d l;","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"        displayPicture \u003d iv;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"        text.setWrapText(true);","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"        displayPicture.setFitWidth(100.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"        displayPicture.setFitHeight(100.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"        this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"        this.setPadding(new Insets(20, 0, 20, 0));","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"    private void flip() {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"    public static DialogBox getUserDialog(Label l, Image i) {","lastModifiedDate":"2023-02-09"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"        l.setPadding(new Insets(0, 10, 0, 10));","lastModifiedDate":"2023-02-09"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"        l.setTextAlignment(TextAlignment.RIGHT);","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"        ImageView iv \u003d new ImageView();","lastModifiedDate":"2023-02-09"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"        iv.setImage(i);","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"        DialogBox d \u003d new DialogBox(l, iv);","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"        return d;","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"    public static DialogBox getDukeDialog(Label l, Image i) {","lastModifiedDate":"2023-02-09"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"        l.setPadding(new Insets(0, 10, 0, 10));","lastModifiedDate":"2023-02-09"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"        ImageView iv \u003d new ImageView();","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"        iv.setImage(i);","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"        var d \u003d new DialogBox(l, iv);","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"        d.flip();","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"        return d;","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"    public static DialogBox getStartingDialog(Image i) {","lastModifiedDate":"2023-02-09"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"        return getDukeDialog(","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"                new Label(\"Duke: \\n\" +","lastModifiedDate":"2023-02-09"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"                        \"Hello! I am Duke! How may I help you today?\"),","lastModifiedDate":"2023-02-09"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"                i);","lastModifiedDate":"2023-02-09"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"joellow88":66}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"    private final GuiHandler ui;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"    Duke() {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"        this.ui \u003d new GuiHandler();","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"     * Main function for running Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"     * @param args","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"        Duke d \u003d new Duke();","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"        Application.launch(d.ui.getClass(), args);","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"joellow88":18,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"    private LocalDateTime startTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"     * Constructs an event task with the given description, completion status, start time and end time.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"     * The start and end times given has to be in either formats below.","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"     * dd/MM/yyyy HHmm","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"     * HHmm","lastModifiedDate":"2023-01-27"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"     * dd/MM/yyyy ","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"     * @param description The description of Event task.","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"     * @param isDone The done status of the Event task.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"     * @param startTime The start time of the Event task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"     * @param endTime The end time of the Event task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"    public Event(String description, boolean isDone, String startTime, String endTime) {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"        this.startTime \u003d DateTimeParser.parseInput(startTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"        this.endTime \u003d DateTimeParser.parseInput(endTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"     * Constructs an event task with the given description, start time and end time.","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"     * The start and end times given has to be in either formats below.","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"     * The isDone status defaults to false.","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"     * dd/MM/yyyy HHmm","lastModifiedDate":"2023-01-27"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"     * HHmm","lastModifiedDate":"2023-01-27"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"     * dd/MM/yyyy ","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"     * @param description The description of Event task.","lastModifiedDate":"2023-01-27"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"     * @param startTime The start time of the Event task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"     * @param endTime The end time of the Event task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"    public Event(String description, String startTime, String endTime) {","lastModifiedDate":"2023-01-18"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"        this.startTime \u003d DateTimeParser.parseInput(startTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        this.endTime \u003d DateTimeParser.parseInput(endTime);","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"     * Formats the Event task to be printed by Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"     * @return The formatted Event task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-18"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"        return String.format(\"[E][%s] %s (%s - %s)\",","lastModifiedDate":"2023-01-18"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"                (super.isDone() ? \"X\" : \" \"),","lastModifiedDate":"2023-01-18"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"                super.getDescription(),","lastModifiedDate":"2023-01-18"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"                DateTimeParser.formatOutput(this.startTime),","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"                DateTimeParser.formatOutput(this.endTime));","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"     * Formats the Event task to be saved in a format recognisable by Storage.","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"     * @return The formatted Event task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"    public String formatTask() {","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"        return String.format(\"event~-~-~%s~-~-~%s~-~-~%s~-~-~%s\",","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"                this.getDescription(),","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"                DateTimeParser.formatSave(this.startTime),","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"                DateTimeParser.formatSave(this.endTime),","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"                this.isDone() ? \"X\" : \"O\");","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"joellow88":68}},{"path":"src/main/java/duke/GuiHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-02-02"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-02"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-02"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-02"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"public class GuiHandler extends Application {","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-02"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    private Scene scene;","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"    private Image userHappy \u003d new Image(this.getClass().getResourceAsStream(\"/images/happy.png\"));","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"    private Image userSmile \u003d new Image(this.getClass().getResourceAsStream(\"/images/smile.png\"));","lastModifiedDate":"2023-02-09"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"    private Image userNeutral \u003d new Image(this.getClass().getResourceAsStream(\"/images/neutral.png\"));","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"    private Image userScared \u003d new Image(this.getClass().getResourceAsStream(\"/images/scared.png\"));","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"    private Image userCmi \u003d new Image(this.getClass().getResourceAsStream(\"/images/cmi.png\"));","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke2.png\"));","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"    private Parser parser \u003d new Parser();","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"    private CommandHandler commandHandler \u003d new CommandHandler();","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"    private final Storage storage \u003d new Storage(\"./data/duke.txt\");","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"    private TaskList tasks \u003d this.storage.loadData();","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"        //Step 1. Setting up required components","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"        //The container for the content of the chat to scroll.","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-02-02"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"        stage.show();","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-02-02"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"joellow88"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"joellow88"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"joellow88"},"content":"        //Step 2.1. Add Duke starting dialog","lastModifiedDate":"2023-02-09"},{"lineNumber":85,"author":{"gitId":"joellow88"},"content":"        dialogContainer.getChildren().add(DialogBox.getStartingDialog(duke));","lastModifiedDate":"2023-02-09"},{"lineNumber":86,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":87,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"joellow88"},"content":"        //Step 3. Add functionality to handle user input.","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"joellow88"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"joellow88"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"joellow88"},"content":"        });","lastModifiedDate":"2023-02-02"},{"lineNumber":92,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"joellow88"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"joellow88"},"content":"            handleUserInput();","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"joellow88"},"content":"        });","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"joellow88"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-02-02"},{"lineNumber":98,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":99,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":100,"author":{"gitId":"joellow88"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"joellow88"},"content":"        Image user;","lastModifiedDate":"2023-02-09"},{"lineNumber":102,"author":{"gitId":"joellow88"},"content":"        int numTasks \u003d tasks.size();","lastModifiedDate":"2023-02-09"},{"lineNumber":103,"author":{"gitId":"joellow88"},"content":"        if (numTasks \u003c\u003d 1) {","lastModifiedDate":"2023-02-09"},{"lineNumber":104,"author":{"gitId":"joellow88"},"content":"            user \u003d userHappy;","lastModifiedDate":"2023-02-09"},{"lineNumber":105,"author":{"gitId":"joellow88"},"content":"        } else if (numTasks \u003d\u003d 2) {","lastModifiedDate":"2023-02-09"},{"lineNumber":106,"author":{"gitId":"joellow88"},"content":"            user \u003d userSmile;","lastModifiedDate":"2023-02-09"},{"lineNumber":107,"author":{"gitId":"joellow88"},"content":"        } else if (numTasks \u003d\u003d 3) {","lastModifiedDate":"2023-02-09"},{"lineNumber":108,"author":{"gitId":"joellow88"},"content":"            user \u003d userNeutral;","lastModifiedDate":"2023-02-09"},{"lineNumber":109,"author":{"gitId":"joellow88"},"content":"        } else if (numTasks \u003d\u003d 4) {","lastModifiedDate":"2023-02-09"},{"lineNumber":110,"author":{"gitId":"joellow88"},"content":"            user \u003d userScared;","lastModifiedDate":"2023-02-09"},{"lineNumber":111,"author":{"gitId":"joellow88"},"content":"        } else {","lastModifiedDate":"2023-02-09"},{"lineNumber":112,"author":{"gitId":"joellow88"},"content":"            user \u003d userCmi;","lastModifiedDate":"2023-02-09"},{"lineNumber":113,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":114,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":115,"author":{"gitId":"joellow88"},"content":"        Label userText \u003d new Label(\"You: \\n\" + userInput.getText());","lastModifiedDate":"2023-02-02"},{"lineNumber":116,"author":{"gitId":"joellow88"},"content":"        Label dukeText \u003d new Label(\"Duke: \\n\" + getResponse(userInput.getText()));","lastModifiedDate":"2023-02-02"},{"lineNumber":117,"author":{"gitId":"joellow88"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-02"},{"lineNumber":118,"author":{"gitId":"joellow88"},"content":"                DialogBox.getUserDialog(userText, user),","lastModifiedDate":"2023-02-09"},{"lineNumber":119,"author":{"gitId":"joellow88"},"content":"                DialogBox.getDukeDialog(dukeText, duke)","lastModifiedDate":"2023-02-09"},{"lineNumber":120,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":122,"author":{"gitId":"joellow88"},"content":"        if (userInput.getText().equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":123,"author":{"gitId":"joellow88"},"content":"            Platform.exit();","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"joellow88"},"content":"            System.exit(0);","lastModifiedDate":"2023-02-09"},{"lineNumber":125,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":126,"author":{"gitId":"joellow88"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-02"},{"lineNumber":127,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":128,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":129,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"joellow88"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2023-02-02"},{"lineNumber":131,"author":{"gitId":"joellow88"},"content":"        Command command \u003d this.parser.parseCommand(input);","lastModifiedDate":"2023-02-02"},{"lineNumber":132,"author":{"gitId":"joellow88"},"content":"        String response;","lastModifiedDate":"2023-02-02"},{"lineNumber":133,"author":{"gitId":"joellow88"},"content":"        response \u003d this.commandHandler.handleCommand(command, tasks, storage);","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"joellow88"},"content":"        return response;","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-02-02"},{"lineNumber":136,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":137,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-02-02"}],"authorContributionMap":{"joellow88":137}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"public class Parser {","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"    Parser() { }","lastModifiedDate":"2023-02-10"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"     * Parses a given input string command. Determines its validity, and returns a corresponding Command object.","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"     * @param input The input command to be parsed, given as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"     * @return The parsed command as a Command object.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"    public Command parseCommand(String input) {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"            return new Command(\"bye\");","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"            return new Command(\"list\");","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"        } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"            if (!input.matches(\"^mark \\\\d+$\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"                return new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"                        \"Please enter one task which you would like to mark as done.\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"            String taskIndex \u003d input.split(\" \")[1];","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"            return new Command(\"mark\", taskIndex);","lastModifiedDate":"2023-02-02"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"        } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"            if (!input.matches(\"^unmark \\\\d+$\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"                return new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"                        \"Please enter one task which you would like to mark as undone.\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"            String taskIndex \u003d input.split(\" \")[1];","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"            return new Command(\"unmark\", taskIndex);","lastModifiedDate":"2023-02-02"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"        } else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"            if (!input.matches(\"^todo .+$\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"                return new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"                        \"Please enter the task you would like to do in the format \\n\u003e\u003e todo [task]\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"            String taskDescription \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"            return new Command(\"todo\", taskDescription);","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"            if (!input.matches(\"^deadline .+ /by .+$\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"                return new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify a deadline task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"                                \"\u003e\u003e deadline [description] /by [time]\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"            String delimiter \u003d \"/by \";","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"            String taskDescription \u003d input.substring(\"deadline \".length(), input.indexOf(delimiter) - 1);","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"            String taskBy \u003d input.substring(input.indexOf(delimiter) + delimiter.length());","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"            return new Command(\"deadline\", taskDescription, taskBy);","lastModifiedDate":"2023-02-02"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"            if (!input.matches(\"^event .+ /from .+ /to .+$\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"                return new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify an event task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"                        \"\u003e\u003e event [description] /from [start time] /to [end time]\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"            String startDelimiter \u003d \"/from \";","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"            String endDelimiter \u003d \"/to \";","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"            String taskDescription \u003d input.substring(\"event \".length(), input.indexOf(startDelimiter) - 1);","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"            String startTime \u003d input.substring(","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"                    input.indexOf(startDelimiter) + startDelimiter.length(),","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"                    input.indexOf(endDelimiter) - 1);","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"            String endTime \u003d input.substring(","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"                    input.indexOf(endDelimiter) + endDelimiter.length());","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"            return new Command(\"event\", taskDescription, startTime, endTime);","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"            if (!input.matches(\"^delete \\\\d+$\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"                return new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"                        \"Tell me the index of the event you want to delete! \" +","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"                        \"Type \u003e\u003elist to view your events again.\\n\");","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"            String taskIndex \u003d input.split(\" \")[1];","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"            return new Command(\"delete\", taskIndex);","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"joellow88"},"content":"            if (!input.matches(\"^find .+$\")) {","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"joellow88"},"content":"                return new Command(\"invalid\", \"What task are you looking for?\\n\");","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-02-10"},{"lineNumber":84,"author":{"gitId":"joellow88"},"content":"            String taskToFind \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"joellow88"},"content":"            return new Command(\"find\", taskToFind);","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-02-10"},{"lineNumber":87,"author":{"gitId":"joellow88"},"content":"        } else {","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"joellow88"},"content":"            return new Command(\"noMatch\");","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":93,"author":{"gitId":"joellow88"},"content":"     * Parses a saved task into a Task object.","lastModifiedDate":"2023-01-27"},{"lineNumber":94,"author":{"gitId":"joellow88"},"content":"     * @param data The saved task read from the database, read as a string.","lastModifiedDate":"2023-01-27"},{"lineNumber":95,"author":{"gitId":"joellow88"},"content":"     * @return The parsed task corresponding to the input data string.","lastModifiedDate":"2023-01-27"},{"lineNumber":96,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":97,"author":{"gitId":"joellow88"},"content":"    public Task parseTask(String data) {","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"joellow88"},"content":"        String[] arguments \u003d data.split(\"~-~-~\");","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"joellow88"},"content":"        assert arguments[0].matches(\"(todo|deadline|event)\");","lastModifiedDate":"2023-02-10"},{"lineNumber":100,"author":{"gitId":"joellow88"},"content":"        if (arguments[0].equals(\"todo\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"joellow88"},"content":"            assert arguments.length \u003d\u003d 3 : \"Todo has incorrect arguments\";","lastModifiedDate":"2023-02-10"},{"lineNumber":102,"author":{"gitId":"joellow88"},"content":"            return new Todo(arguments[1], arguments[2].equals(\"X\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"joellow88"},"content":"        } else if (arguments[0].equals(\"deadline\")) {","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"joellow88"},"content":"            assert arguments.length \u003d\u003d 4;","lastModifiedDate":"2023-02-10"},{"lineNumber":105,"author":{"gitId":"joellow88"},"content":"            return new Deadline(arguments[1], arguments[3].equals(\"X\"), arguments[2]);","lastModifiedDate":"2023-01-26"},{"lineNumber":106,"author":{"gitId":"joellow88"},"content":"        } else if (arguments[0].equals(\"event\")) {","lastModifiedDate":"2023-02-10"},{"lineNumber":107,"author":{"gitId":"joellow88"},"content":"            assert arguments.length \u003d\u003d 5;","lastModifiedDate":"2023-02-10"},{"lineNumber":108,"author":{"gitId":"joellow88"},"content":"            return new Event(arguments[1], arguments[4].equals(\"X\"), arguments[2], arguments[3]);","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"joellow88"},"content":"        } else {","lastModifiedDate":"2023-02-10"},{"lineNumber":110,"author":{"gitId":"joellow88"},"content":"            throw new RuntimeException(\"Unable to parse tasks from saved file!\");","lastModifiedDate":"2023-02-10"},{"lineNumber":111,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"joellow88":113}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.io.File;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"public class Storage {","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"    String path;","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"    File file;","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"    Parser parser;","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"    public Storage() {","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"        this.path \u003d null;","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"        this.file \u003d null;","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"        this.parser \u003d null;","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"     * Checks if a given path exists. If it does not exist, create the file.","lastModifiedDate":"2023-01-27"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"     * Creates a Storage object with the given path.","lastModifiedDate":"2023-01-27"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"     * @param path The path which the Storage object will store and read the saved tasks from.","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"    public Storage(String path) {","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"        this.file \u003d new File(path);","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"        ","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"        if (! file.exists()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"            if (! file.getParentFile().exists()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"            try {","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"                file.createNewFile();","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"                System.out.println(\"Unable to create new database file.\");","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        assert file.exists() : \"Storage file does not exist!\";","lastModifiedDate":"2023-02-10"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"     * Loads a previously saved database file and returns the TaskList corresponding to the saved database file.","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"     * @return A TaskList corresponding to the saved database file.","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"    public TaskList loadData() {","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"        Scanner s;","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"            s \u003d new Scanner(this.file);","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"            System.out.println(\"Unable to read database.\");","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"            return new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"            taskList.add(this.parser.parseTask(s.nextLine()));","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"        return taskList;","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"     * Saves a TaskList into a database in the previously specified path.","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"     * @param taskList The TaskList to be saved to the database.","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"     * @throws IOException Exception thrown if the database file does not exist.","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"    public void saveData(TaskList taskList) {","lastModifiedDate":"2023-02-02"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"        if (path \u003d\u003d null) {","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"            return;","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"        assert file.exists() : \"File does not exist!\";","lastModifiedDate":"2023-02-10"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"        try {","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"            FileWriter fw \u003d new FileWriter(this.file);","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"            for (Task task : taskList.getTasks()) {","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"                fw.write(task.formatTask() + System.lineSeparator());","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"            fw.close();","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"            System.out.println(e);","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"joellow88":85}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"abstract class Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"    private String description;","lastModifiedDate":"2023-01-17"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-17"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-17"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-17"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"            throw new IllegalArgumentException(\"duke.Task cannot be empty!\");","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-17"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-17"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-17"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"        return description;","lastModifiedDate":"2023-01-17"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-17"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"        return isDone;","lastModifiedDate":"2023-01-17"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-01-17"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-01-17"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-17"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"        return String.format(\"[%s] %s\", (isDone ? \"X\" : \" \"), description);","lastModifiedDate":"2023-01-17"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-17"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"    abstract public String formatTask();","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"joellow88":32}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"import java.util.List;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"public class TaskList {","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"    private final List\u003cTask\u003e lst;","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"     * Creates an empty TaskList.","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"    TaskList() {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"        this.lst \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"     * Returns an ArrayList of the tasks in the TaskList.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"     * @return An ArrayList of the tasks in the TaskList.","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"        return lst;","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"     * Returns the task at the specified position in this list.","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"     * @param index Index of the task to return","lastModifiedDate":"2023-01-27"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"     * @return The element at the index position in this list","lastModifiedDate":"2023-01-27"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"        return this.lst.get(index);","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"     * Appends the specified task to the end of this list.","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"     * @param task Task to be appended to this list","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"     * @return This TaskList object","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"    public TaskList add(Task task) {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        this.lst.add(task);","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"        return this;","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"     * Removes the task at the specified position in this list. Shifts any subsequent task to the left (subtracts one from their indices).","lastModifiedDate":"2023-01-27"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"     * @param index the index of the task to be removed","lastModifiedDate":"2023-01-27"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"     * @return This TaskList object","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"    public TaskList remove(int index) {","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"        this.lst.remove(index);","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"        return this;","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"     * Returns true if this list contains no tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"     * @return true if this list contains no tasks.","lastModifiedDate":"2023-01-27"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"        return this.lst.isEmpty();","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"     * Returns the number of tasks in this list.","lastModifiedDate":"2023-01-27"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"     * @return the number of tasks in this list","lastModifiedDate":"2023-01-27"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"    public int size() {","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"        return this.lst.size();","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"    public TaskList find(String taskToFind) {","lastModifiedDate":"2023-01-27"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"        TaskList foundTasks \u003d new TaskList();","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"        for (Task t : this.lst) {","lastModifiedDate":"2023-01-27"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"            if (t.getDescription().contains(taskToFind)) {","lastModifiedDate":"2023-01-27"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"                foundTasks.add(t);","lastModifiedDate":"2023-01-27"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"        return foundTasks;","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-27"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"joellow88":80}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import duke.Task;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-18"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"     * Constructs an Todo task with the given description and completion status.","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"     * @param description The description of Todo task.","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"     * @param isDone The done status of the Todo task.","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"     * Constructs an Todo task with the given description. isDone status defaults to false.","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"     * @param description The description of Todo task.","lastModifiedDate":"2023-01-27"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-18"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"        super(description);","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"     * Formats the Todo task to be printed by Duke.","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"     * @return The formatted Todo task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-18"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"    public String printTask() {","lastModifiedDate":"2023-01-18"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"        return String.format(\"[T][%s] %s\",","lastModifiedDate":"2023-01-18"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"                (super.isDone() ? \"X\" : \" \"),","lastModifiedDate":"2023-01-18"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"                super.getDescription());","lastModifiedDate":"2023-01-18"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"     * Formats the Todo task to be saved in a format recognisable by Storage.","lastModifiedDate":"2023-01-27"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"     * @return The formatted Todo task as a String.","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"    @Override","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"    public String formatTask() {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        return String.format(\"todo~-~-~%s~-~-~%s\",","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"                this.getDescription(),","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"                this.isDone() ? \"X\" : \"O\");","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"joellow88":44}},{"path":"src/test/java/duke/CommandHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"public class CommandHandlerTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"    public void testEndDuke() {","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Bye! Hope to see you again soon!\\n\", ","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"                        new Command(\"bye\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"                        new TaskList(),","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"                        new Storage()));","lastModifiedDate":"2023-02-02"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"    public void testShowTasks() {","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"1.[T][ ] CS2103\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"                        new Command(\"list\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"                        new TaskList().add(new Todo(\"CS2103\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"                        new Storage()));","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"    public void showTasks_noTasks_noItemsResponse() {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"You currently have no items in your to-do list!\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"                        new Command(\"list\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"                        new TaskList(),","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"                        new Storage()));","lastModifiedDate":"2023-02-02"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"    public void markTask_taskPresent_markedResponse() {","lastModifiedDate":"2023-01-26"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Okay! I\u0027ve marked this task as done!\\n[D][X] Tutorial (by: 28 Feb 2024 11:59PM)\\n\",","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"                        new Command(\"mark\", \"1\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"                        new TaskList().add(new Deadline(\"Tutorial\", \"28/02/2024 2359\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"                        new Storage()));","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"    public void markTask_taskNotPresent_failedResponse() {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"You don\u0027t have that many tasks!\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"                        new Command(\"mark\", \"3\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"                        new TaskList().add(new Deadline(\"Tutorial\", \"2359\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"                        new Storage()));","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"    public void unmarkTask_taskPresent_unmarkedResponse() {","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Okay! I\u0027ve marked this task as not done yet!\\n[T][ ] Find girlfriend\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"                        new Command(\"unmark\", \"2\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"                        new TaskList()","lastModifiedDate":"2023-01-26"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"                                .add(new Deadline(\"Tutorial\", \"2222\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"                                .add(new Todo(\"Find girlfriend\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-26"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"    public void unmarkTask_taskNotPresent_failedResponse() {","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"You don\u0027t have that many tasks!\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"                        new Command(\"unmark\", \"5\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"                        new TaskList()","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"                                .add(new Deadline(\"Tutorial\", \"2359\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"                                .add(new Todo(\"Find girlfriend\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-26"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"    public void testAddTodo() {","lastModifiedDate":"2023-01-26"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Added: [T][ ] Find girlfriend\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":81,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":82,"author":{"gitId":"joellow88"},"content":"                        new Command(\"todo\", \"Find girlfriend\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"joellow88"},"content":"                        new TaskList(),","lastModifiedDate":"2023-02-02"},{"lineNumber":84,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":85,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-26"},{"lineNumber":87,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":88,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":89,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"joellow88"},"content":"    public void testAddDeadline() {","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Added: [D][ ] Project (by: 31 Dec 2022 01:30PM)\\n\",","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"joellow88"},"content":"                        new Command(\"deadline\", \"Project\", \"31/12/2022 1330\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"joellow88"},"content":"                        new TaskList(),","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":101,"author":{"gitId":"joellow88"},"content":"    public void testAddEvent() {","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Added: [E][ ] Project meeting (31 Dec 2022 11:30AM - 31 Dec 2022 12:30PM)\\n\",","lastModifiedDate":"2023-01-27"},{"lineNumber":103,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"joellow88"},"content":"                        new Command(\"event\",","lastModifiedDate":"2023-02-02"},{"lineNumber":105,"author":{"gitId":"joellow88"},"content":"                                \"Project meeting\",","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"joellow88"},"content":"                                \"31/12/2022 1130\",","lastModifiedDate":"2023-02-02"},{"lineNumber":107,"author":{"gitId":"joellow88"},"content":"                                \"31/12/2022 1230\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"joellow88"},"content":"                        new TaskList(),","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":110,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":113,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":114,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":115,"author":{"gitId":"joellow88"},"content":"    public void testNoMatch() {","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Sorry, I didn\u0027t understand that, please ask again.\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":117,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":118,"author":{"gitId":"joellow88"},"content":"                        new Command(\"noMatch\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"joellow88"},"content":"                        new TaskList(),","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-26"},{"lineNumber":122,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":126,"author":{"gitId":"joellow88"},"content":"    public void deleteEvent_taskPresent_deletedResponse() {","lastModifiedDate":"2023-01-26"},{"lineNumber":127,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Okay! I deleted task [D][ ] Tutorial (by: 31 Jan 2023 11:59PM)\\n\",","lastModifiedDate":"2023-01-27"},{"lineNumber":128,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":129,"author":{"gitId":"joellow88"},"content":"                        new Command(\"delete\", \"1\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"joellow88"},"content":"                        new TaskList().add(new Deadline(\"Tutorial\", \"31/01/2023 2359\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":131,"author":{"gitId":"joellow88"},"content":"                        new Storage()));","lastModifiedDate":"2023-02-02"},{"lineNumber":132,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":133,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":134,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":135,"author":{"gitId":"joellow88"},"content":"    public void testInvalid() {","lastModifiedDate":"2023-01-26"},{"lineNumber":136,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"Please enter one task which you would like to mark as done.\\n\",","lastModifiedDate":"2023-01-26"},{"lineNumber":137,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-26"},{"lineNumber":138,"author":{"gitId":"joellow88"},"content":"                        new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":139,"author":{"gitId":"joellow88"},"content":"                                \"Please enter one task which you would like to mark as done.\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":140,"author":{"gitId":"joellow88"},"content":"                        new TaskList(),","lastModifiedDate":"2023-02-02"},{"lineNumber":141,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":142,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-26"},{"lineNumber":143,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-26"},{"lineNumber":144,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":145,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":146,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":147,"author":{"gitId":"joellow88"},"content":"    public void findTasks_tasksPresent_tasksFound() {","lastModifiedDate":"2023-01-27"},{"lineNumber":148,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"I found these tasks in your task list!\\n[T][ ] stuff turkey\\n[T][ ] stuff chicken\\n\",","lastModifiedDate":"2023-01-27"},{"lineNumber":149,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-27"},{"lineNumber":150,"author":{"gitId":"joellow88"},"content":"                        new Command(\"find\", \"stuff\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":151,"author":{"gitId":"joellow88"},"content":"                        new TaskList().add(new Todo(\"stuff turkey\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":152,"author":{"gitId":"joellow88"},"content":"                                .add(new Todo(\"stuff chicken\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":153,"author":{"gitId":"joellow88"},"content":"                                .add(new Todo(\"don\u0027t fill birds\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":154,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":155,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-27"},{"lineNumber":156,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-27"},{"lineNumber":157,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":158,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":159,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":160,"author":{"gitId":"joellow88"},"content":"    public void findTasks_tasksNotPresent_noTasksFound() {","lastModifiedDate":"2023-01-27"},{"lineNumber":161,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"You don\u0027t have any tasks matching that description!\\n\",","lastModifiedDate":"2023-01-27"},{"lineNumber":162,"author":{"gitId":"joellow88"},"content":"                new CommandHandler().handleCommand(","lastModifiedDate":"2023-01-27"},{"lineNumber":163,"author":{"gitId":"joellow88"},"content":"                        new Command(\"find\", \"cook\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":164,"author":{"gitId":"joellow88"},"content":"                        new TaskList().add(new Todo(\"stuff turkey\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":165,"author":{"gitId":"joellow88"},"content":"                                .add(new Todo(\"stuff chicken\"))","lastModifiedDate":"2023-01-27"},{"lineNumber":166,"author":{"gitId":"joellow88"},"content":"                                .add(new Todo(\"don\u0027t fill birds\")),","lastModifiedDate":"2023-02-02"},{"lineNumber":167,"author":{"gitId":"joellow88"},"content":"                        new Storage()","lastModifiedDate":"2023-02-02"},{"lineNumber":168,"author":{"gitId":"joellow88"},"content":"                )","lastModifiedDate":"2023-01-27"},{"lineNumber":169,"author":{"gitId":"joellow88"},"content":"        );","lastModifiedDate":"2023-01-27"},{"lineNumber":170,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":171,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-27"},{"lineNumber":172,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":173,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"joellow88":173}},{"path":"src/test/java/duke/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"public class CommandTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"    public void testGetDescription() {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"        assertEquals(\"todo\", new Command(\"todo\").getDescription());","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"    public void testGetArguments() {","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"        String[] s \u003d new String[] {\"3pm\", \"tomorrow\"};","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"        assertArrayEquals(s,","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"                new Command(\"event\", \"3pm\", \"tomorrow\").getArguments());","lastModifiedDate":"2023-02-02"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"    ","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"joellow88":20}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"package duke;","lastModifiedDate":"2023-01-26"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-26"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"import java.util.List;","lastModifiedDate":"2023-01-26"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-26"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"public class ParserTest {","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_commandBye() {","lastModifiedDate":"2023-01-26"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"bye\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"bye\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_commandList() {","lastModifiedDate":"2023-01-26"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"list\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"list\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_markValidInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"mark\", \"12\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"mark 12\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_markInvalidArgument() {","lastModifiedDate":"2023-01-26"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"                        \"Please enter one task which you would like to mark as done.\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":30,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"mark cxvx\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":31,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":32,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":33,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_markNoArgument() {","lastModifiedDate":"2023-01-26"},{"lineNumber":34,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":35,"author":{"gitId":"joellow88"},"content":"                        \"Please enter one task which you would like to mark as done.\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"mark\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":37,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":39,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_unmarkValidInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":40,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"unmark\", \"12\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":41,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"unmark 12\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":42,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":43,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":44,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_unmarkInvalidArgument() {","lastModifiedDate":"2023-01-26"},{"lineNumber":45,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"joellow88"},"content":"                        \"Please enter one task which you would like to mark as undone.\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"unmark 345f\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":48,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":49,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":50,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_unmarkNoArgument() {","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":52,"author":{"gitId":"joellow88"},"content":"                        \"Please enter one task which you would like to mark as undone.\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"unmark\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":54,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":55,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":56,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_todoValidInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":57,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"todo\", \"Get some sleep\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":58,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"todo Get some sleep\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":59,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":60,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":61,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_todoNoInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":62,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":63,"author":{"gitId":"joellow88"},"content":"                        \"Please enter the task you would like to do in the format \\n\u003e\u003e todo [task]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"todo\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":65,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":66,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":67,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_todoNoSpaceInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":68,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":69,"author":{"gitId":"joellow88"},"content":"                        \"Please enter the task you would like to do in the format \\n\u003e\u003e todo [task]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"todoget some sleep\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":71,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":72,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":73,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_deadlineValidInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":74,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"deadline\", \"homework\", \"4pm\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"deadline homework /by 4pm\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":76,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":77,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":78,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_deadlineNoInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":79,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":80,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify a deadline task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"joellow88"},"content":"                                \"\u003e\u003e deadline [description] /by [time]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"deadline\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":83,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":84,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":85,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_deadlineNoArgumentBy() {","lastModifiedDate":"2023-01-26"},{"lineNumber":86,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify a deadline task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":88,"author":{"gitId":"joellow88"},"content":"                                \"\u003e\u003e deadline [description] /by [time]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"deadline do homework\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":90,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":91,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":92,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_deadlineNoTask() {","lastModifiedDate":"2023-01-26"},{"lineNumber":93,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify a deadline task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":95,"author":{"gitId":"joellow88"},"content":"                                \"\u003e\u003e deadline [description] /by [time]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":96,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"deadline /by tomorrow\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":97,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":98,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":99,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_eventValidInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":100,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"event\", \"AnimeFest2023\", \"June\", \"July\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":101,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"event AnimeFest2023 /from June /to July\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":102,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":103,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":104,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_eventNoInput() {","lastModifiedDate":"2023-01-26"},{"lineNumber":105,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify an event task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":107,"author":{"gitId":"joellow88"},"content":"                                \"\u003e\u003e event [description] /from [start time] /to [end time]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":108,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"event\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":109,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":110,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":111,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_eventNoArgumentTo() {","lastModifiedDate":"2023-01-26"},{"lineNumber":112,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":113,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify an event task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"joellow88"},"content":"                                \"\u003e\u003e event [description] /from [start time] /to [end time]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":115,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"event AnimeFest2023 /from today\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":116,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":117,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":118,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_eventNoArgumentFrom() {","lastModifiedDate":"2023-01-26"},{"lineNumber":119,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":120,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify an event task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":121,"author":{"gitId":"joellow88"},"content":"                        \"\u003e\u003e event [description] /from [start time] /to [end time]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":122,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"event AnimeFest2023 /to next year\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":123,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":124,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-26"},{"lineNumber":125,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_eventNoTask() {","lastModifiedDate":"2023-01-26"},{"lineNumber":126,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\",","lastModifiedDate":"2023-02-02"},{"lineNumber":127,"author":{"gitId":"joellow88"},"content":"                        \"Sorry, that command is invalid. Specify an event task with \\n\" +","lastModifiedDate":"2023-02-02"},{"lineNumber":128,"author":{"gitId":"joellow88"},"content":"                                \"\u003e\u003e event [description] /from [start time] /to [end time]\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":129,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"event /from today /to next year\"));","lastModifiedDate":"2023-01-26"},{"lineNumber":130,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":131,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":132,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":133,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_findValidInput() {","lastModifiedDate":"2023-01-27"},{"lineNumber":134,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"find\", \"stuff\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":135,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"find stuff\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":136,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":137,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":138,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_findValidInputWithSpaces() {","lastModifiedDate":"2023-01-27"},{"lineNumber":139,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"find\", \"stuff turkey\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":140,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"find stuff turkey\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":141,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":142,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":143,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_findInvalidInput() {","lastModifiedDate":"2023-01-27"},{"lineNumber":144,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\", \"What task are you looking for?\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":145,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"find\"));","lastModifiedDate":"2023-01-27"},{"lineNumber":146,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":147,"author":{"gitId":"joellow88"},"content":"    @Test","lastModifiedDate":"2023-01-27"},{"lineNumber":148,"author":{"gitId":"joellow88"},"content":"    public void parseCommand_findInvalidInputWithSpace() {","lastModifiedDate":"2023-01-27"},{"lineNumber":149,"author":{"gitId":"joellow88"},"content":"        assertEquals(new Command(\"invalid\", \"What task are you looking for?\\n\"),","lastModifiedDate":"2023-02-02"},{"lineNumber":150,"author":{"gitId":"joellow88"},"content":"                new Parser().parseCommand(\"find \"));","lastModifiedDate":"2023-01-27"},{"lineNumber":151,"author":{"gitId":"joellow88"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":152,"author":{"gitId":"joellow88"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":153,"author":{"gitId":"joellow88"},"content":"}","lastModifiedDate":"2023-01-26"}],"authorContributionMap":{"joellow88":153}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"joellow88"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"joellow88"},"content":"todo do quiz","lastModifiedDate":"2023-01-18"},{"lineNumber":3,"author":{"gitId":"joellow88"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"joellow88"},"content":"deadline print hello world /by tonight","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"joellow88"},"content":"event career fair /from 11am /to 3pm","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"joellow88"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"joellow88"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"joellow88"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"joellow88"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"event meet friends /from sat 10am /to 4pm","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"joellow88"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"joellow88"},"content":"mark 4","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"joellow88"},"content":"mark 4","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"joellow88"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"joellow88"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"joellow88"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"joellow88"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"delete 2","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"joellow88"},"content":"delete 3","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"joellow88"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"joellow88"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"joellow88"},"content":"deadline","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"joellow88"},"content":"event","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"joellow88"},"content":"deadline do stuff /limit 3am","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"joellow88"},"content":"event midterms /from3pm/to5pm","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"joellow88"},"content":"event midterms /from 3pm","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"joellow88"},"content":"event midterms /from 3pm /until 5pm","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"joellow88"},"content":"delete 4","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"joellow88"},"content":"bye","lastModifiedDate":"2023-01-18"}],"authorContributionMap":{"joellow88":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"joellow88"},"content":"javac -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"joellow88"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"joellow88":2,"-":19}}]
