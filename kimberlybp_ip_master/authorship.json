[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"    archiveBaseName \u003d \"ip\"","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"checkstyle {","lastModifiedDate":"2023-02-17"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"kimberlybp":7,"-":39}},{"path":"data/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"T | 1 | read book","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"D | 0 | return book | 2023-06-06","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"E | 0 | project meeting | Aug 6th 2pm | 4pm","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"T | 1 | join sports club","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"E | 0 | meeting | Aug 7th 5pm | 8pm","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"kimberlybp":5}},{"path":"src/main/java/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" * Represents the command that adds a task to the tasklist.","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    private Task task;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new AddCommand with the specified CommandType and Task.","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     * @param type the type of this Command","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"     * @param task the Task to be added","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"    public AddCommand(CommandType type, Task task) {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"        super(type);","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     * Executes this AddCommand with a specified TaskList, Ui, and Storage.","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     * Adds the specified Task to the TaskList, informs the Ui to display the added task,","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"     * and saves the updated TaskList to the file using the Storage object.","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"     * @param list the TaskList to add the Task to","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui to help inform the user of the addition","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"     * @param storage the Storage to save the updated TaskList to","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"        ui.printOutput(\"Got it. I\u0027ve added this task:\\n\\t\\t\" + task.toString() + \"\\n\\t Now you have \"","lastModifiedDate":"2023-02-17"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"                + (list.getSize() + 1) + \" tasks in the list.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"        list.addTask(task);","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"        storage.saveListToFile(list, ui);","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":41}},{"path":"src/main/java/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":" * Represents the command that ends the conversation with Sirius.","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new ByeCommand with the CommandType of BYE.","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"    public ByeCommand() {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"        super(CommandType.BYE);","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"     * Executes this ByeCommand with the specified TaskList, Ui, and Storage.","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"     * Informs the Ui to show the bye message.","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     * @param list the existing TaskList (not used in this command)","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui object to help display the bye message","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * @param storage the Storage storing the latest TaskList (not used in this command)","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"        ui.showBye();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":31}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":" * Command is an abstract class that represents a command that Sirius can recognise and execute.","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    private CommandType type;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new Command with the specified CommandType.","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     * @param type the type of this Command","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    public Command(CommandType type) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     * Executes the operation that Sirius can perform based on the type of command","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * @param tasks the existing TaskList that the command may need to update","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui object that helps display command execution results to the user","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     * @param storage the Storage object that helps save tasks after the command has been executed","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"     * Returns true if the command type is a bye command, false otherwise.","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"     * @return check if the Command is a bye command","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"    public boolean isBye() {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"        return type.equals(CommandType.BYE);","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"    public CommandType getType() {","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"        return type;","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":43}},{"path":"src/main/java/commands/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":" * Represents the possible types of commands that Sirius can understand.","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"public enum CommandType {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"    LIST(\"list\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"    FIND(\"find\"),","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"    UNKNOWN(\"unknown\"),","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"    BYE(\"bye\");","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    private final String value;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new CommandType with the specified value.","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     * @param value the value of this CommandType","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"    CommandType(String value) {","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"     * Returns whether this CommandType\u0027s value is equal to the specified input, ignoring case.","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"     * @param input the input to compare with this CommandType\u0027s value","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"     * @return whether this CommandType\u0027s value is equal to the specified input, ignoring case","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"    public boolean isEqual(String input) {","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"        return this.value.equalsIgnoreCase(input);","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":38}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" * Represents the command that deletes an existing task from the tasklist.","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    private int taskIndex;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new DeleteCommand with the specified index of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     * @param taskIndex the index of the task to be deleted in the tasklist","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"        super(CommandType.DELETE);","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * Executes this DeleteCommand with a specified TaskList, Ui, and Storage.","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     * Deletes the specified Task in the TaskList using the taskIndex, informs the Ui to display the deleted task,","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     * and saves the updated TaskList to the file using the Storage object.","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"     * @param list the TaskList to delete the Task from","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui to help inform the user of the deletion","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"     * @param storage the Storage to save the updated TaskList to","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"        if (taskIndex \u003e\u003d list.getSize()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"            System.out.println(\"Oopsies.. Seems like that task does not exist :(\");","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"            Task toDelete \u003d list.getTask(taskIndex);","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"            list.deleteTask(taskIndex);","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"            ui.printOutput(\"Ok. I\u0027ve removed this task:\\n\\t\\t\"","lastModifiedDate":"2023-02-17"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"                    + toDelete.toString() + \"\\n\\t Now you have \"","lastModifiedDate":"2023-02-17"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"                    + list.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-02-17"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"            storage.saveListToFile(list, ui);","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":46}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":" * Represents the command that finds tasks using a specified keyword.","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    private String keyword;","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new FindCommand with the specified keyword to search the tasklist for.","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     * @param keyword the keyword of the task description to be searched in the tasklist","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"        super(CommandType.FIND);","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * Executes this FindCommand with a specified TaskList, Ui, and Storage.","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * Uses the search function of the TaskList to search for tasks with descriptions","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     * that match the keyword, then displaying it to the user using the Ui","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"     * @param list the TaskList to search for Tasks with the keyword","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui to help inform the user of the results of the search","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"     * @param storage the Storage to save the updated TaskList to (not used in this command)","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"        TaskList results \u003d list.search(keyword);","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"        sb.append(\"Here are the matching tasks in your list:\\n\\t \");","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"        sb.append(results.toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"        ui.printOutput(sb.toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"kimberlybp":40}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":" * Represents the command that lists the existing tasks currently being stored.","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new ListCommand with the CommandType of LIST.","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"    public ListCommand() {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"        super(CommandType.LIST);","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"     * Executes this ListCommand with a specified TaskList, Ui, and Storage.","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"     * Iterates through the existing TaskList in order to display the existing tasks","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"     * using the Ui","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     * @param list the existing TaskList","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui to help inform the user of all the stored tasks","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * @param storage the Storage storing the latest TaskList (not used in this command)","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"        sb.append(\"Here are the tasks in your list:\\n\\t \");","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"        sb.append(list.toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"        ui.printOutput(sb.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":34}},{"path":"src/main/java/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package commands;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import duke.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import duke.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import duke.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" * Represents the command that toggles the completion status","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":" * of a specific task in the tasklist.","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"    private int taskIndex;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new MarkCommand with the specified CommandType and taskIndex.","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"     * @param type the type of this Command","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"     * @param taskIndex the index of the Task to be updated","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"    public MarkCommand(CommandType type, int taskIndex) {","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"        super(type);","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     * Executes this MarkCommand with a specified TaskList, Ui, and Storage.","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"     * Toggles the completion status of a specific task as done or not done","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"     * depending on the CommandType of the current MarkCommand","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"     * @param list the TaskList to retrieve the existing task from","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui to help inform the user of the update","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"     * @param storage the Storage to save the updated TaskList to","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"        if (taskIndex \u003e\u003d list.getSize()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"            System.out.println(\"Oopsies.. Seems like that task does not exist :(\");","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"            Task currentTask \u003d list.getTask(taskIndex);","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"            if (this.getType().equals(CommandType.MARK)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"                currentTask.markAsDone();","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"                currentTask.markAsNotDone();","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"            ui.printOutput(\"Great :D I knew you could do it! I\u0027ve marked this task as done:\\n\\t\\t\"","lastModifiedDate":"2023-02-17"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"                    + currentTask.toString());","lastModifiedDate":"2023-02-17"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"            storage.saveListToFile(list, ui);","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":51}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import commands.Command;","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":" * The main class that represents the application.","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":" * The class holds a task list, a storage, and a UI,","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":" * uses a scanner to receive user inputs and execute the corresponding commands.","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"    private static final String PATH \u003d \"data/Duke.txt\";","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a Duke object with a specified file path for the storage.","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     * Loads the task list from the file and sets up the UI.","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     * In case of a loading error, shows an error message and creates an empty task list.","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * @param filePath the file path to the storage file","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"        try {","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"            tasks \u003d new TaskList(storage.loadFile());","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"     * Runs the Duke application.","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"     * Continuously receives user inputs, then parses and executes the corresponding commands.","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"     * Exits the program when a bye command is executed.","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"    public void run() {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"        ui.showGreeting();","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"        boolean isBye \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"        while (!isBye) {","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"            try {","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"                String commandInput \u003d sc.nextLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"                Command c \u003d Parser.parse(commandInput);","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"kimberlybp"},"content":"                isBye \u003d c.isBye();","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"kimberlybp"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"kimberlybp"},"content":"                ui.showExceptionError(e);","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"kimberlybp"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"kimberlybp"},"content":"                ui.showDateTimeParseError();","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":60,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":61,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":62,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"kimberlybp"},"content":"     * The main method that creates a Duke object with the default file path and runs the application.","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"kimberlybp"},"content":"     * @param args command line arguments","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"kimberlybp"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"kimberlybp"},"content":"        new Duke(PATH).run();","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kimberlybp":67,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import commands.AddCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import commands.ByeCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import commands.Command;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import commands.CommandType;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"import commands.FindCommand;","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"import commands.ListCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"import commands.MarkCommand;","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"import tasks.Event;","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"import tasks.Todo;","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":" * Represents the Parser that helps to parse input commands","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":" * into recognisable commands that Sirius can execute","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"public class Parser {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     * Returns the CommandType based on the String input given","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * by iterating through the existing CommandType values","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     * @return the CommandType based on the String input given","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"    public static CommandType getCommandType(String input) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"        for (CommandType c : CommandType.values()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"            if (c.isEqual(input)) {","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"                return c;","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"        return CommandType.UNKNOWN;","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"     * Returns a boolean indicating if the description is empty or not","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"     * @param arr an array representation of the user\u0027s input line","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"     * @return if the description given by the user is empty","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"    public static boolean isDescriptionEmpty(String[] arr) {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"        return arr.length \u003d\u003d 1 || arr[1].trim().isEmpty();","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"     * Parses the user\u0027s input and returns a command that is recognised and","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"     * executable by Sirius. It will also handle unknown commands by throwing a","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"     * DukeException","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"kimberlybp"},"content":"     * @param input User\u0027s input from the scanner","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"kimberlybp"},"content":"     * @return A command that represents the input","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"kimberlybp"},"content":"     * @throws DukeException if the input command is not recognised","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"kimberlybp"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"kimberlybp"},"content":"        String[] inputArr \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"kimberlybp"},"content":"        CommandType commandType \u003d getCommandType(inputArr[0]);","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"kimberlybp"},"content":"        int index \u003d 0;","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"kimberlybp"},"content":"        String taskInput \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"kimberlybp"},"content":"        switch (commandType) {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"kimberlybp"},"content":"        case LIST:","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"kimberlybp"},"content":"            return new ListCommand();","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"kimberlybp"},"content":"        case MARK:","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"kimberlybp"},"content":"        case UNMARK:","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"kimberlybp"},"content":"            index \u003d Integer.parseInt(inputArr[1]) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"kimberlybp"},"content":"            return new MarkCommand(commandType, index);","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"kimberlybp"},"content":"        case DELETE:","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"kimberlybp"},"content":"            index \u003d Integer.parseInt(inputArr[1]) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"kimberlybp"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"kimberlybp"},"content":"        case TODO:","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"kimberlybp"},"content":"            if (isDescriptionEmpty(inputArr)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"kimberlybp"},"content":"                throw new DukeException(\"Hey now.. The description of a todo cannot be empty. \u003e:(\");","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"kimberlybp"},"content":"            taskInput \u003d inputArr[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"kimberlybp"},"content":"            Todo todo \u003d new Todo(taskInput);","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"kimberlybp"},"content":"            return new AddCommand(CommandType.TODO, todo);","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"kimberlybp"},"content":"        case DEADLINE:","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"kimberlybp"},"content":"            if (isDescriptionEmpty(inputArr)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"kimberlybp"},"content":"                throw new DukeException(\"Hey now.. The description of a deadline cannot be empty. \u003e:(\");","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"kimberlybp"},"content":"            taskInput \u003d inputArr[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"kimberlybp"},"content":"            String[] deadlineInputArr \u003d taskInput.split(\"/by\", 2);","lastModifiedDate":"2023-02-08"},{"lineNumber":85,"author":{"gitId":"kimberlybp"},"content":"            String deadlineDesc \u003d deadlineInputArr[0].trim();","lastModifiedDate":"2023-02-08"},{"lineNumber":86,"author":{"gitId":"kimberlybp"},"content":"            String by \u003d deadlineInputArr[1].trim();","lastModifiedDate":"2023-02-08"},{"lineNumber":87,"author":{"gitId":"kimberlybp"},"content":"            Deadline deadline \u003d new Deadline(deadlineDesc, by);","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"kimberlybp"},"content":"            return new AddCommand(CommandType.DEADLINE, deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"kimberlybp"},"content":"        case EVENT:","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"kimberlybp"},"content":"            if (isDescriptionEmpty(inputArr)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"kimberlybp"},"content":"                throw new DukeException(\"Hey now.. The description of an event cannot be empty. \u003e:(\");","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"kimberlybp"},"content":"            taskInput \u003d inputArr[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"kimberlybp"},"content":"            String[] eArr \u003d taskInput.split(\"/\");","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"kimberlybp"},"content":"            String eventDesc \u003d eArr[0].trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"kimberlybp"},"content":"            String from \u003d eArr[1].trim().substring(5);","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"kimberlybp"},"content":"            String to \u003d eArr[2].trim().substring(3);","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"kimberlybp"},"content":"            Event event \u003d new Event(eventDesc, from, to);","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"kimberlybp"},"content":"            return new AddCommand(CommandType.EVENT, event);","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"kimberlybp"},"content":"        case FIND:","lastModifiedDate":"2023-02-08"},{"lineNumber":101,"author":{"gitId":"kimberlybp"},"content":"            return new FindCommand(inputArr[1]);","lastModifiedDate":"2023-02-08"},{"lineNumber":102,"author":{"gitId":"kimberlybp"},"content":"        case BYE:","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"kimberlybp"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"kimberlybp"},"content":"        default:","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"kimberlybp"},"content":"            throw new DukeException(\"Huh? What do you mean? :o\");","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":108}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"import java.util.List;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"import tasks.Event;","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-17"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"import tasks.Todo;","lastModifiedDate":"2023-02-17"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":" * Represents the Storage that helps to store the tasks entered by the user","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"public class Storage {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"    private final String filePath;","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new Storage with the specified file path.","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * @param filePath the file path to the storage file","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"     * Loads any existing data from the filePath of the Storage (if such a file in the filePath exists),","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"     * parses each line into a corresponding task and then adds each task into a","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"     * newly initialised arraylist of tasks. Returns the arraylist of tasks loaded.","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"     * @return the arraylist of tasks loaded from the storage file (if any)","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"     * @throws Exception","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"    public List\u003cTask\u003e loadFile() throws Exception {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"        List\u003cTask\u003e initTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"        String line \u003d reader.readLine().trim();","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"        while (line !\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"            String[] strArr \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"            String type \u003d strArr[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"            boolean isCompleted \u003d Integer.parseInt(strArr[1]) \u003d\u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"            String taskDesc \u003d strArr[2];","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"            switch (type) {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"            case \"T\":","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"                initTasks.add(new Todo(taskDesc, isCompleted));","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"kimberlybp"},"content":"            case \"D\":","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"kimberlybp"},"content":"                initTasks.add(new Deadline(taskDesc, isCompleted, strArr[3]));","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"kimberlybp"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"kimberlybp"},"content":"            case \"E\":","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"kimberlybp"},"content":"                initTasks.add(new Event(taskDesc, isCompleted, strArr[3], strArr[4]));","lastModifiedDate":"2023-02-08"},{"lineNumber":57,"author":{"gitId":"kimberlybp"},"content":"                break;","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"kimberlybp"},"content":"            default:","lastModifiedDate":"2023-02-17"},{"lineNumber":59,"author":{"gitId":"kimberlybp"},"content":"                initTasks.add(new Task(taskDesc));","lastModifiedDate":"2023-02-17"},{"lineNumber":60,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"kimberlybp"},"content":"            line \u003d reader.readLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"kimberlybp"},"content":"        return initTasks;","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"kimberlybp"},"content":"     *  Saves tasks into the Storage file by iterating through the specified TaskList.","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"kimberlybp"},"content":"     *  Also handles any saving errors by using the Ui to display the error message","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"kimberlybp"},"content":"     * @param taskList the tasklist to save","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"kimberlybp"},"content":"     * @param ui the Ui to help inform the user of the error","lastModifiedDate":"2023-02-08"},{"lineNumber":72,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":73,"author":{"gitId":"kimberlybp"},"content":"    public void saveListToFile(TaskList taskList, Ui ui) {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"kimberlybp"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"kimberlybp"},"content":"            FileWriter writer \u003d new FileWriter(filePath, false);","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"kimberlybp"},"content":"            List\u003cTask\u003e list \u003d taskList.getTaskList();","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"kimberlybp"},"content":"            for (Task t : list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"kimberlybp"},"content":"                writer.write(t.parseToSave() + \"\\n\");","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"kimberlybp"},"content":"            writer.close();","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"kimberlybp"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"kimberlybp"},"content":"            ui.showSavingError();","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":86}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import java.util.List;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import tasks.Task;","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":" * Represents a list of tasks. It contains methods for adding, retrieving and deleting tasks.","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"public class TaskList {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    private List\u003cTask\u003e list;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"    public TaskList() {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a TaskList from an initial list of tasks.","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * @param initList The initial list of tasks to use for the TaskList.","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"    public TaskList(List\u003cTask\u003e initList) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"        this.list \u003d initList;","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"    public String toString() {","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"            int count \u003d i + 1;","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"            String res \u003d count + \".\" + getTask(i).toString();","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"            if (i !\u003d getSize() - 1) {","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"                res +\u003d \"\\n\\t \";","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"            sb.append(res);","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"     * Retrieves a task from the TaskList at the specified index.","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"        return list.get(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"kimberlybp"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-02-08"},{"lineNumber":57,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"kimberlybp"},"content":"     * @param task The task to add.","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"kimberlybp"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"kimberlybp"},"content":"        list.add(task);","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"kimberlybp"},"content":"     * Deletes a task from the TaskList at the specified index.","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"kimberlybp"},"content":"     * @param index The index of the task to delete.","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"kimberlybp"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"kimberlybp"},"content":"        list.remove(index);","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":74,"author":{"gitId":"kimberlybp"},"content":"     * Gets the number of tasks in the TaskList.","lastModifiedDate":"2023-02-08"},{"lineNumber":75,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":76,"author":{"gitId":"kimberlybp"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2023-02-08"},{"lineNumber":77,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":78,"author":{"gitId":"kimberlybp"},"content":"    public int getSize() {","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"kimberlybp"},"content":"        return list.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":83,"author":{"gitId":"kimberlybp"},"content":"    public List\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"kimberlybp"},"content":"        return list;","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":87,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":88,"author":{"gitId":"kimberlybp"},"content":"     * Iterates through the existing TaskList in order to find tasks with descriptions","lastModifiedDate":"2023-02-08"},{"lineNumber":89,"author":{"gitId":"kimberlybp"},"content":"     * that match the specified keyword, storing them in a new TaskList and then returning","lastModifiedDate":"2023-02-08"},{"lineNumber":90,"author":{"gitId":"kimberlybp"},"content":"     * the TaskList containing the results of the search","lastModifiedDate":"2023-02-08"},{"lineNumber":91,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":92,"author":{"gitId":"kimberlybp"},"content":"     * @param keyword the keyword of the task description to be searched in the tasklist","lastModifiedDate":"2023-02-08"},{"lineNumber":93,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":94,"author":{"gitId":"kimberlybp"},"content":"    public TaskList search(String keyword) {","lastModifiedDate":"2023-02-08"},{"lineNumber":95,"author":{"gitId":"kimberlybp"},"content":"        List\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-08"},{"lineNumber":96,"author":{"gitId":"kimberlybp"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-02-08"},{"lineNumber":97,"author":{"gitId":"kimberlybp"},"content":"            Task currTask \u003d list.get(i);","lastModifiedDate":"2023-02-08"},{"lineNumber":98,"author":{"gitId":"kimberlybp"},"content":"            if (currTask.toString().contains(keyword)) {","lastModifiedDate":"2023-02-08"},{"lineNumber":99,"author":{"gitId":"kimberlybp"},"content":"                resultList.add(currTask);","lastModifiedDate":"2023-02-08"},{"lineNumber":100,"author":{"gitId":"kimberlybp"},"content":"            }","lastModifiedDate":"2023-02-08"},{"lineNumber":101,"author":{"gitId":"kimberlybp"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":102,"author":{"gitId":"kimberlybp"},"content":"        return new TaskList(resultList);","lastModifiedDate":"2023-02-08"},{"lineNumber":103,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":104,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":104}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":" * Represents the Ui that handles all interactions with the user","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"public class Ui {","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"     * Formats the input string to standard output message format.","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"     * @param input The string to be formatted.","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"     * @return The formatted string.","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"    public static String formatOutput(String input) {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"        String line \u003d \"\\t____________________________________________________________\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"        return line + \"\\t \" + input + \"\\n\" + line;","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"     * Prints the given output to the console.","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     * @param output The output to be printed.","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"    public void printOutput(String output) {","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"        System.out.println(formatOutput(output));","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"     * Prints the greeting message to the console.","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"    public void showGreeting() {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"        printOutput(\"Hey there! I\u0027m Sirius\\n\\t What can I do for you today? :D\");","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"     * Prints the farewell message to the console.","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"    public void showBye() {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"        printOutput(\"Well, I\u0027m off! Hope to see you again soon :)\");","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"     * Prints the error message of the given exception to the console.","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"     * @param e The exception that was thrown.","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"    public void showExceptionError(Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"        printOutput(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"kimberlybp"},"content":"     * Prints the error message for when there is an error parsing a date-time string.","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"kimberlybp"},"content":"    public void showDateTimeParseError() {","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"kimberlybp"},"content":"        printOutput(\"Woah.. Error parsing date time for deadline task. \"","lastModifiedDate":"2023-02-17"},{"lineNumber":56,"author":{"gitId":"kimberlybp"},"content":"              + \"Please enter the by datetime in this format yyyy-mm-dd (e.g., 2023-10-15).\");","lastModifiedDate":"2023-02-17"},{"lineNumber":57,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"kimberlybp"},"content":"     * Prints the error message for when there is an error loading data.","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"kimberlybp"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"kimberlybp"},"content":"        printOutput(\"No initial data found. I\u0027ll be generating a new task list for you..\");","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"kimberlybp"},"content":"     * Prints the error message for when there is an error saving data.","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"kimberlybp"},"content":"    public void showSavingError() {","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"kimberlybp"},"content":"        printOutput(\"Uh oh... An error occurred while I was trying to save your latest task list :0\");","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"kimberlybp":72}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package exceptions;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":" * Represents an exception that is thrown when an error occurs within the application.","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"     * @param err the detail message of the exception.","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"    public DukeException(String err) {","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"        super(err);","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"kimberlybp":17}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":" * Represents a task with a deadline","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"    protected String by;","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new Deadline task with the given description and deadline datetime.","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     * @param by The deadline datetime of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"        super(description);","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new Deadline task with the given description, completion status, and deadline datetime.","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     * @param by The deadline datetime of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"    public Deadline(String description, boolean isDone, String by) {","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"     * Formats the given date string \"by\" into the specified date format.","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"     * @return A string representation of the date in format \"MMM d yyyy\".","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"    private String formatDate() {","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"        LocalDate byDate \u003d LocalDate.parse(by);","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"        return byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatDate() + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"    public String parseToSave() {","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"        return \"D\" + \" | \" + super.parseToSave() + \" | \" + by;","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"kimberlybp":53}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":" * Represents a scheduled event","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"    protected String from;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"    protected String to;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"     * Creates a new Event object with the given description, starting time and end time.","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"     * @param description the description of the event.","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     * @param from the starting time of the event.","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"     * @param to the end time of the event.","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"        super(description);","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * Creates a new Event object with the given description, completion status, starting time and end time.","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"     * @param description the description of the event.","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"     * @param isDone whether the event is completed.","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"     * @param from the starting time of the event.","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"     * @param to the end time of the event.","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"    public Event(String description, boolean isDone, String from, String to) {","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"    public String parseToSave() {","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"        return \"E\" + \" | \" + super.parseToSave() + \" | \" + from + \" | \" + to;","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"kimberlybp":47}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":" * Represents a task that a user can do/plans to do.","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":" * It has a description and a status (done or not done) of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"public class Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"    protected String description;","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new Task instance with the given description.","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"     * @param description the description of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-20"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-20"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-20"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a new Task instance with the given description and status.","lastModifiedDate":"2023-02-08"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"     * @param description the description of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"     * @param isDone the status of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"     * Returns a string representation of the status of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"     * @return the string representation of the status of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"kimberlybp"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-20"},{"lineNumber":38,"author":{"gitId":"kimberlybp"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-20"},{"lineNumber":39,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":40,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":41,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"kimberlybp"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"kimberlybp"},"content":"     * @return the string representation of the task.","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"kimberlybp"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":48,"author":{"gitId":"kimberlybp"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":51,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"kimberlybp"},"content":"     * Returns a string representation of the task suitable for saving in a text file.","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"kimberlybp"},"content":"     * @return the string representation of the task suitable for saving in a text file.","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"kimberlybp"},"content":"    public String parseToSave() {","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"kimberlybp"},"content":"        return (isDone ? 1 : 0) + \" | \" + description;","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"kimberlybp"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"kimberlybp"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-20"},{"lineNumber":64,"author":{"gitId":"kimberlybp"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-20"},{"lineNumber":65,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":66,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":67,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"kimberlybp"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"kimberlybp"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-01-20"},{"lineNumber":71,"author":{"gitId":"kimberlybp"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-20"},{"lineNumber":72,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":73,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"kimberlybp":73}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"package tasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":" * Represents a simple to-do task","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a Todo with the given description.","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"     * @param description the description of the to-do task","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"        super(description);","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"     * Constructs a Todo with the given description and status.","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"     * @param description the description of the to-do task","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"     * @param isDone the status of the to-do task (completed or not)","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"        super(description, isDone);","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"kimberlybp"},"content":"    @Override","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"kimberlybp"},"content":"    public String parseToSave() {","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"kimberlybp"},"content":"        return \"T\" + \" | \" + super.parseToSave();","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"kimberlybp":35}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import commands.Command;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import commands.CommandType;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"import duke.Parser;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"public class ParserTest {","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"    public void addTodoCommand() throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"        Command command \u003d Parser.parse(\"todo read book 1\");","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"        assertEquals(command.getType(), CommandType.TODO);","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    public void addDeadlineCommand() throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"        Command command \u003d Parser.parse(\"deadline read book 2 /by 2023-02-02\");","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"        assertEquals(command.getType(), CommandType.DEADLINE);","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"    public void addEventCommand() throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"        Command command \u003d Parser.parse(\"event read book 3 /from 10 Feb 2pm /to 3pm\");","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"        assertEquals(command.getType(), CommandType.EVENT);","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"kimberlybp":28}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"import tasks.Event;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"import tasks.Todo;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"public class TaskTest {","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"kimberlybp"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"kimberlybp"},"content":"    public void initTodoTask() {","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"kimberlybp"},"content":"        Todo todo \u003d new Todo(\"write essay\");","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"kimberlybp"},"content":"        String expectedOutput \u003d \"[T][ ] write essay\";","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"kimberlybp"},"content":"        assertEquals(expectedOutput, todo.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"kimberlybp"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"kimberlybp"},"content":"    public void initDeadlineTask() {","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"kimberlybp"},"content":"        Deadline deadline \u003d new Deadline(\"do that\", \"2023-03-03\");","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"kimberlybp"},"content":"        String expectedOutput \u003d \"[D][ ] do that (by: Mar 3 2023)\";","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"kimberlybp"},"content":"        assertEquals(expectedOutput, deadline.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"kimberlybp"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"kimberlybp"},"content":"    @Test","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"kimberlybp"},"content":"    public void initEventTask() {","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"kimberlybp"},"content":"        Event event \u003d new Event(\"event A\", \"23 March 4pm\", \"5pm\");","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"kimberlybp"},"content":"        String expectedOutput \u003d \"[E][ ] event A (from: 23 March 4pm to: 5pm)\";","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"kimberlybp"},"content":"        assertEquals(expectedOutput, event.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"kimberlybp"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"kimberlybp"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"kimberlybp":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kimberlybp"},"content":"todo read book","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"kimberlybp"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"kimberlybp"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"kimberlybp"},"content":"todo join sports club","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"kimberlybp"},"content":"todo borrow book","lastModifiedDate":"2023-01-20"},{"lineNumber":6,"author":{"gitId":"kimberlybp"},"content":"mark 1","lastModifiedDate":"2023-01-20"},{"lineNumber":7,"author":{"gitId":"kimberlybp"},"content":"mark 4","lastModifiedDate":"2023-01-20"},{"lineNumber":8,"author":{"gitId":"kimberlybp"},"content":"list","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"kimberlybp"},"content":"bye","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"kimberlybp":9}}]
