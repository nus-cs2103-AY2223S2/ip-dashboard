[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"checkstyle {","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lennoxtr":5,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import duke.io.input.ui.UserInteraction;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"public class Duke {","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"     * Initialize Duke chatbot and begin chatting with user.","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"     * @param args","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"        UserInteraction chatBot \u003d new UserInteraction();","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"        chatBot.printLogo();","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"        chatBot.chatBegin();","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"lennoxtr":16}},{"path":"src/main/java/duke/io/input/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.io.input.exception;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":" * An implementation of the {@code Exception} class, and a template","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":" * for Duke to handle errors and exceptions","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"    public DukeException() {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"        super();","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"        super(message);","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"    public DukeException(Throwable cause) {","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"        super(cause);","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"    public DukeException(String message, Throwable cause) {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"        super(message, cause);","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":24}},{"path":"src/main/java/duke/io/input/exception/UserInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.io.input.exception;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"import java.util.List;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":" * An implementation of the {@code DukeException} template. It is used","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":" * to detect errors within user\u0027s input, and throw the corresponding","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":" * error message","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"public class UserInputException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"     * Makes sense of the user\u0027s input. Detects incorrect inputs and","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"     * OutOfBound errors. Throw corresponding error message when such error","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"     * is detected","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"     * @param input the user\u0027s newest input","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"     * @param currentSize the currentSize of the list of tasks, which is also","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"     *                    the current number of tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"     * @throws DukeException when input has incorrect format, and when index of list of tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"     *                       is OutOfBound","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"    public static void checkUserInput(String input, int currentSize) throws DukeException {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"        String[] inputSplitArray \u003d input.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"        List\u003cString\u003e inputSplitList \u003d Arrays.asList(inputSplitArray);","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"        String command \u003d inputSplitList.get(0);","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"        if (command.equals(\"TODO\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"            if (inputSplitList.size() \u003c\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"EMPTY TO-DO COMMAND... DOING NOTHING MUCH?\");","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"        } else if (command.equals(\"DEADLINE\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"            if (input.contains(\" /BY \")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"                if (inputSplitList.size() \u003c\u003d 3) {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"                    throw new DukeException(\"MORE INFO NEEDED FOR DEADLINE\");","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"NO DEADLINE. FREE TIME ISN\u0027T SO EASY TO COME BY.\");","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"        } else if (command.equals(\"EVENT\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"            if (input.contains(\" /FROM \") \u0026\u0026 input.contains(\" /TO \")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"                if (inputSplitList.size() \u003c\u003d 5) {","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"                    throw new DukeException(\"MORE INFO NEEDED FOR EVENT\");","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"MY CREATOR DIDN\u0027T MAKE ME SMART ENOUGH TO INFER INFO FROM THIS...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"        } else if (command.equals(\"MARK\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"            if (inputSplitList.size() \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"MY CREATOR DIDN\u0027T MAKE ME SMART ENOUGH TO INFER INFO FROM THIS...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"lennoxtr"},"content":"            if (inputSplitList.size() \u003e 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"TOO MUCH INFO...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"lennoxtr"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"lennoxtr"},"content":"                if (Integer.valueOf(inputSplitList.get(1)) \u003e currentSize) {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"lennoxtr"},"content":"                    if (currentSize \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"lennoxtr"},"content":"                        throw new DukeException(\"YOU ONLY HAVE \" + currentSize + \" TASKS\");","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"lennoxtr"},"content":"                    } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"lennoxtr"},"content":"                        throw new DukeException(\"YOU ONLY HAVE \" + currentSize + \" TASK\");","lastModifiedDate":"2023-01-29"},{"lineNumber":63,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":64,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"lennoxtr"},"content":"        } else if (command.equals(\"UNMARK\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"lennoxtr"},"content":"            if (inputSplitList.size() \u003d\u003d 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"MY CREATOR DIDN\u0027T MAKE ME SMART ENOUGH TO INFER INFO FROM THIS...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"lennoxtr"},"content":"            if (inputSplitList.size() \u003e 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"TOO MUCH INFO...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"lennoxtr"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"lennoxtr"},"content":"                if (Integer.valueOf(inputSplitList.get(1)) \u003e currentSize) {","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"lennoxtr"},"content":"                    throw new DukeException(\"YOU DON\u0027T HAVE THAT MANY TASKS\");","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":77,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":78,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":79,"author":{"gitId":"lennoxtr"},"content":"        } else if (command.equals(\"DELETE\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"lennoxtr"},"content":"            if (inputSplitList.size() \u003e 2) {","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"TOO MUCH INFO...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"lennoxtr"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"lennoxtr"},"content":"                if (Integer.valueOf(inputSplitList.get(1)) \u003e currentSize) {","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"lennoxtr"},"content":"                    throw new DukeException(\"YOU DON\u0027T HAVE THAT MANY TASKS\");","lastModifiedDate":"2023-01-29"},{"lineNumber":85,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":86,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":87,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":88,"author":{"gitId":"lennoxtr"},"content":"        } else if (command.equals(\"LIST\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":89,"author":{"gitId":"lennoxtr"},"content":"            if (inputSplitList.size() \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":90,"author":{"gitId":"lennoxtr"},"content":"                throw new DukeException(\"ARE YOU EXPECTING ME TO DO SOMETHING WITH THE EXTRA INFO?\");","lastModifiedDate":"2023-01-29"},{"lineNumber":91,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"lennoxtr"},"content":"        } else if (command.equals(\"FIND\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"lennoxtr"},"content":"            throw new DukeException(\"COMMAND NOT FOUND... WHAT ARE YOU UP TO...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":98}},{"path":"src/main/java/duke/io/input/ui/UserInteraction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.io.input.ui;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"import java.util.List;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"import duke.workflow.Event;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"import duke.workflow.Greeting;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":" * Initiates Duke\u0027s interaction workflow with use.","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":" * The flow starts with the {@code Greeting} event where Duke","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":" * says hello to the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":" * \u003cp\u003e It then proceeds to the {@code DoTask} event","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":" * where Duke makes sense of the user input and determine the possible","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":" * actions. \u003c/p\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":" * \u003cp\u003e The workflow ends with the {@code Ending} event where Duke","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":" * says goodbye to the user. \u003c/p\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"public class UserInteraction {","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"     * Print out Duke\u0027s logo.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"    public void printLogo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"        System.out.println(\"_\".repeat(22));","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"        System.out.println(\"_\".repeat(22));","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"        System.out.println(\"\");","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"     * Print a specified {@code String} input wrapped","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"     * in a styled box.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"     * @param input the {@code String} being printed out","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"    public static void printWithBracket(String input) {","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"        if (input.contains(\"\\n\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"            String[] inputSplitArray \u003d input.split(\"\\n\");","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"            List\u003cString\u003e inputSplitList \u003d Arrays.asList(inputSplitArray);","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"            int max \u003d 0;","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"            for (int i \u003d 0; i \u003c inputSplitList.size(); i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"lennoxtr"},"content":"                if (inputSplitList.get(i).length() \u003e max) {","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"lennoxtr"},"content":"                    max \u003d inputSplitList.get(i).length();","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":58,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(\"_\".repeat(max));","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(input);","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(\"_\".repeat(max));","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"lennoxtr"},"content":"            int size \u003d input.length();","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(\"_\".repeat(size));","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(input);","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(\"_\".repeat(size));","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"lennoxtr"},"content":"     * Duke begins interacting with user.","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"lennoxtr"},"content":"    public void chatBegin() {","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"lennoxtr"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"lennoxtr"},"content":"        Greeting greeting \u003d new Greeting();","lastModifiedDate":"2023-01-30"},{"lineNumber":76,"author":{"gitId":"lennoxtr"},"content":"        UserInteraction.printWithBracket(greeting.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"lennoxtr"},"content":"        String isPlaying \u003d sc.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"lennoxtr"},"content":"        if (isPlaying.equals(\"NO\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"lennoxtr"},"content":"            greeting \u003d new Greeting(0);","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"lennoxtr"},"content":"            Event nextEvent \u003d greeting.toNext();","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"lennoxtr"},"content":"            UserInteraction.printWithBracket(nextEvent.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"lennoxtr"},"content":"        } else if (isPlaying.equals(\"YES\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"lennoxtr"},"content":"            greeting \u003d new Greeting(1);","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"lennoxtr"},"content":"            Event nextEvent \u003d greeting.toNext();","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"lennoxtr"},"content":"            UserInteraction.printWithBracket(nextEvent.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"lennoxtr"},"content":"            while (nextEvent.getStatus() \u003d\u003d false) {","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"lennoxtr"},"content":"                nextEvent \u003d nextEvent.toNext();","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"lennoxtr"},"content":"                UserInteraction.printWithBracket(nextEvent.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(\"SAVE YOUR GRAND PLAN FOR ANOTHER DAY? \");","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"lennoxtr"},"content":"            String isSaving \u003d sc.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"lennoxtr"},"content":"            if (isSaving.equals(\"YES\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"lennoxtr"},"content":"                Storage.saveProgress(nextEvent.getTaskList());","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"lennoxtr"},"content":"            while (!isPlaying.equals(\"YES\") \u0026\u0026 !isPlaying.equals(\"NO\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":97,"author":{"gitId":"lennoxtr"},"content":"                UserInteraction.printWithBracket(\"FOCUS, HUMAN. \"","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"lennoxtr"},"content":"                        + \"YOU ARE TO ENTER INPUT WITH FULL CAPS.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"lennoxtr"},"content":"                isPlaying \u003d sc.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"lennoxtr"},"content":"            if (isPlaying.equals(\"NO\")) {","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"lennoxtr"},"content":"                greeting \u003d new Greeting(0);","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"lennoxtr"},"content":"                Event end \u003d greeting.toNext();","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"lennoxtr"},"content":"                UserInteraction.printWithBracket(end.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":105,"author":{"gitId":"lennoxtr"},"content":"            } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":106,"author":{"gitId":"lennoxtr"},"content":"                greeting \u003d new Greeting(1);","lastModifiedDate":"2023-01-30"},{"lineNumber":107,"author":{"gitId":"lennoxtr"},"content":"                Event nextEvent \u003d greeting.toNext();","lastModifiedDate":"2023-01-30"},{"lineNumber":108,"author":{"gitId":"lennoxtr"},"content":"                UserInteraction.printWithBracket(nextEvent.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"lennoxtr"},"content":"                while (nextEvent.getStatus() \u003d\u003d false) {","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"lennoxtr"},"content":"                    nextEvent \u003d nextEvent.toNext();","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"lennoxtr"},"content":"                    UserInteraction.printWithBracket(nextEvent.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":114,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":115,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":116,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"lennoxtr":116}},{"path":"src/main/java/duke/io/output/MY_GRAND_PLAN.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"T |   | DRINK WATER","lastModifiedDate":"2023-01-29"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"T | X | EAT EAT","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"D |   | HOC NGN (BY: 10PM)","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"E | X | NOC (FROM: 2 AUG TO: 12 JAN)","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":4}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.util;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import java.io.File;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":" * Load user\u0027s existing plan every duke\u0027s start up,","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":" * and save his/ her current progress after program is finished.","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":" * \u003cp\u003e Keep a database by implementing {@code HashMap}","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":" * to find Tasks that contain a specified keyword. \u003c/p\u003e","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"public class Storage {","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"    private HashMap\u003cString, TaskList\u003e database;","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"     * Construct the {@code Storage} object with","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"     * empty database","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"    public Storage() {","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"        this.database \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"     * Save the user\u0027s current progress to the","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"     * output directory.","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"    public static void saveProgress(TaskList taskList) {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"        File savedFile \u003d new File(\"MY_GRAND_PLAN.txt\");","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"        System.out.println(\"[X] FILE CREATED\");","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"            FileWriter myWriter \u003d new FileWriter(\"MY_GRAND_PLAN.txt\", true);","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"                Task currenttask \u003d taskList.getTask(i);","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"                if (currenttask.getStatus()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"                    myWriter.write(currenttask.getNature()","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"                            + \" | \" + \"X\" + \" | \" + currenttask.getAction()","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"                            + currenttask.getAdditionalInfo() + \u0027\\n\u0027);","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"                } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"                    myWriter.write(currenttask.getNature()","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"                            + \" | \" + \" \" + \" | \" + currenttask.getAction()","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"                            + currenttask.getAdditionalInfo() + \u0027\\n\u0027);","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"            myWriter.close();","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(\"[X] FINISHED WRITING\");","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"lennoxtr"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"lennoxtr"},"content":"            System.out.println(\"BEE BOO BOOP...\");","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"lennoxtr"},"content":"     * Load the user\u0027s existing progress from the","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"lennoxtr"},"content":"     * output directory.","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"lennoxtr"},"content":"     * @return a {@code TaskList} with the user\u0027s","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"lennoxtr"},"content":"     *          existing Task","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"lennoxtr"},"content":"    public static TaskList loadProgress() {","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"lennoxtr"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"lennoxtr"},"content":"            File previousProgress \u003d new File(\"MY_GRAND_PLAN.txt\");","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"lennoxtr"},"content":"            Scanner progressScanner \u003d new Scanner(previousProgress);","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"lennoxtr"},"content":"            TaskList returnTaskList \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"lennoxtr"},"content":"            while (progressScanner.hasNextLine()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"lennoxtr"},"content":"                String data \u003d progressScanner.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"lennoxtr"},"content":"            progressScanner.close();","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"lennoxtr"},"content":"            return returnTaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"lennoxtr"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"lennoxtr"},"content":"            return new TaskList();","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"lennoxtr"},"content":"     * Retrieve the list of tasks that contains a specified keyword.","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"lennoxtr"},"content":"     * @param keyword the keyword to search the list of tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"lennoxtr"},"content":"     * @return a {@code TaskList} where each task in the list contains","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"lennoxtr"},"content":"     *          the specified keyword","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"lennoxtr"},"content":"    public TaskList getTaskList(String keyword) {","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"lennoxtr"},"content":"        if (this.database.containsKey(keyword)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"lennoxtr"},"content":"            return this.database.get(keyword);","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"lennoxtr"},"content":"            return new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"lennoxtr"},"content":"     * Add a task to the database and assign it to a key for easy retrieval.","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"lennoxtr"},"content":"     * @param keyword the keyword to assign the {@code Task}","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"lennoxtr"},"content":"     * @return a new {@code Storage} with the task added to the database","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"lennoxtr"},"content":"    public Storage addToStorage(String keyword, Task task) {","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"lennoxtr"},"content":"        if (this.database.containsKey(keyword)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"lennoxtr"},"content":"            TaskList currentList \u003d this.database.get(keyword);","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"lennoxtr"},"content":"            currentList \u003d currentList.addTask(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"lennoxtr"},"content":"            this.database.put(keyword, currentList);","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"lennoxtr"},"content":"            TaskList newList \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":110,"author":{"gitId":"lennoxtr"},"content":"            newList \u003d newList.addTask(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":111,"author":{"gitId":"lennoxtr"},"content":"            this.database.put(keyword, newList);","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"lennoxtr"},"content":"     * Remove a task from the database","lastModifiedDate":"2023-01-31"},{"lineNumber":118,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"lennoxtr"},"content":"     * @param keyword the keyword to remove the {@code Task} from the","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"lennoxtr"},"content":"     *                list of Tasks in database with assigned to that","lastModifiedDate":"2023-01-31"},{"lineNumber":121,"author":{"gitId":"lennoxtr"},"content":"     *                keyword","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"lennoxtr"},"content":"     * @return a new {@code Storage} with the task removed from the database","lastModifiedDate":"2023-01-31"},{"lineNumber":123,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":125,"author":{"gitId":"lennoxtr"},"content":"    public Storage removeFromStorage(String keyword, Task task) {","lastModifiedDate":"2023-01-31"},{"lineNumber":126,"author":{"gitId":"lennoxtr"},"content":"        if (this.database.containsKey(keyword)) {","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"lennoxtr"},"content":"            TaskList currentList \u003d this.database.get(keyword);","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"lennoxtr"},"content":"            int index \u003d -1;","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"lennoxtr"},"content":"            for (int i \u003d 0; i \u003c currentList.getSize(); i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"lennoxtr"},"content":"                if (currentList.getTask(i).toString().equals(task.toString())) {","lastModifiedDate":"2023-01-31"},{"lineNumber":131,"author":{"gitId":"lennoxtr"},"content":"                    index \u003d i;","lastModifiedDate":"2023-01-31"},{"lineNumber":132,"author":{"gitId":"lennoxtr"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":133,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":134,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":135,"author":{"gitId":"lennoxtr"},"content":"            if (index \u003e\u003d 0) {","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"lennoxtr"},"content":"                currentList \u003d currentList.removeTask(index);","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"lennoxtr"},"content":"            this.database.put(keyword, currentList);","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":140,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":141,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":142,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"lennoxtr":142}},{"path":"src/main/java/duke/util/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.util;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":" * A template to create tasks specified from the user,","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":" * such as {@code ToDo}, {@code Deadline}, {@code ScheduledEvent}","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"public class Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"    private String nature;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"    private String action;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"     * Constructs a task with the specified nature and action from the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"     * @param nature nature of the task as specified by the user:","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"     *               ToDo, Deadline, ...","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"     * @param action action of the task as specified by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"    public Task (String nature, String action) {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"        this.nature \u003d nature;","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"        this.action \u003d action;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"     * Mark a task as done.","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"     * @return a task marked as done.","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"    public Task markDone() {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"     * Mark a task as not done.","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"     * @return a task marked as not done.","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"    public Task unMark() {","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-29"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"    public String getAdditionalInfo () {","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"        return \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"    public boolean getStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"        return isDone;","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":56,"author":{"gitId":"lennoxtr"},"content":"    public String getAction() {","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"lennoxtr"},"content":"        return action;","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"lennoxtr"},"content":"    public String getNature() {","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"lennoxtr"},"content":"        return nature;","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":65,"author":{"gitId":"lennoxtr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"lennoxtr"},"content":"        String toPrintOut \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"lennoxtr"},"content":"        toPrintOut +\u003d \"[\" + this.nature + \"]\";","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"lennoxtr"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"lennoxtr"},"content":"            toPrintOut +\u003d \"[X] \";","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"lennoxtr"},"content":"            toPrintOut +\u003d \"[ ] \";","lastModifiedDate":"2023-01-29"},{"lineNumber":72,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":73,"author":{"gitId":"lennoxtr"},"content":"        toPrintOut +\u003d this.action;","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"lennoxtr"},"content":"        return toPrintOut;","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":76,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":76}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.util;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"import java.util.List;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":" * An implementation of the {@code ArrayList} to","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":" * store the {@code Task} assigned from the user","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":" * and perform required actions on them.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"public class TaskList {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"    private List\u003cTask\u003e listTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"     * Constructs an empty list of {@code Task}.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"        this.listTask \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"     * Marks the {@code Task} at the specified position as done.","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"     * If tasks is already done, nothing happens.","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"     * @param index index of the specified {@code Task} that user","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"     *              wants to mark as done","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"     * @return the list with the specified tasks marked as done","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"     * @throws duke.io.input.exception.UserInputException if index is out of range","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"     *              of the list of tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"    public TaskList markDone(int index) {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"        Task currentTask \u003d this.listTask.get(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"        this.listTask.set(index, currentTask.markDone());","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"     * Unmarks the {@code Task} at the specified position if it\u0027s already done.","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"     * Tasks will remain the same if they\u0027re not marked as done.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"     * @param index index of the specified {@code Task} that user","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"     *              wants to unmark","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"     * @return return the list with the specified task unmarked","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"     * @throws duke.io.input.exception.UserInputException if index is out of range","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"     *              of the list of tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"    public TaskList unMark(int index) {","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"        Task currentTask \u003d this.listTask.get(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"lennoxtr"},"content":"        this.listTask.set(index, currentTask.unMark());","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"lennoxtr"},"content":"     * Adds {@code Task} to the list of tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"lennoxtr"},"content":"     * @param task the {@code Task} that user","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"lennoxtr"},"content":"     *              wants to add","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"lennoxtr"},"content":"     * @return the list of task with the new task added","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"lennoxtr"},"content":"    public TaskList addTask(Task task) {","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"lennoxtr"},"content":"        this.listTask.add(task);","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":70,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":71,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"lennoxtr"},"content":"     * Retrieve {@code Task} to the list of tasks,","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"lennoxtr"},"content":"     * return type is {@code Task}.","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"lennoxtr"},"content":"     * @param index in dex of the {@code Task}","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"lennoxtr"},"content":"     *               to retrieve","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"lennoxtr"},"content":"     * @return the task at the specified index","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"lennoxtr"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"lennoxtr"},"content":"        return this.listTask.get(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":84,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"lennoxtr"},"content":"     * Return that size of the list of tasks,","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"lennoxtr"},"content":"     * which is also the current number of tasks.","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"lennoxtr"},"content":"     * @return the number of task","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"lennoxtr"},"content":"    public int getSize() {","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"lennoxtr"},"content":"        return this.listTask.size();","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"lennoxtr"},"content":"     * Removed a {@code Task} from a specified position from the list of tasks","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"lennoxtr"},"content":"     * @return the new list of task with the specified task removed","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"lennoxtr"},"content":"    public TaskList removeTask(int index) {","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"lennoxtr"},"content":"        this.listTask.remove(index);","lastModifiedDate":"2023-01-29"},{"lineNumber":104,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":105,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":107,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":108,"author":{"gitId":"lennoxtr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":109,"author":{"gitId":"lennoxtr"},"content":"        if (this.listTask.isEmpty()) {","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"lennoxtr"},"content":"            return \"NOTHING ADDED TO LIST\";","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"lennoxtr"},"content":"            String toPrintOut \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"lennoxtr"},"content":"            for (int i \u003d 0; i \u003c this.listTask.size(); i++) {","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"lennoxtr"},"content":"                toPrintOut +\u003d (i + 1) + \". \" + this.listTask.get(i).toString() + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":115,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"lennoxtr"},"content":"            return toPrintOut;","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":119}},{"path":"src/main/java/duke/util/service/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.util.service;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"import duke.util.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":" * A more specific implementation of {@code Task}","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":" * as specified by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"     * Construct a {@code Deadline} with the","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"     * deadline and action specified by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"     * with the keyword \"/BY\".","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"    public Deadline(LocalDateTime deadline, String action) {","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"        super(\"D\", action);","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"        return super.toString() + \" (BY: \" + this.deadline.format(","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"                DateTimeFormatter.ofPattern(\"hh:mm a MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":31}},{"path":"src/main/java/duke/util/service/ScheduledEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.util.service;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"import duke.util.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":" * A more specific implementation of {@code Task}","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":" * as specified by the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"public class ScheduledEvent extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"    private LocalDateTime dateBegin;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"    private LocalDateTime dateEnd;","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"     * Construct a {@code Deadline} with the action specified","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"     * by the user, as well as the beginning date and end date of the action,","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"     * denoted in the user input as the keywords \"/FROM\"","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"     * and \"/TO\".","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"    public ScheduledEvent(LocalDateTime dateBegin,","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"                          LocalDateTime dateEnd, String action) {","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"        super(\"E\", action);","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"        this.dateBegin \u003d dateBegin;","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"        this.dateEnd \u003d dateEnd;","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"    public String getAdditionalInfo() {","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"        return \" (FROM: \" + dateBegin.format(","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"                DateTimeFormatter.ofPattern(\"HH:mm MMM dd yyyy\"))","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"                + \" TO: \" + dateEnd.format(","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"                        DateTimeFormatter.ofPattern(\"HH:mm MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"        return super.toString() + \" (FROM: \" + dateBegin.format(","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"                DateTimeFormatter.ofPattern(\"HH:mm MMM dd yyyy\"))","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"                + \" TO: \" + dateEnd.format(","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"                        DateTimeFormatter.ofPattern(\"HH:mm MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":48}},{"path":"src/main/java/duke/util/service/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.util.service;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import duke.util.Task;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":" * Construct a {@code Deadline} with the","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":" * deadline and action specified by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"     * Construct a {@code Deadline} with the action specified","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"     * by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"    public ToDo(String action) {","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"        super(\"T\", action);","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"lennoxtr":20}},{"path":"src/main/java/duke/workflow/DoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.workflow;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"import java.util.List;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"import duke.io.input.exception.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"import duke.io.input.exception.UserInputException;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"import duke.util.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"import duke.util.service.Deadline;","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"import duke.util.service.ScheduledEvent;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"import duke.util.service.ToDo;","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":" * A more specific implementation of {@code Event}.","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":" * Part of the workflow where the chatbot determines the next","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":" * possible action based on the user\u0027s input","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"public class DoTask extends Event {","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"    private boolean firstGreet;","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"    private String lastCommand;","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"    private Task removedTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"    private TaskList foundList;","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"     * Constructs the {@code DoTask} as the user interacts","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"     * with Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"    public DoTask() {","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"        super(false);","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"        this.firstGreet \u003d true;","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"        this.lastCommand \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"        this.foundList \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"     * Determines the next possible action after the user has entered an input.","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"     * @return a new event that follows from the last user input","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"    public Event toNext() {","lastModifiedDate":"2023-01-29"},{"lineNumber":54,"author":{"gitId":"lennoxtr"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"lennoxtr"},"content":"        String nextTask \u003d sc.nextLine();","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"lennoxtr"},"content":"        if (nextTask.equals(\"BYE\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"lennoxtr"},"content":"            return new Ending(this.taskList);","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"lennoxtr"},"content":"            try {","lastModifiedDate":"2023-01-29"},{"lineNumber":60,"author":{"gitId":"lennoxtr"},"content":"                UserInputException.checkUserInput(nextTask, this.taskList.getSize());","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"lennoxtr"},"content":"                if (nextTask.equals(\"LIST\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":62,"author":{"gitId":"lennoxtr"},"content":"                    this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"lennoxtr"},"content":"                    this.lastCommand \u003d nextTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"lennoxtr"},"content":"                    return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"lennoxtr"},"content":"                } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":66,"author":{"gitId":"lennoxtr"},"content":"                    String[] command \u003d nextTask.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":67,"author":{"gitId":"lennoxtr"},"content":"                    List\u003cString\u003e words \u003d Arrays.asList(command);","lastModifiedDate":"2023-01-29"},{"lineNumber":68,"author":{"gitId":"lennoxtr"},"content":"                    if (words.get(0).equals(\"MARK\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":69,"author":{"gitId":"lennoxtr"},"content":"                        this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"lennoxtr"},"content":"                        this.lastCommand \u003d nextTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"lennoxtr"},"content":"                        this.taskList \u003d this.taskList.markDone(Integer.valueOf(words.get(1)) - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"lennoxtr"},"content":"                        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":74,"author":{"gitId":"lennoxtr"},"content":"                    if (words.get(0).equals(\"UNMARK\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":75,"author":{"gitId":"lennoxtr"},"content":"                        this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"lennoxtr"},"content":"                        this.lastCommand \u003d nextTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"lennoxtr"},"content":"                        this.taskList \u003d this.taskList.unMark(Integer.valueOf(words.get(1)) - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"lennoxtr"},"content":"                        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":80,"author":{"gitId":"lennoxtr"},"content":"                    if (words.get(0).equals(\"TODO\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":81,"author":{"gitId":"lennoxtr"},"content":"                        String[] toDoTask \u003d nextTask.split(\"TODO \");","lastModifiedDate":"2023-01-29"},{"lineNumber":82,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e toDoAction \u003d Arrays.asList(toDoTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":83,"author":{"gitId":"lennoxtr"},"content":"                        this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"lennoxtr"},"content":"                        this.lastCommand \u003d toDoAction.get(1);","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"lennoxtr"},"content":"                        ToDo newTask \u003d new ToDo(toDoAction.get(1));","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"lennoxtr"},"content":"                        this.taskList \u003d this.taskList.addTask(newTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"lennoxtr"},"content":"                        for (String i : words) {","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"lennoxtr"},"content":"                            this.storage \u003d this.storage.addToStorage(i, newTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"lennoxtr"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"lennoxtr"},"content":"                        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":92,"author":{"gitId":"lennoxtr"},"content":"                    if (words.get(0).equals(\"DEADLINE\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":93,"author":{"gitId":"lennoxtr"},"content":"                        String[] toDoTask \u003d nextTask.split(\" /BY \");","lastModifiedDate":"2023-01-29"},{"lineNumber":94,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e deadlineList \u003d Arrays.asList(toDoTask);","lastModifiedDate":"2023-01-29"},{"lineNumber":95,"author":{"gitId":"lennoxtr"},"content":"                        String deadlineAction \u003d deadlineList.get(0);","lastModifiedDate":"2023-01-29"},{"lineNumber":96,"author":{"gitId":"lennoxtr"},"content":"                        String[] deadlinePhraseArray \u003d deadlineAction.split(\"DEADLINE \");","lastModifiedDate":"2023-01-29"},{"lineNumber":97,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e deadlinePhraseList \u003d Arrays.asList(deadlinePhraseArray);","lastModifiedDate":"2023-01-29"},{"lineNumber":98,"author":{"gitId":"lennoxtr"},"content":"                        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"lennoxtr"},"content":"                        Deadline newTask \u003d new Deadline(","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"lennoxtr"},"content":"                                LocalDateTime.parse(deadlineList.get(1), format),","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"lennoxtr"},"content":"                                deadlinePhraseList.get(1));","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"lennoxtr"},"content":"                        for (String i : words) {","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"lennoxtr"},"content":"                            this.storage \u003d this.storage.addToStorage(i, newTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"lennoxtr"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"lennoxtr"},"content":"                        this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"lennoxtr"},"content":"                        this.lastCommand \u003d deadlinePhraseList.get(1);","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"lennoxtr"},"content":"                        this.taskList \u003d this.taskList.addTask(newTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"lennoxtr"},"content":"                        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":110,"author":{"gitId":"lennoxtr"},"content":"                    if (words.get(0).equals(\"EVENT\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":111,"author":{"gitId":"lennoxtr"},"content":"                        String[] splitFrom \u003d nextTask.split(\" /FROM \");","lastModifiedDate":"2023-01-29"},{"lineNumber":112,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e eventActionSplit \u003d Arrays.asList(splitFrom);","lastModifiedDate":"2023-01-29"},{"lineNumber":113,"author":{"gitId":"lennoxtr"},"content":"                        String timeLinePhrase \u003d eventActionSplit.get(1);","lastModifiedDate":"2023-01-29"},{"lineNumber":114,"author":{"gitId":"lennoxtr"},"content":"                        String eventAction \u003d eventActionSplit.get(0);","lastModifiedDate":"2023-01-29"},{"lineNumber":115,"author":{"gitId":"lennoxtr"},"content":"                        String[] eventPhraseArray \u003d eventAction.split(\"EVENT \");","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e eventPhraseList \u003d Arrays.asList(eventPhraseArray);","lastModifiedDate":"2023-01-29"},{"lineNumber":117,"author":{"gitId":"lennoxtr"},"content":"                        String[] timeFrame \u003d timeLinePhrase.split(\" /TO \");","lastModifiedDate":"2023-01-29"},{"lineNumber":118,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e timeLineSplit \u003d Arrays.asList(timeFrame);","lastModifiedDate":"2023-01-29"},{"lineNumber":119,"author":{"gitId":"lennoxtr"},"content":"                        String eventBegin \u003d timeLineSplit.get(0);","lastModifiedDate":"2023-01-29"},{"lineNumber":120,"author":{"gitId":"lennoxtr"},"content":"                        String eventEnd \u003d timeLineSplit.get(1);","lastModifiedDate":"2023-01-29"},{"lineNumber":121,"author":{"gitId":"lennoxtr"},"content":"                        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"lennoxtr"},"content":"                        ScheduledEvent newTask \u003d new ScheduledEvent(","lastModifiedDate":"2023-01-31"},{"lineNumber":123,"author":{"gitId":"lennoxtr"},"content":"                                LocalDateTime.parse(eventBegin, format),","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"lennoxtr"},"content":"                                LocalDateTime.parse(eventEnd, format),","lastModifiedDate":"2023-01-31"},{"lineNumber":125,"author":{"gitId":"lennoxtr"},"content":"                                eventPhraseList.get(1));","lastModifiedDate":"2023-01-31"},{"lineNumber":126,"author":{"gitId":"lennoxtr"},"content":"                        for (String i : words) {","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"lennoxtr"},"content":"                            this.storage \u003d this.storage.addToStorage(i, newTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"lennoxtr"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"lennoxtr"},"content":"                        this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"lennoxtr"},"content":"                        this.lastCommand \u003d eventPhraseList.get(1);","lastModifiedDate":"2023-01-31"},{"lineNumber":131,"author":{"gitId":"lennoxtr"},"content":"                        this.taskList \u003d this.taskList.addTask(newTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":132,"author":{"gitId":"lennoxtr"},"content":"                        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":133,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":134,"author":{"gitId":"lennoxtr"},"content":"                    if (words.get(0).equals(\"DELETE\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":135,"author":{"gitId":"lennoxtr"},"content":"                        this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"lennoxtr"},"content":"                        this.removedTask \u003d this.taskList.getTask(Integer.valueOf(words.get(1)) - 1);","lastModifiedDate":"2023-01-29"},{"lineNumber":137,"author":{"gitId":"lennoxtr"},"content":"                        String[] splitRemovedTask \u003d this.removedTask.toString().split(\" \");","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e removedTaskArray \u003d Arrays.asList(splitRemovedTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"lennoxtr"},"content":"                        for (String i : removedTaskArray) {","lastModifiedDate":"2023-01-31"},{"lineNumber":140,"author":{"gitId":"lennoxtr"},"content":"                            this.storage \u003d this.storage.removeFromStorage(i, this.removedTask);","lastModifiedDate":"2023-01-31"},{"lineNumber":141,"author":{"gitId":"lennoxtr"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":142,"author":{"gitId":"lennoxtr"},"content":"                        this.lastCommand \u003d nextTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":143,"author":{"gitId":"lennoxtr"},"content":"                        this.taskList \u003d this.taskList.removeTask(Integer.valueOf(words.get(1)) - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":144,"author":{"gitId":"lennoxtr"},"content":"                        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":145,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-31"},{"lineNumber":146,"author":{"gitId":"lennoxtr"},"content":"                    if (words.get(0).equals(\"FIND\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":147,"author":{"gitId":"lennoxtr"},"content":"                        String[] toFind \u003d nextTask.split(\"FIND \");","lastModifiedDate":"2023-01-31"},{"lineNumber":148,"author":{"gitId":"lennoxtr"},"content":"                        List\u003cString\u003e keywords \u003d Arrays.asList(toFind);","lastModifiedDate":"2023-01-31"},{"lineNumber":149,"author":{"gitId":"lennoxtr"},"content":"                        TaskList findList \u003d this.storage.getTaskList(keywords.get(1));","lastModifiedDate":"2023-01-31"},{"lineNumber":150,"author":{"gitId":"lennoxtr"},"content":"                        this.firstGreet \u003d false;","lastModifiedDate":"2023-01-31"},{"lineNumber":151,"author":{"gitId":"lennoxtr"},"content":"                        this.foundList \u003d findList;","lastModifiedDate":"2023-01-31"},{"lineNumber":152,"author":{"gitId":"lennoxtr"},"content":"                        this.lastCommand \u003d nextTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":153,"author":{"gitId":"lennoxtr"},"content":"                        return this;","lastModifiedDate":"2023-01-31"},{"lineNumber":154,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":155,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":156,"author":{"gitId":"lennoxtr"},"content":"            } catch (DukeException exception) {","lastModifiedDate":"2023-01-29"},{"lineNumber":157,"author":{"gitId":"lennoxtr"},"content":"                System.out.println(exception);","lastModifiedDate":"2023-01-29"},{"lineNumber":158,"author":{"gitId":"lennoxtr"},"content":"            } catch (Exception exception) {","lastModifiedDate":"2023-01-29"},{"lineNumber":159,"author":{"gitId":"lennoxtr"},"content":"                System.out.println(\"ERRRR ERROR ERRR. SYSTEM FAILURE. UNKNOWN EXCEPTION. ERR ERR\");","lastModifiedDate":"2023-01-31"},{"lineNumber":160,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":161,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":162,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":163,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":164,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":165,"author":{"gitId":"lennoxtr"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2023-01-30"},{"lineNumber":166,"author":{"gitId":"lennoxtr"},"content":"        return this.taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":167,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":168,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":169,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":170,"author":{"gitId":"lennoxtr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":171,"author":{"gitId":"lennoxtr"},"content":"        String toPrintOut \u003d \"\";","lastModifiedDate":"2023-01-29"},{"lineNumber":172,"author":{"gitId":"lennoxtr"},"content":"        if (this.firstGreet) {","lastModifiedDate":"2023-01-29"},{"lineNumber":173,"author":{"gitId":"lennoxtr"},"content":"            toPrintOut +\u003d \"INTERESTING. VERY INTERESTING. WHAT\u0027S YOUR PLANS?\";","lastModifiedDate":"2023-01-30"},{"lineNumber":174,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":175,"author":{"gitId":"lennoxtr"},"content":"            if (lastCommand.equals(\"LIST\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":176,"author":{"gitId":"lennoxtr"},"content":"                toPrintOut +\u003d this.taskList.toString();","lastModifiedDate":"2023-01-29"},{"lineNumber":177,"author":{"gitId":"lennoxtr"},"content":"            } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":178,"author":{"gitId":"lennoxtr"},"content":"                String[] command \u003d lastCommand.split(\" \");","lastModifiedDate":"2023-01-29"},{"lineNumber":179,"author":{"gitId":"lennoxtr"},"content":"                List\u003cString\u003e words \u003d Arrays.asList(command);","lastModifiedDate":"2023-01-29"},{"lineNumber":180,"author":{"gitId":"lennoxtr"},"content":"                if (words.get(0).equals(\"MARK\")) {","lastModifiedDate":"2023-01-29"},{"lineNumber":181,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \"MARKED. ONE STEP CLOSER...\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":182,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d this.taskList.getTask(Integer.valueOf(words.get(1)) - 1).toString() + \u0027\\n\u0027;","lastModifiedDate":"2023-01-31"},{"lineNumber":183,"author":{"gitId":"lennoxtr"},"content":"                } else if (words.get(0).equals(\"UNMARK\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":184,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \"HAVING OTHER PLANS I SEE...\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":185,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d this.taskList.getTask(Integer.valueOf(words.get(1)) - 1).toString() + \u0027\\n\u0027;","lastModifiedDate":"2023-01-31"},{"lineNumber":186,"author":{"gitId":"lennoxtr"},"content":"                } else if (words.get(0).equals(\"DELETE\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":187,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \"KABOOM. GONE. REDUCED TO ATOMS. HOW EXCITING!\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":188,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \u0027\\n\u0027 + \"TASK \" + this.removedTask.toString() + \" NO LONGER EXISTED\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-31"},{"lineNumber":189,"author":{"gitId":"lennoxtr"},"content":"                    int numberOfTasks \u003d this.taskList.getSize();","lastModifiedDate":"2023-01-29"},{"lineNumber":190,"author":{"gitId":"lennoxtr"},"content":"                    if (numberOfTasks \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":191,"author":{"gitId":"lennoxtr"},"content":"                        toPrintOut +\u003d numberOfTasks + \" TASKS LEFT. BETTER HURRY.\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":192,"author":{"gitId":"lennoxtr"},"content":"                    } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":193,"author":{"gitId":"lennoxtr"},"content":"                        toPrintOut +\u003d \"ONLY \" + numberOfTasks + \" TASK LEFT. BORING DAYS AHEAD.\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":194,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":195,"author":{"gitId":"lennoxtr"},"content":"                } else if (words.get(0).equals(\"FIND\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":196,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \"YOU\u0027RE STARTING TO FORGET...\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-31"},{"lineNumber":197,"author":{"gitId":"lennoxtr"},"content":"                    if (this.foundList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2023-01-31"},{"lineNumber":198,"author":{"gitId":"lennoxtr"},"content":"                        toPrintOut +\u003d \"THIS WAS NEVER IN YOUR PLANS\";","lastModifiedDate":"2023-01-31"},{"lineNumber":199,"author":{"gitId":"lennoxtr"},"content":"                    } else {","lastModifiedDate":"2023-01-31"},{"lineNumber":200,"author":{"gitId":"lennoxtr"},"content":"                        toPrintOut +\u003d \u0027\\n\u0027 + \"LET ME REMIND YOU OF WHAT YOU STARTED\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-31"},{"lineNumber":201,"author":{"gitId":"lennoxtr"},"content":"                        for (int i \u003d 0; i \u003c this.foundList.getSize(); i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":202,"author":{"gitId":"lennoxtr"},"content":"                            toPrintOut +\u003d this.foundList.getTask(i).toString() + \u0027\\n\u0027;","lastModifiedDate":"2023-01-31"},{"lineNumber":203,"author":{"gitId":"lennoxtr"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":204,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-31"},{"lineNumber":205,"author":{"gitId":"lennoxtr"},"content":"                } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":206,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \"SO YOU WANT TO ADD \" + \u0027\"\u0027 + this.lastCommand + \u0027\"\u0027 + \". VERY WELL...\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":207,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \u0027\\n\u0027 + \"ADDED: \" + lastCommand + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":208,"author":{"gitId":"lennoxtr"},"content":"                    int numberOfTasks \u003d this.taskList.getSize();","lastModifiedDate":"2023-01-29"},{"lineNumber":209,"author":{"gitId":"lennoxtr"},"content":"                    if (numberOfTasks \u003e 1) {","lastModifiedDate":"2023-01-29"},{"lineNumber":210,"author":{"gitId":"lennoxtr"},"content":"                        toPrintOut +\u003d numberOfTasks + \" TASKS. BETTER HURRY.\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":211,"author":{"gitId":"lennoxtr"},"content":"                    } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":212,"author":{"gitId":"lennoxtr"},"content":"                        toPrintOut +\u003d \"ONLY \" + numberOfTasks + \" TASK. BORING DAYS AHEAD.\" + \u0027\\n\u0027;","lastModifiedDate":"2023-01-29"},{"lineNumber":213,"author":{"gitId":"lennoxtr"},"content":"                    }","lastModifiedDate":"2023-01-29"},{"lineNumber":214,"author":{"gitId":"lennoxtr"},"content":"                    toPrintOut +\u003d \u0027\\n\u0027 + \"WHAT ELSE?\";","lastModifiedDate":"2023-01-31"},{"lineNumber":215,"author":{"gitId":"lennoxtr"},"content":"                }","lastModifiedDate":"2023-01-29"},{"lineNumber":216,"author":{"gitId":"lennoxtr"},"content":"            }","lastModifiedDate":"2023-01-29"},{"lineNumber":217,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":218,"author":{"gitId":"lennoxtr"},"content":"        return toPrintOut;","lastModifiedDate":"2023-01-29"},{"lineNumber":219,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":220,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":220}},{"path":"src/main/java/duke/workflow/Ending.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.workflow;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":" * A more specific implementation of {@code Event}.","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":" * Part of the workflow where the chatbot say goodbye to","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":" * the user and the program ends.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"public class Ending extends Event {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"     * Constructs the {@code Ending} event with an empty","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"     * list of task. Used when the user does not want to","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"     * interact with Duke","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"    public Ending() {","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"        super(true);","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"     * Constructs the {@code Ending} event with a specified","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"     * list of task. Used when the user wants to log off","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"     * after interacting with Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"    public Ending(TaskList taskList) {","lastModifiedDate":"2023-01-29"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"        super(true);","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"    public Event toNext() {","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"        return this;","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"     * Dummy method to implement the abstract class\u0027s method.","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"        return this.taskList;","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"        return \"VERY WELL. THE WORLD IS SAFE FROM YOUR PLAN. FOR NOW\";","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":53}},{"path":"src/main/java/duke/workflow/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.workflow;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"public abstract class Event {","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"    private boolean isFinalEvent;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"    public Event (boolean isFinalEvent) {","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"        this.isFinalEvent \u003d isFinalEvent;","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"    public abstract Event toNext();","lastModifiedDate":"2023-01-30"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"    public abstract TaskList getTaskList();","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"    public boolean getStatus() {","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"        return this.isFinalEvent;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"lennoxtr":18}},{"path":"src/main/java/duke/workflow/Greeting.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.workflow;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"/**","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":" * A more specific implementation of {@code Event}.","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":" *","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":" * Part of the workflow where the chatbot greets the user","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":" * and ask whether he/ she would like to begin using Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":" */","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"public class Greeting extends Event {","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"    private int status;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"     * Constructs the {@code Greeting} event that greets the user.","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"     * The flag status is set to -1, indicating the user has","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"     * not made any input.","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"    public Greeting() {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"        super(false);","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"        this.status \u003d -1;","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"     * Constructs the {@code Greeting} event that greets the user. The","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"     * flag status inPlay is decided by the user","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"     * @param inPlay the flag status to decided whether the program","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"     *               will end or will continue to run. 0 if the user","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"     *               doesn\u0027t want to use Duke, and 1 if he/ she does.","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"    public Greeting(int inPlay) {","lastModifiedDate":"2023-01-29"},{"lineNumber":35,"author":{"gitId":"lennoxtr"},"content":"        super(false);","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"lennoxtr"},"content":"        this.status \u003d inPlay;","lastModifiedDate":"2023-01-29"},{"lineNumber":37,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":38,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"lennoxtr"},"content":"    /**","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"lennoxtr"},"content":"     * Determine the next event of the workflow based on the user\u0027s input.","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"lennoxtr"},"content":"     *","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"lennoxtr"},"content":"     * @return {@code Ending} if user doesn\u0027t want to play, and","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"lennoxtr"},"content":"     *          {@code DoTask} if the user wants to use Duke.","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"lennoxtr"},"content":"     */","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"lennoxtr"},"content":"    public Event toNext() {","lastModifiedDate":"2023-01-29"},{"lineNumber":47,"author":{"gitId":"lennoxtr"},"content":"        if (this.status \u003d\u003d 0) {","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"lennoxtr"},"content":"            return new Ending();","lastModifiedDate":"2023-01-29"},{"lineNumber":49,"author":{"gitId":"lennoxtr"},"content":"        } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":50,"author":{"gitId":"lennoxtr"},"content":"            return new DoTask();","lastModifiedDate":"2023-01-29"},{"lineNumber":51,"author":{"gitId":"lennoxtr"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":52,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"lennoxtr"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"lennoxtr"},"content":"        return new TaskList();","lastModifiedDate":"2023-01-29"},{"lineNumber":55,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":56,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":57,"author":{"gitId":"lennoxtr"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":58,"author":{"gitId":"lennoxtr"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":59,"author":{"gitId":"lennoxtr"},"content":"        return \"SHALL WE PLAY A GAME?\";","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":61,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"lennoxtr":61}},{"path":"src/test/java/duke/util/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lennoxtr"},"content":"package duke.util;","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"lennoxtr"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"lennoxtr"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"lennoxtr"},"content":"import duke.util.service.ToDo;","lastModifiedDate":"2023-01-30"},{"lineNumber":8,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"lennoxtr"},"content":"public class TaskListTest {","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"lennoxtr"},"content":"    private TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"lennoxtr"},"content":"    private ToDo todoCheck \u003d new ToDo(\"DRINK WATER\");","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"lennoxtr"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":13,"author":{"gitId":"lennoxtr"},"content":"    void markDoneTest() {","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"lennoxtr"},"content":"        taskList \u003d taskList.addTask(todoCheck);","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"lennoxtr"},"content":"        taskList.markDone(0);","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"lennoxtr"},"content":"        assertEquals(\"[T][X] DRINK WATER\", taskList.getTask(0).toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"lennoxtr"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"lennoxtr"},"content":"    void unMarkTest() {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"lennoxtr"},"content":"        taskList \u003d taskList.addTask(todoCheck);","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"lennoxtr"},"content":"        taskList.markDone(0);","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"lennoxtr"},"content":"        taskList.unMark(0);","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"lennoxtr"},"content":"        assertEquals(\"[T][ ] DRINK WATER\", taskList.getTask(0).toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"lennoxtr"},"content":"    @Test","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"lennoxtr"},"content":"    void addTaskTest() {","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"lennoxtr"},"content":"        taskList \u003d taskList.addTask(todoCheck);","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"lennoxtr"},"content":"        assertEquals(1, taskList.getSize());","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"lennoxtr"},"content":"        assertEquals(todoCheck.toString(), taskList.getTask(0).toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"lennoxtr"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"lennoxtr"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"lennoxtr"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"lennoxtr":34}}]
