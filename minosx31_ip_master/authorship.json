[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"minosx31"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"minosx31"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"minosx31"},"content":"    private String doBy;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"minosx31"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"minosx31"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"EEEE, MMMM d yyyy, h:mm a\");","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":9,"author":{"gitId":"minosx31"},"content":"    public Deadline (String description, String deadline) {","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"minosx31"},"content":"        super(description);","lastModifiedDate":"2023-01-21"},{"lineNumber":11,"author":{"gitId":"minosx31"},"content":"        this.doBy \u003d deadline;","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"minosx31"},"content":"        this.deadline \u003d LocalDateTime.parse(deadline);","lastModifiedDate":"2023-02-04"},{"lineNumber":13,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"minosx31"},"content":"    public String toData() {","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"minosx31"},"content":"        return String.format(\"D | %s | %s | %s\", this.getStatusIcon(), this.getDescription(), this.doBy);","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"minosx31"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"minosx31"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":21,"author":{"gitId":"minosx31"},"content":"        return \"[D]\" + \"[\" + this.getStatusIcon() + \"] \" + this.getDescription() +","lastModifiedDate":"2023-02-04"},{"lineNumber":22,"author":{"gitId":"minosx31"},"content":"                \" (by: \" + this.deadline.format(DATE_TIME_FORMATTER) + \")\";","lastModifiedDate":"2023-02-04"},{"lineNumber":23,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"minosx31"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"minosx31":24}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-20"},{"lineNumber":2,"author":{"gitId":"minosx31"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"minosx31"},"content":"    public enum commands {","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"minosx31"},"content":"        BYE, LIST, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"minosx31"},"content":"        @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"minosx31"},"content":"        public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"minosx31"},"content":"            return name().toLowerCase();","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"minosx31"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"minosx31"},"content":"    private static String checkPlural(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"minosx31"},"content":"        return tasks.size() \u003d\u003d 1 ? \" task \" : \" tasks \";","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"minosx31"},"content":"        Storage storage \u003d new Storage(\"./data.txt\");","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"minosx31"},"content":"        ArrayList\u003cTask\u003e tasks \u003d storage.getTasksFromFile();","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"minosx31"},"content":"        Scanner sc \u003d new Scanner(System.in );","lastModifiedDate":"2023-01-20"},{"lineNumber":22,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"minosx31"},"content":"        System.out.println(\"Hello I\u0027m Duke!\\n\" + \"How can I help you?\");","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"minosx31"},"content":"        while (true) {","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"minosx31"},"content":"            try {","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"minosx31"},"content":"                String input \u003d sc.nextLine();","lastModifiedDate":"2023-01-20"},{"lineNumber":34,"author":{"gitId":"minosx31"},"content":"                String[] splitInput \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"minosx31"},"content":"                String command \u003d splitInput[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"minosx31"},"content":"                String remainingInput \u003d splitInput.length \u003e 1 ? splitInput[1] : null;","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"minosx31"},"content":"                if (command.equals(commands.BYE.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Saving your data...\");","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"minosx31"},"content":"                    storage.storeTasksInFile(tasks);","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Bye!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"minosx31"},"content":"                    break;","lastModifiedDate":"2023-01-20"},{"lineNumber":43,"author":{"gitId":"minosx31"},"content":"                } else if (command.equals(commands.LIST.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Here are the tasks in your list\");","lastModifiedDate":"2023-01-21"},{"lineNumber":45,"author":{"gitId":"minosx31"},"content":"                    if (tasks.size() !\u003d 0) {","lastModifiedDate":"2023-01-20"},{"lineNumber":46,"author":{"gitId":"minosx31"},"content":"                        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-01-20"},{"lineNumber":47,"author":{"gitId":"minosx31"},"content":"                            System.out.println((i + 1) + \".\" + tasks.get(i).toString());","lastModifiedDate":"2023-01-29"},{"lineNumber":48,"author":{"gitId":"minosx31"},"content":"                        }","lastModifiedDate":"2023-01-20"},{"lineNumber":49,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-01-20"},{"lineNumber":50,"author":{"gitId":"minosx31"},"content":"                } else if (command.equals(commands.MARK.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"minosx31"},"content":"                    int indexOfTask \u003d Integer.parseInt(remainingInput) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"minosx31"},"content":"                    Task currentTask \u003d tasks.get(indexOfTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"minosx31"},"content":"                    currentTask.markAsDone();","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":55,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"[\" + currentTask.getStatusIcon() + \"] \" + currentTask.getDescription());","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"minosx31"},"content":"                } else if (command.equals(commands.UNMARK.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"minosx31"},"content":"                    int indexOfTask \u003d Integer.parseInt(remainingInput) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"minosx31"},"content":"                    Task currentTask \u003d tasks.get(indexOfTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"minosx31"},"content":"                    currentTask.markAsUndone();","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-01-21"},{"lineNumber":61,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"[\" + currentTask.getStatusIcon() + \"] \" + currentTask.getDescription());","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"minosx31"},"content":"                } else if (command.equals(commands.TODO.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"minosx31"},"content":"                    if (remainingInput \u003d\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"minosx31"},"content":"                        throw new IncorrectInputException(\"Enter a description!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"minosx31"},"content":"                    Task newTask \u003d new Todo(remainingInput);","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"minosx31"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"minosx31"},"content":"                    System.out.println(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Now you have \" + tasks.size() + Duke.checkPlural(tasks) + \"in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"minosx31"},"content":"                } else if (command.equals(commands.DEADLINE.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"minosx31"},"content":"                    if (remainingInput \u003d\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"minosx31"},"content":"                        throw new IncorrectInputException(\"Enter a description with a deadline!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-01-30"},{"lineNumber":75,"author":{"gitId":"minosx31"},"content":"                    String[] deadlineDetails \u003d remainingInput.split(\" /by \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"minosx31"},"content":"                    String deadlineDescription \u003d deadlineDetails[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"minosx31"},"content":"                    String deadline \u003d deadlineDetails.length \u003e 0 ? deadlineDetails[1] : null;","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"minosx31"},"content":"                    if (deadline \u003d\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"minosx31"},"content":"                        throw new IncorrectInputException(\"Enter a valid deadline!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"minosx31"},"content":"                    Task newTask \u003d new Deadline(deadlineDescription, deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"minosx31"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"minosx31"},"content":"                    System.out.println(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Now you have \" + tasks.size() + Duke.checkPlural(tasks) + \"in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":87,"author":{"gitId":"minosx31"},"content":"                } else if (command.equals(commands.EVENT.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"minosx31"},"content":"                    if (remainingInput \u003d\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"minosx31"},"content":"                        throw new IncorrectInputException(\"Enter a description and event period!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"minosx31"},"content":"                    String[] eventDetails \u003d remainingInput.split(\" /from \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"minosx31"},"content":"                    String eventDescription \u003d eventDetails[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"minosx31"},"content":"                    String eventPeriod \u003d eventDetails.length \u003e 0 ? eventDetails[1] : null;","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"minosx31"},"content":"                    if (eventPeriod \u003d\u003d null) {","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"minosx31"},"content":"                        throw new IncorrectInputException(\"Enter a valid event period!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"minosx31"},"content":"                    String[] splitPeriod \u003d eventPeriod.split(\" /to \");","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"minosx31"},"content":"                    if (splitPeriod.length \u003c 2) {","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"minosx31"},"content":"                        throw new IncorrectInputException(\"Enter a valid event period!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-01-21"},{"lineNumber":103,"author":{"gitId":"minosx31"},"content":"                    Task newTask \u003d new Event(eventDescription, splitPeriod);","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"minosx31"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-01-29"},{"lineNumber":106,"author":{"gitId":"minosx31"},"content":"                    System.out.println(newTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Now you have \" + tasks.size() + Duke.checkPlural(tasks) + \"in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"minosx31"},"content":"                } else if (command.equals(commands.DELETE.toString())) {","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"minosx31"},"content":"                    int indexOfTask \u003d Integer.parseInt(remainingInput) - 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"minosx31"},"content":"                    Task toDelete \u003d tasks.get(indexOfTask);","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Alright, removing this task:\");","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"minosx31"},"content":"                    System.out.println(toDelete.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"minosx31"},"content":"                    tasks.remove(toDelete);","lastModifiedDate":"2023-01-30"},{"lineNumber":114,"author":{"gitId":"minosx31"},"content":"                    System.out.println(\"Now you have \" + tasks.size() + Duke.checkPlural(tasks) + \"in the list.\");","lastModifiedDate":"2023-02-03"},{"lineNumber":115,"author":{"gitId":"minosx31"},"content":"                } else {","lastModifiedDate":"2023-01-29"},{"lineNumber":116,"author":{"gitId":"minosx31"},"content":"                    throw new IncorrectInputException(\"Enter a valid task!\");","lastModifiedDate":"2023-01-30"},{"lineNumber":117,"author":{"gitId":"minosx31"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"minosx31"},"content":"            } catch (IncorrectInputException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":119,"author":{"gitId":"minosx31"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-01-30"},{"lineNumber":120,"author":{"gitId":"minosx31"},"content":"            }","lastModifiedDate":"2023-01-20"},{"lineNumber":121,"author":{"gitId":"minosx31"},"content":"        }","lastModifiedDate":"2023-01-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"minosx31":114,"-":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-04"},{"lineNumber":2,"author":{"gitId":"minosx31"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-04"},{"lineNumber":3,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-04"},{"lineNumber":4,"author":{"gitId":"minosx31"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"minosx31"},"content":"    private String[] period;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"minosx31"},"content":"    private LocalDateTime fromDateTime;","lastModifiedDate":"2023-02-04"},{"lineNumber":7,"author":{"gitId":"minosx31"},"content":"    private LocalDateTime toDateTime;","lastModifiedDate":"2023-02-04"},{"lineNumber":8,"author":{"gitId":"minosx31"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"EEEE, MMMM d yyyy, h:mm a\");","lastModifiedDate":"2023-02-04"},{"lineNumber":9,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":10,"author":{"gitId":"minosx31"},"content":"    public Event(String description, String[] period) {","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"minosx31"},"content":"        super(description);","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"minosx31"},"content":"        this.period \u003d period;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"minosx31"},"content":"        this.fromDateTime \u003d LocalDateTime.parse(period[0]);","lastModifiedDate":"2023-02-04"},{"lineNumber":14,"author":{"gitId":"minosx31"},"content":"        this.toDateTime \u003d LocalDateTime.parse(period[1]);","lastModifiedDate":"2023-02-04"},{"lineNumber":15,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"minosx31"},"content":"    public String toData() {","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"minosx31"},"content":"        return String.format(\"E | %s | %s | %s to %s\",this.getStatusIcon(), this.getDescription(), this.period[0], this.period[1]);","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"minosx31"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"minosx31"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"minosx31"},"content":"        return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \" + this.getDescription()","lastModifiedDate":"2023-02-04"},{"lineNumber":24,"author":{"gitId":"minosx31"},"content":"                + \" (from: \" + this.fromDateTime.format(DATE_TIME_FORMATTER)","lastModifiedDate":"2023-02-04"},{"lineNumber":25,"author":{"gitId":"minosx31"},"content":"                + \" to: \" + this.toDateTime.format(DATE_TIME_FORMATTER) + \")\";","lastModifiedDate":"2023-02-04"},{"lineNumber":26,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":27,"author":{"gitId":"minosx31"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"minosx31":27}},{"path":"src/main/java/IncorrectInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"public class IncorrectInputException extends Exception {","lastModifiedDate":"2023-01-30"},{"lineNumber":2,"author":{"gitId":"minosx31"},"content":"    public IncorrectInputException (String message) {","lastModifiedDate":"2023-01-30"},{"lineNumber":3,"author":{"gitId":"minosx31"},"content":"        super(message);","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"minosx31"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"minosx31":5}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"import java.io.File;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"minosx31"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"minosx31"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"minosx31"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"minosx31"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"minosx31"},"content":"public class Storage {","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"minosx31"},"content":"    private String filePath;","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"minosx31"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"minosx31"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"minosx31"},"content":"    public ArrayList\u003cTask\u003e getTasksFromFile() {","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"minosx31"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"minosx31"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"minosx31"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"minosx31"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"minosx31"},"content":"                System.out.println(\"Data file created!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"minosx31"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"minosx31"},"content":"            Scanner fileReader \u003d new Scanner(file);","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"minosx31"},"content":"            while (fileReader.hasNextLine()) {","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"minosx31"},"content":"                String nextLine \u003d fileReader.nextLine();","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"minosx31"},"content":"                String[] taskSplit \u003d nextLine.split(\" \\\\| \", 3);","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"minosx31"},"content":"                String taskType \u003d taskSplit[0];","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"minosx31"},"content":"                String taskMark \u003d taskSplit[1];","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"minosx31"},"content":"                String taskDetails \u003d taskSplit[2];","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"minosx31"},"content":"                switch (taskType) {","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"minosx31"},"content":"                case \"T\": {","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"minosx31"},"content":"                    Task toAdd \u003d new Todo(taskDetails);","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"minosx31"},"content":"                    if (taskMark.equals(\"X\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"minosx31"},"content":"                        toAdd.markAsDone();","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"minosx31"},"content":"                    tasks.add(toAdd);","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"minosx31"},"content":"                    break;","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"minosx31"},"content":"                }","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"minosx31"},"content":"                case \"D\": {","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"minosx31"},"content":"                    String[] deadlineDetails \u003d taskDetails.split(\" \\\\| \", 2);","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"minosx31"},"content":"                    String deadlineDescription \u003d deadlineDetails[0];","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"minosx31"},"content":"                    String deadline \u003d deadlineDetails[1];","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"minosx31"},"content":"                    Task toAdd \u003d new Deadline(deadlineDescription, deadline);","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"minosx31"},"content":"                    if (taskMark.equals(\"X\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"minosx31"},"content":"                        toAdd.markAsDone();","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"minosx31"},"content":"                    tasks.add(toAdd);","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"minosx31"},"content":"                    break;","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"minosx31"},"content":"                }","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"minosx31"},"content":"                case \"E\": {","lastModifiedDate":"2023-02-03"},{"lineNumber":51,"author":{"gitId":"minosx31"},"content":"                    String[] eventDetails \u003d taskDetails.split(\" \\\\| \", 2);","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"minosx31"},"content":"                    String eventDescription \u003d eventDetails[0];","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"minosx31"},"content":"                    String[] eventPeriod \u003d eventDetails[1].split(\" to \");","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"minosx31"},"content":"                    Task toAdd \u003d new Event(eventDescription, eventPeriod);","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"minosx31"},"content":"                    if (taskMark.equals(\"X\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"minosx31"},"content":"                        toAdd.markAsDone();","lastModifiedDate":"2023-02-03"},{"lineNumber":57,"author":{"gitId":"minosx31"},"content":"                    }","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"minosx31"},"content":"                    tasks.add(toAdd);","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"minosx31"},"content":"                    break;","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"minosx31"},"content":"                }","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"minosx31"},"content":"                default:","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"minosx31"},"content":"                }","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"minosx31"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"minosx31"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"minosx31"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"minosx31"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"minosx31"},"content":"        return tasks;","lastModifiedDate":"2023-02-03"},{"lineNumber":68,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":69,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":70,"author":{"gitId":"minosx31"},"content":"    public void storeTasksInFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":71,"author":{"gitId":"minosx31"},"content":"        try {","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"minosx31"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"minosx31"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-02-03"},{"lineNumber":74,"author":{"gitId":"minosx31"},"content":"                fileWriter.write(String.format(\"%s\\n\", task.toData()));","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"minosx31"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"minosx31"},"content":"            fileWriter.close();","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"minosx31"},"content":"            System.out.println(\"Data saved!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"minosx31"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-03"},{"lineNumber":79,"author":{"gitId":"minosx31"},"content":"            System.out.println(\"Error creating or finding file!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":80,"author":{"gitId":"minosx31"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"minosx31"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"minosx31":82}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"minosx31"},"content":"    private String description;","lastModifiedDate":"2023-01-20"},{"lineNumber":3,"author":{"gitId":"minosx31"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":5,"author":{"gitId":"minosx31"},"content":"    public Task (String input) {","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"minosx31"},"content":"        this.description \u003d input;","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"minosx31"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":8,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":9,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":10,"author":{"gitId":"minosx31"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-20"},{"lineNumber":11,"author":{"gitId":"minosx31"},"content":"        return this.description;","lastModifiedDate":"2023-01-20"},{"lineNumber":12,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":13,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-20"},{"lineNumber":14,"author":{"gitId":"minosx31"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-01-21"},{"lineNumber":15,"author":{"gitId":"minosx31"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-21"},{"lineNumber":16,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":17,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":18,"author":{"gitId":"minosx31"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-01-21"},{"lineNumber":19,"author":{"gitId":"minosx31"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-21"},{"lineNumber":20,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":21,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":22,"author":{"gitId":"minosx31"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-21"},{"lineNumber":23,"author":{"gitId":"minosx31"},"content":"        return (this.isDone ? \"X\" : \" \");","lastModifiedDate":"2023-01-21"},{"lineNumber":24,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":25,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":26,"author":{"gitId":"minosx31"},"content":"    abstract String toData();","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"minosx31"},"content":"    @Override","lastModifiedDate":"2023-01-20"},{"lineNumber":29,"author":{"gitId":"minosx31"},"content":"    public String toString() {","lastModifiedDate":"2023-01-20"},{"lineNumber":30,"author":{"gitId":"minosx31"},"content":"        return \"Added: \" + this.description;","lastModifiedDate":"2023-01-20"},{"lineNumber":31,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-20"},{"lineNumber":32,"author":{"gitId":"minosx31"},"content":"}","lastModifiedDate":"2023-01-20"}],"authorContributionMap":{"minosx31":32}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-21"},{"lineNumber":2,"author":{"gitId":"minosx31"},"content":"    public Todo (String description) {","lastModifiedDate":"2023-01-21"},{"lineNumber":3,"author":{"gitId":"minosx31"},"content":"        super(description);","lastModifiedDate":"2023-01-21"},{"lineNumber":4,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-21"},{"lineNumber":5,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"minosx31"},"content":"    public String toData() {","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"minosx31"},"content":"        return String.format(\"T | %s | %s\",this.getStatusIcon(), this.getDescription());","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"minosx31"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"minosx31"},"content":"    @Override","lastModifiedDate":"2023-01-29"},{"lineNumber":11,"author":{"gitId":"minosx31"},"content":"    public String toString() {","lastModifiedDate":"2023-01-29"},{"lineNumber":12,"author":{"gitId":"minosx31"},"content":"        return \"[T]\" + \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"minosx31"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"minosx31"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"minosx31":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"minosx31"},"content":"todo read book","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"minosx31":1}}]
