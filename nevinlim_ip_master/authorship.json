[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"# duke.main.Duke project template","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"3. After that, locate the `src/main/java/duke/duke.main.Duke.java` file, right-click it, and choose `Run duke.main.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nevinlim":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"    mainClassName \u003d \"duke.main.Duke\"","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nevinlim":16,"-":40}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"T | 0 | run","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"D | 1 | run marathon | 2030-01-01T00:00","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"E | 0 | mass | 2023-02-05T07:30 | 2023-02-05T08:30","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"E | 1 | running non stop | 2023-08-08T08:00 | 2029-09-09T09:00","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nevinlim":4}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"        dialog.setTextFill(Color.color(0.9, 0.9, 0.9));","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"        setSpacing(10);","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"    private void flip() {","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-07"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-07"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":56,"author":{"gitId":"nevinlim"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":57,"author":{"gitId":"nevinlim"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-07"},{"lineNumber":58,"author":{"gitId":"nevinlim"},"content":"        db.flip();","lastModifiedDate":"2023-02-07"},{"lineNumber":59,"author":{"gitId":"nevinlim"},"content":"        return db;","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":61,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nevinlim":61}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"public class Launcher {","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nevinlim":7}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"import duke.main.Duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    @Override","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"            stage.show();","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"            stage.close();","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nevinlim":31}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"import duke.main.Duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"import java.util.Objects;","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/User.png\")));","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"    private final Image dukeImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/Duke.png\")));","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"        scrollPane.setStyle(\"-fx-font-size: 25px; -fx-background-color:black; -fx-scroll-bar-color: black;\");","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"        greetUser();","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-07"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"        if (response.equals(\"Bye. Hope to see you again soon!\")) {","lastModifiedDate":"2023-02-07"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"            Platform.exit();","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"nevinlim"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-07"},{"lineNumber":56,"author":{"gitId":"nevinlim"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-07"},{"lineNumber":57,"author":{"gitId":"nevinlim"},"content":"        );","lastModifiedDate":"2023-02-07"},{"lineNumber":58,"author":{"gitId":"nevinlim"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-07"},{"lineNumber":59,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"nevinlim"},"content":"//    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":61,"author":{"gitId":"nevinlim"},"content":"//    private boolean checkDialogbox() {","lastModifiedDate":"2023-02-07"},{"lineNumber":62,"author":{"gitId":"nevinlim"},"content":"//        return dialogContainer.getChildren().contains(DialogBox.getDukeDialog(\"\", dukeImage));","lastModifiedDate":"2023-02-07"},{"lineNumber":63,"author":{"gitId":"nevinlim"},"content":"//    }","lastModifiedDate":"2023-02-07"},{"lineNumber":64,"author":{"gitId":"nevinlim"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":65,"author":{"gitId":"nevinlim"},"content":"    private void greetUser() {","lastModifiedDate":"2023-02-07"},{"lineNumber":66,"author":{"gitId":"nevinlim"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-07"},{"lineNumber":67,"author":{"gitId":"nevinlim"},"content":"                DialogBox.getDukeDialog(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\", dukeImage)","lastModifiedDate":"2023-02-07"},{"lineNumber":68,"author":{"gitId":"nevinlim"},"content":"        );","lastModifiedDate":"2023-02-07"},{"lineNumber":69,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":70,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nevinlim":70}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    private final Task task;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"    public String execute(Tasklist tasklist, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"        int initialSize \u003d tasklist.getTasksNum();","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"        tasklist.addTask(this.task);","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"        assert tasklist.getTasksNum() \u003d\u003d initialSize - 1 : \"tasklist size must increment after addition of task\";","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"        storage.update(tasklist);","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"        return ui.printAddTaskMessage(this.task, tasklist);","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":24}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"public abstract class Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    private boolean shouldExit \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    public abstract String execute(Tasklist taskList, Ui ui, Storage storage) throws IOException, DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    public void switchExitCondition() {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"        this.shouldExit \u003d !(this.shouldExit);","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"        return this.shouldExit;","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":22}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    private final int taskNum;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    public DeleteCommand(int taskNum) {","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"    public String execute(Tasklist tasklist, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"            int initialSize \u003d tasklist.getTasksNum();","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"            assert taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d initialSize : \"task number must be \u003e 0 and \u003c\u003d to size of tasklist\";","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"            Task task \u003d tasklist.getTasks().get(this.taskNum - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"            tasklist.deleteTask(this.taskNum - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"            assert tasklist.getTasksNum() \u003d\u003d initialSize - 1 : \"tasklist size must decrement after deletion of task\";","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"            storage.update(tasklist);","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"            return ui.printDeleteTaskMessage(task, tasklist);","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"            throw new DukeException(\"☹ OOPS!!! Task number to be unmarked is out of bounds of current list. \" +","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"                    \"Please use a task number within current list.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":31}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"    public String execute(Tasklist taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"        super.switchExitCondition();","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"        return ui.printBye();","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":13}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.DukeException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"public class FindCommand extends Command{","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"    private final String keyword;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    public String execute(Tasklist tasklist, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"            return ui.printFoundTasks(tasklist.findTask(keyword));","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"            return ui.printException(de);","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nevinlim":23}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"    public String execute(Tasklist tasklist, Ui ui, Storage storage) {","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"        return ui.printTasks(tasklist);","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":12}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"    private final int taskNum;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    public MarkCommand(int taskNum) {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    public String execute(Tasklist tasklist, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"            int initialSize \u003d tasklist.getTasksNum();","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"            assert taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d initialSize : \"task number must be \u003e 0 and \u003c\u003d to size of tasklist\";","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"            tasklist.markDone(this.taskNum - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"            storage.update(tasklist);","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"            return ui.printMarkTaskMessage(tasklist.getTasks().get(this.taskNum - 1));","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"        throw new DukeException(\"☹ OOPS!!! Task number to be unmarked is out of bounds of current list. \" +","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"                \"Please use a task number within current list.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":28}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.command;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.main.DukeException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.main.Tasklist;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"    private final int taskNum;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    public UnmarkCommand(int taskNum) {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    public String execute(Tasklist tasklist, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"            int initialSize \u003d tasklist.getTasksNum();","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"            assert taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d initialSize : \"task number must be \u003e 0 and \u003c\u003d to size of tasklist\";","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"            tasklist.markUndone(this.taskNum - 1);","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"            storage.update(tasklist);","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"            return ui.printUnmarkTaskMessage(tasklist.getTasks().get(this.taskNum - 1));","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"            throw new DukeException(\"☹ OOPS!!! Task number to be unmarked is out of bounds of current list. \" +","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"                    \"Please use a task number within current list.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":28}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.main;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-01-09"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":" * Main class for Duke program","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"    private final Ui UI;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    private Tasklist tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    private boolean shouldExit \u003d false;","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"     * Duke constructor to initialise Ui, storage and tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"    public Duke() {","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"        UI \u003d new Ui();","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"            String FILEPATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"            storage \u003d new Storage(FILEPATH);","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"            tasks \u003d new Tasklist(storage.load());","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"        } catch (IOException ie) {","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"            UI.printException(ie);","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"            System.exit(0);","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"            UI.printException(de);","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"            tasks \u003d new Tasklist();","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"        if (shouldExit) {","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"            return \"\";","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"            Command command \u003d Parser.parseCommand(input);","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"            shouldExit \u003d command.isExit();","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"            return command.execute(tasks, UI, storage);","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"            return UI.printException(e);","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-01-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"nevinlim":40,"-":5}},{"path":"src/main/java/duke/main/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.main;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-16"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"    public DukeException(String error) {","lastModifiedDate":"2023-01-16"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"        super(error);","lastModifiedDate":"2023-01-16"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"nevinlim":7}},{"path":"src/main/java/duke/main/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.main;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.command.Command;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"import duke.task.Event;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":" * Parser class parse input received from user and return respective commands","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"public class Parser {","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"     * Takes in line of input as command from user. process the input","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"     * and check if valid, if it is then return respective commands,","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"     * else throw a Duke exception to inform user invalidity of input.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"     * @param fullCommand the line of input from user","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"     * @return respective command to the input","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"     * @throws DukeException when input is invalid","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"    public static Command parseCommand(String fullCommand) throws DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"        String[] first \u003d fullCommand.split(\" \", 2 );","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"        switch (first[0]) {","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"        case (\"bye\"):","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"        //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"        case (\"list\"):","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"            return new ListCommand();","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"        //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"        case (\"todo\"):","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"            if (first.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"            if (first[1].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"            return new AddCommand(new Todo(first[1]));","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"        //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"        case (\"event\"):","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"            if (first.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"            if (first[1].isBlank() ) {","lastModifiedDate":"2023-02-07"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"nevinlim"},"content":"            if (!fullCommand.contains(\" /from\") || !fullCommand.contains(\" /to\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! Invalid input format. Please use format: event \u003cdescription\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e\");","lastModifiedDate":"2023-02-07"},{"lineNumber":58,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"nevinlim"},"content":"            try {","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"nevinlim"},"content":"                String[] second \u003d first[1].split(\"/from\", 2);","lastModifiedDate":"2023-02-07"},{"lineNumber":61,"author":{"gitId":"nevinlim"},"content":"                String[] third \u003d second[1].split(\"/to\", 2);","lastModifiedDate":"2023-02-07"},{"lineNumber":62,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"nevinlim"},"content":"                if (second[0].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":64,"author":{"gitId":"nevinlim"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"nevinlim"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"nevinlim"},"content":"                return new AddCommand(new Event(second[0].trim(),","lastModifiedDate":"2023-02-07"},{"lineNumber":67,"author":{"gitId":"nevinlim"},"content":"                        LocalDateTime.parse(third[0].trim(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")),","lastModifiedDate":"2023-02-07"},{"lineNumber":68,"author":{"gitId":"nevinlim"},"content":"                        LocalDateTime.parse(third[1].trim(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"))));","lastModifiedDate":"2023-02-07"},{"lineNumber":69,"author":{"gitId":"nevinlim"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! Invalid date time format. Please use DD/MM/YYYY HHMM format\");","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"nevinlim"},"content":"            //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"nevinlim"},"content":"        case (\"deadline\"):","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"nevinlim"},"content":"            if (first.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":75,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\" ☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"nevinlim"},"content":"            if (first[1].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":78,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\" ☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"nevinlim"},"content":"            if (!fullCommand.contains(\" /by\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! Invalid input format. Please use format: deadline \u003cdescription\u003e /by \u003cdatetime\u003e\");","lastModifiedDate":"2023-02-07"},{"lineNumber":82,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"nevinlim"},"content":"            try {","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"nevinlim"},"content":"                String[] second \u003d first[1].split(\"/by\");","lastModifiedDate":"2023-02-07"},{"lineNumber":85,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"nevinlim"},"content":"                if (second[0].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":87,"author":{"gitId":"nevinlim"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"nevinlim"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"nevinlim"},"content":"                return new AddCommand(new Deadline(second[0].trim(),","lastModifiedDate":"2023-02-07"},{"lineNumber":90,"author":{"gitId":"nevinlim"},"content":"                        LocalDateTime.parse(second[1].trim(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"))));","lastModifiedDate":"2023-02-07"},{"lineNumber":91,"author":{"gitId":"nevinlim"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! Invalid date time format. Please use \u003cDD/MM/YYYY HHMM\u003e format\");","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"nevinlim"},"content":"            //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"nevinlim"},"content":"        case (\"mark\"):","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"nevinlim"},"content":"            if (first.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":97,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be marked as done cannot be empty.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":98,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":99,"author":{"gitId":"nevinlim"},"content":"            if (first[1].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":100,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be marked as done cannot be empty.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":101,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":102,"author":{"gitId":"nevinlim"},"content":"            if (first[1].equals(\"0\")) {","lastModifiedDate":"2023-02-07"},{"lineNumber":103,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be marked as done cannot be 0.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":104,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":105,"author":{"gitId":"nevinlim"},"content":"            return new MarkCommand(Integer.parseInt(first[1]));","lastModifiedDate":"2023-02-07"},{"lineNumber":106,"author":{"gitId":"nevinlim"},"content":"        //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"nevinlim"},"content":"        case(\"unmark\"):","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"nevinlim"},"content":"            if (first.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":109,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be unmarked cannot be empty.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":110,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":111,"author":{"gitId":"nevinlim"},"content":"            if (first[1].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":112,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be unmarked cannot be empty.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":113,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":114,"author":{"gitId":"nevinlim"},"content":"            if (first[1].equals(\"0\")) {","lastModifiedDate":"2023-02-07"},{"lineNumber":115,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be unmarked cannot be 0.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":116,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":117,"author":{"gitId":"nevinlim"},"content":"            return new UnmarkCommand(Integer.parseInt(first[1]));","lastModifiedDate":"2023-02-07"},{"lineNumber":118,"author":{"gitId":"nevinlim"},"content":"        //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"nevinlim"},"content":"        case (\"delete\"):","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"nevinlim"},"content":"            if (first.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":121,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be deleted cannot be empty.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":122,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":123,"author":{"gitId":"nevinlim"},"content":"            if (first[1].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":124,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be deleted cannot be empty.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":125,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":126,"author":{"gitId":"nevinlim"},"content":"            if (first[1].equals(\"0\")) {","lastModifiedDate":"2023-02-07"},{"lineNumber":127,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number to be deleted cannot be 0.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":128,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-07"},{"lineNumber":129,"author":{"gitId":"nevinlim"},"content":"            return new DeleteCommand(Integer.parseInt(first[1]));","lastModifiedDate":"2023-02-07"},{"lineNumber":130,"author":{"gitId":"nevinlim"},"content":"        //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":131,"author":{"gitId":"nevinlim"},"content":"        case(\"find\"):","lastModifiedDate":"2023-02-01"},{"lineNumber":132,"author":{"gitId":"nevinlim"},"content":"            if (first.length \u003d\u003d 1) {","lastModifiedDate":"2023-02-07"},{"lineNumber":133,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The keyword for the find cannot be empty.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":134,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":135,"author":{"gitId":"nevinlim"},"content":"            if (first[1].isBlank()) {","lastModifiedDate":"2023-02-07"},{"lineNumber":136,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"☹ OOPS!!! The keyword for the find cannot be empty.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":137,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":138,"author":{"gitId":"nevinlim"},"content":"            return new FindCommand(first[1]);","lastModifiedDate":"2023-02-07"},{"lineNumber":139,"author":{"gitId":"nevinlim"},"content":"        //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":140,"author":{"gitId":"nevinlim"},"content":"        default:","lastModifiedDate":"2023-01-31"},{"lineNumber":141,"author":{"gitId":"nevinlim"},"content":"            throw new DukeException(\"☹ OOPS!!! Unknown command received. Please enter valid command.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":142,"author":{"gitId":"nevinlim"},"content":"            //Fallthrough","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":144,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":145,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":145}},{"path":"src/main/java/duke/main/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.main;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.task.*;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import java.io.File;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":" * Storage class stores and loads tasks from the specified saved file","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"public class Storage {","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"    private final File file;","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"     * Constructor method that create file if it does not exist","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"     * @param filepath the specified path of file location","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"     * @throws DukeException when file cannot be created","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"     * @throws IOException when file creation has an error","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"    public Storage(String filepath) throws DukeException, IOException {","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"        String[] splits \u003d filepath.split(\"/\");","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"        File dir \u003d new File(splits[0]);","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"            if (!dir.mkdir()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"Error while creating ./data folder.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"        File dataFile \u003d new File(filepath);","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"            if (!dataFile.createNewFile()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"                throw new DukeException(\"Error while creating duke.txt file.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"        this.file \u003d dataFile;","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"     * updates the specified saved file based on the tasklist passed into it","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"     * @param tasklist the tasklist containing the updated tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"     * @throws IOException when the filewriter has an error","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"    public void update(Tasklist tasklist) throws IOException {","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"        StringBuilder strings \u003d new StringBuilder();","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"        FileWriter fw \u003d new FileWriter(this.file);","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"        for (Task curr : tasklist.getTasks()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"            if (curr instanceof Todo) {","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"                strings.append(\"T \")","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"nevinlim"},"content":"                        .append(\"| \")","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"nevinlim"},"content":"                        .append(curr.isDone() ? \"1 \" : \"0 \")","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"nevinlim"},"content":"                        .append(\"| \")","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"nevinlim"},"content":"                        .append(curr.getDescription())","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"nevinlim"},"content":"                        .append(\"\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"nevinlim"},"content":"            } else if (curr instanceof Deadline) {","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"nevinlim"},"content":"                strings.append(\"D \")","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"nevinlim"},"content":"                        .append(\"| \")","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"nevinlim"},"content":"                        .append(curr.isDone() ? \"1 \" : \"0 \")","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"nevinlim"},"content":"                        .append(\"| \")","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"nevinlim"},"content":"                        .append(curr.getDescription())","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"nevinlim"},"content":"                        .append(\" | \")","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"nevinlim"},"content":"                        .append(((Deadline) curr).getBy())","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"nevinlim"},"content":"                        .append(\"\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"nevinlim"},"content":"            } else if (curr instanceof Event) {","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"nevinlim"},"content":"                strings.append(\"E \")","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"nevinlim"},"content":"                        .append(\"| \")","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"nevinlim"},"content":"                        .append(curr.isDone() ? \"1 \" : \"0 \")","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"nevinlim"},"content":"                        .append(\"| \")","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"nevinlim"},"content":"                        .append(curr.getDescription())","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"nevinlim"},"content":"                        .append(\" | \")","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"nevinlim"},"content":"                        .append(((Event) curr).getFrom())","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"nevinlim"},"content":"                        .append(\" | \")","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"nevinlim"},"content":"                        .append(((Event) curr).getTo())","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"nevinlim"},"content":"                        .append(\"\\n\");","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"nevinlim"},"content":"        fw.write(strings.toString());","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"nevinlim"},"content":"        fw.close();","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"nevinlim"},"content":"     * loads the tasks from the specified saved file","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"nevinlim"},"content":"     * @return an arraylist of tasks from the saved file or creates a new arraylist if file is empty","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"nevinlim"},"content":"     * @throws DukeException when data from file cannot be read","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"nevinlim"},"content":"     * @throws FileNotFoundException when saved file cannot be found","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"nevinlim"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException, FileNotFoundException {","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"nevinlim"},"content":"            Scanner scan \u003d new Scanner(this.file);","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"nevinlim"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"nevinlim"},"content":"            while (scan.hasNext()) {","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"nevinlim"},"content":"                String[] task \u003d scan.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"nevinlim"},"content":"                switch (task[0]) {","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"nevinlim"},"content":"                    case \"T\":","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"nevinlim"},"content":"                        Task todo \u003d new Todo(task[2]);","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"nevinlim"},"content":"                        if (task[1].equals(\"1\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"nevinlim"},"content":"                            todo.markDone();","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"nevinlim"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"nevinlim"},"content":"                        tasks.add(todo);","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"nevinlim"},"content":"                        break;","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"nevinlim"},"content":"                    case \"D\":","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"nevinlim"},"content":"                        Task deadline \u003d new Deadline(task[2], LocalDateTime.parse(task[3]));","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"nevinlim"},"content":"                        if (task[1].equals(\"1\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":111,"author":{"gitId":"nevinlim"},"content":"                            deadline.markDone();","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"nevinlim"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"nevinlim"},"content":"                        tasks.add(deadline);","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"nevinlim"},"content":"                        break;","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"nevinlim"},"content":"                    case \"E\":","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"nevinlim"},"content":"                        Task event \u003d new Event(task[2], LocalDateTime.parse(task[3]), LocalDateTime.parse(task[4]));","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"nevinlim"},"content":"                        if (task[1].equals(\"1\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"nevinlim"},"content":"                            event.markDone();","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"nevinlim"},"content":"                        }","lastModifiedDate":"2023-01-31"},{"lineNumber":121,"author":{"gitId":"nevinlim"},"content":"                        tasks.add(event);","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"nevinlim"},"content":"                        break;","lastModifiedDate":"2023-01-31"},{"lineNumber":123,"author":{"gitId":"nevinlim"},"content":"                    default:","lastModifiedDate":"2023-01-31"},{"lineNumber":124,"author":{"gitId":"nevinlim"},"content":"                        throw new DukeException(\"Data from file does not exist, creating new task list\");","lastModifiedDate":"2023-01-31"},{"lineNumber":125,"author":{"gitId":"nevinlim"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":126,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"nevinlim"},"content":"        return tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":129,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":129}},{"path":"src/main/java/duke/main/Tasklist.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.main;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":" * Tasklist class holds the tasks added and deleted in a session","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"public class Tasklist {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"     * constructor to create a tasklist to stores tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    public Tasklist() {","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"     * constructor to create a tasklist from data in the saved file","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"     * @param tasks arraylist of tasks data from saved file","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"    public Tasklist(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"     * getter method for arraylist of tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"     * @return arraylist of tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"        return this.tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"    public int getTasksNum() {","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"     * adder method to add a task","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"     * @param task task to be added","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"     *  method to delete a task","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"     * @param taskNum task index to be added","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"    public void deleteTask(int taskNum) {","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"        tasks.remove(taskNum);","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"     *  method to mark a task as done","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"nevinlim"},"content":"     * @param taskNum task index to be marked as done","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"nevinlim"},"content":"    public void markDone(int taskNum) {","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"nevinlim"},"content":"        tasks.get(taskNum).markDone();","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"nevinlim"},"content":"     *  method to mark a task as not done","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"nevinlim"},"content":"     * @param taskNum task index to be marked as not done","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"nevinlim"},"content":"    public void markUndone(int taskNum) {","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"nevinlim"},"content":"        tasks.get(taskNum).markUndone();","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"nevinlim"},"content":"    public ArrayList\u003cTask\u003e findTask(String keyword) {","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"nevinlim"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"nevinlim"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"nevinlim"},"content":"            String taskDescription \u003d task.getDescription();","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"nevinlim"},"content":"            if (taskDescription.contains(keyword)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"nevinlim"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"nevinlim"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"nevinlim"},"content":"        return foundTasks;","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":78}},{"path":"src/main/java/duke/main/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.main;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.task.Task;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":" * UI class that deals with input and output for user","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"public class Ui {","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"     * method to print greeting message when Duke starts","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    public String printGreeting() {","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"        return (\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"     * method to print bye message when Duke stops","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    public String printBye() {","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"        return (\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"     * method to print the size of given tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"     * @param tasklist current tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"    public String printTaskNum(Tasklist tasklist) {","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"        return (\"Now you have \" + tasklist.getTasks().size() + \" tasks in the list.\");","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"     * method to print notification that new task has been added to the tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"     * @param task task to be added","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"     * @param tasklist current tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"    public String printAddTaskMessage(Task task, Tasklist tasklist) {","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"        return (\"Got it. I\u0027ve added this task:\\n\" + task + \"\\n\" + printTaskNum(tasklist));","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"     * method to print notification that new task has been deleted from the tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"     * @param task task to be deleted","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"     * @param tasklist current tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"    public String printDeleteTaskMessage(Task task, Tasklist tasklist) {","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"        return (\" Noted. I\u0027ve removed this task:\\n\" + task + \"\\n\" + printTaskNum(tasklist));","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"     * method to print out the tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"     * @param tasklist current tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"    public String printTasks(Tasklist tasklist) {","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tasklist.getTasks();","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"        StringBuilder toReturn \u003d new StringBuilder();","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"            Task ref \u003d tasks.get(i - 1);","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"nevinlim"},"content":"            toReturn.append(i).append(\". \").append(ref.toString()).append(System.lineSeparator());","lastModifiedDate":"2023-02-07"},{"lineNumber":56,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"nevinlim"},"content":"        return toReturn.toString();","lastModifiedDate":"2023-02-07"},{"lineNumber":58,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"nevinlim"},"content":"     * method to print notification that target task has been","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"nevinlim"},"content":"     * marked as done in the tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"nevinlim"},"content":"     * @param task task to be marked as done","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"nevinlim"},"content":"    public  String printMarkTaskMessage(Task task) {","lastModifiedDate":"2023-02-07"},{"lineNumber":65,"author":{"gitId":"nevinlim"},"content":"        return (\"Nice! This task is marked as done:\\n\" + task.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":66,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"nevinlim"},"content":"     * method to print notification that target task has been","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"nevinlim"},"content":"     * marked as not done in the tasklist","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"nevinlim"},"content":"     * @param task task to be marked as not done","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"nevinlim"},"content":"    public String printUnmarkTaskMessage(Task task) {","lastModifiedDate":"2023-02-07"},{"lineNumber":73,"author":{"gitId":"nevinlim"},"content":"        return (\"OK, I\u0027ve marked this task as not done yet:\\n\" + task.toString());","lastModifiedDate":"2023-02-07"},{"lineNumber":74,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"nevinlim"},"content":"    public String printFoundTasks(ArrayList\u003cTask\u003e foundTasks) throws DukeException {","lastModifiedDate":"2023-02-07"},{"lineNumber":77,"author":{"gitId":"nevinlim"},"content":"        if (foundTasks.isEmpty()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"nevinlim"},"content":"            throw new DukeException(\"☹ OOPS!!! There are no tasks matching that keyword.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"nevinlim"},"content":"        StringBuilder toReturn \u003d new StringBuilder();","lastModifiedDate":"2023-02-07"},{"lineNumber":81,"author":{"gitId":"nevinlim"},"content":"        toReturn.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-02-07"},{"lineNumber":82,"author":{"gitId":"nevinlim"},"content":"        for (int i \u003d 1; i \u003c\u003d foundTasks.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"nevinlim"},"content":"            Task ref \u003d foundTasks.get(i - 1);","lastModifiedDate":"2023-02-07"},{"lineNumber":84,"author":{"gitId":"nevinlim"},"content":"            toReturn.append(i).append(\". \").append(ref.toString()).append(System.lineSeparator());","lastModifiedDate":"2023-02-07"},{"lineNumber":85,"author":{"gitId":"nevinlim"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"nevinlim"},"content":"        return toReturn.toString();","lastModifiedDate":"2023-02-07"},{"lineNumber":87,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"nevinlim"},"content":"     * method that prints exception encountered","lastModifiedDate":"2023-02-07"},{"lineNumber":91,"author":{"gitId":"nevinlim"},"content":"     * @param e Exception encountered","lastModifiedDate":"2023-02-07"},{"lineNumber":92,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"nevinlim"},"content":"    public String printException(Exception e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":94,"author":{"gitId":"nevinlim"},"content":"        return (e.getMessage());","lastModifiedDate":"2023-02-07"},{"lineNumber":95,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nevinlim":96}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":" * Deadline class represents a task of deadline type","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"     * constructor method to create a deadline type task","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"     * @param description name of deadline","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"     * @param by date and time deadline is due","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"     * @throws DateTimeParseException when the date time is invalid","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    public Deadline(String description, LocalDateTime by) throws DateTimeParseException {","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"        super(description);","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"     * getter method for the date time of the deadline","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"     * @return due datetime of the deadline","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"        return this.by;","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"     * method to return deadline task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"     * @return deadline task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"        String dateFormat \u003d this.by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateFormat + \")\";","lastModifiedDate":"2023-01-30"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"nevinlim":41}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":" * Event class represents a task of event type","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"     * constructor method to create a event type task","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"     * @param description name of event","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"     * @param from the start date time of event","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"     * @param to end date time of event","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"     * @throws DateTimeParseException when the start or end date time of event is invalid","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) throws DateTimeParseException {","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"        super(description);","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-16"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-16"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"     * getter method for starting date time of event","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"     * @return starting date time of event","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"    public LocalDateTime getFrom() {","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"        return this.from;","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"     * getter method for ending date time of event","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"     * @return ending date time of event","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"    public LocalDateTime getTo() {","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"        return this.to;","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"     * method to return event task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"     * @return event task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"        String fromDateFormat \u003d this.from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"        String toDateFormat \u003d this.to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + fromDateFormat + \" to: \" + toDateFormat + \")\";","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"nevinlim":54}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":" * Task class represent a possible task to be added","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"public class Task {","lastModifiedDate":"2023-01-15"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"    private final String description;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"    private boolean isDone;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"     * constructor method used in subclasses","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"     * task initialised will be marked as not done first","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"     * @param description the name of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-15"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-15"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-15"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"     * getter method for name of task","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"     * @return name of task","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"    public String getDescription() {","lastModifiedDate":"2023-01-30"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"        return description;","lastModifiedDate":"2023-01-30"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nevinlim"},"content":"     * getter method for status of task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nevinlim"},"content":"     * @return status of task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"nevinlim"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-15"},{"lineNumber":33,"author":{"gitId":"nevinlim"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-15"},{"lineNumber":34,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":35,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-15"},{"lineNumber":36,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"nevinlim"},"content":"     * getter method for status of task in boolean","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"nevinlim"},"content":"     * @return status of task in boolean","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nevinlim"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"nevinlim"},"content":"        return this.isDone;","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nevinlim"},"content":"     * setter method to mark task status as done","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nevinlim"},"content":"    public void markDone() {","lastModifiedDate":"2023-01-15"},{"lineNumber":48,"author":{"gitId":"nevinlim"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-15"},{"lineNumber":49,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":50,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"nevinlim"},"content":"     * setter method to mark task status as not done","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"nevinlim"},"content":"    public void markUndone() {","lastModifiedDate":"2023-01-15"},{"lineNumber":54,"author":{"gitId":"nevinlim"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-15"},{"lineNumber":55,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":56,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"nevinlim"},"content":"     * method to return task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"nevinlim"},"content":"     * @return task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"nevinlim"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":62,"author":{"gitId":"nevinlim"},"content":"    public String toString() {","lastModifiedDate":"2023-01-15"},{"lineNumber":63,"author":{"gitId":"nevinlim"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-01-15"},{"lineNumber":64,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-15"},{"lineNumber":65,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-15"},{"lineNumber":66,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-15"}],"authorContributionMap":{"nevinlim":66}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":" * To do class represents a task of to do type","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-16"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-01-16"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"     * constructor method to create a to do type task","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"     * @param description name of to do","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"        super(description);","lastModifiedDate":"2023-01-16"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"     * method to return to do task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"     * @return to do task in string","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"    @Override","lastModifiedDate":"2023-01-16"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"    public String toString() {","lastModifiedDate":"2023-01-16"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-16"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-01-16"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-01-16"}],"authorContributionMap":{"nevinlim":24}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nevinlim":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"1000.0\"","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"            prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"            fx:controller\u003d\"MainWindow\" style\u003d\"-fx-background-color: dimgray;\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"    \u003cstylesheets\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"        \u003cURL value\u003d\"@../css/style.css\"/\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    \u003c/stylesheets\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"650.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"515.0\"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"               AnchorPane.bottomAnchor\u003d\"1.0\"","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"               style\u003d\"-fx-font-size: 16; -fx-text-fill: white; fx-font-family : verdana; -fx-background-color: dimgray; -fx-border-color:gray;\"/\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"515.0\" layoutY\u003d\"648.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"            prefHeight\u003d\"50.0\" prefWidth\u003d\"85.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\"","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"            style\u003d\"-fx-background-color: dimgray; -fx-text-fill: white; -fx-border-color: gray;\"/\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" pannable\u003d\"true\" prefHeight\u003d\"948.0\" prefWidth\u003d\"600.0\"","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"                vvalue\u003d\"5.0\" style\u003d\"-fx-pannable: true; -fx-background-color: black; -fx-text-fill: black;\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" minHeight\u003d\"948.0\" prefWidth\u003d\"580.0\"","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"              style\u003d\"-fx-background-color: linear-gradient(#000000 0%, #424141 100%);; -fx-font-size: 15; -fx-font-family : verdana;\"","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nevinlim"},"content":"              styleClass\u003d\"dialogContainer\"/\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nevinlim"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nevinlim"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nevinlim":28}},{"path":"src/test/java/duke/main/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.main;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"class ParserTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"    void parserTest() throws DukeException  {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"        assertTrue(Parser.parseCommand(\"bye\") instanceof ExitCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"        assertTrue(Parser.parseCommand(\"list\") instanceof ListCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"        assertTrue(Parser.parseCommand(\"mark 2\") instanceof MarkCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"        assertTrue(Parser.parseCommand(\"delete 2\") instanceof DeleteCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nevinlim"},"content":"        assertTrue(Parser.parseCommand(\"todo todo\") instanceof AddCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nevinlim"},"content":"        assertTrue(Parser.parseCommand(\"deadline deadline /by 25/07/2023 1500\") instanceof AddCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nevinlim"},"content":"        assertTrue(Parser.parseCommand(\"event event /from 26/01/2023 1600 /to 02/02/2023 1200\") instanceof AddCommand);","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nevinlim":25}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"class DeadlineTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"    void deadlineTest(){","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"        Deadline test \u003d new Deadline(\"deadline\", LocalDateTime.parse(\"2023-03-03T20:20:00\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"        assertEquals(\"[D][ ] deadline (by: Mar 03 2023 20:20)\", test.toString(), \"toString() method works\");","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"        test.markDone();","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"        assertEquals(\"[D][X] deadline (by: Mar 03 2023 20:20)\", test.toString(), \"markDone() method works\");","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nevinlim":19}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nevinlim"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nevinlim"},"content":"class TodoTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nevinlim"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nevinlim"},"content":"    void todoTest(){","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nevinlim"},"content":"        Todo test \u003d new Todo(\"test\");","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nevinlim"},"content":"        assertEquals(\"[T][ ] test\", test.toString(), \"toString() method works\");","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nevinlim"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nevinlim"},"content":"        test.markDone();","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nevinlim"},"content":"        assertEquals(\"[T][X] test\", test.toString(), \"markDone() method works\");","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nevinlim"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nevinlim"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nevinlim":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nevinlim"},"content":"deadline read /by sunday","lastModifiedDate":"2023-01-17"},{"lineNumber":2,"author":{"gitId":"nevinlim"},"content":"event code /from now /to later","lastModifiedDate":"2023-01-17"},{"lineNumber":3,"author":{"gitId":"nevinlim"},"content":"bye","lastModifiedDate":"2023-01-17"}],"authorContributionMap":{"nevinlim":3}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"nevinlim"},"content":"java -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nevinlim":1,"-":20}}]
