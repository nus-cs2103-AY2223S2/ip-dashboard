[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"//    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"    mainClassName \u003d \"seedu.fideline.Fideline\"","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"checkstyle {","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"niekis":7,"-":39}},{"path":"src/main/java/fideline/Fideline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.CorruptedDataFileException;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileNotFoundException;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.exception.FidelineException;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.exception.UnableToCreateDataFileException;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"import fideline.execution.Command;","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"import fideline.user.Parser;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":" * Fideline is a chatbot that handles a list of tasks for the user.","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"public class Fideline {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"    /** Manages creation of new tasks and handles old ones */","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"    /** Handler for storage of existing tasks locally */","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"    /** Handler for display messages to the user */","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"    private Ui ui;","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"     * Boots up Fideline. Attempts to load existing saved data.","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"     * @param filePath Path of the data file.","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"     * @throws CorruptedDataFileException Signals to the user that the saved","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"     *                                    data is corrupted and cannot be read.","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"     * @throws UnableToCreateDataFileException Signals to the user that saved","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"     *                                         data cannot be located and a","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"     *                                         new file is unable to be created.","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"    public Fideline(String filePath) throws CorruptedDataFileException,","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"            UnableToCreateDataFileException {","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"            taskManager \u003d new TaskManager(storage.load());","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"        } catch (DataFileNotFoundException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"            ui.loadError(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"            taskManager \u003d new TaskManager();","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"            storage.createDataFile();","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":53,"author":{"gitId":"niekis"},"content":"     * Starts Fideline\u0027s program. Fideline takes in the user\u0027s input","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"niekis"},"content":"     * until it is turned off with a \"bye\" command.","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"niekis"},"content":"    public void run() {","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"niekis"},"content":"        ui.showLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"niekis"},"content":"        ui.hello();","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"niekis"},"content":"        ui.showLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"niekis"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"niekis"},"content":"        while (!isExit) {","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"niekis"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"niekis"},"content":"                String userInput \u003d ui.getNextCommand();","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"niekis"},"content":"                ui.showLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"niekis"},"content":"                Command c \u003d Parser.getCommand(userInput);","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"niekis"},"content":"                c.execute(taskManager, storage, ui);","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"niekis"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"niekis"},"content":"            } catch (FidelineException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"niekis"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"niekis"},"content":"            } finally {","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"niekis"},"content":"                ui.showLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"niekis"},"content":"    public static void main(String[] args) throws CorruptedDataFileException,","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"niekis"},"content":"            UnableToCreateDataFileException {","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"niekis"},"content":"        new Fideline(\"./task-data.txt\").run();","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":81,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":81}},{"path":"src/main/java/fideline/exception/CorruptedDataFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs user that the data file cannot be read. File has to be","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * restored or deleted for program to run.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"public class CorruptedDataFileException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    public CorruptedDataFileException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"        super(\"data file has been corrupted!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":14}},{"path":"src/main/java/fideline/exception/DataFileInteractionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs user that the program is unable to interact with","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * the data file.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"public class DataFileInteractionException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"     * Constructs exception informing user that there is an issue with","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"     * interacting with the data file.","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"     * @param errorMessage Message explaining probable cause of the exception.","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    public DataFileInteractionException(String errorMessage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":20}},{"path":"src/main/java/fideline/exception/DataFileNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs user that the data file cannot be found.","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"public class DataFileNotFoundException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"    public DataFileNotFoundException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"        super(\"i couldn\u0027t find an existing data file!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":12}},{"path":"src/main/java/fideline/exception/EmptyParamException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs user that the command called requires parameters that was","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * not provided.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"public class EmptyParamException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    public EmptyParamException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"        super(\"this command cannot have an empty description!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":14}},{"path":"src/main/java/fideline/exception/FidelineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Signals that Fideline has found an issue. This is the parent class","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * to all custom Fideline exceptions.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"public class FidelineException extends Exception {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"     * Constructs an exception that informs the user of an issue","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"     * occurring during the program.","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"     * @param errorMessage Message describing the exception.","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    public FidelineException(String errorMessage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":20}},{"path":"src/main/java/fideline/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs the user that the arguments provided are invalid for","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * the given command. Exception message should also contain what","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" * the valid argument should be in the form of.","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"public class InvalidArgumentException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"     * Constructs an exception informing the user that their arguments","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"     * are invalid and provides the valid type of argument.","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"     * @param validInput Proper type of input that is accepted.","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    public InvalidArgumentException(String validInput) {","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"        super(\"argument given has to be a valid \" + validInput + \"!\");","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":22}},{"path":"src/main/java/fideline/exception/UnableToCreateDataFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs the user that the program is unable to run, due to","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * being unable to create a data file.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"public class UnableToCreateDataFileException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    public UnableToCreateDataFileException(String errorMessage) {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"        super(errorMessage);","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":14}},{"path":"src/main/java/fideline/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs the user that the given command does not exist.","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"public class UnknownCommandException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"        super(\"this command does not exist!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":12}},{"path":"src/main/java/fideline/exception/WrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.exception;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Informs the user that the command was not executed","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * because it was given in the wrong format.","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"public class WrongFormatException extends FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"     * Constructs exception that informs the user of their command\u0027s","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"     * wrong format and provides the correct format.","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"     * @param correctFormat The correct format of the given argument.","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    public WrongFormatException(String correctFormat) {","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        super(\"wrong format! \" + correctFormat);","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":20}},{"path":"src/main/java/fideline/execution/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.FidelineException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" * The command classes executes the user\u0027s commands after","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" * they have been parsed.","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"public abstract class Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"     * Tells Fideline to continue running. All commands return","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"     * false unless it is the ExitCommand, which overrides this.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"     * @return false","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"        return false;","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"     * Runs the relevant operations associated with the command.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"     * @param storage Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"     * @param ui Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"     * @throws FidelineException Custom exception raised while the program is running.","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"    public abstract void execute(TaskManager taskManager, Storage storage, Ui ui) throws FidelineException;","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":39}},{"path":"src/main/java/fideline/execution/CreateDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileInteractionException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" * Command that executes the creation of a deadline task.","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"public class CreateDeadlineCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"    /** Title of the task */","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    private String taskDescription;","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"    /** When the task is due */","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    private String deadline;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     * Constructs a command that can create and add a deadline","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     * task to the existing tasks.","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     * @param taskDescription Title of the task.","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"     * @param deadline When the task is due.","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"    public CreateDeadlineCommand(String taskDescription, String deadline) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"     * Creates and adds new deadline task to existing tasks, and saves it locally.","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"     * The new task is unmarked.","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui) throws DataFileInteractionException {","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"        String taskString \u003d taskManager.addDeadline(taskDescription, deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"        storage.addLine(\"D| |\" + taskDescription + \"|\" + deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"        ui.addTaskMsg(taskString, taskManager.getTaskCount());","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":48}},{"path":"src/main/java/fideline/execution/CreateEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileInteractionException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" * Command that executes the creation of an event task.","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"public class CreateEventCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"    /** Title of the task */","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    private String taskDescription;","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"    /** When the event is starts */","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    private String startTime;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    /** When the event is ends */","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"    private String endTime;","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     * Constructs a command that can create and add an event","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"     * task to the existing tasks.","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"     * @param taskDescription Title of the event.","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"     * @param startTime When the event starts.","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"     * @param endTime When the event ends.","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"    public CreateEventCommand(String taskDescription,","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"            String startTime, String endTime) {","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"     * Creates and adds new event task to existing tasks, and saves it locally.","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"     * The new task is unmarked.","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui) throws DataFileInteractionException {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"niekis"},"content":"        String taskString \u003d taskManager.addEvent(taskDescription,","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"niekis"},"content":"                startTime, endTime);","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"niekis"},"content":"        storage.addLine(\"E| |\" + taskDescription + \"|\" + startTime","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"niekis"},"content":"                + \"|\" + endTime);","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"niekis"},"content":"        ui.addTaskMsg(taskString, taskManager.getTaskCount());","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":56}},{"path":"src/main/java/fideline/execution/CreateTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileInteractionException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" * Command that executes the creation of a todo task.","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"public class CreateTodoCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"    /** Title of the task */","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    private String taskDescription;","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"     * Constructs a command that can create and add a todo","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"     * task to the existing tasks.","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     * @param taskDescription Title of the task.","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"    public CreateTodoCommand(String taskDescription) {","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"     * Creates and adds new todo task to existing tasks, and saves it locally.","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"     * The new task is unmarked.","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui) throws DataFileInteractionException {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"        String taskString \u003d taskManager.addTodo(taskDescription);","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"        storage.addLine(\"T| |\" + taskDescription);","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"        ui.addTaskMsg(taskString, taskManager.getTaskCount());","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":43}},{"path":"src/main/java/fideline/execution/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileInteractionException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.exception.InvalidArgumentException;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" * Command that executes the removal of a task from the task list.","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    private int taskNum;","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    public DeleteCommand(int taskNum) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     * Removes an existing task from task list and memory.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui)","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"            throws DataFileInteractionException, InvalidArgumentException {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"        if (taskManager.checkTask(taskNum)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"            String s \u003d taskManager.deleteTask(taskNum);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"            storage.deleteLine(taskNum);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"            ui.deleteMsg(s, taskManager.getTaskCount());","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"            throw new InvalidArgumentException(\"task!\\n(the one given does not exist!)\");","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":39}},{"path":"src/main/java/fideline/execution/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" * Terminates Fideline and handles the ending of the program.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"     * Stops Fideline and causes the program to exit.","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"     * @return true","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"        return true;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     * Prompts Ui to display goodbye message.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"     * @param storage Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"     * @param ui Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui) {","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"        ui.goodbye();","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":36}},{"path":"src/main/java/fideline/execution/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" * Shows the user a list of all existing tasks that have","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":" * descriptions that contain the given input.","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"    private String findString;","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"    public FindCommand(String findString) {","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"        this.findString \u003d findString;","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"     * Fetches list of all existing tasks from the taskmanager that contain","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"     * the given string.","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-03"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-03"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-03"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui) {","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"        String s \u003d taskManager.findTask(findString);","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"        if (s.equals(\"\")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"            ui.emptyFindMsg();","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"        } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"            ui.findMsg(s);","lastModifiedDate":"2023-02-03"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"niekis":45}},{"path":"src/main/java/fideline/execution/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" * Shows the user the list of all existing tasks.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"     * Fetches list of all existing tasks from the taskmanager.","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"        String s \u003d taskManager.getTaskListString();","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"        if (s.equals(\"\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"            ui.emptyListMsg();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"            ui.listMsg(s);","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":34}},{"path":"src/main/java/fideline/execution/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileInteractionException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.exception.InvalidArgumentException;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" * Command that executes the status change of a task to done.","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    private int taskNum;","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    public MarkCommand(int taskNum) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     * Changes the status of an existing task to done.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui)","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"            throws DataFileInteractionException, InvalidArgumentException {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"        if (taskManager.checkTask(taskNum)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"            String s \u003d taskManager.markTask(taskNum);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"            storage.editTaskStatus(taskNum, true);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"            ui.markMsg(s);","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"            throw new InvalidArgumentException(\"task! (the one given does not exist!)\");","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":42}},{"path":"src/main/java/fideline/execution/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.execution;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileInteractionException;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import fideline.exception.InvalidArgumentException;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.save.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import fideline.task.TaskManager;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"import fideline.user.Ui;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" * Command that executes the status change of a task to undone.","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    private int taskNum;","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    public UnmarkCommand(int taskNum) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     * Changes the status of an existing task to not done.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"     * @param taskManager Manager for existing tasks and creation of new ones.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     * @param storage     Handler for storage of existing tasks locally.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"     * @param ui          Handler for display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"    public void execute(TaskManager taskManager, Storage storage, Ui ui)","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"            throws DataFileInteractionException, InvalidArgumentException {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"        if (taskManager.checkTask(taskNum)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"            String s \u003d taskManager.unmarkTask(taskNum);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"            storage.editTaskStatus(taskNum, false);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"            ui.unmarkMsg(s);","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"        } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"            throw new InvalidArgumentException(\"task! (the one given does not exist!)\");","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":40}},{"path":"src/main/java/fideline/save/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.save;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import java.io.File;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-30"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileInteractionException;","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"import fideline.exception.DataFileNotFoundException;","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"import fideline.exception.UnableToCreateDataFileException;","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"public class Storage {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    private File dataFile;","lastModifiedDate":"2023-01-30"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"    public Storage(String fileLocation) {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"        dataFile \u003d new File(fileLocation);","lastModifiedDate":"2023-01-30"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"    public String load() throws DataFileNotFoundException {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"        String outputString \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"            Scanner fileScan \u003d new Scanner(dataFile);","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"            while (fileScan.hasNext()) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"                outputString +\u003d fileScan.nextLine() + \"\\n\";","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"            return outputString;","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"            throw new DataFileNotFoundException();","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"    public void createDataFile() throws UnableToCreateDataFileException {","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"            throw new UnableToCreateDataFileException(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"    public void addLine(String line) throws DataFileInteractionException {","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"            FileWriter fw \u003d new FileWriter(dataFile, true);","lastModifiedDate":"2023-01-30"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"            PrintWriter pw \u003d new PrintWriter(fw);","lastModifiedDate":"2023-01-30"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"            pw.println(line);","lastModifiedDate":"2023-01-30"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"            pw.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":49,"author":{"gitId":"niekis"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":50,"author":{"gitId":"niekis"},"content":"            throw new DataFileInteractionException(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":52,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":53,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":54,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":55,"author":{"gitId":"niekis"},"content":"    public void deleteLine(int lineNum) throws DataFileInteractionException {","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"niekis"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":57,"author":{"gitId":"niekis"},"content":"            int lineCounter \u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"niekis"},"content":"            Scanner fileScan \u003d new Scanner(dataFile);","lastModifiedDate":"2023-01-30"},{"lineNumber":59,"author":{"gitId":"niekis"},"content":"            String dataString \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":60,"author":{"gitId":"niekis"},"content":"            while (fileScan.hasNext()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"niekis"},"content":"                String s \u003d fileScan.nextLine();","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"niekis"},"content":"                if (lineCounter !\u003d lineNum) {","lastModifiedDate":"2023-01-30"},{"lineNumber":63,"author":{"gitId":"niekis"},"content":"                    dataString +\u003d s;","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"niekis"},"content":"                    dataString +\u003d \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"niekis"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"niekis"},"content":"                lineCounter++;","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"niekis"},"content":"            dataString \u003d dataString.length() \u003d\u003d 0 ? dataString","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"niekis"},"content":"                    : dataString.substring(0, dataString.length() - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"niekis"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2023-01-30"},{"lineNumber":71,"author":{"gitId":"niekis"},"content":"            PrintWriter pw \u003d new PrintWriter(fw);","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"niekis"},"content":"            if (dataString.length() !\u003d 0) {","lastModifiedDate":"2023-02-03"},{"lineNumber":73,"author":{"gitId":"niekis"},"content":"                pw.println(dataString);","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"niekis"},"content":"            } else {","lastModifiedDate":"2023-02-03"},{"lineNumber":75,"author":{"gitId":"niekis"},"content":"                pw.print(\"\");","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":77,"author":{"gitId":"niekis"},"content":"            pw.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"niekis"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":79,"author":{"gitId":"niekis"},"content":"            throw new DataFileInteractionException(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":83,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"niekis"},"content":"    public void editTaskStatus(int taskNum, boolean isDone) throws DataFileInteractionException {","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"niekis"},"content":"        String newMark \u003d (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-01-30"},{"lineNumber":86,"author":{"gitId":"niekis"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"niekis"},"content":"            int lineCounter \u003d 1;","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"niekis"},"content":"            Scanner fileScan \u003d new Scanner(dataFile);","lastModifiedDate":"2023-01-30"},{"lineNumber":89,"author":{"gitId":"niekis"},"content":"            String dataString \u003d \"\";","lastModifiedDate":"2023-01-30"},{"lineNumber":90,"author":{"gitId":"niekis"},"content":"            while (fileScan.hasNext()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"niekis"},"content":"                if (lineCounter !\u003d taskNum) {","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"niekis"},"content":"                    dataString +\u003d fileScan.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":93,"author":{"gitId":"niekis"},"content":"                } else {","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"niekis"},"content":"                    String s \u003d fileScan.nextLine();","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"niekis"},"content":"                    dataString +\u003d s.substring(0, 2) + newMark","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"niekis"},"content":"                            + s.substring(3, s.length());","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"niekis"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"niekis"},"content":"                dataString +\u003d \"\\n\";","lastModifiedDate":"2023-01-30"},{"lineNumber":99,"author":{"gitId":"niekis"},"content":"                lineCounter++;","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"niekis"},"content":"            dataString \u003d dataString.substring(0, dataString.length() - 1);","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"niekis"},"content":"            FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2023-01-30"},{"lineNumber":103,"author":{"gitId":"niekis"},"content":"            PrintWriter pw \u003d new PrintWriter(fw);","lastModifiedDate":"2023-01-30"},{"lineNumber":104,"author":{"gitId":"niekis"},"content":"            pw.println(dataString);","lastModifiedDate":"2023-01-30"},{"lineNumber":105,"author":{"gitId":"niekis"},"content":"            pw.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":106,"author":{"gitId":"niekis"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":107,"author":{"gitId":"niekis"},"content":"            throw new DataFileInteractionException(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":109,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":110,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":111,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-01-30"}],"authorContributionMap":{"niekis":111}},{"path":"src/main/java/fideline/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-30"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-30"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" * Representation of a type of task that has a deadline.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"    /** String representation of the task\u0027s deadline */","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"    private String timingString;","lastModifiedDate":"2023-01-30"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    /** LocalDate representation of the task\u0027s deadline if available */","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"    private LocalDate timingLocalDate;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"     * Constructs a task object with a deadline.","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     * @param description Title given to the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"     * @param deadlineTiming Deadline of the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"    public Deadline(String description, String deadlineTiming) {","lastModifiedDate":"2023-01-22"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"        super(description);","lastModifiedDate":"2023-01-22"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"        // Checks if deadlineTiming provided fits the correct format.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"            // Stores deadline as a DateTime.","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"            timingLocalDate \u003d LocalDate.parse(deadlineTiming);","lastModifiedDate":"2023-01-30"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"            // Changes the format of the deadline.","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"            timingString \u003d timingLocalDate.format(","lastModifiedDate":"2023-01-30"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"                    DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-01-30"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"            // Simply stores the given timing","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"            timingString \u003d deadlineTiming;","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-01-22"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-01-22"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"    public String toString() {","lastModifiedDate":"2023-01-22"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + timingString + \")\";","lastModifiedDate":"2023-01-30"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-01-21"}],"authorContributionMap":{"niekis":45}},{"path":"src/main/java/fideline/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Representation of a task that has both a start and end timing.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"public class Event extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"    /** String representation of the task\u0027s start time */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    private String startTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"    /** String representation of the task\u0027s end time */","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"    private String endTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"     * Constructs a task object with bith a start and end timing.","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"     * @param description Title given to the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"     * @param startTime Time when the task is supposed to start.","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"     * @param endTime Time when the task is supposed to end.","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"    public Event(String description, String startTime, String endTime) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + startTime","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"                + \" to: \" + endTime + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":34}},{"path":"src/main/java/fideline/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" * Representation of a task that can be completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"public abstract class Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"    /** Title describing the task */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"    private String description;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    /** Status that indicates if the task is done */","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    private boolean isDone;","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"     * Constructs a task object that has a description. Tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"     * are not done by default.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"     * @param description Title given to the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"    public Task(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"     * Returns string representation of the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"     * @return String representing the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"        return (isDone ? \"[X] \" : \"[ ] \") + description;","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"     * Changes status of the task to done.","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"    public void mark() {","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-02-03"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":50,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"niekis"},"content":"     * Changes status of the task to not done.","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"niekis"},"content":"    public void unmark() {","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"niekis"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-02-03"},{"lineNumber":55,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":56,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":58,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"niekis"},"content":"     * Returns description of the task.","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-03"},{"lineNumber":61,"author":{"gitId":"niekis"},"content":"     * @return Description of the task.","lastModifiedDate":"2023-02-03"},{"lineNumber":62,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"niekis"},"content":"    public String getDescription() {","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"niekis"},"content":"        return description;","lastModifiedDate":"2023-02-03"},{"lineNumber":65,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":67,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":67}},{"path":"src/main/java/fideline/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import fideline.exception.CorruptedDataFileException;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" * Manager of new and existing tasks. Handles creating, deletion and","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" * status change of all tasks.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"public class TaskManager {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    public TaskManager(String storedData) throws CorruptedDataFileException {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"        taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        String[] storedTaskString \u003d storedData.split(\"\\\\r?\\\\n|\\\\r\");","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"        if (!(storedTaskString.length \u003d\u003d 1 \u0026\u0026 storedTaskString[0].equals(\"\"))) { // if not empty","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"            for (int i \u003d 0; i \u003c storedTaskString.length; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"                String taskString \u003d storedTaskString[i];","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"                String[] taskComponent \u003d taskString.split(\"\\\\|\");","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"                if (taskComponent[0].equals(\"T\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"                    addTodo(taskComponent[2]);","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"                } else if (taskComponent[0].equals(\"D\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"                    addDeadline(taskComponent[2], taskComponent[3]);","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"                } else if (taskComponent[0].equals(\"E\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"                    addEvent(taskComponent[2], taskComponent[3], taskComponent[4]);","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"                } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"                    throw new CorruptedDataFileException();","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"                if (taskComponent[1].equals(\"X\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"                    markTask(i + 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"    public TaskManager() {","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"        taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"    public String addTodo(String taskName) {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"        Todo newTodo \u003d new Todo(taskName);","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"        taskList.add(newTodo);","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"        return newTodo.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":52,"author":{"gitId":"niekis"},"content":"    public String addDeadline(String taskName, String deadlineTiming) {","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"niekis"},"content":"        Deadline newDeadline \u003d new Deadline(taskName, deadlineTiming);","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"niekis"},"content":"        taskList.add(newDeadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"niekis"},"content":"        return newDeadline.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":59,"author":{"gitId":"niekis"},"content":"    public String addEvent(String taskName, String startTime, String endTime) {","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"niekis"},"content":"        Event newEvent \u003d new Event(taskName, startTime, endTime);","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"niekis"},"content":"        taskList.add(newEvent);","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"niekis"},"content":"        return newEvent.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":66,"author":{"gitId":"niekis"},"content":"    // checks if task exists at given index","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"niekis"},"content":"    public boolean checkTask(int taskNumber) {","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"niekis"},"content":"        return taskNumber \u003c\u003d taskList.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"niekis"},"content":"    // get the name of the task at a given index","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"niekis"},"content":"    public String getTaskString(int taskNumber) {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"niekis"},"content":"        return taskList.get(taskNumber - 1).toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":78,"author":{"gitId":"niekis"},"content":"    // changes Task at given index to marked.","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"niekis"},"content":"    public String markTask(int taskNumber) {","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"niekis"},"content":"        taskList.get(taskNumber - 1).mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"niekis"},"content":"        return taskList.get(taskNumber - 1).toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":85,"author":{"gitId":"niekis"},"content":"    // changes Task at given index to unmarked.","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"niekis"},"content":"    public String unmarkTask(int taskNumber) {","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"niekis"},"content":"        taskList.get(taskNumber - 1).unmark();","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"niekis"},"content":"        return taskList.get(taskNumber - 1).toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":92,"author":{"gitId":"niekis"},"content":"    // delete Task at given index.","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"niekis"},"content":"    public String deleteTask(int taskNumber) {","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"niekis"},"content":"        String deleted \u003d taskList.get(taskNumber - 1).toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"niekis"},"content":"        taskList.remove(taskNumber - 1);","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"niekis"},"content":"        return deleted;","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"niekis"},"content":"    // formats and returns the list of tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"niekis"},"content":"    public String getTaskListString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"niekis"},"content":"        String listString \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"niekis"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"niekis"},"content":"            listString +\u003d \"\\n\" + i + \". \"","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"niekis"},"content":"                    + getTaskString(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"niekis"},"content":"        return listString;","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":110,"author":{"gitId":"niekis"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"niekis"},"content":"        return taskList.size();","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":114,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":115,"author":{"gitId":"niekis"},"content":"    public String findTask(String findString) {","lastModifiedDate":"2023-02-03"},{"lineNumber":116,"author":{"gitId":"niekis"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"niekis"},"content":"        taskList.forEach(x -\u003e {","lastModifiedDate":"2023-02-03"},{"lineNumber":118,"author":{"gitId":"niekis"},"content":"            if (x.getDescription().contains(findString)) {","lastModifiedDate":"2023-02-03"},{"lineNumber":119,"author":{"gitId":"niekis"},"content":"                list.add(x);","lastModifiedDate":"2023-02-03"},{"lineNumber":120,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-03"},{"lineNumber":121,"author":{"gitId":"niekis"},"content":"        });","lastModifiedDate":"2023-02-03"},{"lineNumber":122,"author":{"gitId":"niekis"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-03"},{"lineNumber":123,"author":{"gitId":"niekis"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {","lastModifiedDate":"2023-02-03"},{"lineNumber":124,"author":{"gitId":"niekis"},"content":"            output +\u003d \"\\n\" + i + \". \"","lastModifiedDate":"2023-02-03"},{"lineNumber":125,"author":{"gitId":"niekis"},"content":"                    + list.get(i - 1).toString();","lastModifiedDate":"2023-02-03"},{"lineNumber":126,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":127,"author":{"gitId":"niekis"},"content":"        return output;","lastModifiedDate":"2023-02-03"},{"lineNumber":128,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":129,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":129}},{"path":"src/main/java/fideline/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":" * Representation of a simple task to be completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"     * Constructs a simple task object. Only has a description.","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"     * @param description Title given to the task.","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"        super(description);","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":24}},{"path":"src/main/java/fideline/user/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.user;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"import fideline.exception.EmptyParamException;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"import fideline.exception.FidelineException;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"import fideline.exception.InvalidArgumentException;","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"import fideline.exception.UnknownCommandException;","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"import fideline.exception.WrongFormatException;","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"import fideline.execution.Command;","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"import fideline.execution.CreateDeadlineCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"import fideline.execution.CreateEventCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"import fideline.execution.CreateTodoCommand;","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"import fideline.execution.DeleteCommand;","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"import fideline.execution.ExitCommand;","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"import fideline.execution.FindCommand;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"import fideline.execution.ListCommand;","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"import fideline.execution.MarkCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"import fideline.execution.UnmarkCommand;","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"public class Parser {","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"    private static final String[] possibleCommandsArr \u003d {","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"        \"bye\", \"list\", \"todo\", \"deadline\", \"event\", \"mark\", \"unmark\", \"delete\", \"find\"","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"    };","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"    public static Command getCommand(String userInput) throws FidelineException {","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"        ArrayList\u003cString\u003e possibleCommandsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"        possibleCommandsList.addAll(Arrays.asList(possibleCommandsArr));","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"        // First checks for simple commands (one word)","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"        if (!userInput.contains(\" \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"            if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"                return new ExitCommand();","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"            } else if (userInput.equals(\"list\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"                return new ListCommand();","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"            } else if (possibleCommandsList.contains(userInput)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"                // error for empty args in command","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"                throw new EmptyParamException();","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"                // error for unknown command","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"                throw new UnknownCommandException();","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"            // below handles commands with arguments","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"niekis"},"content":"        } else if (userInput.startsWith(\"todo \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"niekis"},"content":"            return new CreateTodoCommand(userInput.substring(5, userInput.length()));","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"niekis"},"content":"        } else if (userInput.startsWith(\"deadline \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"niekis"},"content":"            String argString \u003d userInput.substring(9, userInput.length());","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"niekis"},"content":"            if (argString.contains(\" /by \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"niekis"},"content":"                String[] inputArguments \u003d argString.split(\" /by \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"niekis"},"content":"                String description \u003d inputArguments[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"niekis"},"content":"                String deadline \u003d inputArguments[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"niekis"},"content":"                if (inputArguments[1].matches(\"\\\\d++/\\\\d++/\\\\d++\")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"niekis"},"content":"                    String[] timeComponents \u003d inputArguments[1].split(\"/\");","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"niekis"},"content":"                    if (timeComponents[0].length() \u003e 2","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"niekis"},"content":"                            || timeComponents[1].length() \u003e 2","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"niekis"},"content":"                            || timeComponents[2].length() !\u003d 4) {","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"niekis"},"content":"                        throw new WrongFormatException(\"date should follow the format:\\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":63,"author":{"gitId":"niekis"},"content":"                                + \"  dd/mm/yyyy\");","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"niekis"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"niekis"},"content":"                    if (timeComponents[0].length() \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"niekis"},"content":"                        timeComponents[0] \u003d \"0\" + timeComponents[0];","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"niekis"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"niekis"},"content":"                    if (timeComponents[1].length() \u003d\u003d 1) {","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"niekis"},"content":"                        timeComponents[1] \u003d \"0\" + timeComponents[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"niekis"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"niekis"},"content":"                    String dateTimeString \u003d String.format(\"%s-%s-%s\",","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"niekis"},"content":"                            timeComponents[2], timeComponents[1], timeComponents[0]);","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"niekis"},"content":"                    try {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"niekis"},"content":"                        LocalDate ld \u003d LocalDate.parse(dateTimeString);","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"niekis"},"content":"                        deadline \u003d dateTimeString;","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"niekis"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"niekis"},"content":"                        throw new InvalidArgumentException(\"date\");","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"niekis"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"niekis"},"content":"                }","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"niekis"},"content":"                return new CreateDeadlineCommand(description, deadline);","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"niekis"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"niekis"},"content":"                throw new WrongFormatException(\"command should follow the format:\\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":83,"author":{"gitId":"niekis"},"content":"                        + \"  deadline *description* /by *timing*\");","lastModifiedDate":"2023-02-03"},{"lineNumber":84,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"niekis"},"content":"        } else if (userInput.startsWith(\"event \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"niekis"},"content":"            String argString \u003d userInput.substring(6, userInput.length());","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"niekis"},"content":"            if (argString.contains(\" /from \") \u0026\u0026 argString.contains(\" /to \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"niekis"},"content":"                String[] tempArr \u003d argString.split(\" /from \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"niekis"},"content":"                String[] tempArr2 \u003d tempArr[1].split(\" /to \");","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"niekis"},"content":"                return new CreateEventCommand(tempArr[0], tempArr2[0], tempArr2[1]);","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"niekis"},"content":"            } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"niekis"},"content":"                throw new WrongFormatException(\"command should follow the format:\\n\"","lastModifiedDate":"2023-02-03"},{"lineNumber":93,"author":{"gitId":"niekis"},"content":"                        + \"  event *description* /from *start time* /to *end time*\");","lastModifiedDate":"2023-02-03"},{"lineNumber":94,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"niekis"},"content":"        } else if (userInput.startsWith(\"mark \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":96,"author":{"gitId":"niekis"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"niekis"},"content":"                int taskNum \u003d Integer.parseInt(userInput.substring(5, userInput.length()));","lastModifiedDate":"2023-02-03"},{"lineNumber":98,"author":{"gitId":"niekis"},"content":"                return new MarkCommand(taskNum);","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"niekis"},"content":"            } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"niekis"},"content":"                throw new InvalidArgumentException(\"integer (e.g: mark 2)\");","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"niekis"},"content":"        } else if (userInput.startsWith(\"unmark \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"niekis"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"niekis"},"content":"                int taskNum \u003d Integer.parseInt(userInput.substring(7, userInput.length()));","lastModifiedDate":"2023-02-03"},{"lineNumber":105,"author":{"gitId":"niekis"},"content":"                return new UnmarkCommand(taskNum);","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"niekis"},"content":"            } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"niekis"},"content":"                throw new InvalidArgumentException(\"integer (e.g: unmark 2)\");","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"niekis"},"content":"        } else if (userInput.startsWith(\"delete \")) {","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"niekis"},"content":"            try {","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"niekis"},"content":"                int taskNum \u003d Integer.parseInt(userInput.substring(7, userInput.length()));","lastModifiedDate":"2023-02-03"},{"lineNumber":112,"author":{"gitId":"niekis"},"content":"                return new DeleteCommand(taskNum);","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"niekis"},"content":"            } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"niekis"},"content":"                throw new InvalidArgumentException(\"integer! (e.g: delete 2\");","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"niekis"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"niekis"},"content":"        } else if (userInput.startsWith(\"find \")) {","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"niekis"},"content":"            return new FindCommand(userInput.substring(5, userInput.length()));","lastModifiedDate":"2023-02-03"},{"lineNumber":118,"author":{"gitId":"niekis"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":119,"author":{"gitId":"niekis"},"content":"        throw new UnknownCommandException();","lastModifiedDate":"2023-02-01"},{"lineNumber":120,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":122}},{"path":"src/main/java/fideline/user/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.user;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":" * Handles display messages to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":" * @author Fun Leon","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"public class Ui {","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"    private static final String LINE \u003d \"_________________________________________________________________\";","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"    public Ui() {","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":26,"author":{"gitId":"niekis"},"content":"    public String getNextCommand() {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"niekis"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"niekis"},"content":"     * Displays given message to the user in between two lines.","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"niekis"},"content":"     * @param message Text to be displayed to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"niekis"},"content":"    private static void displayln(String message) {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"niekis"},"content":"        System.out.println(message);","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":41,"author":{"gitId":"niekis"},"content":"    public void showLine() {","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"niekis"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":46,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"niekis"},"content":"     * Greets the user at the start of the program.","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"niekis"},"content":"    public void hello() {","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"niekis"},"content":"        displayln(\"hello! I\u0027m fideline,\\nwhat do you want today?\");","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":54,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"niekis"},"content":"     * Bids the user goodbye.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"niekis"},"content":"    public void goodbye() {","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":60,"author":{"gitId":"niekis"},"content":"        displayln(\"get out of my sight!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":64,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"niekis"},"content":"     * Tells the user that the list of tasks is currently empty.","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"niekis"},"content":"    public void emptyListMsg() {","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"niekis"},"content":"        displayln(\"eh are you stupid?\\nyour list is currently empty!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":72,"author":{"gitId":"niekis"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"niekis"},"content":"     * Displays list of tasks to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"niekis"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"niekis"},"content":"     * @param list String representation of the list of existing tasks.","lastModifiedDate":"2023-02-03"},{"lineNumber":76,"author":{"gitId":"niekis"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"niekis"},"content":"    public void listMsg(String list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"niekis"},"content":"        displayln(\"here! your list:\" + list);","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":82,"author":{"gitId":"niekis"},"content":"    public void addTaskMsg(String newTask, int taskCount) {","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"niekis"},"content":"        displayln(\"ok! i\u0027ve added to your list:\\n  \"","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"niekis"},"content":"                + newTask + \"\\nwow! there \"","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"niekis"},"content":"                + (taskCount \u003d\u003d 1 ? \"is \" : \"are \") + taskCount","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"niekis"},"content":"                + (taskCount \u003d\u003d 1 ? \" task \" : \" tasks \")","lastModifiedDate":"2023-02-01"},{"lineNumber":87,"author":{"gitId":"niekis"},"content":"                + \"in the list now! :0\");","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":91,"author":{"gitId":"niekis"},"content":"    public void markMsg(String task) {","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"niekis"},"content":"        displayln(\"nice work! i\u0027ve taken note!:\\n  \" + task);","lastModifiedDate":"2023-02-01"},{"lineNumber":93,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":95,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":96,"author":{"gitId":"niekis"},"content":"    public void unmarkMsg(String task) {","lastModifiedDate":"2023-02-01"},{"lineNumber":97,"author":{"gitId":"niekis"},"content":"        displayln(\"uhh okay... i\u0027ve unmarked your task:\\n  \" + task);","lastModifiedDate":"2023-02-01"},{"lineNumber":98,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":101,"author":{"gitId":"niekis"},"content":"    public void deleteMsg(String task, int taskCount) {","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"niekis"},"content":"        displayln(\"okay i\u0027ve deleted this task:\\n  \" + task","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"niekis"},"content":"                + \"\\nnow there \" + (taskCount \u003d\u003d 1 ? \"is \" : \"are \") + taskCount","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"niekis"},"content":"                + (taskCount \u003d\u003d 1 ? \" task \" : \" tasks \") + \"in the list now!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":108,"author":{"gitId":"niekis"},"content":"    public void loadError(String error) {","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"niekis"},"content":"        displayln(error + \" i\u0027ll just start from scratch\");","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":113,"author":{"gitId":"niekis"},"content":"    public void showError(String error) {","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"niekis"},"content":"        displayln(\"hold up! \" + error);","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":116,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":117,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":118,"author":{"gitId":"niekis"},"content":"    public void emptyFindMsg() {","lastModifiedDate":"2023-02-03"},{"lineNumber":119,"author":{"gitId":"niekis"},"content":"        displayln(\"hmm i couldnt find any matching tasks...\");","lastModifiedDate":"2023-02-03"},{"lineNumber":120,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":121,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":122,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":123,"author":{"gitId":"niekis"},"content":"    public void findMsg(String list) {","lastModifiedDate":"2023-02-03"},{"lineNumber":124,"author":{"gitId":"niekis"},"content":"        displayln(\"here is everything that matched:\" + list);","lastModifiedDate":"2023-02-03"},{"lineNumber":125,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":126,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"niekis":126}},{"path":"src/test/java/fideline/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.task;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"    @Test","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"        assertEquals(\"[D][ ] test task (by: time)\",","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"niekis"},"content":"                new Deadline(\"test task\", \"time\").toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"    @Test","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"niekis"},"content":"    public void testDateConversion() {","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"niekis"},"content":"        assertEquals(\"[D][ ] test task (by: Feb 01 3000)\",","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"niekis"},"content":"                new Deadline(\"test task\", \"3000-02-01\").toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"niekis":22}},{"path":"src/test/java/fideline/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"package fideline.task;","lastModifiedDate":"2023-02-03"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"public class TodoTest {","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"    @Test","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"niekis"},"content":"        assertEquals(\"[T][ ] test task\", new Todo(\"test task\").toString());","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"niekis"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"niekis"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"niekis":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"niekis"},"content":"todo borrow book","lastModifiedDate":"2023-01-22"},{"lineNumber":2,"author":{"gitId":"niekis"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-22"},{"lineNumber":3,"author":{"gitId":"niekis"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-01-22"},{"lineNumber":4,"author":{"gitId":"niekis"},"content":"list","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"niekis"},"content":"mark 2","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"niekis"},"content":"mark 3","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"niekis"},"content":"unmark 2","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"niekis"},"content":"list","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"niekis"},"content":"bye","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"niekis":9}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"niekis"},"content":"if ! javac -cp ../src/main/java/fideline -Xlint:none -d ../bin ../src/main/java/fideline/*.java","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"niekis"},"content":"java -classpath ../bin Fideline \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"niekis":2,"-":36}}]
