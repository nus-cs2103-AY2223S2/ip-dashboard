[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"# duke.Duke project template","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"nus-jeff":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"nus-jeff":16}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"import duke.exceptions.LoadDukeException;","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import duke.functions.Parser;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import duke.functions.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"import duke.functions.Reply;","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":" * The main class that the Duke program will run on.","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":" * It includes the operation for starting up, receiving","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":" * and decoding user inputs and shut down.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"    private Storage storage;","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"    private ToDoList list;","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"    public Duke(String path) {","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"        this.storage \u003d new Storage(path);","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"    public String startUpAndGetMessage() {","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"            this.list \u003d this.storage.load();","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"            String reminderMessage \u003d Reply.getReminderMessage(this.list.remind());","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"            return \"Successfully loaded your tasks!\\n\\n\"","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"                    + reminderMessage","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"                    + Reply.getWelcomeMessage();","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"        } catch (LoadDukeException e) {","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"            this.list \u003d new ToDoList();","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"            return e.getMessage() + Reply.getWelcomeMessage();","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"    public String shutDown() {","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-01-27"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"            this.storage.save(this.list);","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"            return Reply.getExitMessage();","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"            return  Reply.getErrorMessage(e.getMessage());","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-27"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-18"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-18"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"        String response;","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"            String[] inputs \u003d Parser.handleInput(userInput, \" \", 2, 1);","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"            response \u003d Parser.handleCommand(inputs, this.list, this);","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-19"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"            response \u003d Reply.getErrorMessage(e.getMessage());","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"        return response;","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"-":1,"nus-jeff":53}},{"path":"src/main/java/duke/Gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.Gui;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"import java.util.Collections;","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"    private Label dialog;","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-02-07"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-02-07"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"    private void flip() {","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-02-07"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-02-07"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-02-07"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-02-07"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-02-07"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"        db.flip();","lastModifiedDate":"2023-02-07"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"        return db;","lastModifiedDate":"2023-02-07"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nus-jeff":61}},{"path":"src/main/java/duke/Gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.Gui;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"import duke.functions.Reply;","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"    private TextField userInput;","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"    private Button sendButton;","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"    private Duke duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"    public void initialize() {","lastModifiedDate":"2023-02-07"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-02-07"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-02-07"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"        duke \u003d d;","lastModifiedDate":"2023-02-07"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"        String welcomeMessage \u003d duke.startUpAndGetMessage();","lastModifiedDate":"2023-02-09"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"                DialogBox.getDukeDialog(welcomeMessage, dukeImage)","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"        );","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"    @FXML","lastModifiedDate":"2023-02-07"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-02-07"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-02-07"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-02-07"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-02-07"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-02-07"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"        );","lastModifiedDate":"2023-02-07"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"        userInput.clear();","lastModifiedDate":"2023-02-07"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nus-jeff":54}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"public class Launcher {","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nus-jeff":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke;","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import duke.Gui.MainWindow;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"public class Main extends Application {","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"    private Duke duke \u003d new Duke(\"./ip-data/ip-data.txt\");","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-02-07"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"            stage.show();","lastModifiedDate":"2023-02-07"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-02-07"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-02-07"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-07"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-07"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nus-jeff":32}},{"path":"src/main/java/duke/ToDoList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-02"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.ToDoTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"import duke.exceptions.IndexDukeException;","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":" * Represents a list of Task objects.","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":" * Includes different methods for user to keep track of his task progress.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"public class ToDoList {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"    private int toDoCount;","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"    public ToDoList() {","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"        //arr uses 1-indexing, 0 position placed with a dummy Task","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"        tasks.add(new ToDoTask(\"0index\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"        this.toDoCount \u003d 0;","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"    public int getToDoCount() {","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"        return this.toDoCount;","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"     * Returns the Task object stored at the specified position on the ToDoList.","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"     * @param index The position of the desired Task Object on the ToDoList.","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"     * @return The Task Object located on the given position.","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"     * @throws IndexDukeException If the index is out of range (index \u003c 1 || index \u003e\u003d this.toDoCount).","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"    public Task getTask(int index) throws IndexDukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"        if (index \u003c 1 || index \u003e toDoCount) {","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"            throw new IndexDukeException();","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-02-02"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"     * Adds the given Task object to the back of the ToDoList","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"     * @param task The Task object to be added into the ToDoList.","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-01-19"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"        ++this.toDoCount;","lastModifiedDate":"2023-01-19"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"        tasks.add(task);","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"     * Removes and return the Task object at the specified position on the ToDoList.","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"     * @param index The position of the Task Object to be removed on the ToDoList.","lastModifiedDate":"2023-02-02"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"     * @return The Task object removed from the ToDoList.","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"     * @throws IndexDukeException If the index is out of range (index \u003c 1 || index \u003e\u003d this.toDoCount).","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"    public Task delete(int index) throws IndexDukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"        if (index \u003c 1 || index \u003e toDoCount) {","lastModifiedDate":"2023-02-02"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"            throw new IndexDukeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":62,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":63,"author":{"gitId":"nus-jeff"},"content":"        Task rm \u003d tasks.get(index);","lastModifiedDate":"2023-02-02"},{"lineNumber":64,"author":{"gitId":"nus-jeff"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-02-02"},{"lineNumber":65,"author":{"gitId":"nus-jeff"},"content":"        --this.toDoCount;","lastModifiedDate":"2023-01-19"},{"lineNumber":66,"author":{"gitId":"nus-jeff"},"content":"        return rm;","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":68,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":69,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":70,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"nus-jeff"},"content":"     * Unmarks the Task Object at the specified position on the ToDoList.","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"nus-jeff"},"content":"     * @param index The position of the Task Object to be unmarked on the ToDoList.","lastModifiedDate":"2023-02-02"},{"lineNumber":74,"author":{"gitId":"nus-jeff"},"content":"     * @throws IndexDukeException If the index is out of range (index \u003c 1 || index \u003e\u003d this.toDoCount).","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"nus-jeff"},"content":"    public void unmarkTask(int index) throws IndexDukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"nus-jeff"},"content":"        if (index \u003c 1 || index \u003e toDoCount) {","lastModifiedDate":"2023-02-02"},{"lineNumber":78,"author":{"gitId":"nus-jeff"},"content":"            throw new IndexDukeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":79,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":80,"author":{"gitId":"nus-jeff"},"content":"        tasks.get(index).markNotDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"nus-jeff"},"content":"     * Marks the Task Object at the specified position on the ToDoList.","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"nus-jeff"},"content":"     * @param index The position of the Task Object to be unmarked on the ToDoList.","lastModifiedDate":"2023-02-02"},{"lineNumber":87,"author":{"gitId":"nus-jeff"},"content":"     * @throws IndexDukeException If the index is out of range (index \u003c 1 || index \u003e\u003d this.toDoCount).","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"nus-jeff"},"content":"    public void markTask(int index) throws IndexDukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"nus-jeff"},"content":"        if (index \u003c 1 || index \u003e toDoCount) {","lastModifiedDate":"2023-02-02"},{"lineNumber":91,"author":{"gitId":"nus-jeff"},"content":"            throw new IndexDukeException();","lastModifiedDate":"2023-01-27"},{"lineNumber":92,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-22"},{"lineNumber":93,"author":{"gitId":"nus-jeff"},"content":"        tasks.get(index).markDone();","lastModifiedDate":"2023-02-02"},{"lineNumber":94,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":95,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":96,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":97,"author":{"gitId":"nus-jeff"},"content":"     * Reads a String to search for Task objects in the ToDoList object","lastModifiedDate":"2023-02-09"},{"lineNumber":98,"author":{"gitId":"nus-jeff"},"content":"     * with the given String in its title, returns a String containing","lastModifiedDate":"2023-02-09"},{"lineNumber":99,"author":{"gitId":"nus-jeff"},"content":"     * the list of Task objects that has its title contain the given input.","lastModifiedDate":"2023-02-09"},{"lineNumber":100,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":101,"author":{"gitId":"nus-jeff"},"content":"     * @param keyword The keyword used to search for the Task Objects.","lastModifiedDate":"2023-02-09"},{"lineNumber":102,"author":{"gitId":"nus-jeff"},"content":"     * @return A String containing the lists of Task objects containing the","lastModifiedDate":"2023-02-09"},{"lineNumber":103,"author":{"gitId":"nus-jeff"},"content":"     *         keyword in its title.","lastModifiedDate":"2023-02-09"},{"lineNumber":104,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":105,"author":{"gitId":"nus-jeff"},"content":"    public String find(String keyword) {","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"nus-jeff"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":107,"author":{"gitId":"nus-jeff"},"content":"        for (int i \u003d 1; i \u003c\u003d this.toDoCount; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"nus-jeff"},"content":"            if (tasks.get(i).contains(keyword)) {","lastModifiedDate":"2023-02-02"},{"lineNumber":109,"author":{"gitId":"nus-jeff"},"content":"                output \u003d output + i + \".\" + tasks.get(i) + \"\\n\";","lastModifiedDate":"2023-02-02"},{"lineNumber":110,"author":{"gitId":"nus-jeff"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":111,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":112,"author":{"gitId":"nus-jeff"},"content":"        return output;","lastModifiedDate":"2023-02-01"},{"lineNumber":113,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":114,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":115,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":116,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String containing the list of DeadlineTask objects if","lastModifiedDate":"2023-02-09"},{"lineNumber":117,"author":{"gitId":"nus-jeff"},"content":"     * its due date is within the specified number of days from today","lastModifiedDate":"2023-02-09"},{"lineNumber":118,"author":{"gitId":"nus-jeff"},"content":"     * and EventTask objects if its start date or end date is within","lastModifiedDate":"2023-02-09"},{"lineNumber":119,"author":{"gitId":"nus-jeff"},"content":"     * the specified number of days from today.","lastModifiedDate":"2023-02-09"},{"lineNumber":120,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":121,"author":{"gitId":"nus-jeff"},"content":"     * @return A String containing the lists of Task objects that has","lastModifiedDate":"2023-02-09"},{"lineNumber":122,"author":{"gitId":"nus-jeff"},"content":"     *         either its due date or its start/end date within the","lastModifiedDate":"2023-02-09"},{"lineNumber":123,"author":{"gitId":"nus-jeff"},"content":"     *         specified number of days from today.","lastModifiedDate":"2023-02-09"},{"lineNumber":124,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":125,"author":{"gitId":"nus-jeff"},"content":"    public String remind() {","lastModifiedDate":"2023-02-09"},{"lineNumber":126,"author":{"gitId":"nus-jeff"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-02-09"},{"lineNumber":127,"author":{"gitId":"nus-jeff"},"content":"        for (int i \u003d 1; i \u003c\u003d this.toDoCount; i++) {","lastModifiedDate":"2023-02-09"},{"lineNumber":128,"author":{"gitId":"nus-jeff"},"content":"            String reminder \u003d tasks.get(i).remind(10);","lastModifiedDate":"2023-02-09"},{"lineNumber":129,"author":{"gitId":"nus-jeff"},"content":"            if (!reminder.equals(\"\")) {","lastModifiedDate":"2023-02-09"},{"lineNumber":130,"author":{"gitId":"nus-jeff"},"content":"                output \u003d output + i + \".\" + reminder + \"\\n\";","lastModifiedDate":"2023-02-09"},{"lineNumber":131,"author":{"gitId":"nus-jeff"},"content":"            }","lastModifiedDate":"2023-02-09"},{"lineNumber":132,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":133,"author":{"gitId":"nus-jeff"},"content":"        return output;","lastModifiedDate":"2023-02-09"},{"lineNumber":134,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":135,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":136,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":137,"author":{"gitId":"nus-jeff"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":138,"author":{"gitId":"nus-jeff"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"nus-jeff"},"content":"        for (int i \u003d 1; i \u003c\u003d this.toDoCount; i++) {","lastModifiedDate":"2023-01-19"},{"lineNumber":140,"author":{"gitId":"nus-jeff"},"content":"            output \u003d output + i + \".\" + tasks.get(i) + \"\\n\";","lastModifiedDate":"2023-02-02"},{"lineNumber":141,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":142,"author":{"gitId":"nus-jeff"},"content":"        return output;","lastModifiedDate":"2023-01-19"},{"lineNumber":143,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":144,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"nus-jeff":144}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":" * A class that represents errors created from Duke-related operations.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"        super(msg);","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-22"}],"authorContributionMap":{"nus-jeff":10}},{"path":"src/main/java/duke/exceptions/IndexDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":" * A class that represents errors created from trying to access an invalid number on a","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":" * ToDoList object while Duke is running.","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"public class IndexDukeException extends DukeException {","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"    public IndexDukeException() {","lastModifiedDate":"2023-01-27"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"        super(\"It seems like the number given isn\u0027t on the list!\");","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"nus-jeff":11}},{"path":"src/main/java/duke/exceptions/InputDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":" * A class that represents errors created from input-related operations while Duke is running.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"public class InputDukeException extends DukeException {","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"    public InputDukeException() {","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"        super(\"Not enough details are given!\\nThe Duke expects more information!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nus-jeff":10}},{"path":"src/main/java/duke/exceptions/LoadDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-09"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-09"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":" * A class that represents errors created from loading operations while Duke is starting up.","lastModifiedDate":"2023-02-09"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"public class LoadDukeException extends DukeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"    public LoadDukeException() {","lastModifiedDate":"2023-02-09"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"        super(\"Failed to load your tasks!\");","lastModifiedDate":"2023-02-09"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-09"}],"authorContributionMap":{"nus-jeff":10}},{"path":"src/main/java/duke/exceptions/SaveDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.exceptions;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":" * A class that represents errors created from saving operations while Duke is shutting down.","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"public class SaveDukeException extends DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"    public SaveDukeException() {","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"        super(\"Failed to save your tasks!\\nYou may still exit the program but no data will be saved!\");","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"nus-jeff":10}},{"path":"src/main/java/duke/functions/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.functions;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"import duke.ToDoList;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"import duke.exceptions.InputDukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.DeadlineTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.EventTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.ToDoTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":" * A class that contains different static methods to deal with user\u0027s input.","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"public class Parser {","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"    private Parser() {","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"     * Returns an array of String after splitting the given String input by the given regex.","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"     * The maximum number of Strings to be split must be indicated by the user and should the","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"     * number of Strings obtained after splitting be less than the indicated minimum number","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"     * of Strings, the method will throw a DukeException instead.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"     * @param input The String to be split.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"     * @param regex The delimiting regular expression.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"     * @param limit The maximum number of Strings obtained from splitting.","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"     * @param minSize The minimum number of Strings to be obtained from splitting.","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"     * @return The array of String after splitting.","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"     * @throws DukeException  If the number of String obtained after","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"     *                        splitting is less than minimum number of String.","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"    public static String[] handleInput(","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"            String input, String regex, int limit, int minSize) throws DukeException {","lastModifiedDate":"2023-02-02"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"        String[] subInputs \u003d input.split(regex, limit);","lastModifiedDate":"2023-02-02"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"        if (subInputs.length \u003c minSize) {","lastModifiedDate":"2023-02-02"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"            throw new InputDukeException();","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"        return subInputs;","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"     * The method reads an array of String input and uses the first value of the array","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"     * to determine which operations shall be performed on the ToDoList object.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String that is the output message of the command performed.","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"     * @param inputs The Array of String containing the operation to be performed","lastModifiedDate":"2023-02-02"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"     *              and its additional parameters. The first value of the array","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"     *              should contain the type of operation to be carried out.","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"     * @param list The ToDoList object that the operations should be performed on.","lastModifiedDate":"2023-02-02"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is the output message of the command performed.","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"     * @throws Exception If the given array of String contains insufficient or wrong","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"     *                   parameters or values not part of the possible commands.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"    public static String handleCommand(String[] inputs, ToDoList list, Duke duke) throws Exception {","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"        String command \u003d inputs[0];","lastModifiedDate":"2023-02-02"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"        int index;","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"        String reply;","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"nus-jeff"},"content":"        switch (command) {","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"nus-jeff"},"content":"        case \"bye\":","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"nus-jeff"},"content":"            reply \u003d duke.shutDown();","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"nus-jeff"},"content":"            break;","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"nus-jeff"},"content":"        case \"list\":","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"nus-jeff"},"content":"            reply \u003d Reply.getListMessage(list.toString());","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"nus-jeff"},"content":"            break;","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"nus-jeff"},"content":"        case \"mark\":","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"nus-jeff"},"content":"            index \u003d Integer.parseInt(inputs[1]);","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"nus-jeff"},"content":"            list.markTask(index);","lastModifiedDate":"2023-02-02"},{"lineNumber":72,"author":{"gitId":"nus-jeff"},"content":"            reply \u003d Reply.getTaskMarkMessage(list, index, command);","lastModifiedDate":"2023-02-08"},{"lineNumber":73,"author":{"gitId":"nus-jeff"},"content":"            break;","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"nus-jeff"},"content":"        case \"unmark\":","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"nus-jeff"},"content":"            index \u003d Integer.parseInt(inputs[1]);","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"nus-jeff"},"content":"            list.unmarkTask(index);","lastModifiedDate":"2023-02-02"},{"lineNumber":77,"author":{"gitId":"nus-jeff"},"content":"            reply \u003d Reply.getTaskMarkMessage(list, index, command);","lastModifiedDate":"2023-02-08"},{"lineNumber":78,"author":{"gitId":"nus-jeff"},"content":"            break;","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"nus-jeff"},"content":"        case \"delete\":","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"nus-jeff"},"content":"            index \u003d Integer.parseInt(inputs[1]);","lastModifiedDate":"2023-02-02"},{"lineNumber":81,"author":{"gitId":"nus-jeff"},"content":"            Task removed \u003d list.delete(index);","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"nus-jeff"},"content":"            reply \u003d Reply.getAddDeleteMessage(list, removed, command);","lastModifiedDate":"2023-02-08"},{"lineNumber":83,"author":{"gitId":"nus-jeff"},"content":"            break;","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"nus-jeff"},"content":"        case \"todo\":","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"nus-jeff"},"content":"        case \"event\":","lastModifiedDate":"2023-01-31"},{"lineNumber":86,"author":{"gitId":"nus-jeff"},"content":"        case \"deadline\":","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"nus-jeff"},"content":"            reply \u003d Parser.handleTaskCommand(inputs, list);","lastModifiedDate":"2023-02-08"},{"lineNumber":88,"author":{"gitId":"nus-jeff"},"content":"            break;","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"nus-jeff"},"content":"        case \"find\":","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"nus-jeff"},"content":"            reply \u003d Reply.getFindResultMessage(list.find(inputs[1]), inputs[1]);","lastModifiedDate":"2023-02-08"},{"lineNumber":91,"author":{"gitId":"nus-jeff"},"content":"            break;","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"nus-jeff"},"content":"        default:","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"nus-jeff"},"content":"            throw new DukeException(\"The Duke does not understand your words!\");","lastModifiedDate":"2023-02-01"},{"lineNumber":94,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"nus-jeff"},"content":"        return reply;","lastModifiedDate":"2023-02-08"},{"lineNumber":96,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":99,"author":{"gitId":"nus-jeff"},"content":"     * The method reads an array of String input and uses the first value of the array","lastModifiedDate":"2023-02-01"},{"lineNumber":100,"author":{"gitId":"nus-jeff"},"content":"     * to determine which type of Task object should be added to the given ToDoList object.","lastModifiedDate":"2023-02-01"},{"lineNumber":101,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":102,"author":{"gitId":"nus-jeff"},"content":"     * @param inputs The Array of String containing the operation to be performed","lastModifiedDate":"2023-02-02"},{"lineNumber":103,"author":{"gitId":"nus-jeff"},"content":"     *              and its additional parameters. The first value of the array should","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"nus-jeff"},"content":"     *              contain the type of Task object to be added to the ToDoList object.","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"nus-jeff"},"content":"     * @param list The ToDoList object that the newly created Task object should be added to.","lastModifiedDate":"2023-02-02"},{"lineNumber":106,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that specifies the operation carried out on which Task object.","lastModifiedDate":"2023-02-08"},{"lineNumber":107,"author":{"gitId":"nus-jeff"},"content":"     * @throws DukeException If the given array of String contains insufficient or wrong","lastModifiedDate":"2023-02-01"},{"lineNumber":108,"author":{"gitId":"nus-jeff"},"content":"     *                       parameters or values not part of the possible commands.","lastModifiedDate":"2023-02-01"},{"lineNumber":109,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"nus-jeff"},"content":"    public static String handleTaskCommand(String[] inputs, ToDoList list) throws DukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":111,"author":{"gitId":"nus-jeff"},"content":"        String command \u003d inputs[0];","lastModifiedDate":"2023-02-02"},{"lineNumber":112,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"nus-jeff"},"content":"        if (inputs.length \u003c 2) {","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"nus-jeff"},"content":"            throw new InputDukeException();","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"nus-jeff"},"content":"        if (command.equals(\"todo\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"nus-jeff"},"content":"            ToDoTask toAdd \u003d new ToDoTask(inputs[1]);","lastModifiedDate":"2023-02-02"},{"lineNumber":118,"author":{"gitId":"nus-jeff"},"content":"            list.add(toAdd);","lastModifiedDate":"2023-02-02"},{"lineNumber":119,"author":{"gitId":"nus-jeff"},"content":"            return Reply.getAddDeleteMessage(list, toAdd, \"add\");","lastModifiedDate":"2023-02-08"},{"lineNumber":120,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":121,"author":{"gitId":"nus-jeff"},"content":"        if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":122,"author":{"gitId":"nus-jeff"},"content":"            String[] subInputs \u003d Parser.handleInput(inputs[1], \" /by \", 2, 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":123,"author":{"gitId":"nus-jeff"},"content":"            DeadlineTask toAdd \u003d new DeadlineTask(subInputs[0], subInputs[1]);","lastModifiedDate":"2023-02-02"},{"lineNumber":124,"author":{"gitId":"nus-jeff"},"content":"            list.add(toAdd);","lastModifiedDate":"2023-02-02"},{"lineNumber":125,"author":{"gitId":"nus-jeff"},"content":"            return Reply.getAddDeleteMessage(list, toAdd, \"add\");","lastModifiedDate":"2023-02-08"},{"lineNumber":126,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":127,"author":{"gitId":"nus-jeff"},"content":"        if (command.equals(\"event\")) {","lastModifiedDate":"2023-01-31"},{"lineNumber":128,"author":{"gitId":"nus-jeff"},"content":"            String[] subInputs \u003d Parser.handleInput(inputs[1], \" /from \", 2, 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":129,"author":{"gitId":"nus-jeff"},"content":"            String[] subInputDurations \u003d Parser.handleInput(subInputs[1], \" /to \", 2, 2);","lastModifiedDate":"2023-02-02"},{"lineNumber":130,"author":{"gitId":"nus-jeff"},"content":"            EventTask toAdd \u003d new EventTask(subInputs[0],","lastModifiedDate":"2023-02-02"},{"lineNumber":131,"author":{"gitId":"nus-jeff"},"content":"                    subInputDurations[0],","lastModifiedDate":"2023-02-02"},{"lineNumber":132,"author":{"gitId":"nus-jeff"},"content":"                    subInputDurations[1]);","lastModifiedDate":"2023-02-02"},{"lineNumber":133,"author":{"gitId":"nus-jeff"},"content":"            list.add(toAdd);","lastModifiedDate":"2023-02-02"},{"lineNumber":134,"author":{"gitId":"nus-jeff"},"content":"            return Reply.getAddDeleteMessage(list, toAdd, \"add\");","lastModifiedDate":"2023-02-08"},{"lineNumber":135,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"nus-jeff"},"content":"        throw new InputDukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":137,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"nus-jeff":138}},{"path":"src/main/java/duke/functions/Reply.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.functions;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import duke.ToDoList;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import duke.exceptions.IndexDukeException;","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":" * A class that contains different static methods to return messages for user interfaces.","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"public class Reply {","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"    private Reply() {","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"     * Returns the welcome message, the very first message that the user sees when Duke runs.","lastModifiedDate":"2023-02-08"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is the welcome message.","lastModifiedDate":"2023-02-08"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"    public static String getWelcomeMessage() {","lastModifiedDate":"2023-02-08"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"        return \"What can the Duke help you with today?\";","lastModifiedDate":"2023-02-09"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"     * Returns the exit message, the message that the user sees after saying bye to Duke.","lastModifiedDate":"2023-02-08"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is the exit message.","lastModifiedDate":"2023-02-08"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"    public static String getExitMessage() {","lastModifiedDate":"2023-02-08"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"        return \"The Duke has saved your To Do List!\\n\" +","lastModifiedDate":"2023-02-08"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"                \"You may safely exit now, feel free to call the Duke again whenever you need.\";","lastModifiedDate":"2023-02-08"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"     * Returns a message indicating a Task object has been either added into a ToDoList object or","lastModifiedDate":"2023-02-08"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"     * deleted from a ToDoList object.","lastModifiedDate":"2023-02-08"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"     * @param list The ToDoList object that the specified operation has occurred on.","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"     * @param task The Task object that has been added or deleted.","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"     * @param command The type of operation that was applied on the ToDoList object.","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that specifies the operation carried out on which Task object.","lastModifiedDate":"2023-02-08"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"    public static String getAddDeleteMessage(ToDoList list, Task task, String command) {","lastModifiedDate":"2023-02-08"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"        return \"The Duke has \" + command + \" the following task:\\n\"","lastModifiedDate":"2023-02-08"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"                + \" - \" + task + \"\\n\"","lastModifiedDate":"2023-02-08"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"                + \"You now have \" + list.getToDoCount() + \" task!\\n\";","lastModifiedDate":"2023-02-08"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"     * Returns a message indicating a Task object in a ToDoList has been either marked or unmarked.","lastModifiedDate":"2023-02-08"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"     * @param list The ToDoList object that the specified operation has occurred on.","lastModifiedDate":"2023-02-08"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"     * @param index The position of the Task object on the ToDoList object that","lastModifiedDate":"2023-02-08"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"     *              the specified operation is applied on.","lastModifiedDate":"2023-02-08"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"     * @param command The type of operation that was applied on the Task object.","lastModifiedDate":"2023-02-08"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that specifies the operation carried out on which Task object.","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"     * @throws IndexDukeException If the index is out of range (index \u003c 1 || index \u003e\u003d list.getToDoCount()).","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"    public static String getTaskMarkMessage(","lastModifiedDate":"2023-02-08"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"            ToDoList list, int index, String command) throws IndexDukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":62,"author":{"gitId":"nus-jeff"},"content":"        return \"The Duke has \" + command + \" the following task:\\n\"","lastModifiedDate":"2023-02-08"},{"lineNumber":63,"author":{"gitId":"nus-jeff"},"content":"                + \" - \" + list.getTask(index) + \"\\n\";","lastModifiedDate":"2023-02-08"},{"lineNumber":64,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":66,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":67,"author":{"gitId":"nus-jeff"},"content":"     * Returns a message that shows the list of Task objects and their state","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"nus-jeff"},"content":"     * (whether marked or unmarked) in the given ToDoList object.","lastModifiedDate":"2023-02-08"},{"lineNumber":69,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":70,"author":{"gitId":"nus-jeff"},"content":"     * @param message The ToDoList object that the list is to be printed from.","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that shows the list of Task objects and their states.","lastModifiedDate":"2023-02-08"},{"lineNumber":72,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":73,"author":{"gitId":"nus-jeff"},"content":"    public static String getListMessage(String message) {","lastModifiedDate":"2023-02-08"},{"lineNumber":74,"author":{"gitId":"nus-jeff"},"content":"        return \"TO DO LIST:\\n\" + message;","lastModifiedDate":"2023-02-08"},{"lineNumber":75,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":76,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":77,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":78,"author":{"gitId":"nus-jeff"},"content":"     * Returns a message that shows the list of Task objects that is about to happen.","lastModifiedDate":"2023-02-09"},{"lineNumber":79,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":80,"author":{"gitId":"nus-jeff"},"content":"     * @param message The list of Task objects to be printed with the reminder message.","lastModifiedDate":"2023-02-09"},{"lineNumber":81,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is a reminder that shows the list of Task objects that is","lastModifiedDate":"2023-02-09"},{"lineNumber":82,"author":{"gitId":"nus-jeff"},"content":"     *         about to happen.","lastModifiedDate":"2023-02-09"},{"lineNumber":83,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":84,"author":{"gitId":"nus-jeff"},"content":"    public static String getReminderMessage(String message) {","lastModifiedDate":"2023-02-09"},{"lineNumber":85,"author":{"gitId":"nus-jeff"},"content":"        return \"The following tasks are about to happen!!!\\n\\n\" + message + \"\\n\";","lastModifiedDate":"2023-02-09"},{"lineNumber":86,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":87,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":89,"author":{"gitId":"nus-jeff"},"content":"     * Returns a message that shows the list of Task objects found to match the given keyword.","lastModifiedDate":"2023-02-08"},{"lineNumber":90,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":91,"author":{"gitId":"nus-jeff"},"content":"     * @param message The list of Task objects found to match the given keyword.","lastModifiedDate":"2023-02-08"},{"lineNumber":92,"author":{"gitId":"nus-jeff"},"content":"     * @param keyword The String that is used to find the list of Task objects.","lastModifiedDate":"2023-02-08"},{"lineNumber":93,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that shows the list of Task objects found to match the given keyword.","lastModifiedDate":"2023-02-08"},{"lineNumber":94,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":95,"author":{"gitId":"nus-jeff"},"content":"    public static String getFindResultMessage(String message, String keyword) {","lastModifiedDate":"2023-02-08"},{"lineNumber":96,"author":{"gitId":"nus-jeff"},"content":"        return \"The keyword given is:\\n\\n\\\"\" + keyword","lastModifiedDate":"2023-02-08"},{"lineNumber":97,"author":{"gitId":"nus-jeff"},"content":"                + \"\\\"\\n\\nThe Duke has found the following tasks:\\n\" + message;","lastModifiedDate":"2023-02-08"},{"lineNumber":98,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":99,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":100,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-08"},{"lineNumber":101,"author":{"gitId":"nus-jeff"},"content":"     * Returns a message that informs user it is an error.","lastModifiedDate":"2023-02-08"},{"lineNumber":102,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-08"},{"lineNumber":103,"author":{"gitId":"nus-jeff"},"content":"     * @param message The error message.","lastModifiedDate":"2023-02-08"},{"lineNumber":104,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that informs user it is an error and its specific error message.","lastModifiedDate":"2023-02-08"},{"lineNumber":105,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-08"},{"lineNumber":106,"author":{"gitId":"nus-jeff"},"content":"    public static String getErrorMessage(String message) {","lastModifiedDate":"2023-02-08"},{"lineNumber":107,"author":{"gitId":"nus-jeff"},"content":"        return \"The Duke has encountered an error!\\n\" + message;","lastModifiedDate":"2023-02-08"},{"lineNumber":108,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":109,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"nus-jeff":109}},{"path":"src/main/java/duke/functions/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.functions;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import duke.ToDoList;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import duke.exceptions.LoadDukeException;","lastModifiedDate":"2023-02-09"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import duke.exceptions.SaveDukeException;","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.DeadlineTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.EventTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.ToDoTask;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"import java.io.File;","lastModifiedDate":"2023-01-30"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"import java.io.IOException;","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-01-30"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-01-30"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-02"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-30"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-01-30"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":" * A class that can hold a specified directory path with respect","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":" * to the home directory of the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":" * It can then save or load the state of the ToDoList to and from","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":" * the specified directory path respectively.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"public class Storage {","lastModifiedDate":"2023-01-29"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"    private Path path;","lastModifiedDate":"2023-02-02"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"    public Storage(String pathStr) {","lastModifiedDate":"2023-01-29"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"        this.path \u003d Paths.get(home, pathStr);","lastModifiedDate":"2023-01-30"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"     * Creates the given directory if it does not exist.","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"     * @param dir The directory path to be created if it does not exist.","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"     * @throws IOException If the given directory path does not exist","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"     *                     even after creating it in this method.","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"    public void createDirectory(Path dir) throws IOException {","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"        if (!Files.exists(dir)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"            createDirectory(dir.getParent());","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"        Files.createDirectories(dir);","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"     * Returns an instance of a ToDoList object that contains the specific tasks","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"     * in their correct state based on the given path stored in the Storage object.","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"     * @throws LoadDukeException If an error occurred while loading the contents of","lastModifiedDate":"2023-02-09"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"     *                           the file from the path stored in this Storage object.","lastModifiedDate":"2023-02-09"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"    public ToDoList load() throws LoadDukeException {","lastModifiedDate":"2023-02-09"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"            if (!Files.exists(path)) {","lastModifiedDate":"2023-01-30"},{"lineNumber":62,"author":{"gitId":"nus-jeff"},"content":"                createDirectory(path.getParent());","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"nus-jeff"},"content":"                Files.createFile(path);","lastModifiedDate":"2023-01-30"},{"lineNumber":64,"author":{"gitId":"nus-jeff"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":65,"author":{"gitId":"nus-jeff"},"content":"            File f \u003d new File(path.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":66,"author":{"gitId":"nus-jeff"},"content":"            ToDoList list \u003d new ToDoList();","lastModifiedDate":"2023-02-02"},{"lineNumber":67,"author":{"gitId":"nus-jeff"},"content":"            Scanner sc \u003d new Scanner(f);","lastModifiedDate":"2023-01-30"},{"lineNumber":68,"author":{"gitId":"nus-jeff"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2023-01-30"},{"lineNumber":69,"author":{"gitId":"nus-jeff"},"content":"                String[] inputs \u003d sc.nextLine().split(Pattern.quote(\"/+/\"));","lastModifiedDate":"2023-02-02"},{"lineNumber":70,"author":{"gitId":"nus-jeff"},"content":"                String command \u003d inputs[0];","lastModifiedDate":"2023-02-02"},{"lineNumber":71,"author":{"gitId":"nus-jeff"},"content":"                Task task;","lastModifiedDate":"2023-01-30"},{"lineNumber":72,"author":{"gitId":"nus-jeff"},"content":"                switch (command) {","lastModifiedDate":"2023-01-30"},{"lineNumber":73,"author":{"gitId":"nus-jeff"},"content":"                case \"TODO\":","lastModifiedDate":"2023-01-30"},{"lineNumber":74,"author":{"gitId":"nus-jeff"},"content":"                    task \u003d new ToDoTask(inputs[2]);","lastModifiedDate":"2023-02-02"},{"lineNumber":75,"author":{"gitId":"nus-jeff"},"content":"                    if (inputs[1].equals(\"DONE\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":76,"author":{"gitId":"nus-jeff"},"content":"                        task.markDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":77,"author":{"gitId":"nus-jeff"},"content":"                    }","lastModifiedDate":"2023-01-30"},{"lineNumber":78,"author":{"gitId":"nus-jeff"},"content":"                    list.add(task);","lastModifiedDate":"2023-02-02"},{"lineNumber":79,"author":{"gitId":"nus-jeff"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":80,"author":{"gitId":"nus-jeff"},"content":"                case \"DEADLINE\":","lastModifiedDate":"2023-01-30"},{"lineNumber":81,"author":{"gitId":"nus-jeff"},"content":"                    task \u003d new DeadlineTask(inputs[2], inputs[3]);","lastModifiedDate":"2023-02-02"},{"lineNumber":82,"author":{"gitId":"nus-jeff"},"content":"                    if (inputs[1].equals(\"DONE\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":83,"author":{"gitId":"nus-jeff"},"content":"                        task.markDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":84,"author":{"gitId":"nus-jeff"},"content":"                    }","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"nus-jeff"},"content":"                    list.add(task);","lastModifiedDate":"2023-02-02"},{"lineNumber":86,"author":{"gitId":"nus-jeff"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":87,"author":{"gitId":"nus-jeff"},"content":"                case \"EVENT\":","lastModifiedDate":"2023-01-30"},{"lineNumber":88,"author":{"gitId":"nus-jeff"},"content":"                    task \u003d new EventTask(inputs[2], inputs[3], inputs[4]);","lastModifiedDate":"2023-02-02"},{"lineNumber":89,"author":{"gitId":"nus-jeff"},"content":"                    if (inputs[1].equals(\"DONE\")) {","lastModifiedDate":"2023-02-02"},{"lineNumber":90,"author":{"gitId":"nus-jeff"},"content":"                        task.markDone();","lastModifiedDate":"2023-01-30"},{"lineNumber":91,"author":{"gitId":"nus-jeff"},"content":"                    }","lastModifiedDate":"2023-01-30"},{"lineNumber":92,"author":{"gitId":"nus-jeff"},"content":"                    list.add(task);","lastModifiedDate":"2023-02-02"},{"lineNumber":93,"author":{"gitId":"nus-jeff"},"content":"                    break;","lastModifiedDate":"2023-01-30"},{"lineNumber":94,"author":{"gitId":"nus-jeff"},"content":"                }","lastModifiedDate":"2023-01-30"},{"lineNumber":95,"author":{"gitId":"nus-jeff"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":96,"author":{"gitId":"nus-jeff"},"content":"            return list;","lastModifiedDate":"2023-02-02"},{"lineNumber":97,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":98,"author":{"gitId":"nus-jeff"},"content":"            throw new LoadDukeException();","lastModifiedDate":"2023-02-09"},{"lineNumber":99,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":100,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":101,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-30"},{"lineNumber":102,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":103,"author":{"gitId":"nus-jeff"},"content":"     * Saves the specific states of the different Task objects in the give ToDoList","lastModifiedDate":"2023-02-01"},{"lineNumber":104,"author":{"gitId":"nus-jeff"},"content":"     * to the file pointed to by the path stored in the Storage object.","lastModifiedDate":"2023-02-01"},{"lineNumber":105,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":106,"author":{"gitId":"nus-jeff"},"content":"     * @param list The ToDoList that is to have its state saved.","lastModifiedDate":"2023-02-02"},{"lineNumber":107,"author":{"gitId":"nus-jeff"},"content":"     * @throws SaveDukeException If an error occurred while saving the contents of","lastModifiedDate":"2023-02-08"},{"lineNumber":108,"author":{"gitId":"nus-jeff"},"content":"     *                           the ToDoList object to the file.","lastModifiedDate":"2023-02-08"},{"lineNumber":109,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":110,"author":{"gitId":"nus-jeff"},"content":"    public void save(ToDoList list) throws SaveDukeException {","lastModifiedDate":"2023-02-08"},{"lineNumber":111,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-01-30"},{"lineNumber":112,"author":{"gitId":"nus-jeff"},"content":"            FileWriter fw \u003d new FileWriter(path.toString());","lastModifiedDate":"2023-01-30"},{"lineNumber":113,"author":{"gitId":"nus-jeff"},"content":"            int count \u003d list.getToDoCount();","lastModifiedDate":"2023-02-02"},{"lineNumber":114,"author":{"gitId":"nus-jeff"},"content":"            for (int i \u003d 1; i \u003c\u003d count; i++) {","lastModifiedDate":"2023-01-30"},{"lineNumber":115,"author":{"gitId":"nus-jeff"},"content":"                fw.write(list.getTask(i).save());","lastModifiedDate":"2023-02-02"},{"lineNumber":116,"author":{"gitId":"nus-jeff"},"content":"            }","lastModifiedDate":"2023-01-30"},{"lineNumber":117,"author":{"gitId":"nus-jeff"},"content":"            fw.close();","lastModifiedDate":"2023-01-30"},{"lineNumber":118,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-01-30"},{"lineNumber":119,"author":{"gitId":"nus-jeff"},"content":"            throw new SaveDukeException();","lastModifiedDate":"2023-02-08"},{"lineNumber":120,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-30"},{"lineNumber":121,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":122,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":123,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-29"}],"authorContributionMap":{"nus-jeff":123}},{"path":"src/main/java/duke/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":" * Represents a task that has a deadline.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"    private String by;","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"    private LocalDate byDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"    public DeadlineTask(String title, String by) {","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"        super(title);","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-09"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"        formatIfDeadlineDate(by);","lastModifiedDate":"2023-02-09"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"    private void formatIfDeadlineDate(String by) {","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\");","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd LLL uuuu\");","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"            LocalDate output \u003d LocalDate.parse(by, inputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"            this.byDate \u003d  output;","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"            this.by \u003d output.format(outputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"            this.byDate \u003d null;","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"            this.by \u003d by;","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String that contains information","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"     * on the DeadlineTask object that is used for loading","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"     * the task into the ToDoList on Duke startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is used for loading the task into Duke on startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"    public String save() {","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"        String status \u003d this.isDone ? \"DONE/+/\" : \"NOTDONE/+/\";","lastModifiedDate":"2023-01-29"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"        String byToSave \u003d this.by;","lastModifiedDate":"2023-02-09"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\");","lastModifiedDate":"2023-02-09"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"        if (this.byDate !\u003d null) {","lastModifiedDate":"2023-02-09"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"            byToSave \u003d this.byDate.format(outputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"        return \"DEADLINE/+/\" + status + this.title + \"/+/\" + byToSave + \"\\n\";","lastModifiedDate":"2023-02-09"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String indicating the number of days left to the by date","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"     * in this DeadlineTask should the number of days left from today to","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"     * the date be less than or equal to the input number of days, otherwise","lastModifiedDate":"2023-02-09"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"     * returns an empty String.","lastModifiedDate":"2023-02-09"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"     * @param dayRange The number of days from the by date to be compared to.","lastModifiedDate":"2023-02-09"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"     * @return A String with the number of days remaining to the by date if","lastModifiedDate":"2023-02-09"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"     *         today falls within the specified number of days in the input","lastModifiedDate":"2023-02-09"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"     *         from the date, otherwise an empty String.","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":63,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":64,"author":{"gitId":"nus-jeff"},"content":"    public String remind(int dayRange) {","lastModifiedDate":"2023-02-09"},{"lineNumber":65,"author":{"gitId":"nus-jeff"},"content":"        if (this.byDate \u003d\u003d null) {","lastModifiedDate":"2023-02-09"},{"lineNumber":66,"author":{"gitId":"nus-jeff"},"content":"            return \"\";","lastModifiedDate":"2023-02-09"},{"lineNumber":67,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":68,"author":{"gitId":"nus-jeff"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2023-02-09"},{"lineNumber":69,"author":{"gitId":"nus-jeff"},"content":"        int dayLeft \u003d today.until(this.byDate).getDays();","lastModifiedDate":"2023-02-09"},{"lineNumber":70,"author":{"gitId":"nus-jeff"},"content":"        if (dayLeft \u003e\u003d 0","lastModifiedDate":"2023-02-09"},{"lineNumber":71,"author":{"gitId":"nus-jeff"},"content":"                \u0026\u0026 dayLeft \u003c\u003d dayRange","lastModifiedDate":"2023-02-09"},{"lineNumber":72,"author":{"gitId":"nus-jeff"},"content":"                \u0026\u0026 !this.isDone) {","lastModifiedDate":"2023-02-09"},{"lineNumber":73,"author":{"gitId":"nus-jeff"},"content":"            return \"[D] \" + title + \" (Due in \" + dayLeft + \" day!)\";","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":75,"author":{"gitId":"nus-jeff"},"content":"        return \"\";","lastModifiedDate":"2023-02-09"},{"lineNumber":76,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":77,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":78,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":79,"author":{"gitId":"nus-jeff"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":80,"author":{"gitId":"nus-jeff"},"content":"        String status \u003d this.isDone ? \"[x] \" : \"[ ] \";","lastModifiedDate":"2023-01-19"},{"lineNumber":81,"author":{"gitId":"nus-jeff"},"content":"        return \"[D]\" + status + this.title + \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-01-19"},{"lineNumber":82,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":83,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"nus-jeff":83}},{"path":"src/main/java/duke/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-29"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-01-29"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":" * Represents a task that is an event.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":" * An event will have a start date and end date.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"    private String from;","lastModifiedDate":"2023-01-29"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"    private String to;","lastModifiedDate":"2023-01-29"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"    private LocalDate fromDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"    private LocalDate toDate;","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"    public EventTask(String title, String from, String to) {","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"        super(title);","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-09"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"        formatIfEventDate(from, to);","lastModifiedDate":"2023-02-09"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"    private void formatIfEventDate(String from, String to) {","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\");","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd LLL uuuu\");","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"            LocalDate outputFrom \u003d LocalDate.parse(from, inputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"            LocalDate outputTo \u003d LocalDate.parse(to, inputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"            this.fromDate \u003d  outputFrom;","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"            this.toDate \u003d outputTo;","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"            this.from \u003d outputFrom.format(outputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"            this.to \u003d outputTo.format(outputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-29"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"            this.fromDate \u003d null;","lastModifiedDate":"2023-02-09"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"            this.toDate \u003d null;","lastModifiedDate":"2023-02-09"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"            this.from \u003d from;","lastModifiedDate":"2023-02-09"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"            this.to \u003d to;","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-01-29"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String that contains information","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"     * on the EventTask object that is used for loading","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"     * the task into the ToDoList on Duke startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is used for loading the task into Duke on startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"    public String save() {","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"        String status \u003d this.isDone ? \"DONE/+/\" : \"NOTDONE/+/\";","lastModifiedDate":"2023-01-29"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"        String fromToSave \u003d this.from;","lastModifiedDate":"2023-02-09"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"        String toToSave \u003d this.to;","lastModifiedDate":"2023-02-09"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\");","lastModifiedDate":"2023-02-09"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"        if (this.fromDate !\u003d null) {","lastModifiedDate":"2023-02-09"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"            fromToSave \u003d this.fromDate.format(outputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"        if (this.toDate !\u003d null) {","lastModifiedDate":"2023-02-09"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"            toToSave \u003d this.toDate.format(outputFormat);","lastModifiedDate":"2023-02-09"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"nus-jeff"},"content":"        return \"EVENT/+/\" + status + this.title + \"/+/\" + fromToSave + \"/+/\" + toToSave +\"\\n\";","lastModifiedDate":"2023-02-09"},{"lineNumber":63,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":64,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":65,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":66,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String indicating the number of days left to the from date","lastModifiedDate":"2023-02-09"},{"lineNumber":67,"author":{"gitId":"nus-jeff"},"content":"     * or to date, whichever is earlier, in this EventTask should the number","lastModifiedDate":"2023-02-09"},{"lineNumber":68,"author":{"gitId":"nus-jeff"},"content":"     * of days left from today to the earlier date be less than or equal","lastModifiedDate":"2023-02-09"},{"lineNumber":69,"author":{"gitId":"nus-jeff"},"content":"     * to the input number of days, otherwise returns an empty String.","lastModifiedDate":"2023-02-09"},{"lineNumber":70,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":71,"author":{"gitId":"nus-jeff"},"content":"     * @param dayRange The number of days from the from date or to date, whichever","lastModifiedDate":"2023-02-09"},{"lineNumber":72,"author":{"gitId":"nus-jeff"},"content":"     *                 is earlier, to be compared to.","lastModifiedDate":"2023-02-09"},{"lineNumber":73,"author":{"gitId":"nus-jeff"},"content":"     * @return A String with the number of days remaining to the from date","lastModifiedDate":"2023-02-09"},{"lineNumber":74,"author":{"gitId":"nus-jeff"},"content":"     *         or to date, whichever is earlier, if today falls within the specified","lastModifiedDate":"2023-02-09"},{"lineNumber":75,"author":{"gitId":"nus-jeff"},"content":"     *         number of days in the input from the date, otherwise an empty String.","lastModifiedDate":"2023-02-09"},{"lineNumber":76,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":77,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":78,"author":{"gitId":"nus-jeff"},"content":"    public String remind(int dayRange) {","lastModifiedDate":"2023-02-09"},{"lineNumber":79,"author":{"gitId":"nus-jeff"},"content":"        if (this.fromDate \u003d\u003d null || this.toDate \u003d\u003d null) {","lastModifiedDate":"2023-02-09"},{"lineNumber":80,"author":{"gitId":"nus-jeff"},"content":"            return \"\";","lastModifiedDate":"2023-02-09"},{"lineNumber":81,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":82,"author":{"gitId":"nus-jeff"},"content":"        LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2023-02-09"},{"lineNumber":83,"author":{"gitId":"nus-jeff"},"content":"        int dayLeftFrom \u003d today.until(this.fromDate).getDays();","lastModifiedDate":"2023-02-09"},{"lineNumber":84,"author":{"gitId":"nus-jeff"},"content":"        int dayLeftTo \u003d today.until(this.toDate).getDays();","lastModifiedDate":"2023-02-09"},{"lineNumber":85,"author":{"gitId":"nus-jeff"},"content":"        if (dayLeftFrom \u003e\u003d 0","lastModifiedDate":"2023-02-09"},{"lineNumber":86,"author":{"gitId":"nus-jeff"},"content":"                \u0026\u0026 dayLeftFrom \u003c\u003d dayRange","lastModifiedDate":"2023-02-09"},{"lineNumber":87,"author":{"gitId":"nus-jeff"},"content":"                \u0026\u0026 !this.isDone) {","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"nus-jeff"},"content":"            return \"[E] \" + title + \" (Starting in \" + dayLeftFrom + \" day!)\";","lastModifiedDate":"2023-02-09"},{"lineNumber":89,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":90,"author":{"gitId":"nus-jeff"},"content":"        if (dayLeftFrom \u003c 0","lastModifiedDate":"2023-02-09"},{"lineNumber":91,"author":{"gitId":"nus-jeff"},"content":"                \u0026\u0026 dayLeftTo \u003e\u003d 0","lastModifiedDate":"2023-02-09"},{"lineNumber":92,"author":{"gitId":"nus-jeff"},"content":"                \u0026\u0026 dayLeftTo \u003c\u003d dayRange","lastModifiedDate":"2023-02-09"},{"lineNumber":93,"author":{"gitId":"nus-jeff"},"content":"                \u0026\u0026 !this.isDone) {","lastModifiedDate":"2023-02-09"},{"lineNumber":94,"author":{"gitId":"nus-jeff"},"content":"            return \"[E] \" + title + \" (Ending in \" + dayLeftTo + \" day!)\";","lastModifiedDate":"2023-02-09"},{"lineNumber":95,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-09"},{"lineNumber":96,"author":{"gitId":"nus-jeff"},"content":"        return \"\";","lastModifiedDate":"2023-02-09"},{"lineNumber":97,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":98,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":99,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":100,"author":{"gitId":"nus-jeff"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":101,"author":{"gitId":"nus-jeff"},"content":"        String status \u003d this.isDone ? \"[x] \" : \"[ ] \";","lastModifiedDate":"2023-01-19"},{"lineNumber":102,"author":{"gitId":"nus-jeff"},"content":"        return \"[E]\" + status + this.title + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-01-19"},{"lineNumber":103,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":104,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"nus-jeff":104}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":" * Abstract class that represents a task.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":" * A task must come with a title and can be mark as done or not done.","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"abstract public class Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"    protected String title;","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"    protected Task (String title) {","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"     * Marks the Task object as done.","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"    public void markDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"     * Marks the Task object as not done.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"    public void markNotDone() {","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-19"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String that contains information","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"     * on the Task object that is used for loading","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"     * the task into the ToDoList on Duke startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is used for loading the task into Duke on startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"    abstract public String save();","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-29"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"    abstract public String remind(int dayRange);","lastModifiedDate":"2023-02-09"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-02"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"     * Returns a boolean indicating whether the title of the Task object","lastModifiedDate":"2023-02-02"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"     * contains the given keyword.","lastModifiedDate":"2023-02-02"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-02"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"     * @param keyword The keyword to check with the title.","lastModifiedDate":"2023-02-02"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"     * @return A boolean indicating if the title contains the keyword.","lastModifiedDate":"2023-02-02"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-02"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"    public boolean contains(String keyword) {","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"        return this.title.contains(keyword);","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"        String status \u003d this.isDone ? \"[x] \" : \"[ ] \";","lastModifiedDate":"2023-01-19"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"        return status + this.title;","lastModifiedDate":"2023-01-19"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"nus-jeff":57}},{"path":"src/main/java/duke/tasks/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":" * Represents a task that a user has to do.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"public class ToDoTask extends Task {","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"    public ToDoTask(String title) {","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"        super(title);","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"     * Returns a String that contains information","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"     * on the ToDoTask object that is used for loading","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"     * the task into the ToDoList on Duke startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"     * @return A String that is used for loading the task into Duke on startup.","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"    public String save() {","lastModifiedDate":"2023-01-27"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"        String status \u003d this.isDone ? \"DONE/+/\" : \"NOTDONE/+/\";","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"        return \"TODO/+/\" + status + this.title + \"/+/\" + \"\\n\";","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"    /**","lastModifiedDate":"2023-02-09"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"     * Returns an empty String as ToDoTask objects do not have a date to be compared to.","lastModifiedDate":"2023-02-09"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"     *","lastModifiedDate":"2023-02-09"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"     * @return An empty String.","lastModifiedDate":"2023-02-09"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"     */","lastModifiedDate":"2023-02-09"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-09"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"    public String remind(int dayRange) {","lastModifiedDate":"2023-02-09"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"        return \"\";","lastModifiedDate":"2023-02-09"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-09"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-01-19"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"    public String toString() {","lastModifiedDate":"2023-01-19"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"        String status \u003d this.isDone ? \"[x] \" : \"[ ] \";","lastModifiedDate":"2023-01-19"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"        return \"[T]\" + status + this.title;","lastModifiedDate":"2023-01-19"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"nus-jeff":40}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"            \u003cFont name\u003d\"MS Gothic\" size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"93.0\" fitWidth\u003d\"97.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nus-jeff":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-07"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.Gui.MainWindow\"\u003e","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type your query here!\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"            \u003cFont name\u003d\"Javanese Text\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"         \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"78.0\" text\u003d\"Send\" textFill\u003d\"#f71e02\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"            \u003cFont size\u003d\"16.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-02-07"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-02-07"}],"authorContributionMap":{"nus-jeff":26}},{"path":"src/test/java/ToDoListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"import duke.ToDoList;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"import duke.tasks.ToDoTask;","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"public class ToDoListTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"    public void deleteTest() {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"            ToDoList ls \u003d new ToDoList();","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"            ToDoTask expected \u003d new ToDoTask(\"slot 2\");","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"            ls.add(new ToDoTask(\"slot 1\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"            ls.add(expected);","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"            ls.add(new ToDoTask(\"slot 3\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"            assertEquals(expected, ls.delete(2));","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"            fail();","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"    public void getTaskTest() {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"            ToDoList ls \u003d new ToDoList();","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"            ToDoTask expected \u003d new ToDoTask(\"slot 1\");","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"            ls.add(expected);","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"            ls.add(new ToDoTask(\"slot 2\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"            ls.add(new ToDoTask(\"slot 3\"));","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"            assertEquals(expected, ls.getTask(1));","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"            fail();","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nus-jeff":35}},{"path":"src/test/java/duke/functions/DukeStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.functions;","lastModifiedDate":"2023-02-08"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import duke.Duke;","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"public class DukeStub extends Duke {","lastModifiedDate":"2023-02-08"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"    public DukeStub() {","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"        super(\"./ip-data/ip-data.txt\");","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"    public String shutDown() {","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"        return \"The Duke has saved your To Do List!\\n\" +","lastModifiedDate":"2023-02-08"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"                \"You may safely exit now, feel free to call the Duke again whenever you need.\";","lastModifiedDate":"2023-02-08"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"nus-jeff":15}},{"path":"src/test/java/duke/functions/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.functions;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"public class ParserTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"    public void handleInputTest() {","lastModifiedDate":"2023-02-02"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"        String[] expected \u003d {\"test\", \"best\", \"gestalest\"};","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"            assertArrayEquals(expected, Parser.handleInput(\"testabestagestalest\", \"a\", 3, 3));","lastModifiedDate":"2023-02-02"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"            assertArrayEquals(expected, Parser.handleInput(\"testabestagestalest\", \"a\", 3, 2));","lastModifiedDate":"2023-02-02"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"            assertArrayEquals(expected, Parser.handleInput(\"testabestagestalest\", \"a\", 3, 4));","lastModifiedDate":"2023-02-02"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"            fail();","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"nus-jeff"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"nus-jeff"},"content":"    public void handleCommandTest() {","lastModifiedDate":"2023-02-02"},{"lineNumber":36,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"nus-jeff"},"content":"            String[] input \u003d {\"bye\"};","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"nus-jeff"},"content":"            assertEquals(\"The Duke has saved your To Do List!\\n\" +","lastModifiedDate":"2023-02-08"},{"lineNumber":40,"author":{"gitId":"nus-jeff"},"content":"                    \"You may safely exit now, feel free to call the Duke again whenever you need.\",","lastModifiedDate":"2023-02-08"},{"lineNumber":41,"author":{"gitId":"nus-jeff"},"content":"                    Parser.handleCommand(input, new ToDoListStub(), new DukeStub()));","lastModifiedDate":"2023-02-08"},{"lineNumber":42,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"nus-jeff"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"nus-jeff"},"content":"            String[] input \u003d {\"list\"};","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"nus-jeff"},"content":"            assertEquals(\"TO DO LIST:\\n\", Parser.handleCommand(input, new ToDoListStub(), new DukeStub()));","lastModifiedDate":"2023-02-08"},{"lineNumber":50,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"nus-jeff"},"content":"            fail();","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"nus-jeff"},"content":"            String[] input \u003d {\"todo\"};","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"nus-jeff"},"content":"            assertEquals(\"The Duke has add the following task:\\n - \\nYou now have 1 task!\\n\",","lastModifiedDate":"2023-02-08"},{"lineNumber":58,"author":{"gitId":"nus-jeff"},"content":"                    Parser.handleCommand(input, new ToDoListStub(), new DukeStub()));","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"nus-jeff"},"content":"            fail();","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"nus-jeff"},"content":"        try {","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"nus-jeff"},"content":"            String[] input \u003d {\"error\"};","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"nus-jeff"},"content":"            assertEquals(false, Parser.handleCommand(input, new ToDoListStub(), new DukeStub()));","lastModifiedDate":"2023-02-08"},{"lineNumber":68,"author":{"gitId":"nus-jeff"},"content":"            fail();","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"nus-jeff"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"nus-jeff"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nus-jeff":73}},{"path":"src/test/java/duke/functions/ToDoListStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"package duke.functions;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"import duke.ToDoList;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"public class ToDoListStub extends ToDoList {","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-08"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"    public int getToDoCount() {","lastModifiedDate":"2023-02-08"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"        return 1;","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-08"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"    @Override","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"    public String toString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"        return \"\";","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"nus-jeff":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":2,"author":{"gitId":"nus-jeff"},"content":"event tryout test /from 29/6/2023 /to 01/10/2024","lastModifiedDate":"2023-01-29"},{"lineNumber":3,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"nus-jeff"},"content":"todo","lastModifiedDate":"2023-01-22"},{"lineNumber":5,"author":{"gitId":"nus-jeff"},"content":"deadline test error","lastModifiedDate":"2023-01-22"},{"lineNumber":6,"author":{"gitId":"nus-jeff"},"content":"deadline /by test error","lastModifiedDate":"2023-01-22"},{"lineNumber":7,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-22"},{"lineNumber":8,"author":{"gitId":"nus-jeff"},"content":"event test error","lastModifiedDate":"2023-01-22"},{"lineNumber":9,"author":{"gitId":"nus-jeff"},"content":"event test /from error","lastModifiedDate":"2023-01-22"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"event /from error /to error","lastModifiedDate":"2023-01-22"},{"lineNumber":11,"author":{"gitId":"nus-jeff"},"content":"event test /to error","lastModifiedDate":"2023-01-22"},{"lineNumber":12,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-22"},{"lineNumber":13,"author":{"gitId":"nus-jeff"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"nus-jeff"},"content":"mark 3","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"nus-jeff"},"content":"unmark 1","lastModifiedDate":"2023-01-29"},{"lineNumber":16,"author":{"gitId":"nus-jeff"},"content":"mark 4","lastModifiedDate":"2023-01-22"},{"lineNumber":17,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"unmark -1","lastModifiedDate":"2023-01-22"},{"lineNumber":19,"author":{"gitId":"nus-jeff"},"content":"delete 5","lastModifiedDate":"2023-01-22"},{"lineNumber":20,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"nus-jeff"},"content":"deadline delete /by 5/5/2023","lastModifiedDate":"2023-01-29"},{"lineNumber":22,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-29"},{"lineNumber":23,"author":{"gitId":"nus-jeff"},"content":"find tes","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"nus-jeff"},"content":"find e","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"nus-jeff"},"content":"delete 3","lastModifiedDate":"2023-01-29"},{"lineNumber":26,"author":{"gitId":"nus-jeff"},"content":"mark 3","lastModifiedDate":"2023-01-29"},{"lineNumber":27,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-29"},{"lineNumber":28,"author":{"gitId":"nus-jeff"},"content":"delete 3","lastModifiedDate":"2023-01-29"},{"lineNumber":29,"author":{"gitId":"nus-jeff"},"content":"mark 1","lastModifiedDate":"2023-01-29"},{"lineNumber":30,"author":{"gitId":"nus-jeff"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":31,"author":{"gitId":"nus-jeff"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":32,"author":{"gitId":"nus-jeff"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"nus-jeff":32}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"nus-jeff"},"content":"javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"nus-jeff"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"nus-jeff":2}}]
