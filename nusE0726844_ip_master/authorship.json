[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"nusE0726844"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"nusE0726844"},"content":" * Contains information of a deadline","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"nusE0726844"},"content":" * Contains description and deadline of the deadline","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"nusE0726844"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"nusE0726844"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"nusE0726844"},"content":"    protected String by;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"nusE0726844"},"content":"     * Creates a deadline object","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"nusE0726844"},"content":"     * @param description The description of the deadline","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"nusE0726844"},"content":"     * @param by Deadline time of the deadline","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"nusE0726844"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"nusE0726844"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"nusE0726844"},"content":"     * Creates a deadline object from user input","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"nusE0726844"},"content":"     * Handles exceptions","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"nusE0726844"},"content":"     * @param input Input from user","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"nusE0726844"},"content":"     * @return Deadline Task object","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If description of the deadline is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If deadline of the deadline is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"nusE0726844"},"content":"    public static Deadline generate(String input) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"nusE0726844"},"content":"        // Cleans input command","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"nusE0726844"},"content":"        input \u003d input.trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"nusE0726844"},"content":"        // Checks format of input command","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"nusE0726844"},"content":"        int indexDesc \u003d input.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"nusE0726844"},"content":"        int indexTime \u003d input.indexOf(\" /by \");","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"nusE0726844"},"content":"        if (indexDesc \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Deadline\", \"Empty description\");","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"nusE0726844"},"content":"        } else if (indexTime \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Deadline\", \"Empty deadline\");","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"nusE0726844"},"content":"        // Cleans and checks variables","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"nusE0726844"},"content":"        String description \u003d input.substring(indexDesc + 1, indexTime).trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"nusE0726844"},"content":"        String deadline \u003d input.substring(indexTime + 5).trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"nusE0726844"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Deadline\", \"Empty description\");","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"nusE0726844"},"content":"        } else if (deadline.equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Deadline\", \"Empty deadline\");","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"nusE0726844"},"content":"        return new Deadline(description, deadline);","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"nusE0726844"},"content":"     * Returns type of task, completion status, description, and deadline of","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"nusE0726844"},"content":"     * the deadline","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"nusE0726844"},"content":"     * @return Type of task, completion status, description, and deadline of","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"nusE0726844"},"content":"     * the deadline","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"nusE0726844"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"nusE0726844"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"nusE0726844"},"content":"        return \"[D]\" + super.toString()","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"nusE0726844"},"content":"                + \" (by: \" + by + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"nusE0726844"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"nusE0726844":67}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nusE0726844"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-27"},{"lineNumber":2,"author":{"gitId":"nusE0726844"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"nusE0726844"},"content":"    /** The Logo of Duke */","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"nusE0726844"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"nusE0726844"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"nusE0726844"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"nusE0726844"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"nusE0726844"},"content":"    /** Line to be appended before and after a message */","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"nusE0726844"},"content":"    /** Message to be printed before to greet the user */","lastModifiedDate":"2023-01-27"},{"lineNumber":17,"author":{"gitId":"nusE0726844"},"content":"    private static final String[] MSG_GREET \u003d {\"Hello! I\u0027m Duke\", \"What can I do for you?\"};","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"nusE0726844"},"content":"    /** Message to be printed before exiting */","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_EXIT \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"nusE0726844"},"content":"    /** Message to be printed after marking task as done */","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_MARK \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"nusE0726844"},"content":"    /** Message to be printed after changing status of task to not done */","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_UNMARK \u003d \"OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"nusE0726844"},"content":"    /** Message to be printed after adding task to list of tasks */","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"nusE0726844"},"content":"    private static final String[] MSG_ADD \u003d {\"Got it. I\u0027ve added this task:\", \"Now you have \", \" tasks in the list.\"};","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"nusE0726844"},"content":"    /** Message to be printed after adding task to list of tasks */","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_DELETE \u003d \"Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"nusE0726844"},"content":"    /** Indentation level of messages to be printed to console */","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"nusE0726844"},"content":"    private static final int INDENTATION_LEVEL \u003d 4;","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"nusE0726844"},"content":"    protected enum Command {TODO, DEADLINE, EVENT, MARK, UNMARK, DELETE, LIST, BYE};","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-01-27"},{"lineNumber":40,"author":{"gitId":"nusE0726844"},"content":"        // Greets the user","lastModifiedDate":"2023-01-27"},{"lineNumber":41,"author":{"gitId":"nusE0726844"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"nusE0726844"},"content":"            greet();","lastModifiedDate":"2023-01-27"},{"lineNumber":43,"author":{"gitId":"nusE0726844"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"nusE0726844"},"content":"            echo(e.getMessage());","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":47,"author":{"gitId":"nusE0726844"},"content":"        // Initialise variables","lastModifiedDate":"2023-01-27"},{"lineNumber":48,"author":{"gitId":"nusE0726844"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":50,"author":{"gitId":"nusE0726844"},"content":"        // Decision loop","lastModifiedDate":"2023-01-27"},{"lineNumber":51,"author":{"gitId":"nusE0726844"},"content":"        boolean isContinue_decisionLoop \u003d true;","lastModifiedDate":"2023-01-27"},{"lineNumber":52,"author":{"gitId":"nusE0726844"},"content":"        while (isContinue_decisionLoop) {","lastModifiedDate":"2023-01-27"},{"lineNumber":53,"author":{"gitId":"nusE0726844"},"content":"            // Get user\u0027s input","lastModifiedDate":"2023-01-27"},{"lineNumber":54,"author":{"gitId":"nusE0726844"},"content":"            Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-27"},{"lineNumber":55,"author":{"gitId":"nusE0726844"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":57,"author":{"gitId":"nusE0726844"},"content":"            try {","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"nusE0726844"},"content":"                Command cmd \u003d Command.valueOf(input.split(\" \", 2)[0].trim().toUpperCase());","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"nusE0726844"},"content":"                // Decision Tree","lastModifiedDate":"2023-01-27"},{"lineNumber":60,"author":{"gitId":"nusE0726844"},"content":"                switch (cmd) {","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"nusE0726844"},"content":"                case TODO:","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"nusE0726844"},"content":"                    add(tasks, Todo.generate(input));","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"nusE0726844"},"content":"                case DEADLINE:","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"nusE0726844"},"content":"                    add(tasks, Deadline.generate(input));","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"nusE0726844"},"content":"                case EVENT:","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"nusE0726844"},"content":"                    add(tasks, Event.generate(input));","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"nusE0726844"},"content":"                case MARK:","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"nusE0726844"},"content":"                    mark(tasks, input);","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"nusE0726844"},"content":"                case UNMARK:","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"nusE0726844"},"content":"                    unmark(tasks, input);","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"nusE0726844"},"content":"                case DELETE:","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"nusE0726844"},"content":"                    delete(tasks, input);","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"nusE0726844"},"content":"                case LIST:","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"nusE0726844"},"content":"                    list(tasks);","lastModifiedDate":"2023-01-27"},{"lineNumber":81,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-27"},{"lineNumber":82,"author":{"gitId":"nusE0726844"},"content":"                case BYE:","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"nusE0726844"},"content":"                    isContinue_decisionLoop \u003d false;","lastModifiedDate":"2023-01-27"},{"lineNumber":84,"author":{"gitId":"nusE0726844"},"content":"                    break;","lastModifiedDate":"2023-01-27"},{"lineNumber":85,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"nusE0726844"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"nusE0726844"},"content":"                echo(e.getMessage());","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"nusE0726844"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"nusE0726844"},"content":"                // If user\u0027s input is not a valid command","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"nusE0726844"},"content":"                try {","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"nusE0726844"},"content":"                    throw new DukeException(\"Unknown\", \"Unknown Command\");","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"nusE0726844"},"content":"                } catch (DukeException de) {","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"nusE0726844"},"content":"                    echo(de.getMessage());","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"nusE0726844"},"content":"            } catch (NullPointerException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"nusE0726844"},"content":"                // If user\u0027s input is not a valid command","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"nusE0726844"},"content":"                try {","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"nusE0726844"},"content":"                    throw new DukeException(\"Unknown\", \"No Command\");","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"nusE0726844"},"content":"                } catch (DukeException de) {","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"nusE0726844"},"content":"                    echo(de.getMessage());","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"nusE0726844"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"nusE0726844"},"content":"                // Catches exceptions whose behaviour has not yet been implemented","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"nusE0726844"},"content":"                try {","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"nusE0726844"},"content":"                    String[] errorMessage \u003d DukeException.unimplemented(e);","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"nusE0726844"},"content":"                    int[] indent \u003d {1, 3, 5};","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"nusE0726844"},"content":"                    echo(errorMessage, indent);","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"nusE0726844"},"content":"                } catch (DukeException de) {","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"nusE0726844"},"content":"                    echo(de.getMessage());","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"nusE0726844"},"content":"            }","lastModifiedDate":"2023-01-19"},{"lineNumber":112,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-19"},{"lineNumber":113,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":114,"author":{"gitId":"nusE0726844"},"content":"        // Exit message","lastModifiedDate":"2023-01-27"},{"lineNumber":115,"author":{"gitId":"nusE0726844"},"content":"        exit();","lastModifiedDate":"2023-01-27"},{"lineNumber":116,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":117,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":118,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":119,"author":{"gitId":"nusE0726844"},"content":"     * Prints specified message on console.","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"nusE0726844"},"content":"     * Appends a line before and after message.","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"nusE0726844"},"content":"     * @param msg Message to be printed on console.","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":124,"author":{"gitId":"nusE0726844"},"content":"    static void echo(String msg) {","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"nusE0726844"},"content":"        String indent \u003d indent(INDENTATION_LEVEL);","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"nusE0726844"},"content":"        System.out.println(indent + MSG_LINE","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"nusE0726844"},"content":"                + indent + msg + \"\\n\"","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"nusE0726844"},"content":"                + indent + MSG_LINE);","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":130,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":131,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"nusE0726844"},"content":"     * Prints specified message on console.","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"nusE0726844"},"content":"     * Appends a line before and after message.","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"nusE0726844"},"content":"     * @param msg Array of message to be printed on console.","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"nusE0726844"},"content":"     * @param indentLevel Array representing the indent level of each message.","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If length of msg and indentLevel do not match","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"nusE0726844"},"content":"    static void echo(String[] msg, int[] indentLevel) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"nusE0726844"},"content":"        if (indentLevel.length !\u003d msg.length) {","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"List\", \"Unbalanced List\");","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"nusE0726844"},"content":"        String indent \u003d indent(INDENTATION_LEVEL);","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"nusE0726844"},"content":"        // Converts list of messages to be printed on console","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"nusE0726844"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"nusE0726844"},"content":"        output.append(indent(indentLevel[0]))","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"nusE0726844"},"content":"                .append(msg[0]);","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"nusE0726844"},"content":"        for (int i \u003d 1; i \u003c msg.length; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"nusE0726844"},"content":"            output.append(\"\\n\")","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"nusE0726844"},"content":"                    .append(indent)","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"nusE0726844"},"content":"                    .append(indent(indentLevel[i]))","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"nusE0726844"},"content":"                    .append(msg[i]);","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"nusE0726844"},"content":"        echo(output.toString());","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"nusE0726844"},"content":"     * Returns indentation of the specified indentation level.","lastModifiedDate":"2023-01-28"},{"lineNumber":161,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":162,"author":{"gitId":"nusE0726844"},"content":"     * @param count Level of indentation.","lastModifiedDate":"2023-01-28"},{"lineNumber":163,"author":{"gitId":"nusE0726844"},"content":"     * @return Indentation","lastModifiedDate":"2023-01-28"},{"lineNumber":164,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":165,"author":{"gitId":"nusE0726844"},"content":"    static String indent(int count) {","lastModifiedDate":"2023-01-28"},{"lineNumber":166,"author":{"gitId":"nusE0726844"},"content":"        return \" \".repeat(count);","lastModifiedDate":"2023-01-28"},{"lineNumber":167,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":168,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":169,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":170,"author":{"gitId":"nusE0726844"},"content":"     * Prints greeting message on console.","lastModifiedDate":"2023-01-28"},{"lineNumber":171,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":172,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If length of MSG_GREET and indentLevel do not match","lastModifiedDate":"2023-01-28"},{"lineNumber":173,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":174,"author":{"gitId":"nusE0726844"},"content":"    static void greet() throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":175,"author":{"gitId":"nusE0726844"},"content":"        System.out.println(\"Hello from\\n\" + MSG_LOGO);","lastModifiedDate":"2023-01-28"},{"lineNumber":176,"author":{"gitId":"nusE0726844"},"content":"        int[] indentLevel \u003d {1, 1};","lastModifiedDate":"2023-01-28"},{"lineNumber":177,"author":{"gitId":"nusE0726844"},"content":"        echo(MSG_GREET, indentLevel);","lastModifiedDate":"2023-01-28"},{"lineNumber":178,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-19"},{"lineNumber":179,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-19"},{"lineNumber":180,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":181,"author":{"gitId":"nusE0726844"},"content":"     * Prints exiting message on console.","lastModifiedDate":"2023-01-27"},{"lineNumber":182,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":183,"author":{"gitId":"nusE0726844"},"content":"    static void exit() {","lastModifiedDate":"2023-01-27"},{"lineNumber":184,"author":{"gitId":"nusE0726844"},"content":"        echo(\" \" + MSG_EXIT);","lastModifiedDate":"2023-01-28"},{"lineNumber":185,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":186,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":187,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":188,"author":{"gitId":"nusE0726844"},"content":"     * Adds specified task to specified list of tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":189,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":190,"author":{"gitId":"nusE0726844"},"content":"     * @param tasks List of tasks to add task to.","lastModifiedDate":"2023-01-28"},{"lineNumber":191,"author":{"gitId":"nusE0726844"},"content":"     * @param task Task to be added to tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":192,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If length of output and indentLevel do not match","lastModifiedDate":"2023-01-28"},{"lineNumber":193,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":194,"author":{"gitId":"nusE0726844"},"content":"    static void add(ArrayList\u003cTask\u003e tasks, Task task) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":195,"author":{"gitId":"nusE0726844"},"content":"        tasks.add(task);","lastModifiedDate":"2023-01-28"},{"lineNumber":196,"author":{"gitId":"nusE0726844"},"content":"        String[] output \u003d {MSG_ADD[0],","lastModifiedDate":"2023-01-28"},{"lineNumber":197,"author":{"gitId":"nusE0726844"},"content":"                task.toString(),","lastModifiedDate":"2023-01-28"},{"lineNumber":198,"author":{"gitId":"nusE0726844"},"content":"                MSG_ADD[1]","lastModifiedDate":"2023-01-28"},{"lineNumber":199,"author":{"gitId":"nusE0726844"},"content":"                        + tasks.size()","lastModifiedDate":"2023-01-28"},{"lineNumber":200,"author":{"gitId":"nusE0726844"},"content":"                        + MSG_ADD[2]};","lastModifiedDate":"2023-01-28"},{"lineNumber":201,"author":{"gitId":"nusE0726844"},"content":"        int[] indentLevel \u003d {1, 3, 1};","lastModifiedDate":"2023-01-28"},{"lineNumber":202,"author":{"gitId":"nusE0726844"},"content":"        echo(output, indentLevel);","lastModifiedDate":"2023-01-28"},{"lineNumber":203,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":204,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":205,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-27"},{"lineNumber":206,"author":{"gitId":"nusE0726844"},"content":"     * Prints specified list of tasks on console.","lastModifiedDate":"2023-01-27"},{"lineNumber":207,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-27"},{"lineNumber":208,"author":{"gitId":"nusE0726844"},"content":"     * @param tasks List of tasks to print on console.","lastModifiedDate":"2023-01-28"},{"lineNumber":209,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If list of tasks is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":210,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-27"},{"lineNumber":211,"author":{"gitId":"nusE0726844"},"content":"    static void list(ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":212,"author":{"gitId":"nusE0726844"},"content":"        if (tasks.size() \u003c 1) {","lastModifiedDate":"2023-01-28"},{"lineNumber":213,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"List\", \"Empty List\");","lastModifiedDate":"2023-01-28"},{"lineNumber":214,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":215,"author":{"gitId":"nusE0726844"},"content":"        String[] output \u003d new String[tasks.size()];","lastModifiedDate":"2023-01-28"},{"lineNumber":216,"author":{"gitId":"nusE0726844"},"content":"        int[] indentLevel \u003d new int[tasks.size()];","lastModifiedDate":"2023-01-28"},{"lineNumber":217,"author":{"gitId":"nusE0726844"},"content":"        for (int i \u003d 0; i \u003c output.length; i++) {","lastModifiedDate":"2023-01-28"},{"lineNumber":218,"author":{"gitId":"nusE0726844"},"content":"            output[i] \u003d i + 1","lastModifiedDate":"2023-01-28"},{"lineNumber":219,"author":{"gitId":"nusE0726844"},"content":"                    + \". \"","lastModifiedDate":"2023-01-28"},{"lineNumber":220,"author":{"gitId":"nusE0726844"},"content":"                    + tasks.get(i);","lastModifiedDate":"2023-01-28"},{"lineNumber":221,"author":{"gitId":"nusE0726844"},"content":"            indentLevel[i] \u003d 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":222,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":223,"author":{"gitId":"nusE0726844"},"content":"        echo(output, indentLevel);","lastModifiedDate":"2023-01-28"},{"lineNumber":224,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":225,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":226,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":227,"author":{"gitId":"nusE0726844"},"content":"     * Marks specified task as done.","lastModifiedDate":"2023-01-28"},{"lineNumber":228,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":229,"author":{"gitId":"nusE0726844"},"content":"     * @param tasks List of tasks to get specified task from.","lastModifiedDate":"2023-01-28"},{"lineNumber":230,"author":{"gitId":"nusE0726844"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2023-01-28"},{"lineNumber":231,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If list of tasks is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":232,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If index is out of bound","lastModifiedDate":"2023-01-28"},{"lineNumber":233,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If the specified index is not an integer","lastModifiedDate":"2023-01-28"},{"lineNumber":234,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":235,"author":{"gitId":"nusE0726844"},"content":"    static void mark(ArrayList\u003cTask\u003e tasks, String input) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":236,"author":{"gitId":"nusE0726844"},"content":"        int index \u003d input.trim().indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":237,"author":{"gitId":"nusE0726844"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":238,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Mark\", \"Empty Index\");","lastModifiedDate":"2023-01-28"},{"lineNumber":239,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":240,"author":{"gitId":"nusE0726844"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":241,"author":{"gitId":"nusE0726844"},"content":"            index \u003d Integer.parseInt(input","lastModifiedDate":"2023-01-28"},{"lineNumber":242,"author":{"gitId":"nusE0726844"},"content":"                    .substring(index + 1)) - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":243,"author":{"gitId":"nusE0726844"},"content":"            tasks.get(index).mark();","lastModifiedDate":"2023-01-28"},{"lineNumber":244,"author":{"gitId":"nusE0726844"},"content":"            int[] indentLevel \u003d {1, 3};","lastModifiedDate":"2023-01-28"},{"lineNumber":245,"author":{"gitId":"nusE0726844"},"content":"            String[] message \u003d {MSG_MARK,","lastModifiedDate":"2023-01-28"},{"lineNumber":246,"author":{"gitId":"nusE0726844"},"content":"                    tasks.get(index).toString()};","lastModifiedDate":"2023-01-28"},{"lineNumber":247,"author":{"gitId":"nusE0726844"},"content":"            echo(message, indentLevel);","lastModifiedDate":"2023-01-28"},{"lineNumber":248,"author":{"gitId":"nusE0726844"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":249,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Mark\", \"Out of Bound\");","lastModifiedDate":"2023-01-28"},{"lineNumber":250,"author":{"gitId":"nusE0726844"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":251,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Mark\", \"Not Integer\");","lastModifiedDate":"2023-01-28"},{"lineNumber":252,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":253,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":254,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":255,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":256,"author":{"gitId":"nusE0726844"},"content":"     * Changes status of specified task back to not done.","lastModifiedDate":"2023-01-28"},{"lineNumber":257,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":258,"author":{"gitId":"nusE0726844"},"content":"     * @param tasks List of tasks to get specified task from.","lastModifiedDate":"2023-01-28"},{"lineNumber":259,"author":{"gitId":"nusE0726844"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2023-01-28"},{"lineNumber":260,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If list of tasks is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":261,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If index is out of bound","lastModifiedDate":"2023-01-28"},{"lineNumber":262,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If the specified index is not an integer","lastModifiedDate":"2023-01-28"},{"lineNumber":263,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":264,"author":{"gitId":"nusE0726844"},"content":"    static void unmark(ArrayList\u003cTask\u003e tasks, String input) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":265,"author":{"gitId":"nusE0726844"},"content":"        int index \u003d input.trim().indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":266,"author":{"gitId":"nusE0726844"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":267,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Unmark\", \"Empty Index\");","lastModifiedDate":"2023-01-28"},{"lineNumber":268,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":269,"author":{"gitId":"nusE0726844"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":270,"author":{"gitId":"nusE0726844"},"content":"            index \u003d Integer.parseInt(input","lastModifiedDate":"2023-01-28"},{"lineNumber":271,"author":{"gitId":"nusE0726844"},"content":"                    .substring(index + 1)) - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":272,"author":{"gitId":"nusE0726844"},"content":"            tasks.get(index).unmark();","lastModifiedDate":"2023-01-28"},{"lineNumber":273,"author":{"gitId":"nusE0726844"},"content":"            int[] indentLevel \u003d {1, 3};","lastModifiedDate":"2023-01-28"},{"lineNumber":274,"author":{"gitId":"nusE0726844"},"content":"            String[] message \u003d {MSG_UNMARK,","lastModifiedDate":"2023-01-28"},{"lineNumber":275,"author":{"gitId":"nusE0726844"},"content":"                    tasks.get(index).toString()};","lastModifiedDate":"2023-01-28"},{"lineNumber":276,"author":{"gitId":"nusE0726844"},"content":"            echo(message, indentLevel);","lastModifiedDate":"2023-01-28"},{"lineNumber":277,"author":{"gitId":"nusE0726844"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":278,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Unmark\", \"Out of Bound\");","lastModifiedDate":"2023-01-28"},{"lineNumber":279,"author":{"gitId":"nusE0726844"},"content":"        }  catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":280,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Unmark\", \"Not Integer\");","lastModifiedDate":"2023-01-28"},{"lineNumber":281,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":282,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":283,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":284,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":285,"author":{"gitId":"nusE0726844"},"content":"     * Removes specified task from the specified list of tasks.","lastModifiedDate":"2023-01-28"},{"lineNumber":286,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":287,"author":{"gitId":"nusE0726844"},"content":"     * @param tasks List of tasks to get specified task from.","lastModifiedDate":"2023-01-28"},{"lineNumber":288,"author":{"gitId":"nusE0726844"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2023-01-28"},{"lineNumber":289,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If list of tasks is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":290,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If index is out of bound","lastModifiedDate":"2023-01-28"},{"lineNumber":291,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If the specified index is not an integer","lastModifiedDate":"2023-01-28"},{"lineNumber":292,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":293,"author":{"gitId":"nusE0726844"},"content":"    static void delete(ArrayList\u003cTask\u003e tasks, String input) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":294,"author":{"gitId":"nusE0726844"},"content":"        int index \u003d input.trim().indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":295,"author":{"gitId":"nusE0726844"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":296,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Delete\", \"Empty Index\");","lastModifiedDate":"2023-01-28"},{"lineNumber":297,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":298,"author":{"gitId":"nusE0726844"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":299,"author":{"gitId":"nusE0726844"},"content":"            index \u003d Integer.parseInt(input","lastModifiedDate":"2023-01-28"},{"lineNumber":300,"author":{"gitId":"nusE0726844"},"content":"                    .substring(index + 1)) - 1;","lastModifiedDate":"2023-01-28"},{"lineNumber":301,"author":{"gitId":"nusE0726844"},"content":"            Task task \u003d tasks.remove(index);","lastModifiedDate":"2023-01-28"},{"lineNumber":302,"author":{"gitId":"nusE0726844"},"content":"            int[] indentLevel \u003d {1, 3, 1};","lastModifiedDate":"2023-01-28"},{"lineNumber":303,"author":{"gitId":"nusE0726844"},"content":"            String[] message \u003d {MSG_DELETE,","lastModifiedDate":"2023-01-28"},{"lineNumber":304,"author":{"gitId":"nusE0726844"},"content":"                    task.toString(),","lastModifiedDate":"2023-01-28"},{"lineNumber":305,"author":{"gitId":"nusE0726844"},"content":"                    MSG_ADD[1]","lastModifiedDate":"2023-01-28"},{"lineNumber":306,"author":{"gitId":"nusE0726844"},"content":"                            + tasks.size()","lastModifiedDate":"2023-01-28"},{"lineNumber":307,"author":{"gitId":"nusE0726844"},"content":"                            + MSG_ADD[2]};","lastModifiedDate":"2023-01-28"},{"lineNumber":308,"author":{"gitId":"nusE0726844"},"content":"            echo(message, indentLevel);","lastModifiedDate":"2023-01-28"},{"lineNumber":309,"author":{"gitId":"nusE0726844"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":310,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Delete\", \"Out of Bound\");","lastModifiedDate":"2023-01-28"},{"lineNumber":311,"author":{"gitId":"nusE0726844"},"content":"        }  catch (NumberFormatException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":312,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Delete\", \"Not Integer\");","lastModifiedDate":"2023-01-28"},{"lineNumber":313,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":314,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"nusE0726844":312,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nusE0726844"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_PREFIX \u003d \"☹ OOPS!!!\";","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_SUFFIX \u003d \":-(\";","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"nusE0726844"},"content":"    /** List of known error messages */","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_DEFAULT \u003d \"I\u0027m sorry, something went wrong.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"nusE0726844"},"content":"    // Error messages for list issues","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_LIST_ECHO \u003d \"It appears that the message and indentation list are unbalanced.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_LIST_EMPTY \u003d \"The list of task is empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"nusE0726844"},"content":"    // Error messages for event task issues","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_EVENT_EMPTY \u003d \"The description of an event cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_EVENT_FROM \u003d \"The start time of an event cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_EVENT_TO \u003d \"The end time of an event cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"    // Error messages for deadline task issues","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_DEADLINE_DESC \u003d \"The description of a deadline cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_DEADLINE_TIME \u003d \"The deadline of a deadline cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"nusE0726844"},"content":"    // Error messages for issues with deleting task from the list of tasks","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_DELETE_EMPTY \u003d \"The index of the task to be deleted cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_DELETE_BOUND \u003d \"The index of the task to be deleted must be in the list.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_DELETE_NONINT \u003d \"The index of the task to be deleted must be an integer.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"nusE0726844"},"content":"    // Error messages for issues with marking task as complete","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_MARK_EMPTY \u003d \"The index of the task to be marked as done cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_MARK_BOUND \u003d \"The index of the task to be marked as done must be in the list.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_MARK_NONINT \u003d \"The index of the task to be marked as done must be an integer.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_NONE \u003d \"There seems to be no input.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_TODO_DESC \u003d \"The description of a todo cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_UNKNOWN \u003d \"I\u0027m sorry, but I don\u0027t know what that means.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"nusE0726844"},"content":"    // Error messages for issues with changing the status of task to not complete","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_UNMARK_EMPTY \u003d \"The index of the task to be marked as not done cannot be empty.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_UNMARK_BOUND \u003d \"The index of the task to be marked as not done must be in the list.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"nusE0726844"},"content":"    private static final String MSG_ERR_UNMARK_NONINT \u003d \"The index of the task to be marked as not done must be an integer.\";","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"nusE0726844"},"content":"    protected enum ErrorType {UNKNOWN, TODO, DEADLINE, EVENT, MARK, UNMARK, DELETE, LIST};","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"nusE0726844"},"content":"     * Holds the error message of the exception","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"nusE0726844"},"content":"     * @param errorMessage Error message of the exception","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"nusE0726844"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"nusE0726844"},"content":"        super(MSG_ERR_PREFIX","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"nusE0726844"},"content":"                + \" \" + errorMessage","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"nusE0726844"},"content":"                + \" \" + MSG_ERR_SUFFIX);","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"nusE0726844"},"content":"     * Handles the different type of errors in Duke","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"nusE0726844"},"content":"     * @param type Type of method that caused the exception","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"nusE0726844"},"content":"     * @param errorMessage Type of exception","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException For each type of errors","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"nusE0726844"},"content":"    public DukeException(String type, String errorMessage) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"nusE0726844"},"content":"        super(type + \" \" + errorMessage);","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"nusE0726844"},"content":"        try {","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"nusE0726844"},"content":"            ErrorType errType \u003d ErrorType.valueOf(type","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"nusE0726844"},"content":"                    .trim()","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"nusE0726844"},"content":"                    .toUpperCase());","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"nusE0726844"},"content":"            switch (errType) {","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"nusE0726844"},"content":"            case UNKNOWN:","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"nusE0726844"},"content":"                switch (errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"nusE0726844"},"content":"                case \"Unknown Command\":","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"nusE0726844"},"content":"                    throw new DukeException(MSG_ERR_UNKNOWN);","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"nusE0726844"},"content":"                case \"No Command\":","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"nusE0726844"},"content":"                    throw new DukeException(MSG_ERR_NONE);","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":79,"author":{"gitId":"nusE0726844"},"content":"            case TODO:","lastModifiedDate":"2023-01-28"},{"lineNumber":80,"author":{"gitId":"nusE0726844"},"content":"                if (errorMessage.equals(\"Empty description\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":81,"author":{"gitId":"nusE0726844"},"content":"                    throw new DukeException(MSG_ERR_TODO_DESC);","lastModifiedDate":"2023-01-28"},{"lineNumber":82,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":83,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":84,"author":{"gitId":"nusE0726844"},"content":"            case DEADLINE:","lastModifiedDate":"2023-01-28"},{"lineNumber":85,"author":{"gitId":"nusE0726844"},"content":"                switch (errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":86,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty description\":","lastModifiedDate":"2023-01-28"},{"lineNumber":87,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_DEADLINE_DESC);","lastModifiedDate":"2023-01-28"},{"lineNumber":88,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty deadline\":","lastModifiedDate":"2023-01-28"},{"lineNumber":89,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_DEADLINE_TIME);","lastModifiedDate":"2023-01-28"},{"lineNumber":90,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":91,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":92,"author":{"gitId":"nusE0726844"},"content":"            case EVENT:","lastModifiedDate":"2023-01-28"},{"lineNumber":93,"author":{"gitId":"nusE0726844"},"content":"                switch (errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":94,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty description\":","lastModifiedDate":"2023-01-28"},{"lineNumber":95,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_EVENT_EMPTY);","lastModifiedDate":"2023-01-28"},{"lineNumber":96,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty From Time\":","lastModifiedDate":"2023-01-28"},{"lineNumber":97,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_EVENT_FROM);","lastModifiedDate":"2023-01-28"},{"lineNumber":98,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty To Time\":","lastModifiedDate":"2023-01-28"},{"lineNumber":99,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_EVENT_TO);","lastModifiedDate":"2023-01-28"},{"lineNumber":100,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":101,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":102,"author":{"gitId":"nusE0726844"},"content":"            case MARK:","lastModifiedDate":"2023-01-28"},{"lineNumber":103,"author":{"gitId":"nusE0726844"},"content":"                switch (errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":104,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty Index\":","lastModifiedDate":"2023-01-28"},{"lineNumber":105,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_MARK_EMPTY);","lastModifiedDate":"2023-01-28"},{"lineNumber":106,"author":{"gitId":"nusE0726844"},"content":"                    case \"Out of Bound\":","lastModifiedDate":"2023-01-28"},{"lineNumber":107,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_MARK_BOUND);","lastModifiedDate":"2023-01-28"},{"lineNumber":108,"author":{"gitId":"nusE0726844"},"content":"                    case \"Not Integer\":","lastModifiedDate":"2023-01-28"},{"lineNumber":109,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_MARK_NONINT);","lastModifiedDate":"2023-01-28"},{"lineNumber":110,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":111,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":112,"author":{"gitId":"nusE0726844"},"content":"            case UNMARK:","lastModifiedDate":"2023-01-28"},{"lineNumber":113,"author":{"gitId":"nusE0726844"},"content":"                switch (errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":114,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty Index\":","lastModifiedDate":"2023-01-28"},{"lineNumber":115,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_UNMARK_EMPTY);","lastModifiedDate":"2023-01-28"},{"lineNumber":116,"author":{"gitId":"nusE0726844"},"content":"                    case \"Out of Bound\":","lastModifiedDate":"2023-01-28"},{"lineNumber":117,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_UNMARK_BOUND);","lastModifiedDate":"2023-01-28"},{"lineNumber":118,"author":{"gitId":"nusE0726844"},"content":"                    case \"Not Integer\":","lastModifiedDate":"2023-01-28"},{"lineNumber":119,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_UNMARK_NONINT);","lastModifiedDate":"2023-01-28"},{"lineNumber":120,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":121,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":122,"author":{"gitId":"nusE0726844"},"content":"            case DELETE:","lastModifiedDate":"2023-01-28"},{"lineNumber":123,"author":{"gitId":"nusE0726844"},"content":"                switch (errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":124,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty Index\":","lastModifiedDate":"2023-01-28"},{"lineNumber":125,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_DELETE_EMPTY);","lastModifiedDate":"2023-01-28"},{"lineNumber":126,"author":{"gitId":"nusE0726844"},"content":"                    case \"Out of Bound\":","lastModifiedDate":"2023-01-28"},{"lineNumber":127,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_DELETE_BOUND);","lastModifiedDate":"2023-01-28"},{"lineNumber":128,"author":{"gitId":"nusE0726844"},"content":"                    case \"Not Integer\":","lastModifiedDate":"2023-01-28"},{"lineNumber":129,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_DELETE_NONINT);","lastModifiedDate":"2023-01-28"},{"lineNumber":130,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":131,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":132,"author":{"gitId":"nusE0726844"},"content":"            case LIST:","lastModifiedDate":"2023-01-28"},{"lineNumber":133,"author":{"gitId":"nusE0726844"},"content":"                switch (errorMessage) {","lastModifiedDate":"2023-01-28"},{"lineNumber":134,"author":{"gitId":"nusE0726844"},"content":"                    case \"Empty List\":","lastModifiedDate":"2023-01-28"},{"lineNumber":135,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_LIST_EMPTY);","lastModifiedDate":"2023-01-28"},{"lineNumber":136,"author":{"gitId":"nusE0726844"},"content":"                    case \"Unbalanced List\":","lastModifiedDate":"2023-01-28"},{"lineNumber":137,"author":{"gitId":"nusE0726844"},"content":"                        throw new DukeException(MSG_ERR_LIST_ECHO);","lastModifiedDate":"2023-01-28"},{"lineNumber":138,"author":{"gitId":"nusE0726844"},"content":"                }","lastModifiedDate":"2023-01-28"},{"lineNumber":139,"author":{"gitId":"nusE0726844"},"content":"                break;","lastModifiedDate":"2023-01-28"},{"lineNumber":140,"author":{"gitId":"nusE0726844"},"content":"            }","lastModifiedDate":"2023-01-28"},{"lineNumber":141,"author":{"gitId":"nusE0726844"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":142,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Invalid Error Type\");","lastModifiedDate":"2023-01-28"},{"lineNumber":143,"author":{"gitId":"nusE0726844"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":144,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Error Type cannot be empty\");","lastModifiedDate":"2023-01-28"},{"lineNumber":145,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":146,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":147,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":148,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":149,"author":{"gitId":"nusE0726844"},"content":"     * Prints error message for unimplemented exceptions","lastModifiedDate":"2023-01-28"},{"lineNumber":150,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":151,"author":{"gitId":"nusE0726844"},"content":"     * @param e The unimplemented exception","lastModifiedDate":"2023-01-28"},{"lineNumber":152,"author":{"gitId":"nusE0726844"},"content":"     * @return String array of the error message to be printed to console","lastModifiedDate":"2023-01-28"},{"lineNumber":153,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":154,"author":{"gitId":"nusE0726844"},"content":"    public static String[] unimplemented(Exception e) {","lastModifiedDate":"2023-01-28"},{"lineNumber":155,"author":{"gitId":"nusE0726844"},"content":"        return new String[]{MSG_ERR_DEFAULT,","lastModifiedDate":"2023-01-28"},{"lineNumber":156,"author":{"gitId":"nusE0726844"},"content":"                \"Error Message (\"","lastModifiedDate":"2023-01-28"},{"lineNumber":157,"author":{"gitId":"nusE0726844"},"content":"                        + e.getClass().getName()","lastModifiedDate":"2023-01-28"},{"lineNumber":158,"author":{"gitId":"nusE0726844"},"content":"                        + \"):\",","lastModifiedDate":"2023-01-28"},{"lineNumber":159,"author":{"gitId":"nusE0726844"},"content":"                e.getMessage()};","lastModifiedDate":"2023-01-28"},{"lineNumber":160,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":161,"author":{"gitId":"nusE0726844"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"nusE0726844":161}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"nusE0726844"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"nusE0726844"},"content":" * Contains information of an event","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"nusE0726844"},"content":" * Contains description and duration of the event","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"nusE0726844"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"nusE0726844"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"nusE0726844"},"content":"    protected String from;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"nusE0726844"},"content":"    protected String to;","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"nusE0726844"},"content":"     * Creates an event object","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"nusE0726844"},"content":"     * @param description The description of the event","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"nusE0726844"},"content":"     * @param from Starting time of the event","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"nusE0726844"},"content":"     * @param to Ending time of the event","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"nusE0726844"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"nusE0726844"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"nusE0726844"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"nusE0726844"},"content":"     * Creates a deadline object from user input","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"nusE0726844"},"content":"     * Handles exceptions","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"nusE0726844"},"content":"     * @param input Input from user","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"nusE0726844"},"content":"     * @return Deadline Task object","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If description of the event is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If start time of the event is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If end time of the event is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"nusE0726844"},"content":"    public static Event generate(String input) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"nusE0726844"},"content":"        // Cleans input command","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"nusE0726844"},"content":"        input \u003d input.trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"nusE0726844"},"content":"        // Checks format of input command","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"nusE0726844"},"content":"        int indexDesc \u003d input.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"nusE0726844"},"content":"        int indexFrom \u003d input.indexOf(\" /from \");","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"nusE0726844"},"content":"        int indexTime \u003d input.indexOf(\" /to \");","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"nusE0726844"},"content":"        if (indexDesc \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Event\", \"Empty description\");","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"nusE0726844"},"content":"        } else if (indexFrom \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Event\", \"Empty From Time\");","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"nusE0726844"},"content":"        } else if (indexTime \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Event\", \"Empty To Time\");","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"nusE0726844"},"content":"        // Cleans and checks variables","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"nusE0726844"},"content":"        String description \u003d input.substring(indexDesc + 1, indexFrom).trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"nusE0726844"},"content":"        String timeFrom \u003d input.substring(indexFrom + 7, indexTime).trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"nusE0726844"},"content":"        String timeTo \u003d input.substring(indexTime + 5).trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":54,"author":{"gitId":"nusE0726844"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":55,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Event\", \"Empty description\");","lastModifiedDate":"2023-01-28"},{"lineNumber":56,"author":{"gitId":"nusE0726844"},"content":"        } else if (timeFrom.equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":57,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Event\", \"Empty From Time\");","lastModifiedDate":"2023-01-28"},{"lineNumber":58,"author":{"gitId":"nusE0726844"},"content":"        } else if (timeTo.equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":59,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"Event\", \"Empty To Time\");","lastModifiedDate":"2023-01-28"},{"lineNumber":60,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":61,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":62,"author":{"gitId":"nusE0726844"},"content":"        return new Event(description, timeFrom, timeTo);","lastModifiedDate":"2023-01-28"},{"lineNumber":63,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":64,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":65,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":66,"author":{"gitId":"nusE0726844"},"content":"     * Returns type of task, completion status, description, and duration of","lastModifiedDate":"2023-01-28"},{"lineNumber":67,"author":{"gitId":"nusE0726844"},"content":"     * the event","lastModifiedDate":"2023-01-28"},{"lineNumber":68,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":69,"author":{"gitId":"nusE0726844"},"content":"     * @return Type of task, completion status, description, and duration of","lastModifiedDate":"2023-01-28"},{"lineNumber":70,"author":{"gitId":"nusE0726844"},"content":"     * the event","lastModifiedDate":"2023-01-28"},{"lineNumber":71,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":72,"author":{"gitId":"nusE0726844"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":73,"author":{"gitId":"nusE0726844"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":74,"author":{"gitId":"nusE0726844"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-01-28"},{"lineNumber":75,"author":{"gitId":"nusE0726844"},"content":"                + \" (from: \" + from","lastModifiedDate":"2023-01-28"},{"lineNumber":76,"author":{"gitId":"nusE0726844"},"content":"                + \" to: \" + to + \")\";","lastModifiedDate":"2023-01-28"},{"lineNumber":77,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":78,"author":{"gitId":"nusE0726844"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"nusE0726844":78}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"nusE0726844"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"nusE0726844"},"content":" * Contains information of a task","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"nusE0726844"},"content":" * Contains description and completion status of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"nusE0726844"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"nusE0726844"},"content":"public class Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"nusE0726844"},"content":"    protected String description;","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"nusE0726844"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"nusE0726844"},"content":"     * Creates a task object","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"nusE0726844"},"content":"     * Completion status is set to false","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"nusE0726844"},"content":"     * @param description Description of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"nusE0726844"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"nusE0726844"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"nusE0726844"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"nusE0726844"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"nusE0726844"},"content":"     * Marks task as done","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"nusE0726844"},"content":"    public void mark() {","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"nusE0726844"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"nusE0726844"},"content":"     * Changes status of task back to not done","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"nusE0726844"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"nusE0726844"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"nusE0726844"},"content":"     * Returns completion status and description of task","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"nusE0726844"},"content":"     * @return Completion status and description of task","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"nusE0726844"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"nusE0726844"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"nusE0726844"},"content":"        return \"[\" + getStatusIcon() + \"] \"","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"nusE0726844"},"content":"                + description;","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"nusE0726844"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"nusE0726844":49}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"nusE0726844"},"content":"/**","lastModifiedDate":"2023-01-28"},{"lineNumber":3,"author":{"gitId":"nusE0726844"},"content":" * Contains information of a todo","lastModifiedDate":"2023-01-28"},{"lineNumber":4,"author":{"gitId":"nusE0726844"},"content":" * Contains description of the todo","lastModifiedDate":"2023-01-28"},{"lineNumber":5,"author":{"gitId":"nusE0726844"},"content":" */","lastModifiedDate":"2023-01-28"},{"lineNumber":6,"author":{"gitId":"nusE0726844"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-28"},{"lineNumber":7,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":8,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":9,"author":{"gitId":"nusE0726844"},"content":"     * Creates a todo object","lastModifiedDate":"2023-01-28"},{"lineNumber":10,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":11,"author":{"gitId":"nusE0726844"},"content":"     * @param description The description of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":12,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":13,"author":{"gitId":"nusE0726844"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-28"},{"lineNumber":14,"author":{"gitId":"nusE0726844"},"content":"        super(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":15,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":16,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":17,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"     * Creates a todo object from user input","lastModifiedDate":"2023-01-28"},{"lineNumber":19,"author":{"gitId":"nusE0726844"},"content":"     * Handles exceptions","lastModifiedDate":"2023-01-28"},{"lineNumber":20,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":21,"author":{"gitId":"nusE0726844"},"content":"     * @param input Input from user","lastModifiedDate":"2023-01-28"},{"lineNumber":22,"author":{"gitId":"nusE0726844"},"content":"     * @return ToDo Task object","lastModifiedDate":"2023-01-28"},{"lineNumber":23,"author":{"gitId":"nusE0726844"},"content":"     * @throws DukeException If description of the task is empty","lastModifiedDate":"2023-01-28"},{"lineNumber":24,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":25,"author":{"gitId":"nusE0726844"},"content":"    public static Todo generate(String input) throws DukeException {","lastModifiedDate":"2023-01-28"},{"lineNumber":26,"author":{"gitId":"nusE0726844"},"content":"        // Cleans input command","lastModifiedDate":"2023-01-28"},{"lineNumber":27,"author":{"gitId":"nusE0726844"},"content":"        input \u003d input.trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":28,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":29,"author":{"gitId":"nusE0726844"},"content":"        // Checks format of input command","lastModifiedDate":"2023-01-28"},{"lineNumber":30,"author":{"gitId":"nusE0726844"},"content":"        int index \u003d input.indexOf(\" \");","lastModifiedDate":"2023-01-28"},{"lineNumber":31,"author":{"gitId":"nusE0726844"},"content":"        if (index \u003c 0) {","lastModifiedDate":"2023-01-28"},{"lineNumber":32,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"ToDo\", \"Empty description\");","lastModifiedDate":"2023-01-28"},{"lineNumber":33,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":34,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":35,"author":{"gitId":"nusE0726844"},"content":"        // Cleans and checks variables","lastModifiedDate":"2023-01-28"},{"lineNumber":36,"author":{"gitId":"nusE0726844"},"content":"        String description \u003d input.substring(index + 1).trim();","lastModifiedDate":"2023-01-28"},{"lineNumber":37,"author":{"gitId":"nusE0726844"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2023-01-28"},{"lineNumber":38,"author":{"gitId":"nusE0726844"},"content":"            throw new DukeException(\"ToDo\", \"Empty description\");","lastModifiedDate":"2023-01-28"},{"lineNumber":39,"author":{"gitId":"nusE0726844"},"content":"        }","lastModifiedDate":"2023-01-28"},{"lineNumber":40,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":41,"author":{"gitId":"nusE0726844"},"content":"        return new Todo(description);","lastModifiedDate":"2023-01-28"},{"lineNumber":42,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":43,"author":{"gitId":"nusE0726844"},"content":"","lastModifiedDate":"2023-01-28"},{"lineNumber":44,"author":{"gitId":"nusE0726844"},"content":"    /**","lastModifiedDate":"2023-01-28"},{"lineNumber":45,"author":{"gitId":"nusE0726844"},"content":"     * Returns type of task, completion status, description of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":46,"author":{"gitId":"nusE0726844"},"content":"     *","lastModifiedDate":"2023-01-28"},{"lineNumber":47,"author":{"gitId":"nusE0726844"},"content":"     * @return Type of task, completion status, description of the task","lastModifiedDate":"2023-01-28"},{"lineNumber":48,"author":{"gitId":"nusE0726844"},"content":"     */","lastModifiedDate":"2023-01-28"},{"lineNumber":49,"author":{"gitId":"nusE0726844"},"content":"    @Override","lastModifiedDate":"2023-01-28"},{"lineNumber":50,"author":{"gitId":"nusE0726844"},"content":"    public String toString() {","lastModifiedDate":"2023-01-28"},{"lineNumber":51,"author":{"gitId":"nusE0726844"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-28"},{"lineNumber":52,"author":{"gitId":"nusE0726844"},"content":"    }","lastModifiedDate":"2023-01-28"},{"lineNumber":53,"author":{"gitId":"nusE0726844"},"content":"}","lastModifiedDate":"2023-01-28"}],"authorContributionMap":{"nusE0726844":53}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nusE0726844"},"content":"list","lastModifiedDate":"2023-01-28"},{"lineNumber":2,"author":{"gitId":"nusE0726844"},"content":"todo","lastModifiedDate":"2023-01-19"},{"lineNumber":3,"author":{"gitId":"nusE0726844"},"content":"todo task 1","lastModifiedDate":"2023-01-19"},{"lineNumber":4,"author":{"gitId":"nusE0726844"},"content":"mark","lastModifiedDate":"2023-01-19"},{"lineNumber":5,"author":{"gitId":"nusE0726844"},"content":"mark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":6,"author":{"gitId":"nusE0726844"},"content":"mark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":7,"author":{"gitId":"nusE0726844"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":8,"author":{"gitId":"nusE0726844"},"content":"unmark","lastModifiedDate":"2023-01-19"},{"lineNumber":9,"author":{"gitId":"nusE0726844"},"content":"unmark 2","lastModifiedDate":"2023-01-19"},{"lineNumber":10,"author":{"gitId":"nusE0726844"},"content":"unmark 1","lastModifiedDate":"2023-01-19"},{"lineNumber":11,"author":{"gitId":"nusE0726844"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":12,"author":{"gitId":"nusE0726844"},"content":"deadline","lastModifiedDate":"2023-01-19"},{"lineNumber":13,"author":{"gitId":"nusE0726844"},"content":"deadline task 2","lastModifiedDate":"2023-01-19"},{"lineNumber":14,"author":{"gitId":"nusE0726844"},"content":"deadline  /by Monday","lastModifiedDate":"2023-01-19"},{"lineNumber":15,"author":{"gitId":"nusE0726844"},"content":"deadline   /by Monday","lastModifiedDate":"2023-01-19"},{"lineNumber":16,"author":{"gitId":"nusE0726844"},"content":"deadline task 2 /by","lastModifiedDate":"2023-01-19"},{"lineNumber":17,"author":{"gitId":"nusE0726844"},"content":"deadline task 2 /by","lastModifiedDate":"2023-01-19"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"deadline task 2 /by Monday","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"nusE0726844"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":20,"author":{"gitId":"nusE0726844"},"content":"event","lastModifiedDate":"2023-01-19"},{"lineNumber":21,"author":{"gitId":"nusE0726844"},"content":"event task 3","lastModifiedDate":"2023-01-19"},{"lineNumber":22,"author":{"gitId":"nusE0726844"},"content":"event task 3 /from","lastModifiedDate":"2023-01-19"},{"lineNumber":23,"author":{"gitId":"nusE0726844"},"content":"event task 3 /from Tuesday","lastModifiedDate":"2023-01-19"},{"lineNumber":24,"author":{"gitId":"nusE0726844"},"content":"event task 3 /from Tuesday /to","lastModifiedDate":"2023-01-19"},{"lineNumber":25,"author":{"gitId":"nusE0726844"},"content":"event task 3 /from Tuesday /to Wednesday","lastModifiedDate":"2023-01-19"},{"lineNumber":26,"author":{"gitId":"nusE0726844"},"content":"list","lastModifiedDate":"2023-01-19"},{"lineNumber":27,"author":{"gitId":"nusE0726844"},"content":"bye","lastModifiedDate":"2023-01-19"}],"authorContributionMap":{"nusE0726844":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"nusE0726844"},"content":"java -classpath ..\\bin Duke Task Todo Deadline Event DukeException \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-01-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"nusE0726844":1}}]
