[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"3. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"owen-yap":1,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"checkstyle {","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"owen-yap":21,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":" * The main class of the software engineering project Duke.","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":" * This class is responsible for coordinating the work of the user interface, storage and parser classes.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-02-17"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"    private final Parser parser;","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"    private final Storage storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"    private final Ui ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"    @Override","lastModifiedDate":"2023-02-17"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-02-17"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control","lastModifiedDate":"2023-02-17"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label","lastModifiedDate":"2023-02-17"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"here\");","lastModifiedDate":"2023-02-17"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"        stage.setScene(scene); // Setting the stage to show our screen","lastModifiedDate":"2023-02-17"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"here\");","lastModifiedDate":"2023-02-17"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"        stage.show(); // Render the stage.","lastModifiedDate":"2023-02-17"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"here\");","lastModifiedDate":"2023-02-17"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"     * Constructs a Duke object which takes a file path and initializes the storage, user interface and parser.","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"     * @param filePath the file path where tasks will be stored.","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-01-31"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"        this.parser \u003d new Parser(storage, ui);","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"     * The main method of the Duke class which initializes the program and runs it.","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"    public void run() {","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"        this.ui.printWelcomeMsg();","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"        boolean hasNext \u003d true;","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"        while (hasNext) {","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"owen-yap"},"content":"            String input \u003d this.ui.readInput();","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"owen-yap"},"content":"            hasNext \u003d this.parser.parse(input);","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-26"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-26"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"     * The entry point of the Duke program.","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"owen-yap"},"content":"     * @param args cli arguments.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"owen-yap"},"content":"        new Duke(\"data.txt\").run();","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"owen-yap":58,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke;","lastModifiedDate":"2023-02-17"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-02-17"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-17"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-17"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-02-17"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-17"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"public class Launcher {","lastModifiedDate":"2023-02-17"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-02-17"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2023-02-17"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-17"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-02-17"}],"authorContributionMap":{"owen-yap":12}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.exceptions;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":" * Custom exception class for Duke application.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-01-25"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"     * @param errMsg The error message to be displayed to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"    public DukeException(String errMsg) {","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"        super(errMsg);","lastModifiedDate":"2023-01-25"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"owen-yap":19}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.parser;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"import duke.task.Event;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"import duke.task.Task;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":" * The Parser class is responsible for processing user input, updating the data in the task list, and providing feedback","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":" * to the user through the UI.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"public class Parser {","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"    private Storage storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"    private Ui ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"     * Constructs a Parser object with a reference to the Storage and Ui objects.","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"     * @param storage The reference to the Storage object.","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"     * @param ui The reference to the Ui object.","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"    public Parser(Storage storage, Ui ui) {","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"     * Parses the input string and processes the command before executing the logic of the command.","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"     * @param input The input string to be parsed.","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"     * @return Returns false if the command is \"bye\", otherwise returns true.","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"    public boolean parse(String input) {","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"        String cmd;","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"            String[] inputs \u003d input.split(\" \", 2);","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"            cmd \u003d inputs[0];","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"owen-yap"},"content":"            int idx;","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"            Task tsk;","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"            String markMsg;","lastModifiedDate":"2023-02-17"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"            String tskNum;","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"            String cfmMsg \u003d \"Got it. I\u0027ve added this task:\";","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"owen-yap"},"content":"            String[] desc;","lastModifiedDate":"2023-01-31"},{"lineNumber":55,"author":{"gitId":"owen-yap"},"content":"            LocalDateTime date, from, to;","lastModifiedDate":"2023-02-10"},{"lineNumber":56,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"owen-yap"},"content":"            TaskList data \u003d this.storage.loadTasks();","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"owen-yap"},"content":"            switch (cmd) {","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"owen-yap"},"content":"                case \"bye\":","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printMsg(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"owen-yap"},"content":"                    return false;","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"owen-yap"},"content":"                case \"list\":","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printList(data.toStringArray());","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"owen-yap"},"content":"                case \"mark\":","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"owen-yap"},"content":"                    idx \u003d Integer.parseInt(inputs[1]) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"owen-yap"},"content":"                    tsk \u003d data.get(idx);","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"owen-yap"},"content":"                    tsk.mark();","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"owen-yap"},"content":"                    markMsg \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"owen-yap"},"content":"                    String markedTask \u003d String.format(\" %s\", tsk);","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"owen-yap"},"content":"                    String[] markedMsg \u003d {markMsg, markedTask};","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printMsg(markedMsg);","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"owen-yap"},"content":"                case \"unmark\":","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"owen-yap"},"content":"                    idx \u003d Integer.parseInt(inputs[1]) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"owen-yap"},"content":"                    tsk \u003d data.get(idx);","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"owen-yap"},"content":"                    tsk.unmark();","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"owen-yap"},"content":"                    markMsg \u003d \"OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"owen-yap"},"content":"                    String unmarkedTask \u003d String.format(\" %s\", tsk);","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"owen-yap"},"content":"                    String[] unmarkedMsg \u003d {markMsg, unmarkedTask};","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printMsg(unmarkedMsg);","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"owen-yap"},"content":"                case \"todo\":","lastModifiedDate":"2023-01-31"},{"lineNumber":85,"author":{"gitId":"owen-yap"},"content":"                    if (inputs.length \u003d\u003d 1)","lastModifiedDate":"2023-02-10"},{"lineNumber":86,"author":{"gitId":"owen-yap"},"content":"                        throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"owen-yap"},"content":"                    tsk \u003d new Todo(inputs[1]);","lastModifiedDate":"2023-01-31"},{"lineNumber":88,"author":{"gitId":"owen-yap"},"content":"                    data.add(tsk);","lastModifiedDate":"2023-01-31"},{"lineNumber":89,"author":{"gitId":"owen-yap"},"content":"                    tskNum \u003d String.format(\"Now you have %d tasks in the list.\", data.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":90,"author":{"gitId":"owen-yap"},"content":"                    String[] todoMsg \u003d {cfmMsg, \" \" + tsk.toString(), tskNum};","lastModifiedDate":"2023-01-31"},{"lineNumber":91,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printMsg(todoMsg);","lastModifiedDate":"2023-01-31"},{"lineNumber":92,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"owen-yap"},"content":"                case \"deadline\":","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"owen-yap"},"content":"                    desc \u003d inputs[1].split(\" /by \");","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"owen-yap"},"content":"                    date \u003d parseDate(desc[1]);","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"owen-yap"},"content":"                    tsk \u003d new Deadline(desc[0], date);","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"owen-yap"},"content":"                    data.add(tsk);","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"owen-yap"},"content":"                    tskNum \u003d String.format(\"Now you have %d tasks in the list.\", data.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"owen-yap"},"content":"                    String[] deadlineMsg \u003d {cfmMsg, \" \" + tsk.toString(), tskNum};","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printMsg(deadlineMsg);","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"owen-yap"},"content":"                case \"event\":","lastModifiedDate":"2023-01-31"},{"lineNumber":103,"author":{"gitId":"owen-yap"},"content":"                    desc \u003d inputs[1].split(\" /from | /to \");","lastModifiedDate":"2023-01-31"},{"lineNumber":104,"author":{"gitId":"owen-yap"},"content":"                    from \u003d parseDate(desc[1]);","lastModifiedDate":"2023-01-31"},{"lineNumber":105,"author":{"gitId":"owen-yap"},"content":"                    to \u003d parseDate(desc[2]);","lastModifiedDate":"2023-01-31"},{"lineNumber":106,"author":{"gitId":"owen-yap"},"content":"                    tsk \u003d new Event(desc[0], from, to);","lastModifiedDate":"2023-01-31"},{"lineNumber":107,"author":{"gitId":"owen-yap"},"content":"                    data.add(tsk);","lastModifiedDate":"2023-01-31"},{"lineNumber":108,"author":{"gitId":"owen-yap"},"content":"                    tskNum \u003d String.format(\"Now you have %d tasks in the list.\", data.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":109,"author":{"gitId":"owen-yap"},"content":"                    String[] eventMsg \u003d {cfmMsg, \" \" + tsk.toString(), tskNum};","lastModifiedDate":"2023-01-31"},{"lineNumber":110,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printMsg(eventMsg);","lastModifiedDate":"2023-01-31"},{"lineNumber":111,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":112,"author":{"gitId":"owen-yap"},"content":"                case \"delete\":","lastModifiedDate":"2023-01-31"},{"lineNumber":113,"author":{"gitId":"owen-yap"},"content":"                    idx \u003d Integer.parseInt(inputs[1]) - 1;","lastModifiedDate":"2023-01-31"},{"lineNumber":114,"author":{"gitId":"owen-yap"},"content":"                    tsk \u003d data.get(idx);","lastModifiedDate":"2023-01-31"},{"lineNumber":115,"author":{"gitId":"owen-yap"},"content":"                    data.delete(idx);","lastModifiedDate":"2023-01-31"},{"lineNumber":116,"author":{"gitId":"owen-yap"},"content":"                    tskNum \u003d String.format(\"Now you have %d tasks in the list.\", data.size());","lastModifiedDate":"2023-01-31"},{"lineNumber":117,"author":{"gitId":"owen-yap"},"content":"                    String[] delMsg \u003d {\"Noted. I\u0027ve removed this task:\", tsk.toString(), tskNum};","lastModifiedDate":"2023-02-01"},{"lineNumber":118,"author":{"gitId":"owen-yap"},"content":"                    this.ui.printMsg(delMsg);","lastModifiedDate":"2023-01-31"},{"lineNumber":119,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-01-31"},{"lineNumber":120,"author":{"gitId":"owen-yap"},"content":"                case \"find\":","lastModifiedDate":"2023-02-01"},{"lineNumber":121,"author":{"gitId":"owen-yap"},"content":"                    String query \u003d inputs[1];","lastModifiedDate":"2023-02-01"},{"lineNumber":122,"author":{"gitId":"owen-yap"},"content":"                    String[] taskStrList \u003d data.find(query);","lastModifiedDate":"2023-02-01"},{"lineNumber":123,"author":{"gitId":"owen-yap"},"content":"                    if (taskStrList.length \u003d\u003d 0) {","lastModifiedDate":"2023-02-01"},{"lineNumber":124,"author":{"gitId":"owen-yap"},"content":"                        this.ui.printMsg(\"Sorry, I could not find any matches.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":125,"author":{"gitId":"owen-yap"},"content":"                    } else {","lastModifiedDate":"2023-02-01"},{"lineNumber":126,"author":{"gitId":"owen-yap"},"content":"                        this.ui.printList(\"Here are the matching tasks in your list: \", data.find(query));","lastModifiedDate":"2023-02-01"},{"lineNumber":127,"author":{"gitId":"owen-yap"},"content":"                    }","lastModifiedDate":"2023-02-01"},{"lineNumber":128,"author":{"gitId":"owen-yap"},"content":"                    break;","lastModifiedDate":"2023-02-01"},{"lineNumber":129,"author":{"gitId":"owen-yap"},"content":"                default:","lastModifiedDate":"2023-01-31"},{"lineNumber":130,"author":{"gitId":"owen-yap"},"content":"                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-01-31"},{"lineNumber":131,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":132,"author":{"gitId":"owen-yap"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":133,"author":{"gitId":"owen-yap"},"content":"            this.storage.saveTasks(data);","lastModifiedDate":"2023-01-31"},{"lineNumber":134,"author":{"gitId":"owen-yap"},"content":"        } catch (DukeException | IllegalArgumentException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":135,"author":{"gitId":"owen-yap"},"content":"            this.ui.printMsg(e.getMessage());","lastModifiedDate":"2023-01-31"},{"lineNumber":136,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":137,"author":{"gitId":"owen-yap"},"content":"        return true;","lastModifiedDate":"2023-01-31"},{"lineNumber":138,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":139,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":140,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":141,"author":{"gitId":"owen-yap"},"content":"     * Parses a given date string into a {@link LocalDateTime} object using the format M/d/yyyy HHmm.","lastModifiedDate":"2023-02-01"},{"lineNumber":142,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":143,"author":{"gitId":"owen-yap"},"content":"     * @param dateString The date string to parse in the format \"M/d/yyyy HHmm\".","lastModifiedDate":"2023-02-01"},{"lineNumber":144,"author":{"gitId":"owen-yap"},"content":"     * @return The {@link LocalDateTime} object parsed from the given date string.","lastModifiedDate":"2023-02-01"},{"lineNumber":145,"author":{"gitId":"owen-yap"},"content":"     * @throws IllegalArgumentException If the given date string does not match the expected format \"M/d/yyyy HHmm\".","lastModifiedDate":"2023-02-01"},{"lineNumber":146,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":147,"author":{"gitId":"owen-yap"},"content":"    private LocalDateTime parseDate(String dateString) {","lastModifiedDate":"2023-01-31"},{"lineNumber":148,"author":{"gitId":"owen-yap"},"content":"        LocalDateTime date;","lastModifiedDate":"2023-01-31"},{"lineNumber":149,"author":{"gitId":"owen-yap"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"M/d/yyyy HHmm\");","lastModifiedDate":"2023-01-31"},{"lineNumber":150,"author":{"gitId":"owen-yap"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":151,"author":{"gitId":"owen-yap"},"content":"            date \u003d LocalDateTime.parse(dateString, formatter);","lastModifiedDate":"2023-01-31"},{"lineNumber":152,"author":{"gitId":"owen-yap"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":153,"author":{"gitId":"owen-yap"},"content":"            throw new IllegalArgumentException(\"Invalid date format: \" + dateString + \". Please give your date\"","lastModifiedDate":"2023-02-01"},{"lineNumber":154,"author":{"gitId":"owen-yap"},"content":"                    + \" in the form M/d/yyyy HHmm.\");","lastModifiedDate":"2023-02-01"},{"lineNumber":155,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":156,"author":{"gitId":"owen-yap"},"content":"        return date;","lastModifiedDate":"2023-01-31"},{"lineNumber":157,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":158,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"owen-yap":158}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.storage;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"import java.io.IOException;","lastModifiedDate":"2023-01-31"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-01-31"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2023-01-31"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2023-01-31"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"import java.io.OutputStream;","lastModifiedDate":"2023-01-31"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":" * The Storage class is responsible for saving and loading the task list from a file.","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"public class Storage {","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"    private final String filePath;","lastModifiedDate":"2023-01-31"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"     * Constructs a Storage object which is initialized with the file path to store the data in.","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"     * @param filePath The file path for this storage.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-01-31"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"     * Saves the tasks in the specified TaskList to a file.","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"     * @param tasks the TaskList to be saved","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"    public void saveTasks(TaskList tasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"            OutputStream output \u003d new FileOutputStream(\"./data.txt\");","lastModifiedDate":"2023-01-31"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"            ObjectOutputStream objOut \u003d new ObjectOutputStream(output);","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"            objOut.writeObject(tasks);","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"            objOut.close();","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-01-31"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"            Logger.getLogger(Storage.class.getName()).log(Level.SEVERE, null, e);","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":48,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"     * Loads the tasks from the file and returns them as a TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"     * @return the TaskList loaded from the file","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"owen-yap"},"content":"    public TaskList loadTasks() {","lastModifiedDate":"2023-01-31"},{"lineNumber":56,"author":{"gitId":"owen-yap"},"content":"        InputStream input \u003d null;","lastModifiedDate":"2023-01-31"},{"lineNumber":57,"author":{"gitId":"owen-yap"},"content":"        try {","lastModifiedDate":"2023-01-31"},{"lineNumber":58,"author":{"gitId":"owen-yap"},"content":"            input \u003d new FileInputStream(\"./data.txt\");","lastModifiedDate":"2023-01-31"},{"lineNumber":59,"author":{"gitId":"owen-yap"},"content":"            ObjectInputStream objIn \u003d new ObjectInputStream(input);","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"owen-yap"},"content":"            Object o \u003d objIn.readObject();","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"owen-yap"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"owen-yap"},"content":"            if (o instanceof TaskList) {","lastModifiedDate":"2023-01-31"},{"lineNumber":63,"author":{"gitId":"owen-yap"},"content":"                tasks \u003d (TaskList) o;","lastModifiedDate":"2023-01-31"},{"lineNumber":64,"author":{"gitId":"owen-yap"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":65,"author":{"gitId":"owen-yap"},"content":"            objIn.close();","lastModifiedDate":"2023-01-31"},{"lineNumber":66,"author":{"gitId":"owen-yap"},"content":"            return tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":67,"author":{"gitId":"owen-yap"},"content":"        } catch (FileNotFoundException e1) {","lastModifiedDate":"2023-01-31"},{"lineNumber":68,"author":{"gitId":"owen-yap"},"content":"            return new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"owen-yap"},"content":"        } catch (IOException | ClassNotFoundException e2) {","lastModifiedDate":"2023-01-31"},{"lineNumber":70,"author":{"gitId":"owen-yap"},"content":"            Logger.getLogger(Storage.class.getName()).log(Level.SEVERE, null, e2);","lastModifiedDate":"2023-01-31"},{"lineNumber":71,"author":{"gitId":"owen-yap"},"content":"            return new TaskList();","lastModifiedDate":"2023-01-31"},{"lineNumber":72,"author":{"gitId":"owen-yap"},"content":"        } finally {","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"owen-yap"},"content":"            if (input !\u003d null) {","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"owen-yap"},"content":"                try {","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"owen-yap"},"content":"                    input.close();","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"owen-yap"},"content":"                } catch (IOException ex) {","lastModifiedDate":"2023-01-31"},{"lineNumber":77,"author":{"gitId":"owen-yap"},"content":"                    Logger.getLogger(Storage.class.getName()).log(Level.SEVERE, null, ex);","lastModifiedDate":"2023-01-31"},{"lineNumber":78,"author":{"gitId":"owen-yap"},"content":"                }","lastModifiedDate":"2023-01-31"},{"lineNumber":79,"author":{"gitId":"owen-yap"},"content":"            }","lastModifiedDate":"2023-01-31"},{"lineNumber":80,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":81,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"owen-yap":82}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":" * The Deadline class extends the Task class to represent a task with a due date.","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"    protected final LocalDateTime by;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"     * Constructs a new Deadline object with a description and a due date.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"     * @param description the description of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"     * @param by the due date of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-01-31"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"        super(description);","lastModifiedDate":"2023-01-25"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-01-25"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"     * Constructs a new Deadline object with a description, a due date, and a status.","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"     * @param description the description of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"     * @param by the due date of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"     * @param isDone the status of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"    public Deadline(String description, LocalDateTime by, boolean isDone) {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"        super(description, isDone);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"     * Overrides the `toString` method to return the Deadline task in the form:","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"     * \"[D][taskStatus] taskDescription (by: dueDate)\".","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"     * @return a string representation of the Event task","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\"))","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"                + \")\";","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"owen-yap":46}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" * The Event class extends the Task class to represent a task with a start time and end time.","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"public class Event extends Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"    protected final LocalDateTime from;","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"    protected final LocalDateTime to;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"     * Constructs a new Event with the given description, start time and end time.","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"     * @param description description of the event","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"     * @param from start time of the event","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"     * @param to end time of the event","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"        super(description);","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"     * Overrides the `toString` method to return the Event task in the form:","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"     * \"[E][taskStatus] taskDescription (from: startTime to: endTime)\".","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"     * @return a string representation of the Event task","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"        String fromStr \u003d this.from.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"        String toStr \u003d this.to.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\"));","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + fromStr + \" to: \" + toStr + \")\";","lastModifiedDate":"2023-01-26"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"owen-yap":39}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-01-26"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":" * Task is an abstract class representing a task to be performed.","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" * It contains the description of a class and allows you to check whether a task has been completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":" * It provides methods for marking or unmarking a task as complete.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"public abstract class Task implements Serializable {","lastModifiedDate":"2023-01-26"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"    protected String description;","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"     * Constructs a task with the given description.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"     * @param description the description of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-25"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"     * Constructs a task with the given description and completion status.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"     * @param description the description of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"     * @param isDone the completion status of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"     * Get the status icon which indicates whether a task is complete.","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"     * @return an X if the task is completed, and a space otherwise","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-01-25"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"owen-yap"},"content":"     * Marks the task as completed.","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"    public void mark() {","lastModifiedDate":"2023-01-25"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-01-25"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":54,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"owen-yap"},"content":"     * Unmarks the task, marking it as incomplete.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"owen-yap"},"content":"    public void unmark() {","lastModifiedDate":"2023-01-25"},{"lineNumber":58,"author":{"gitId":"owen-yap"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-25"},{"lineNumber":59,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":60,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-25"},{"lineNumber":61,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":62,"author":{"gitId":"owen-yap"},"content":"     * Getter for checking if task is complete.","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"owen-yap"},"content":"     * @return true if the task is completed, false otherwise","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"owen-yap"},"content":"    public boolean isDone() { return this.isDone; }","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"owen-yap"},"content":"     * The contains method checks if the target string is contained in the description field.","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"owen-yap"},"content":"     * @param target The string to search for in the description field.","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"owen-yap"},"content":"     * @return true if the target string is found in the description, false otherwise.","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"owen-yap"},"content":"    public boolean contains(String target) {","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"owen-yap"},"content":"        return this.description.contains(target);","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"owen-yap"},"content":"     * Formats the task as \"[taskStatus] taskDescription\".","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"owen-yap"},"content":"     * @return a string representation of the task","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"owen-yap"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":84,"author":{"gitId":"owen-yap"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2023-01-25"},{"lineNumber":85,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":86,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"owen-yap":86}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"import java.util.List;","lastModifiedDate":"2023-01-31"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" * The TaskList class implements a task list which can store tasks.","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":" * It provides methods to add, delete and get tasks as well as return the size of the task list.","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":" * The TaskList class also provides a method to convert the list of tasks into an array of strings.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"public class TaskList implements Serializable {","lastModifiedDate":"2023-01-31"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"     * Constructs a TaskList with a given list of tasks.","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"     * @param tasks the list of tasks to store","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-01-31"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-01-31"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"    public TaskList() {","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"     * @param task the task to add","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-01-31"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-01-31"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"     * Deletes a task at a specified index from the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"     * @param i the index of the task to delete","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"    public void delete(int i) {","lastModifiedDate":"2023-01-31"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"        this.tasks.remove(i);","lastModifiedDate":"2023-01-31"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"     * Retrieves a task at a specified index from the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"owen-yap"},"content":"     * @param i the index of the task to retrieve","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"owen-yap"},"content":"     * @return the task at the specified index","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"    public Task get(int i) {","lastModifiedDate":"2023-01-31"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":54,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"owen-yap"},"content":"     * Returns the size of the TaskList.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"owen-yap"},"content":"     * @return the number of tasks in the TaskList","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"owen-yap"},"content":"    public int size() {","lastModifiedDate":"2023-01-31"},{"lineNumber":60,"author":{"gitId":"owen-yap"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-01-31"},{"lineNumber":61,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":62,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"owen-yap"},"content":"     * Finds tasks that contain the query in their description or name and returns","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"owen-yap"},"content":"     * an array of string representation of the tasks.","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":67,"author":{"gitId":"owen-yap"},"content":"     * @param query the string to search for in the task description or name","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"owen-yap"},"content":"     * @return an array of string representation of the tasks that contain the query","lastModifiedDate":"2023-02-01"},{"lineNumber":69,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"owen-yap"},"content":"    public String[] find(String query) {","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"owen-yap"},"content":"        List\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"owen-yap"},"content":"        for (Task t : this.tasks) {","lastModifiedDate":"2023-02-01"},{"lineNumber":73,"author":{"gitId":"owen-yap"},"content":"            if (t.contains(query)) {","lastModifiedDate":"2023-02-01"},{"lineNumber":74,"author":{"gitId":"owen-yap"},"content":"                res.add(t);","lastModifiedDate":"2023-02-01"},{"lineNumber":75,"author":{"gitId":"owen-yap"},"content":"            }","lastModifiedDate":"2023-02-01"},{"lineNumber":76,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"owen-yap"},"content":"        String[] list \u003d new String[res.size()];","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"owen-yap"},"content":"        Task t;","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"owen-yap"},"content":"        for (int i \u003d 0; i \u003c res.size(); i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"owen-yap"},"content":"            t \u003d res.get(i);","lastModifiedDate":"2023-02-01"},{"lineNumber":82,"author":{"gitId":"owen-yap"},"content":"            list[i] \u003d String.format(\"%s\", t);","lastModifiedDate":"2023-02-01"},{"lineNumber":83,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":84,"author":{"gitId":"owen-yap"},"content":"        return list;","lastModifiedDate":"2023-02-01"},{"lineNumber":85,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":86,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":87,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":88,"author":{"gitId":"owen-yap"},"content":"     * Converts the list of tasks into an array of strings.","lastModifiedDate":"2023-02-01"},{"lineNumber":89,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":90,"author":{"gitId":"owen-yap"},"content":"     * @return the array of strings representing the tasks","lastModifiedDate":"2023-02-01"},{"lineNumber":91,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":92,"author":{"gitId":"owen-yap"},"content":"    public String[] toStringArray() {","lastModifiedDate":"2023-01-31"},{"lineNumber":93,"author":{"gitId":"owen-yap"},"content":"        String[] list \u003d new String[this.tasks.size()];","lastModifiedDate":"2023-01-31"},{"lineNumber":94,"author":{"gitId":"owen-yap"},"content":"        Task tsk;","lastModifiedDate":"2023-01-31"},{"lineNumber":95,"author":{"gitId":"owen-yap"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":96,"author":{"gitId":"owen-yap"},"content":"            tsk \u003d this.tasks.get(i);","lastModifiedDate":"2023-01-31"},{"lineNumber":97,"author":{"gitId":"owen-yap"},"content":"            list[i] \u003d String.format(\"%s\", tsk);","lastModifiedDate":"2023-01-31"},{"lineNumber":98,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":99,"author":{"gitId":"owen-yap"},"content":"        return list;","lastModifiedDate":"2023-01-31"},{"lineNumber":100,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":101,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":102,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"owen-yap":102}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.task;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-26"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":" * The Todo class extends the Task class to represent a Todo task.","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-01-25"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"     * Constructs a new Todo task with the given description.","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"     * @param description the description of the Todo task","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-01-25"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"        super(description);","lastModifiedDate":"2023-01-25"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"     * Constructs the Todo task with the given description and completion status.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"     * @param description the description of the Todo task","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"     * @param isDone the completion status of the Todo task","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"        super(description, isDone);","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"     * Overrides the `toString` method to return the Todo task in the form \"[T][taskStatus] taskDescription\".","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"     * @return a string representation of the Todo task","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"    @Override","lastModifiedDate":"2023-01-25"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"    public String toString() {","lastModifiedDate":"2023-01-25"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-01-25"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-25"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"owen-yap":35}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.ui;","lastModifiedDate":"2023-01-31"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-01-31"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":" * The Ui class provides the user interface for the system.","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":" * It implements methods for printing messages and lists, as well as reading user input.","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"public class Ui {","lastModifiedDate":"2023-01-31"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-01-31"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"     * Constructs a new UI by initializing a Scanner object for reading user input.","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"    public Ui() {","lastModifiedDate":"2023-01-31"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-01-31"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"     * Prints an array of messages, surrounded by separators.","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"     * @param msgs The message(s) to be printed","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"    public void printMsg(String[] msgs) {","lastModifiedDate":"2023-01-31"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"        for (String msg : msgs) {","lastModifiedDate":"2023-01-31"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"            System.out.println(msg);","lastModifiedDate":"2023-01-31"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"     * Prints a message, surrounded by separators.","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"     * @param msg The message to be printed","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"    public void printMsg(String msg) {","lastModifiedDate":"2023-01-31"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"        System.out.println(msg);","lastModifiedDate":"2023-01-31"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"     * Prints an array of items as a numbered list, surrounded by separators.","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"     * @param list The array of items to be printed","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"    public void printList(String[] list) {","lastModifiedDate":"2023-01-31"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":48,"author":{"gitId":"owen-yap"},"content":"        for (int i \u003d 0; i \u003c list.length; i++) {","lastModifiedDate":"2023-01-31"},{"lineNumber":49,"author":{"gitId":"owen-yap"},"content":"            System.out.println(String.format(\"%d. %s\", i + 1, list[i]));","lastModifiedDate":"2023-01-31"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-01-31"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"owen-yap"},"content":"     * Prints a formatted list of strings to the console.","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"owen-yap"},"content":"     * @param msg The message to be printed before the list.","lastModifiedDate":"2023-02-01"},{"lineNumber":58,"author":{"gitId":"owen-yap"},"content":"     * @param list The array of strings to be printed as a list.","lastModifiedDate":"2023-02-01"},{"lineNumber":59,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":60,"author":{"gitId":"owen-yap"},"content":"    public void printList(String msg, String[] list) {","lastModifiedDate":"2023-02-01"},{"lineNumber":61,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":62,"author":{"gitId":"owen-yap"},"content":"        System.out.println(msg);","lastModifiedDate":"2023-02-01"},{"lineNumber":63,"author":{"gitId":"owen-yap"},"content":"        for (int i \u003d 0; i \u003c list.length; i++) {","lastModifiedDate":"2023-02-01"},{"lineNumber":64,"author":{"gitId":"owen-yap"},"content":"            System.out.println(String.format(\"%d. %s\", i + 1, list[i]));","lastModifiedDate":"2023-02-01"},{"lineNumber":65,"author":{"gitId":"owen-yap"},"content":"        }","lastModifiedDate":"2023-02-01"},{"lineNumber":66,"author":{"gitId":"owen-yap"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-02-10"},{"lineNumber":67,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":68,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-01-31"},{"lineNumber":69,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":70,"author":{"gitId":"owen-yap"},"content":"     * Prints a welcome message to the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":71,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":72,"author":{"gitId":"owen-yap"},"content":"    public void printWelcomeMsg() {","lastModifiedDate":"2023-01-31"},{"lineNumber":73,"author":{"gitId":"owen-yap"},"content":"        String[] welcomeMsg \u003d {\"Hello I am Duke\", \"What can I do for you?\"};","lastModifiedDate":"2023-01-31"},{"lineNumber":74,"author":{"gitId":"owen-yap"},"content":"        printMsg(welcomeMsg);","lastModifiedDate":"2023-01-31"},{"lineNumber":75,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":76,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":77,"author":{"gitId":"owen-yap"},"content":"     * Reads a line of input from the user.","lastModifiedDate":"2023-02-01"},{"lineNumber":78,"author":{"gitId":"owen-yap"},"content":"     *","lastModifiedDate":"2023-02-01"},{"lineNumber":79,"author":{"gitId":"owen-yap"},"content":"     * @return The input entered by the user","lastModifiedDate":"2023-02-01"},{"lineNumber":80,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":81,"author":{"gitId":"owen-yap"},"content":"    public String readInput() {","lastModifiedDate":"2023-01-31"},{"lineNumber":82,"author":{"gitId":"owen-yap"},"content":"        return this.sc.nextLine();","lastModifiedDate":"2023-01-31"},{"lineNumber":83,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-01-31"},{"lineNumber":84,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-01-31"}],"authorContributionMap":{"owen-yap":84}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":" * Test Class for testing the Deadline class.","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"     * Test the marking of a deadline and check that isDone is true.","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"    public void mark_whenMarkingDeadline_thenIsDoneIsTrue() {","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"        LocalDateTime by \u003d LocalDateTime.of(2023, 1, 31, 12, 0);","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"        Deadline deadline \u003d new Deadline(\"Test deadline\", by);","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"        deadline.mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"        assertTrue(deadline.isDone());","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"     * Test the status icon of a marked deadline and check that it returns \u0027X\u0027.","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"    public void statusIcon_givenIsDoneTrue_thenReturnX() {","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"        LocalDateTime by \u003d LocalDateTime.of(2023, 1, 31, 12, 0);","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"        Deadline deadline \u003d new Deadline(\"Test deadline\", by);","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"        deadline.mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"        assertEquals(\"X\", deadline.getStatusIcon());","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"     * Test the unmarking of a deadline and check that isDone is false.","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"    public void unmark_whenUnmarkingDeadline_thenIsDoneIsFalse() {","lastModifiedDate":"2023-02-01"},{"lineNumber":42,"author":{"gitId":"owen-yap"},"content":"        LocalDateTime by \u003d LocalDateTime.of(2023, 1, 31, 12, 0);","lastModifiedDate":"2023-02-01"},{"lineNumber":43,"author":{"gitId":"owen-yap"},"content":"        Deadline deadline \u003d new Deadline(\"Test deadline\", by, true);","lastModifiedDate":"2023-02-01"},{"lineNumber":44,"author":{"gitId":"owen-yap"},"content":"        deadline.unmark();","lastModifiedDate":"2023-02-01"},{"lineNumber":45,"author":{"gitId":"owen-yap"},"content":"        assertFalse(deadline.isDone());","lastModifiedDate":"2023-02-01"},{"lineNumber":46,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":47,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":48,"author":{"gitId":"owen-yap"},"content":"     * Test the toString method of the Deadline class and check that it returns the correct string.","lastModifiedDate":"2023-02-01"},{"lineNumber":49,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":50,"author":{"gitId":"owen-yap"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":51,"author":{"gitId":"owen-yap"},"content":"    public void toString_whenCallingToString_thenReturnCorrectString() {","lastModifiedDate":"2023-02-01"},{"lineNumber":52,"author":{"gitId":"owen-yap"},"content":"        LocalDateTime by \u003d LocalDateTime.of(2023, 1, 31, 12, 0);","lastModifiedDate":"2023-02-01"},{"lineNumber":53,"author":{"gitId":"owen-yap"},"content":"        Deadline deadline \u003d new Deadline(\"Test deadline\", by);","lastModifiedDate":"2023-02-01"},{"lineNumber":54,"author":{"gitId":"owen-yap"},"content":"        String expected \u003d \"[D][ ] Test deadline (by: Jan 31 2023 12:00PM)\";","lastModifiedDate":"2023-02-01"},{"lineNumber":55,"author":{"gitId":"owen-yap"},"content":"        assertEquals(expected, deadline.toString());","lastModifiedDate":"2023-02-01"},{"lineNumber":56,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":57,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"owen-yap":57}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"package duke.task;","lastModifiedDate":"2023-02-01"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-02-01"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-01"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-01"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"","lastModifiedDate":"2023-02-01"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-01"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"/**","lastModifiedDate":"2023-02-01"},{"lineNumber":9,"author":{"gitId":"owen-yap"},"content":" * Test Class for testing the Todo class.","lastModifiedDate":"2023-02-01"},{"lineNumber":10,"author":{"gitId":"owen-yap"},"content":" *","lastModifiedDate":"2023-02-01"},{"lineNumber":11,"author":{"gitId":"owen-yap"},"content":" * @author owen-yap","lastModifiedDate":"2023-02-01"},{"lineNumber":12,"author":{"gitId":"owen-yap"},"content":" */","lastModifiedDate":"2023-02-01"},{"lineNumber":13,"author":{"gitId":"owen-yap"},"content":"public class TodoTest {","lastModifiedDate":"2023-02-01"},{"lineNumber":14,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":15,"author":{"gitId":"owen-yap"},"content":"     * Test the marking of a Todo and check that isDone is true.","lastModifiedDate":"2023-02-01"},{"lineNumber":16,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":17,"author":{"gitId":"owen-yap"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"    public void mark_whenMarkingTodo_thenIsDoneIsTrue() {","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"owen-yap"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2023-02-01"},{"lineNumber":20,"author":{"gitId":"owen-yap"},"content":"        todo.mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":21,"author":{"gitId":"owen-yap"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2023-02-01"},{"lineNumber":22,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":23,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":24,"author":{"gitId":"owen-yap"},"content":"     * Test the status icon of a marked Todo and check that it returns \u0027X\u0027.","lastModifiedDate":"2023-02-01"},{"lineNumber":25,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":26,"author":{"gitId":"owen-yap"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":27,"author":{"gitId":"owen-yap"},"content":"    public void statusIcon_givenIsDoneTrue_thenReturnX() {","lastModifiedDate":"2023-02-01"},{"lineNumber":28,"author":{"gitId":"owen-yap"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2023-02-01"},{"lineNumber":29,"author":{"gitId":"owen-yap"},"content":"        todo.mark();","lastModifiedDate":"2023-02-01"},{"lineNumber":30,"author":{"gitId":"owen-yap"},"content":"        assertEquals(\"X\", todo.getStatusIcon());","lastModifiedDate":"2023-02-01"},{"lineNumber":31,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":32,"author":{"gitId":"owen-yap"},"content":"    /**","lastModifiedDate":"2023-02-01"},{"lineNumber":33,"author":{"gitId":"owen-yap"},"content":"     * Test the unmarking of a Todo and check that isDone is false.","lastModifiedDate":"2023-02-01"},{"lineNumber":34,"author":{"gitId":"owen-yap"},"content":"     */","lastModifiedDate":"2023-02-01"},{"lineNumber":35,"author":{"gitId":"owen-yap"},"content":"    @Test","lastModifiedDate":"2023-02-01"},{"lineNumber":36,"author":{"gitId":"owen-yap"},"content":"    public void unmark_whenUnmarkingTodo_thenIsDoneIsFalse() {","lastModifiedDate":"2023-02-01"},{"lineNumber":37,"author":{"gitId":"owen-yap"},"content":"        Todo todo \u003d new Todo(\"test\", true);","lastModifiedDate":"2023-02-01"},{"lineNumber":38,"author":{"gitId":"owen-yap"},"content":"        todo.unmark();","lastModifiedDate":"2023-02-01"},{"lineNumber":39,"author":{"gitId":"owen-yap"},"content":"        assertFalse(todo.isDone());","lastModifiedDate":"2023-02-01"},{"lineNumber":40,"author":{"gitId":"owen-yap"},"content":"    }","lastModifiedDate":"2023-02-01"},{"lineNumber":41,"author":{"gitId":"owen-yap"},"content":"}","lastModifiedDate":"2023-02-01"}],"authorContributionMap":{"owen-yap":41}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"owen-yap"},"content":"todo read book","lastModifiedDate":"2023-01-25"},{"lineNumber":2,"author":{"gitId":"owen-yap"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-01-25"},{"lineNumber":3,"author":{"gitId":"owen-yap"},"content":"event project meeting /from Mon 5pm /to 6pm","lastModifiedDate":"2023-01-25"},{"lineNumber":4,"author":{"gitId":"owen-yap"},"content":"list","lastModifiedDate":"2023-01-25"},{"lineNumber":5,"author":{"gitId":"owen-yap"},"content":"mark 2","lastModifiedDate":"2023-01-25"},{"lineNumber":6,"author":{"gitId":"owen-yap"},"content":"list","lastModifiedDate":"2023-01-25"},{"lineNumber":7,"author":{"gitId":"owen-yap"},"content":"unmark 2","lastModifiedDate":"2023-01-25"},{"lineNumber":8,"author":{"gitId":"owen-yap"},"content":"list","lastModifiedDate":"2023-01-25"}],"authorContributionMap":{"owen-yap":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"owen-yap"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-02-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"owen-yap":1,"-":20}}]
